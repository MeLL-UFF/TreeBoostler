WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else if ( publication(I, B), publication(I, E) )
%   | | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( publication(J, B) )
%   | | | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tempadvisedby(K, B), inphase(K, L), inphase(A, L) )
%   | | | then return 0.5581489350995124;  // std dev = 0,458, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.7175239350995116;  // std dev = 0,348, 64,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=55 */
%   else return -0.14185106490048766;  // std dev = 7,60e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, E), publication(H, G) )
%   | | | | then return 0.4229834359085841;  // std dev = 1,070, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( tempadvisedby(I, B) )
%   | | | | | then return 0.04548435690766456;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else if ( publication(J, B), publication(J, E) )
%   | | | | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.19898207775846025;  // std dev = 1,084, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.5489904025285351;  // std dev = 0,402, 44,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=35 */
%   | | | else return 0.6469622695819519;  // std dev = 0,300, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else return -0.12544463852839147;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5553664367462842;  // std dev = 1,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, E), publication(G, F), publication(G, E) )
%   | | | then return 0.6269378488435114;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( publication(H, B), publication(H, E), tempadvisedby(I, E) )
%   | | | | then return 0.31783558464601336;  // std dev = 1,018, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | | then return -0.16895698044631546;  // std dev = 0,049, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | | else if ( publication(L, B) )
%   | | | | | | then return 0.25820599900797614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | | else return 0.029387633329400184;  // std dev = 0,838, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.6170921886819;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4476436610724915;  // std dev = 0,381, 67,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=55 */
%   else return -0.11231637819360625;  // std dev = 6,32e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( projectmember(C, B) )
%   | then return 0.48587392233282334;  // std dev = 0,068, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( publication(D, B), publication(D, A) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tempadvisedby(E, B), publication(F, E) )
%   | | | then if ( publication(F, B), inphase(A, G), inphase(E, G) )
%   | | | | then return 0.22766556059090962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return -0.07855266823736927;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else if ( publication(H, A) )
%   | | | | then if ( publication(I, B), publication(H, J), professor(J) )
%   | | | | | then if ( tempadvisedby(K, B) )
%   | | | | | | then return 0.04245106133545647;  // std dev = 0,847, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | | else return 0.20848601987770016;  // std dev = 0,480, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | | else return 0.3311726580584941;  // std dev = 0,328, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | | else return 0.3651748136938044;  // std dev = 0,352, 54,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=46 */
%   else return -0.10159632948783616;  // std dev = 5,96e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.2910202487422633;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, E), tempadvisedby(H, B) )
%   | | | | then return 0.2857566388647551;  // std dev = 0,905, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( tempadvisedby(I, B) )
%   | | | | | then return -0.17375673816647155;  // std dev = 0,085, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | | else if ( publication(J, B) )
%   | | | | | | then if ( publication(J, E) )
%   | | | | | | | then return 0.0474897587691416;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.23447769116441225;  // std dev = 1,050, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return -0.017114949793231842;  // std dev = 0,683, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.26789852068258513;  // std dev = 0,355, 74,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=62 */
%   else return -0.09269127618926105;  // std dev = 1,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.3090397570068663;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tempadvisedby(E, B) )
%   | | | then if ( publication(F, E) )
%   | | | | then if ( publication(F, B) )
%   | | | | | then return 0.05230168899246148;  // std dev = 1,090, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return -0.19251955330681372;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( publication(G, B), inphase(E, H), inphase(A, H) )
%   | | | | | then return 0.004233451208571904;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return 0.20988214383776208;  // std dev = 0,342, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | | else if ( publication(I, A), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return 0.03613865528632343;  // std dev = 0,449, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | | else return 0.25197539437298205;  // std dev = 0,301, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.08518475138839683;  // std dev = 4,59e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253545;  // std dev = 5,96e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.24807144879393356;  // std dev = 0,051, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tempadvisedby(E, B) )
%   | | | then if ( publication(F, B), inphase(E, G), inphase(A, G) )
%   | | | | then if ( publication(F, E) )
%   | | | | | then return 0.09157676429605315;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.003214329066697852;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(H, E) )
%   | | | | | then return -0.10220556617360463;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return 0.16526007323660985;  // std dev = 0,340, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | | else if ( publication(I, A), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return 0.02797554021843899;  // std dev = 0,449, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | | else return 0.1976770310801408;  // std dev = 0,301, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.07877675473109166;  // std dev = 4,21e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( publication(E, D) )
%   | | | then return 0.03626158836044004;  // std dev = 1,084, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | | then return -0.04380050455141232;  // std dev = 0,799, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else if ( publication(H, D) )
%   | | | | | then return -0.11900648796874329;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.16429918356176318;  // std dev = 0,325, 30,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | else if ( publication(I, A), publication(I, J), tempadvisedby(J, K) )
%   | | | then return 0.2237262913611452;  // std dev = 0,257, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( publication(L, A), publication(L, M), tempadvisedby(N, M) )
%   | | | | then return 0.029397723037982;  // std dev = 0,457, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | | else return 0.1376778509554597;  // std dev = 0,316, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.07324622576333704;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B), inphase(A, F), inphase(D, F) )
%   | | | then return 0.060676684090265866;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.06281560236898802;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, H), publication(J, I) )
%   | | | | then return 0.14498695202858528;  // std dev = 0,311, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | else if ( tempadvisedby(K, B), publication(L, B) )
%   | | | | | then return 0.030956551928893405;  // std dev = 0,743, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else if ( hasposition(B, M), hasposition(H, M), publication(N, B) )
%   | | | | | | then return 0.045187462110485396;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | | else return -0.13718134456237618;  // std dev = 0,700, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.12217062742717973;  // std dev = 0,318, 66,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   else return -0.06842697784420268;  // std dev = 3,49e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801106;  // std dev = 1,83e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.1760652454763879;  // std dev = 0,083, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(G, D) )
%   | | | | then return 0.04628610978691342;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return -0.10046695508710253;  // std dev = 1,113, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( projectmember(H, B) )
%   | | | then return 0.15258049501329904;  // std dev = 0,081, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then if ( publication(J, B), publication(K, A) )
%   | | | | | then return 0.048494386538965484;  // std dev = 0,311, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | | else return 0.08778965007180037;  // std dev = 0,373, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | | else return 0.08714666001144246;  // std dev = 0,343, 41,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=32 */
%   else return -0.06419184008202625;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'hasposition(person,faculty).', 'inphase(person,prequals).', 'projectmember(project,person).', 'publication(title,person).', 'professor(person).', 'student(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'publication(I, B), publication(I, E)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(K, B), inphase(K, L), inphase(A, L)', 'true,false,true,false,false,false': 'publication(J, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(G, B), publication(H, B)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,true': [0.894, 4, 1], 'true,false,false,true': [0.458, 3, 7], 'false': [7.6e-08, 90, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false,false': [1.095, 3, 2], 'true,false,false,false': [0.348, 9, 55], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,true': [1.095, 2, 3], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(I, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(K, B)', 'true,false,true,false,false,false': 'publication(J, B), publication(J, E)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(G, E), publication(H, G)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,true': [1.07, 2, 3], 'true,false,false,true': [0.402, 9, 35], 'false': [0.0, 90, 0], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,false': [1.084, 3, 2], 'true,false,false,false': [0.3, 3, 27], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false,true': [0.816, 2, 1], 'true,false,true,false,false,true': [0.901, 4, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(J, B), publication(K, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'publication(M, A)', 'true,false,true,false,false,false': 'publication(L, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'publication(H, B), publication(H, E), tempadvisedby(I, E)', 'true,false,true': 'tempadvisedby(F, E), publication(G, F), publication(G, E)'}, {'true,false,true,false,true': [1.018, 2, 2], 'true,false,false,true': [0.03, 0, 7], 'false': [6.32e-08, 90, 0], 'true,false,true,true': [0.198, 0, 5], 'true,false,true,false,false,false,false': [0.838, 3, 1], 'true,false,false,false': [0.381, 12, 55], 'true,true': [1.46e-07, 0, 41], 'true,false,true,false,false,false,true': [1.0, 2, 2], 'true,false,true,false,false,true': [0.049, 4, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'publication(F, B), inphase(A, G), inphase(E, G)', 'true,false,false,false,true,true': 'tempadvisedby(K, B)', 'true,false': 'publication(D, B), publication(D, A)', 'true,false,false': 'tempadvisedby(E, B), publication(F, E)', 'true': 'projectmember(C, B)', 'true,false,false,false': 'publication(H, A)', 'true,false,false,false,true': 'publication(I, B), publication(H, J), professor(J)'}, {'true,false,false,false,false': [0.352, 8, 46], 'true,false,false,true,false': [1.095, 3, 2], 'true,false,true': [0.0, 0, 41], 'true,false,false,false,true,true,false': [0.48, 4, 4], 'false': [5.96e-08, 90, 0], 'true,false,false,true,true': [0.816, 1, 2], 'true,true': [0.068, 0, 8], 'true,false,false,false,true,false': [0.328, 3, 9], 'true,false,false,false,true,true,true': [0.847, 4, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(I, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,false,false,false': 'publication(J, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'tempadvisedby(G, E), tempadvisedby(H, B)', 'true,false,true,false,false,false,true': 'publication(J, E)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,false,false,true,false': [1.05, 2, 3], 'true,false,true,false,true': [0.905, 2, 2], 'false': [1.05e-08, 90, 0], 'true,false,false': [0.355, 12, 62], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.816, 2, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,true,false,false,false,false': [0.683, 2, 1], 'true,false,true,false,false,true': [0.085, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'publication(F, E)', 'true,false': 'projectmember(D, B)', 'true,false,false,true,false': 'publication(G, B), inphase(E, H), inphase(A, H)', 'true,false,false': 'tempadvisedby(E, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,true,true': 'publication(F, B)', 'true,false,false,false': 'publication(I, A), publication(I, J), tempadvisedby(K, J)'}, {'true,false,false,true,true,true': [1.09, 2, 3], 'true,false,false,true,false,true': [1.095, 2, 3], 'false': [4.59e-08, 90, 0], 'true,false,false,true,true,false': [0.816, 2, 1], 'true,false,false,true,false,false': [0.342, 8, 25], 'true,false,false,false,true': [0.449, 6, 4], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [0.0, 0, 41], 'true,false,true': [0.059, 0, 8]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'publication(F, B), inphase(E, G), inphase(A, G)', 'true,false': 'projectmember(D, B)', 'true,false,false,true,false': 'publication(H, E)', 'true,false,false': 'tempadvisedby(E, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,true,true': 'publication(F, E)', 'true,false,false,false': 'publication(I, A), publication(I, J), tempadvisedby(K, J)'}, {'true,false,false,true,true,true': [0.816, 1, 2], 'true,false,false,true,false,true': [1.086, 3, 2], 'false': [4.21e-08, 90, 0], 'true,false,false,true,true,false': [1.095, 2, 3], 'true,false,false,true,false,false': [0.34, 8, 25], 'true,false,false,false,true': [0.449, 6, 4], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true': [0.051, 0, 8]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'publication(H, D)', 'true,false': 'tempadvisedby(D, B), publication(E, B)', 'true,false,false': 'publication(I, A), publication(I, J), tempadvisedby(J, K)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(F, A), publication(F, G), professor(G)', 'true,false,false,false': 'publication(L, A), publication(L, M), tempadvisedby(N, M)', 'true,false,true': 'publication(E, D)'}, {'true,false,true,false,true': [0.799, 4, 1], 'true,false,false,true': [0.257, 0, 4], 'false': [0.0, 90, 0], 'true,false,true,true': [1.084, 2, 3], 'true,false,true,false,false,false': [0.325, 4, 26], 'true,false,false,false,false': [0.316, 5, 33], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.457, 6, 4], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'tempadvisedby(I, H), publication(J, I)', 'true,false': 'tempadvisedby(D, B), publication(E, D)', 'true,false,false,true,false': 'tempadvisedby(K, B), publication(L, B)', 'true,false,false,true,false,false': 'hasposition(B, M), hasposition(H, M), publication(N, B)', 'true,false,false': 'publication(G, A), publication(G, H), professor(H)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true': 'publication(E, B), inphase(A, F), inphase(D, F)'}, {'true,false,false,true,false,false,true': [1.083, 3, 2], 'true,false,false,true,false,true': [0.743, 3, 1], 'false': [3.49e-08, 90, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false': [0.318, 8, 58], 'true,false,true,false': [1.083, 3, 2], 'true,false,false,true,true': [0.311, 2, 6], 'true,true': [0.0, 0, 41], 'true,false,false,true,false,false,false': [0.7, 3, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'tempadvisedby(D, B), inphase(D, E), inphase(A, E)', 'true,false,false,false,true': 'publication(J, B), publication(K, A)', 'true,false,false': 'projectmember(H, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(G, D)', 'true,false,false,false': 'tempadvisedby(I, B)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,false,false,true,true': [0.311, 4, 4], 'true,false,true,false,true': [0.816, 1, 2], 'true,false,false,true': [0.081, 0, 5], 'false': [0.0, 90, 0], 'true,false,true,true': [0.083, 0, 3], 'true,false,true,false,false': [1.113, 3, 3], 'true,false,false,false,false': [0.343, 9, 32], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true,false': [0.373, 6, 23]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.894, 4, 1], 'true,false,false,true': [0.458, 3, 7], 'false': [7.6e-08, 90, 0], 'true,false,true,false,false,true': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false,false': [0.348, 9, 55], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.095, 3, 2], 'true,false,true,false,false,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.07, 2, 3], 'true,false,false,true': [0.402, 9, 35], 'false': [0.0, 90, 0], 'true,false,true,false,false,true': [0.901, 4, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false,false': [0.3, 3, 27], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false,false': [1.084, 3, 2], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(M, A)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [1.018, 2, 2], 'true,false,false,true': [0.03, 0, 7], 'false': [6.32e-08, 90, 0], 'true,false,true,false,false,true': [0.049, 4, 0], 'true,false,true,true': [0.198, 0, 5], 'true,false,false,false': [0.381, 12, 55], 'true,true': [1.46e-07, 0, 41], 'true,false,true,false,false,false,false': [0.838, 3, 1], 'true,false,true,false,false,false,true': [1.0, 2, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(K, B)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(H, A)', 'true,false,false,false,true': 'movie(I, B), movie(H, J), director(J)'}, {'true,false,false,true,true': [0.816, 1, 2], 'false': [5.96e-08, 90, 0], 'true,false,false,false,true,true,true': [0.847, 4, 1], 'true,false,false,false,true,true,false': [0.48, 4, 4], 'true,false,false,true,false': [1.095, 3, 2], 'true,false,false,false,false': [0.352, 8, 46], 'true,true': [0.068, 0, 8], 'true,false,false,false,true,false': [0.328, 3, 9], 'true,false,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [1.05, 2, 3], 'true,false,true,false,true': [0.905, 2, 2], 'false': [1.05e-08, 90, 0], 'true,false,false': [0.355, 12, 62], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.816, 2, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,true,false,false,false,false': [0.683, 2, 1], 'true,false,true,false,false,true': [0.085, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, E)', 'true,false,false,true,false': 'movie(G, B), movie(H, E), movie(H, A)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [1.09, 2, 3], 'true,false,false,true,false,true': [1.095, 2, 3], 'false': [4.59e-08, 90, 0], 'true,false,false,true,true,false': [0.816, 2, 1], 'true,false,false,true,false,false': [0.342, 8, 25], 'true,false,true': [0.059, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, B), movie(G, E), movie(G, A)', 'true,false,false,true,false': 'movie(H, E)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, E)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [0.816, 1, 2], 'true,false,false,true,false,true': [1.086, 3, 2], 'false': [4.21e-08, 90, 0], 'true,false,false,true,true,false': [1.095, 2, 3], 'true,false,false,true,false,false': [0.34, 8, 25], 'true,false,true': [0.051, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(H, D)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(F, A), movie(F, G), director(G)', 'true,false,false,false': 'movie(L, A), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(E, D)'}, {'true,false,true,false,true': [0.799, 4, 1], 'true,false,false,true': [0.257, 0, 4], 'false': [0.0, 90, 0], 'true,false,true,true': [1.084, 2, 3], 'true,false,true,false,false,false': [0.325, 4, 26], 'true,false,false,false,false': [0.316, 5, 33], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.457, 6, 4], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, B)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false,false': 'genre(B, M), genre(H, M), movie(N, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,true': 'movie(E, B), movie(F, A), movie(F, D)'}, {'true,false,false,true,true': [0.311, 2, 6], 'true,false,false,true,false,false,true': [1.083, 3, 2], 'false': [3.49e-08, 90, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [1.083, 3, 2], 'true,false,false,false': [0.318, 8, 58], 'true,true': [0.0, 0, 41], 'true,false,false,true,false,true': [0.743, 3, 1], 'true,false,false,true,false,false,false': [0.7, 3, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false,true': 'movie(J, B), movie(K, A)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,false,false,true,true': [0.311, 4, 4], 'true,false,true,false,true': [0.816, 1, 2], 'true,false,false,true': [0.081, 0, 5], 'false': [0.0, 90, 0], 'true,false,true,true': [0.083, 0, 3], 'true,false,true,false,false': [1.113, 3, 3], 'true,false,false,false,false': [0.343, 9, 32], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true,false': [0.373, 6, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B), movie(I, E).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;workedunder(K, B), movie(L, K), movie(L, A).;false;false', '0;true,false,true,false,false,false;movie(J, B).;false;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(I, B).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;true', '1;true,false,false;workedunder(K, B).;false;false', '1;true,false,true,false,false,false;movie(J, B), movie(J, E).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(J, B), movie(K, B).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(M, A).;false;false', '2;true,false,true,false,false,false;movie(L, B).;false;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;movie(H, B), movie(H, E), workedunder(I, E).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false,false,true,true;workedunder(K, B).;false;false', '3;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;true;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(H, A).;true;false', '3;true,false,false,false,true;movie(I, B), movie(H, J), director(J).;true;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,true,false,false;workedunder(I, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true,false,true,false,false,false;movie(J, B).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true,false;workedunder(G, E), workedunder(H, B).;false;true', '4;true,false,true,false,false,false,true;movie(J, E).;false;false', '4;true,false,true;genre(B, F).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,false,true;movie(F, E).;true;true', '5;true,false,false,true,false;movie(G, B), movie(H, E), movie(H, A).;false;false', '5;true,false;genre(B, D).;false;true', '5;true,false,false;workedunder(E, B).;true;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,true,true;movie(F, B).;false;false', '5;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false,false,true;movie(F, B), movie(G, E), movie(G, A).;true;true', '6;true,false,false,true,false;movie(H, E).;false;false', '6;true,false;genre(B, D).;false;true', '6;true,false,false;workedunder(E, B).;true;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,false,true,true;movie(F, E).;false;false', '6;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;movie(H, D).;false;false', '7;true,false;workedunder(D, B), movie(E, B).;true;true', '7;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true,false;movie(F, A), movie(F, G), director(G).;false;true', '7;true,false,false,false;movie(L, A), movie(L, M), workedunder(N, M).;false;false', '7;true,false,true;movie(E, D).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,true;workedunder(I, H), movie(J, I).;false;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, B).;false;true', '8;true,false;workedunder(D, B), movie(E, D).;true;true', '8;true,false,false,true,false,false;genre(B, M), genre(H, M), movie(N, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '8;true,false,true;movie(E, B), movie(F, A), movie(F, D).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;true;true', '9;true,false,false,false,true;movie(J, B), movie(K, A).;false;false', '9;true,false,false;genre(B, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(G, D).;false;false', '9;true,false,false,false;workedunder(I, B).;true;false', '9;true,false,true;genre(B, F).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, B), movie(H, E), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.40871511104566377;  // std dev = 0,515, 59,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783621;  // std dev = 3,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3226316612404171;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14543081735307853;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2564817964046568;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(B, D) )
%   | | then return -0.12827162556726493;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21068233942241701;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(B, D) )
%   | | then return -0.11459921896336943;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109175;  // std dev = 1,97e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17777436887656323;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10347476889540663;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15325789708984947;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( genre(B, L), genre(G, L), movie(M, B) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.09426187538975504;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13440820448856705;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08651609609665793;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.258 seconds
Total inference time: 0.402 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [5.96e-08, 57, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 58], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [0.0, 57, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 58], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [4.08e-08, 57, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [1.19e-07, 0, 58], 'true,false,true,false,false,false,true': [0.0, 1, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'genre(B, C)'}, {'false': [3.49e-08, 57, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.515, 1, 58]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [0.0, 57, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 58], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)'}, {'false': [1.83e-08, 57, 0], 'true,true': [0.0, 0, 58], 'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)'}, {'false': [1.97e-08, 57, 0], 'true,true': [0.0, 0, 58], 'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)', 'true,false,false': 'movie(F, A), movie(F, G), workedunder(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 57, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 1, 0], 'true,true': [3.94e-08, 0, 58], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), movie(I, H)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,true,false,false': 'genre(B, L), genre(G, L), movie(M, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 0, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [1.83e-08, 57, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false': 'genre(B, F)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 57, 0], 'true,false,false,true': [0.0, 1, 0], 'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, A), movie(C, B).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true;movie(C, A), movie(C, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false;workedunder(D, B), movie(E, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;workedunder(D, B), movie(E, D).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #3: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #4: [('true,false', 0), ('true,true', 0.9830508474576272)]
Tree #5: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #6: [('true,false,false', 0)]
Tree #7: [('true,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #9: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,false,true', 0), ('true,false,true', 0), ('true,false,false,true,false,true', 0)]
Tree #10: [('true,false,false,false', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.40871511104566377;  // std dev = 0,515, 59,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   else return -0.10159632948783621;  // std dev = 3,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3226316612404171;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14543081735307853;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2564817964046568;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12827162556726493;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21068233942241701;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11459921896336943;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109175;  // std dev = 1,97e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17777436887656323;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10347476889540663;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15325789708984947;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09426187538975504;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13440820448856705;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08651609609665793;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.06419184008202625;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.541 seconds
Total inference time: 0.402 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 5.603
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.546 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: transfer, Total folds for small set: 1, Time: 00:00:45
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.546, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 5.603, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.4349584579467773, 'Generating mappings time': 2.670053482055664, 'Knowledge compiling time': 0.014039993286132812, 'Total time': 24.392872095108032, 'Finding best mapping': 19.273810863494873}, 'CLL': -0.094819}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.8105298874804645;  // std dev = 0,213, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.8581489350995115;  // std dev = 2,60e-07, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7289832469462054;  // std dev = 1,19e-07, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.6978088468073819;  // std dev = 0,134, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else return -0.1279985352744513;  // std dev = 0,144, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5647559703763687;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.540595632948537;  // std dev = 0,124, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else return -0.11442023329756205;  // std dev = 0,133, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.39354442691548025;  // std dev = 0,139, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.4264002449690948;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.10520490532888858;  // std dev = 0,228, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.30209809081547434;  // std dev = 0,135, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.32674289880191;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.09579104107462405;  // std dev = 0,214, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.26895879778926346;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.24524691809145374;  // std dev = 0,087, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else return -0.08929893184931824;  // std dev = 0,282, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21945067882036096;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.20076244173556515;  // std dev = 0,088, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else return -0.08241257799600345;  // std dev = 0,268, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.1596869936750862;  // std dev = 0,110, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.18306684441141832;  // std dev = 4,71e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.07749244699060726;  // std dev = 0,313, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.13625243783539112;  // std dev = 0,112, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.15725804370530225;  // std dev = 3,33e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.07225414481019972;  // std dev = 0,300, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1437778417276654;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.12495740052702733;  // std dev = 0,077, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06257775914739296;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.09989447875254975;  // std dev = 0,106, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06257775914739301;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09702
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.774 seconds
Total inference time: 0.592 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: scratch, Total folds for small set: 1, Time: 00:00:50
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.592, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 3.774, 'CLL': -0.09702}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.894, 4, 1], 'true,false,false,true': [0.458, 3, 7], 'false': [7.6e-08, 90, 0], 'true,false,true,false,false,true': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false,false': [0.348, 9, 55], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.095, 3, 2], 'true,false,true,false,false,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.07, 2, 3], 'true,false,false,true': [0.402, 9, 35], 'false': [0.0, 90, 0], 'true,false,true,false,false,true': [0.901, 4, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false,false': [0.3, 3, 27], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false,false': [1.084, 3, 2], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(M, A)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [1.018, 2, 2], 'true,false,false,true': [0.03, 0, 7], 'false': [6.32e-08, 90, 0], 'true,false,true,false,false,true': [0.049, 4, 0], 'true,false,true,true': [0.198, 0, 5], 'true,false,false,false': [0.381, 12, 55], 'true,true': [1.46e-07, 0, 41], 'true,false,true,false,false,false,false': [0.838, 3, 1], 'true,false,true,false,false,false,true': [1.0, 2, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(K, B)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(H, A)', 'true,false,false,false,true': 'movie(I, B), movie(H, J), director(J)'}, {'true,false,false,true,true': [0.816, 1, 2], 'false': [5.96e-08, 90, 0], 'true,false,false,false,true,true,true': [0.847, 4, 1], 'true,false,false,false,true,true,false': [0.48, 4, 4], 'true,false,false,true,false': [1.095, 3, 2], 'true,false,false,false,false': [0.352, 8, 46], 'true,true': [0.068, 0, 8], 'true,false,false,false,true,false': [0.328, 3, 9], 'true,false,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [1.05, 2, 3], 'true,false,true,false,true': [0.905, 2, 2], 'false': [1.05e-08, 90, 0], 'true,false,false': [0.355, 12, 62], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.816, 2, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,true,false,false,false,false': [0.683, 2, 1], 'true,false,true,false,false,true': [0.085, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, E)', 'true,false,false,true,false': 'movie(G, B), movie(H, E), movie(H, A)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [1.09, 2, 3], 'true,false,false,true,false,true': [1.095, 2, 3], 'false': [4.59e-08, 90, 0], 'true,false,false,true,true,false': [0.816, 2, 1], 'true,false,false,true,false,false': [0.342, 8, 25], 'true,false,true': [0.059, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, B), movie(G, E), movie(G, A)', 'true,false,false,true,false': 'movie(H, E)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, E)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [0.816, 1, 2], 'true,false,false,true,false,true': [1.086, 3, 2], 'false': [4.21e-08, 90, 0], 'true,false,false,true,true,false': [1.095, 2, 3], 'true,false,false,true,false,false': [0.34, 8, 25], 'true,false,true': [0.051, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(H, D)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(F, A), movie(F, G), director(G)', 'true,false,false,false': 'movie(L, A), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(E, D)'}, {'true,false,true,false,true': [0.799, 4, 1], 'true,false,false,true': [0.257, 0, 4], 'false': [0.0, 90, 0], 'true,false,true,true': [1.084, 2, 3], 'true,false,true,false,false,false': [0.325, 4, 26], 'true,false,false,false,false': [0.316, 5, 33], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.457, 6, 4], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, B)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false,false': 'genre(B, M), genre(H, M), movie(N, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,true': 'movie(E, B), movie(F, A), movie(F, D)'}, {'true,false,false,true,true': [0.311, 2, 6], 'true,false,false,true,false,false,true': [1.083, 3, 2], 'false': [3.49e-08, 90, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [1.083, 3, 2], 'true,false,false,false': [0.318, 8, 58], 'true,true': [0.0, 0, 41], 'true,false,false,true,false,true': [0.743, 3, 1], 'true,false,false,true,false,false,false': [0.7, 3, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false,true': 'movie(J, B), movie(K, A)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,false,false,true,true': [0.311, 4, 4], 'true,false,true,false,true': [0.816, 1, 2], 'true,false,false,true': [0.081, 0, 5], 'false': [0.0, 90, 0], 'true,false,true,true': [0.083, 0, 3], 'true,false,true,false,false': [1.113, 3, 3], 'true,false,false,false,false': [0.343, 9, 32], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true,false': [0.373, 6, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B), movie(I, E).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;workedunder(K, B), movie(L, K), movie(L, A).;false;false', '0;true,false,true,false,false,false;movie(J, B).;false;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(I, B).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;true', '1;true,false,false;workedunder(K, B).;false;false', '1;true,false,true,false,false,false;movie(J, B), movie(J, E).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(J, B), movie(K, B).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(M, A).;false;false', '2;true,false,true,false,false,false;movie(L, B).;false;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;movie(H, B), movie(H, E), workedunder(I, E).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false,false,true,true;workedunder(K, B).;false;false', '3;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;true;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(H, A).;true;false', '3;true,false,false,false,true;movie(I, B), movie(H, J), director(J).;true;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,true,false,false;workedunder(I, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true,false,true,false,false,false;movie(J, B).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true,false;workedunder(G, E), workedunder(H, B).;false;true', '4;true,false,true,false,false,false,true;movie(J, E).;false;false', '4;true,false,true;genre(B, F).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,false,true;movie(F, E).;true;true', '5;true,false,false,true,false;movie(G, B), movie(H, E), movie(H, A).;false;false', '5;true,false;genre(B, D).;false;true', '5;true,false,false;workedunder(E, B).;true;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,true,true;movie(F, B).;false;false', '5;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false,false,true;movie(F, B), movie(G, E), movie(G, A).;true;true', '6;true,false,false,true,false;movie(H, E).;false;false', '6;true,false;genre(B, D).;false;true', '6;true,false,false;workedunder(E, B).;true;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,false,true,true;movie(F, E).;false;false', '6;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;movie(H, D).;false;false', '7;true,false;workedunder(D, B), movie(E, B).;true;true', '7;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true,false;movie(F, A), movie(F, G), director(G).;false;true', '7;true,false,false,false;movie(L, A), movie(L, M), workedunder(N, M).;false;false', '7;true,false,true;movie(E, D).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,true;workedunder(I, H), movie(J, I).;false;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, B).;false;true', '8;true,false;workedunder(D, B), movie(E, D).;true;true', '8;true,false,false,true,false,false;genre(B, M), genre(H, M), movie(N, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '8;true,false,true;movie(E, B), movie(F, A), movie(F, D).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;true;true', '9;true,false,false,false,true;movie(J, B), movie(K, A).;false;false', '9;true,false,false;genre(B, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(G, D).;false;false', '9;true,false,false,false;workedunder(I, B).;true;false', '9;true,false,true;genre(B, F).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, B), movie(H, E), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.39102838448248634;  // std dev = 1,131, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( movie(D, B), movie(D, A) )
%   | | then return 0.4175135841583105;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32594615985294534;  // std dev = 0,017, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14324645414007858;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.092691276189261;  // std dev = 3,94e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25874151614396446;  // std dev = 0,015, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(B, D) )
%   | | then return -0.12654814840279685;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21227632262641466;  // std dev = 0,013, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(B, D) )
%   | | then return -0.11320853430398728;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17894188122661026;  // std dev = 0,012, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10233117564705965;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15414252589871263;  // std dev = 0,010, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( genre(B, L), genre(G, L), movie(M, B) )
%   | | | | | | then return -0.09330621937859546;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | | | | else return -0.09330621937859546;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,65e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1350981383906465;  // std dev = 0,009, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08570640112166958;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095128
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.85 seconds
Total inference time: 0.479 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [8.69e-08, 98, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [4.46e-07, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [0.0, 98, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [7.88e-08, 98, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [4.3e-07, 0, 103], 'true,false,true,false,false,false,true': [0.0, 5, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'movie(D, B), movie(D, A)'}, {'false': [4.71e-08, 98, 0], 'true,true': [1.131, 5, 93], 'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [3.94e-08, 98, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.017, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.015, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.013, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)', 'true,false,false': 'movie(F, A), movie(F, G), workedunder(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 5, 0], 'true,true': [0.012, 0, 103], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), movie(I, H)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,true,false,false': 'genre(B, L), genre(G, L), movie(M, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 2, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [4.65e-08, 98, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.01, 0, 103], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false': 'genre(B, F)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 98, 0], 'true,false,false,true': [0.0, 5, 0], 'true,true': [0.009, 0, 103], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;genre(B, C).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, A), movie(C, B).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true;movie(C, A), movie(C, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false;workedunder(D, B), movie(E, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;workedunder(D, B), movie(E, D).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #3: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #4: [('true,false,false', 0), ('true,true', 0.9489795918367347)]
Tree #5: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #6: [('true,false,false', 0)]
Tree #7: [('true,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #9: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0)]
Tree #10: [('true,false,false,false', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.39102838448248634;  // std dev = 1,131, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else return 0.4175135841583105;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32594615985294534;  // std dev = 0,017, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14324645414007858;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.092691276189261;  // std dev = 3,94e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25874151614396446;  // std dev = 0,015, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.12654814840279685;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21227632262641466;  // std dev = 0,013, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.11320853430398728;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17894188122661026;  // std dev = 0,012, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10233117564705965;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15414252589871263;  // std dev = 0,010, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09330621937859546;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420265;  // std dev = 4,65e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1350981383906465;  // std dev = 0,009, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08570640112166958;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202626;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095128
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.793 seconds
Total inference time: 0.424 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 8.546
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095286
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.544 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: transfer, Total folds for small set: 2, Time: 00:01:28
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.544, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 8.546, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 3.0417850017547607, 'Generating mappings time': 3.6537888050079346, 'Knowledge compiling time': 0.016298770904541016, 'Total time': 27.63948392868042, 'Finding best mapping': 20.927602767944336}, 'CLL': -0.095286}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.8417554924765617;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.14185106490048766;  // std dev = 8,43e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.7063767460271082;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.555366436746284;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.5462427245104465;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.11231637819360621;  // std dev = 7,88e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.4105397000291562;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.3143300432748274;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.09269127618926098;  // std dev = 4,21e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.24878110607159454;  // std dev = 0,127, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else return -0.08518475138839683;  // std dev = 5,27e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21548839841911996;  // std dev = 0,049, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07877675473109162;  // std dev = 4,71e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109177;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return -0.2541837191109425;  // std dev = 0,608, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1812925886347559;  // std dev = 0,043, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07324622576333707;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return -0.23008906295517498;  // std dev = 0,582, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15592236606816604;  // std dev = 0,038, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06842697784420267;  // std dev = 4,01e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return -0.2091606598277728;  // std dev = 0,551, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1364854627701521;  // std dev = 0,034, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return -0.19069967692989737;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095291
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.879 seconds
Total inference time: 0.571 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: scratch, Total folds for small set: 2, Time: 00:01:34
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.571, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.879, 'CLL': -0.095291}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.894, 4, 1], 'true,false,false,true': [0.458, 3, 7], 'false': [7.6e-08, 90, 0], 'true,false,true,false,false,true': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false,false': [0.348, 9, 55], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.095, 3, 2], 'true,false,true,false,false,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.07, 2, 3], 'true,false,false,true': [0.402, 9, 35], 'false': [0.0, 90, 0], 'true,false,true,false,false,true': [0.901, 4, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false,false': [0.3, 3, 27], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false,false': [1.084, 3, 2], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(M, A)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [1.018, 2, 2], 'true,false,false,true': [0.03, 0, 7], 'false': [6.32e-08, 90, 0], 'true,false,true,false,false,true': [0.049, 4, 0], 'true,false,true,true': [0.198, 0, 5], 'true,false,false,false': [0.381, 12, 55], 'true,true': [1.46e-07, 0, 41], 'true,false,true,false,false,false,false': [0.838, 3, 1], 'true,false,true,false,false,false,true': [1.0, 2, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(K, B)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(H, A)', 'true,false,false,false,true': 'movie(I, B), movie(H, J), director(J)'}, {'true,false,false,true,true': [0.816, 1, 2], 'false': [5.96e-08, 90, 0], 'true,false,false,false,true,true,true': [0.847, 4, 1], 'true,false,false,false,true,true,false': [0.48, 4, 4], 'true,false,false,true,false': [1.095, 3, 2], 'true,false,false,false,false': [0.352, 8, 46], 'true,true': [0.068, 0, 8], 'true,false,false,false,true,false': [0.328, 3, 9], 'true,false,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [1.05, 2, 3], 'true,false,true,false,true': [0.905, 2, 2], 'false': [1.05e-08, 90, 0], 'true,false,false': [0.355, 12, 62], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.816, 2, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,true,false,false,false,false': [0.683, 2, 1], 'true,false,true,false,false,true': [0.085, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, E)', 'true,false,false,true,false': 'movie(G, B), movie(H, E), movie(H, A)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [1.09, 2, 3], 'true,false,false,true,false,true': [1.095, 2, 3], 'false': [4.59e-08, 90, 0], 'true,false,false,true,true,false': [0.816, 2, 1], 'true,false,false,true,false,false': [0.342, 8, 25], 'true,false,true': [0.059, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, B), movie(G, E), movie(G, A)', 'true,false,false,true,false': 'movie(H, E)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, E)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [0.816, 1, 2], 'true,false,false,true,false,true': [1.086, 3, 2], 'false': [4.21e-08, 90, 0], 'true,false,false,true,true,false': [1.095, 2, 3], 'true,false,false,true,false,false': [0.34, 8, 25], 'true,false,true': [0.051, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(H, D)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(F, A), movie(F, G), director(G)', 'true,false,false,false': 'movie(L, A), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(E, D)'}, {'true,false,true,false,true': [0.799, 4, 1], 'true,false,false,true': [0.257, 0, 4], 'false': [0.0, 90, 0], 'true,false,true,true': [1.084, 2, 3], 'true,false,true,false,false,false': [0.325, 4, 26], 'true,false,false,false,false': [0.316, 5, 33], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.457, 6, 4], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, B)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false,false': 'genre(B, M), genre(H, M), movie(N, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,true': 'movie(E, B), movie(F, A), movie(F, D)'}, {'true,false,false,true,true': [0.311, 2, 6], 'true,false,false,true,false,false,true': [1.083, 3, 2], 'false': [3.49e-08, 90, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [1.083, 3, 2], 'true,false,false,false': [0.318, 8, 58], 'true,true': [0.0, 0, 41], 'true,false,false,true,false,true': [0.743, 3, 1], 'true,false,false,true,false,false,false': [0.7, 3, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false,true': 'movie(J, B), movie(K, A)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,false,false,true,true': [0.311, 4, 4], 'true,false,true,false,true': [0.816, 1, 2], 'true,false,false,true': [0.081, 0, 5], 'false': [0.0, 90, 0], 'true,false,true,true': [0.083, 0, 3], 'true,false,true,false,false': [1.113, 3, 3], 'true,false,false,false,false': [0.343, 9, 32], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true,false': [0.373, 6, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B), movie(I, E).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;workedunder(K, B), movie(L, K), movie(L, A).;false;false', '0;true,false,true,false,false,false;movie(J, B).;false;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(I, B).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;true', '1;true,false,false;workedunder(K, B).;false;false', '1;true,false,true,false,false,false;movie(J, B), movie(J, E).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(J, B), movie(K, B).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(M, A).;false;false', '2;true,false,true,false,false,false;movie(L, B).;false;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;movie(H, B), movie(H, E), workedunder(I, E).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false,false,true,true;workedunder(K, B).;false;false', '3;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;true;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(H, A).;true;false', '3;true,false,false,false,true;movie(I, B), movie(H, J), director(J).;true;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,true,false,false;workedunder(I, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true,false,true,false,false,false;movie(J, B).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true,false;workedunder(G, E), workedunder(H, B).;false;true', '4;true,false,true,false,false,false,true;movie(J, E).;false;false', '4;true,false,true;genre(B, F).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,false,true;movie(F, E).;true;true', '5;true,false,false,true,false;movie(G, B), movie(H, E), movie(H, A).;false;false', '5;true,false;genre(B, D).;false;true', '5;true,false,false;workedunder(E, B).;true;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,true,true;movie(F, B).;false;false', '5;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false,false,true;movie(F, B), movie(G, E), movie(G, A).;true;true', '6;true,false,false,true,false;movie(H, E).;false;false', '6;true,false;genre(B, D).;false;true', '6;true,false,false;workedunder(E, B).;true;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,false,true,true;movie(F, E).;false;false', '6;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;movie(H, D).;false;false', '7;true,false;workedunder(D, B), movie(E, B).;true;true', '7;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true,false;movie(F, A), movie(F, G), director(G).;false;true', '7;true,false,false,false;movie(L, A), movie(L, M), workedunder(N, M).;false;false', '7;true,false,true;movie(E, D).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,true;workedunder(I, H), movie(J, I).;false;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, B).;false;true', '8;true,false;workedunder(D, B), movie(E, D).;true;true', '8;true,false,false,true,false,false;genre(B, M), genre(H, M), movie(N, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '8;true,false,true;movie(E, B), movie(F, A), movie(F, D).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;true;true', '9;true,false,false,false,true;movie(J, B), movie(K, A).;false;false', '9;true,false,false;genre(B, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(G, D).;false;false', '9;true,false,false,false;workedunder(I, B).;true;false', '9;true,false,true;genre(B, F).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( workedunder(G, B), movie(H, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(I, B), movie(I, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B) )
%   | | | | | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004882;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( workedunder(G, E), movie(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B), movie(J, E) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462832;  // std dev = 2,38e-07, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, B), movie(H, E), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360685;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.38465852633260517;  // std dev = 1,946, 237,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=222 */
%   | else if ( movie(D, B), movie(D, A) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( workedunder(E, B), movie(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(G, A) )
%   | | | | then if ( movie(H, B), movie(G, I), director(I) )
%   | | | | | then if ( workedunder(J, B) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783658;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32639964856227904;  // std dev = 0,049, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14246647626125603;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( workedunder(G, E), workedunder(H, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B) )
%   | | | | | | then if ( movie(J, E) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926047;  // std dev = 1,05e-07, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25905190604528205;  // std dev = 0,043, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( genre(B, D) )
%   | | then return -0.12593156692349267;  // std dev = 1,75e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( workedunder(E, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(F, A), movie(F, G), workedunder(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839678;  // std dev = 9,31e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21249591774828683;  // std dev = 0,037, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( genre(B, D) )
%   | | then return -0.11271021270428451;  // std dev = 1,29e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( workedunder(E, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(F, A), movie(F, G), workedunder(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109144;  // std dev = 5,77e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1791031177392139;  // std dev = 0,033, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09372809118820209;  // std dev = 0,059, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.0732462257633368;  // std dev = 1,18e-07, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15426495533331683;  // std dev = 0,029, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( genre(B, L), genre(G, L), movie(M, B) )
%   | | | | | | then return -0.09365604476671006;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | | else return -0.08304676746060072;  // std dev = 0,050, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13519380386494387;  // std dev = 0,026, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08650551133604355;  // std dev = 0,002, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.06211522035510817;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202622;  // std dev = 4,47e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096173
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.95 seconds
Total inference time: 0.538 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 260, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 15, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [1.07e-06, 0, 281], 'true,false,true,false,false,false,true': [0.0, 6, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 260, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [7.45e-09, 15, 0], 'true,false,true,false,false,false,false': [0.0, 6, 0], 'true,true': [0.0, 0, 281], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 260, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [2.38e-07, 0, 281], 'true,false,true,false,false,false,true': [1.29e-08, 21, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(J, B)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(G, A)', 'true,false,false,false,true': 'movie(H, B), movie(G, I), director(I)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 260, 0], 'true,false,true': [0.0, 0, 59], 'true,false,false,false,true,true,false': [0.0, 6, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [1.946, 15, 222], 'true,false,false,false,true,false': [0.0, 0, 0], 'true,false,false,false,true,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [0.0, 6, 0], 'true,false,true,false,true': [0.0, 0, 0], 'false': [1.05e-07, 260, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [1.49e-08, 15, 0], 'true,false,true,false,false,false,true,true': [0.0, 0, 0], 'true,true': [0.049, 0, 281], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)', 'true,false,false,false': 'movie(F, A), movie(F, G), workedunder(H, G)', 'true,false,false': 'workedunder(E, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [9.31e-08, 260, 0], 'true,false,true': [1.75e-08, 15, 0], 'true,false,false,false,false': [2.63e-09, 6, 0], 'true,true': [0.043, 0, 281], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)', 'true,false,false,false': 'movie(F, A), movie(F, G), workedunder(H, G)', 'true,false,false': 'workedunder(E, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [5.77e-08, 260, 0], 'true,false,true': [1.29e-08, 15, 0], 'true,false,false,false,false': [0.0, 6, 0], 'true,true': [0.037, 0, 281], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)', 'true,false,false': 'movie(F, A), movie(F, G), workedunder(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.18e-07, 260, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.059, 21, 0], 'true,true': [0.033, 0, 281], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), movie(I, H)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,true,false,false': 'genre(B, L), genre(G, L), movie(M, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 6, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 260, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.029, 0, 281], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.05, 15, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false': 'workedunder(G, B)', 'true,false,false': 'genre(B, F)'}, {'true,false,false,true': [0.002, 15, 0], 'false': [4.47e-08, 260, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 6, 0], 'true,true': [0.026, 0, 281], 'true,false,false,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true;genre(B, F).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true;genre(B, F).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;false;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(G, A).;true;false', '3;true,false,false,false,true;movie(H, B), movie(G, I), director(I).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true;genre(B, F).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false;genre(B, D).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false;genre(B, D).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false;workedunder(D, B), movie(E, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;workedunder(D, B), movie(E, D).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;false;true', '9;true,false,false;genre(B, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,false', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #4: [('true,false,false,false,true,true,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true,false', 0), ('true,false,false,false,false', 0), ('true,true', 0.9367088607594937)]
Tree #5: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,true,true', 0), ('true,false,true,false,false,false,false', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0)]
Tree #8: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #9: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0)]
Tree #10: [('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004882;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462832;  // std dev = 2,38e-07, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360685;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.38465852633260517;  // std dev = 1,946, 237,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=222 */
%   | else if ( movie(D, B), movie(D, A) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( workedunder(E, B), movie(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(G, A) )
%   | | | | then if ( movie(H, B), movie(G, I), director(I) )
%   | | | | | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783658;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32639964856227904;  // std dev = 0,049, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14246647626125603;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926047;  // std dev = 1,05e-07, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25905190604528205;  // std dev = 0,043, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( genre(B, D) )
%   | | then return -0.12593156692349267;  // std dev = 1,75e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839678;  // std dev = 9,31e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21249591774828683;  // std dev = 0,037, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( genre(B, D) )
%   | | then return -0.11271021270428451;  // std dev = 1,29e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109144;  // std dev = 5,77e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1791031177392139;  // std dev = 0,033, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09372809118820209;  // std dev = 0,059, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.0732462257633368;  // std dev = 1,18e-07, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15426495533331683;  // std dev = 0,029, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08607798954806052;  // std dev = 0,055, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06842697784420275;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13519380386494387;  // std dev = 0,026, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08660048989142537;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.06193886490940347;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202622;  // std dev = 4,47e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096187
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.776 seconds
Total inference time: 0.515 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 16.779
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.618 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: transfer, Total folds for small set: 3, Time: 00:02:20
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.618, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 16.779, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.6440813541412354, 'Generating mappings time': 3.2164690494537354, 'Knowledge compiling time': 0.01862955093383789, 'Total time': 26.936981201171875, 'Finding best mapping': 21.05779266357422}, 'CLL': -0.095588}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995103;  // std dev = 7,73e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.85814893509951;  // std dev = 9,23e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.14185106490048816;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.7194734122109562;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.12544463852839186;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462834;  // std dev = 4,84e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 5,26e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360682;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830914;  // std dev = 3,91e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.4175135841583089;  // std dev = 4,50e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783656;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 2,60e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.3207118471601498;  // std dev = 2,73e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926049;  // std dev = 1,05e-07, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948967;  // std dev = 9,42e-08, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2551722425694904;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325353;  // std dev = 2,15e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2097577156325352;  // std dev = 2,46e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.07877675473109144;  // std dev = 6,14e-08, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.1770964977452782;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333682;  // std dev = 1,16e-07, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.15274385809367147;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.06842697784420275;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.134007030008011;  // std dev = 6,66e-08, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.06419184008202622;  // std dev = 4,21e-08, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.509 seconds
Total inference time: 0.548 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: scratch, Total folds for small set: 3, Time: 00:02:28
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.548, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 7.509, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.894, 4, 1], 'true,false,false,true': [0.458, 3, 7], 'false': [7.6e-08, 90, 0], 'true,false,true,false,false,true': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false,false': [0.348, 9, 55], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.095, 3, 2], 'true,false,true,false,false,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(K, B)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.07, 2, 3], 'true,false,false,true': [0.402, 9, 35], 'false': [0.0, 90, 0], 'true,false,true,false,false,true': [0.901, 4, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false,false': [0.3, 3, 27], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false,false': [1.084, 3, 2], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(M, A)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [1.018, 2, 2], 'true,false,false,true': [0.03, 0, 7], 'false': [6.32e-08, 90, 0], 'true,false,true,false,false,true': [0.049, 4, 0], 'true,false,true,true': [0.198, 0, 5], 'true,false,false,false': [0.381, 12, 55], 'true,true': [1.46e-07, 0, 41], 'true,false,true,false,false,false,false': [0.838, 3, 1], 'true,false,true,false,false,false,true': [1.0, 2, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(K, B)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(H, A)', 'true,false,false,false,true': 'movie(I, B), movie(H, J), director(J)'}, {'true,false,false,true,true': [0.816, 1, 2], 'false': [5.96e-08, 90, 0], 'true,false,false,false,true,true,true': [0.847, 4, 1], 'true,false,false,false,true,true,false': [0.48, 4, 4], 'true,false,false,true,false': [1.095, 3, 2], 'true,false,false,false,false': [0.352, 8, 46], 'true,true': [0.068, 0, 8], 'true,false,false,false,true,false': [0.328, 3, 9], 'true,false,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [1.05, 2, 3], 'true,false,true,false,true': [0.905, 2, 2], 'false': [1.05e-08, 90, 0], 'true,false,false': [0.355, 12, 62], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.816, 2, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,true,false,false,false,false': [0.683, 2, 1], 'true,false,true,false,false,true': [0.085, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, E)', 'true,false,false,true,false': 'movie(G, B), movie(H, E), movie(H, A)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [1.09, 2, 3], 'true,false,false,true,false,true': [1.095, 2, 3], 'false': [4.59e-08, 90, 0], 'true,false,false,true,true,false': [0.816, 2, 1], 'true,false,false,true,false,false': [0.342, 8, 25], 'true,false,true': [0.059, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(F, B), movie(G, E), movie(G, A)', 'true,false,false,true,false': 'movie(H, E)', 'true,false': 'genre(B, D)', 'true,false,false': 'workedunder(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(F, E)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)'}, {'true,false,false,true,true,true': [0.816, 1, 2], 'true,false,false,true,false,true': [1.086, 3, 2], 'false': [4.21e-08, 90, 0], 'true,false,false,true,true,false': [1.095, 2, 3], 'true,false,false,true,false,false': [0.34, 8, 25], 'true,false,true': [0.051, 0, 8], 'true,false,false,false,false': [0.301, 3, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.449, 6, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(H, D)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(F, A), movie(F, G), director(G)', 'true,false,false,false': 'movie(L, A), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(E, D)'}, {'true,false,true,false,true': [0.799, 4, 1], 'true,false,false,true': [0.257, 0, 4], 'false': [0.0, 90, 0], 'true,false,true,true': [1.084, 2, 3], 'true,false,true,false,false,false': [0.325, 4, 26], 'true,false,false,false,false': [0.316, 5, 33], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.457, 6, 4], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, B)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false,false': 'genre(B, M), genre(H, M), movie(N, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,true': 'movie(E, B), movie(F, A), movie(F, D)'}, {'true,false,false,true,true': [0.311, 2, 6], 'true,false,false,true,false,false,true': [1.083, 3, 2], 'false': [3.49e-08, 90, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [1.083, 3, 2], 'true,false,false,false': [0.318, 8, 58], 'true,true': [0.0, 0, 41], 'true,false,false,true,false,true': [0.743, 3, 1], 'true,false,false,true,false,false,false': [0.7, 3, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false,true': 'movie(J, B), movie(K, A)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,false,false,true,true': [0.311, 4, 4], 'true,false,true,false,true': [0.816, 1, 2], 'true,false,false,true': [0.081, 0, 5], 'false': [0.0, 90, 0], 'true,false,true,true': [0.083, 0, 3], 'true,false,true,false,false': [1.113, 3, 3], 'true,false,false,false,false': [0.343, 9, 32], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true,false': [0.373, 6, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B), movie(I, E).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;workedunder(K, B), movie(L, K), movie(L, A).;false;false', '0;true,false,true,false,false,false;movie(J, B).;false;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(I, B).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;true', '1;true,false,false;workedunder(K, B).;false;false', '1;true,false,true,false,false,false;movie(J, B), movie(J, E).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(J, B), movie(K, B).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(M, A).;false;false', '2;true,false,true,false,false,false;movie(L, B).;false;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;movie(H, B), movie(H, E), workedunder(I, E).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false,false,true,true;workedunder(K, B).;false;false', '3;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;true;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(H, A).;true;false', '3;true,false,false,false,true;movie(I, B), movie(H, J), director(J).;true;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,true,false,false;workedunder(I, B).;false;true', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true,false,true,false,false,false;movie(J, B).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true,false;workedunder(G, E), workedunder(H, B).;false;true', '4;true,false,true,false,false,false,true;movie(J, E).;false;false', '4;true,false,true;genre(B, F).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,false,true;movie(F, E).;true;true', '5;true,false,false,true,false;movie(G, B), movie(H, E), movie(H, A).;false;false', '5;true,false;genre(B, D).;false;true', '5;true,false,false;workedunder(E, B).;true;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,true,true;movie(F, B).;false;false', '5;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false,false,true;movie(F, B), movie(G, E), movie(G, A).;true;true', '6;true,false,false,true,false;movie(H, E).;false;false', '6;true,false;genre(B, D).;false;true', '6;true,false,false;workedunder(E, B).;true;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,false,true,true;movie(F, E).;false;false', '6;true,false,false,false;movie(I, A), movie(I, J), workedunder(K, J).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;movie(H, D).;false;false', '7;true,false;workedunder(D, B), movie(E, B).;true;true', '7;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true,false;movie(F, A), movie(F, G), director(G).;false;true', '7;true,false,false,false;movie(L, A), movie(L, M), workedunder(N, M).;false;false', '7;true,false,true;movie(E, D).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,true;workedunder(I, H), movie(J, I).;false;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, B).;false;true', '8;true,false;workedunder(D, B), movie(E, D).;true;true', '8;true,false,false,true,false,false;genre(B, M), genre(H, M), movie(N, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '8;true,false,true;movie(E, B), movie(F, A), movie(F, D).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;true;true', '9;true,false,false,false,true;movie(J, B), movie(K, A).;false;false', '9;true,false,false;genre(B, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(G, D).;false;false', '9;true,false,false,false;workedunder(I, B).;true;false', '9;true,false,true;genre(B, F).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else if ( workedunder(G, B), movie(H, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(I, B), movie(I, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B) )
%   | | | | | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004879;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else if ( workedunder(G, E), movie(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B), movie(J, E) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, B), movie(H, E), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936069;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.3813386772840153;  // std dev = 2,239, 287,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=267 */
%   | else if ( movie(D, B), movie(D, A) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( workedunder(E, B), movie(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(G, A) )
%   | | | | then if ( movie(H, B), movie(G, I), director(I) )
%   | | | | | then if ( workedunder(J, B) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3272078820976758;  // std dev = 0,055, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1420613722485831;  // std dev = 1,29e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else if ( workedunder(G, E), workedunder(H, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(J, B) )
%   | | | | | | then if ( movie(J, E) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,48e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25960249923989936;  // std dev = 0,048, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.12561108241028723;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( workedunder(E, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(F, A), movie(F, G), workedunder(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21288384513680456;  // std dev = 0,042, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.11245103003043304;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( workedunder(E, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(F, A), movie(F, G), workedunder(H, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07877675473109143;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17938693516950766;  // std dev = 0,037, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09287455234993643;  // std dev = 0,071, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07324622576333695;  // std dev = 1,01e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15447979461140754;  // std dev = 0,033, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( genre(B, L), genre(G, L), movie(M, B) )
%   | | | | | | then return -0.09353036062181656;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | | | | else return -0.08035834281359522;  // std dev = 0,056, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420294;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13536122137959003;  // std dev = 0,029, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08636437034395172;  // std dev = 0,002, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.06232188455194919;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202601;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095239
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.234 seconds
Total inference time: 0.556 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B), movie(I, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [7.45e-09, 20, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [1.05e-06, 0, 326], 'true,false,true,false,false,false,true': [0.0, 9, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B), movie(J, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 20, 0], 'true,false,true,false,false,false,false': [0.0, 9, 0], 'true,true': [0.0, 0, 326], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B), movie(K, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, E), workedunder(I, E)', 'true,false,true': 'workedunder(F, E), movie(G, F), movie(G, E)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 326], 'true,false,true,false,false,false,true': [0.0, 29, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,true,true': 'workedunder(J, B)', 'true,false': 'movie(D, B), movie(D, A)', 'true,false,false': 'workedunder(E, B), movie(F, E)', 'true': 'genre(B, C)', 'true,false,false,false': 'movie(G, A)', 'true,false,false,false,true': 'movie(H, B), movie(G, I), director(I)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,true': [0.0, 0, 59], 'true,false,false,false,true,true,false': [5.27e-09, 9, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [2.239, 20, 267], 'true,false,false,false,true,false': [0.0, 0, 0], 'true,false,false,false,true,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, E), workedunder(H, B)', 'true,false,true,false,false,false,true': 'movie(J, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false,true,false': [0.0, 9, 0], 'true,false,true,false,true': [0.0, 0, 0], 'false': [1.48e-07, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [1.29e-08, 20, 0], 'true,false,true,false,false,false,true,true': [0.0, 0, 0], 'true,true': [0.055, 0, 326], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)', 'true,false,false,false': 'movie(F, A), movie(F, G), workedunder(H, G)', 'true,false,false': 'workedunder(E, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.01e-07, 297, 0], 'true,false,true': [2.11e-08, 20, 0], 'true,false,false,false,false': [3.73e-09, 9, 0], 'true,true': [0.048, 0, 326], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'genre(B, D)', 'true,false,false,false': 'movie(F, A), movie(F, G), workedunder(H, G)', 'true,false,false': 'workedunder(E, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [4.47e-08, 297, 0], 'true,false,true': [0.0, 20, 0], 'true,false,false,false,false': [0.0, 9, 0], 'true,true': [0.042, 0, 326], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, B)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(K, J)', 'true,false,false': 'movie(F, A), movie(F, G), workedunder(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.01e-07, 297, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.071, 29, 0], 'true,true': [0.037, 0, 326], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), movie(I, H)', 'true,false': 'workedunder(D, B), movie(E, D)', 'true,false,false,true,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,true,false,false': 'genre(B, L), genre(G, L), movie(M, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [5.27e-09, 11, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.033, 0, 326], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.056, 18, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, A)', 'true,false,false,false': 'workedunder(G, B)', 'true,false,false': 'genre(B, F)'}, {'true,false,false,true': [0.002, 20, 0], 'false': [1.03e-07, 297, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 9, 0], 'true,true': [0.029, 0, 326], 'true,false,false,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true;genre(B, F).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true;genre(B, F).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true;workedunder(F, E), movie(G, F), movie(G, E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;movie(D, B), movie(D, A).;false;true', '3;true,false,false;workedunder(E, B), movie(F, E).;false;true', '3;true;genre(B, C).;false;true', '3;true,false,false,false;movie(G, A).;true;false', '3;true,false,false,false,true;movie(H, B), movie(G, I), director(I).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(D, E), director(E).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,true;genre(B, F).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false;genre(B, D).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false;genre(B, D).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false;workedunder(D, B), movie(E, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;workedunder(D, B), movie(E, D).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false;workedunder(D, B), movie(E, D), movie(E, A).;false;true', '9;true,false,false;genre(B, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,false', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #4: [('true,false,false,false,true,true,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true,false', 0), ('true,false,false,false,false', 0), ('true,true', 0.9303135888501742)]
Tree #5: [('true,false,true,false,true', 0), ('true,false,true,false,false,false,true,true', 0), ('true,false,true,false,false,false,false', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0)]
Tree #8: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #9: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0)]
Tree #10: [('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004879;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, F), movie(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936069;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0.3813386772840153;  // std dev = 2,239, 287,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=267 */
%   | else if ( movie(D, B), movie(D, A) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( workedunder(E, B), movie(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(G, A) )
%   | | | | then if ( movie(H, B), movie(G, I), director(I) )
%   | | | | | then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3272078820976758;  // std dev = 0,055, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1420613722485831;  // std dev = 1,29e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,48e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25960249923989936;  // std dev = 0,048, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.12561108241028723;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21288384513680456;  // std dev = 0,042, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.11245103003043304;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07877675473109143;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17938693516950766;  // std dev = 0,037, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09287455234993643;  // std dev = 0,071, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07324622576333695;  // std dev = 1,01e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15447979461140754;  // std dev = 0,033, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08535462543050674;  // std dev = 0,066, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06842697784420294;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13536122137959003;  // std dev = 0,029, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, F) )
%   | | | then return -0.08654053641073539;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.062030550137125835;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202601;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095239
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.205 seconds
Total inference time: 0.532 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 15.527000000000001
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095643
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.635 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: transfer, Total folds for small set: 4, Time: 00:03:12
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.635, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 15.527000000000001, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.6536169052124023, 'Generating mappings time': 3.1830782890319824, 'Knowledge compiling time': 0.021731138229370117, 'Total time': 26.468263387680054, 'Finding best mapping': 20.609830141067505}, 'CLL': -0.095643}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.1254446385283919;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.11231637819360689;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.10159632948783658;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.09269127618926047;  // std dev = 1,46e-07, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.07877675473109147;  // std dev = 3,65e-08, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.07324622576333695;  // std dev = 1,02e-07, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.06842697784420292;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.06419184008202602;  // std dev = 1,04e-07, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.503 seconds
Total inference time: 0.5 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 1, Type: scratch, Total folds for small set: 4, Time: 00:03:16
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.5, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 3.503, 'CLL': -0.094637}
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.7899671169176937;  // std dev = 0,252, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B) )
%   | | | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(J, E), publication(K, E), publication(K, B) )
%   | | | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else if ( tempadvisedby(L, E) )
%   | | | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7074640035926633;  // std dev = 0,358, 73,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=62 */
%   else return -0.14185106490048768;  // std dev = 6,83e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.6648447662798795;  // std dev = 0,252, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else if ( publication(D, A) )
%   | | then if ( projectmember(E, B), publication(D, F), tempadvisedby(F, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B), publication(D, I), professor(I) )
%   | | | | then return 0.12535517500538107;  // std dev = 0,451, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | | else if ( tempadvisedby(J, B) )
%   | | | | | then return 0.4988589653968803;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else if ( publication(K, B), publication(D, L), professor(L) )
%   | | | | | | then if ( publication(K, L) )
%   | | | | | | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | | else return 0.39352537383465247;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.5992855525092985;  // std dev = 0,839, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5950128115507257;  // std dev = 0,361, 65,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=55 */
%   else return -0.1254446385283915;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, B) )
%   | then if ( publication(C, A) )
%   | | then return 0.5854502254836702;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A) )
%   | | | then return -6.053510928143621E-4;  // std dev = 0,738, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2218770941485592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, B), publication(F, A) )
%   | | then return 0.5341681742016188;  // std dev = 0,221, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, H) )
%   | | | | then if ( publication(G, I) )
%   | | | | | then return 0.5889288816446878;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.17513811096201146;  // std dev = 0,468, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | | else return 0.09174401751924056;  // std dev = 0,833, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4907786263809802;  // std dev = 0,338, 68,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=59 */
%   else return -0.11231637819360625;  // std dev = 6,32e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, B) )
%   | then if ( publication(C, A) )
%   | | then return 0.4402217591799615;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A) )
%   | | | then return -4.7858480254460895E-4;  // std dev = 0,738, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16847848344741237;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, B), publication(F, G), tempadvisedby(G, H) )
%   | | then return 0.48221061044044033;  // std dev = 0,116, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( publication(I, B), publication(I, A) )
%   | | | then return 0.39039509222149027;  // std dev = 0,242, 32,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else if ( publication(J, A) )
%   | | | | then if ( publication(K, B), publication(J, L), tempadvisedby(M, L) )
%   | | | | | then return 0.10300820958724073;  // std dev = 0,463, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | | | else return 0.29534774309199724;  // std dev = 0,392, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | | else return 0.3535379850790449;  // std dev = 0,355, 54,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=46 */
%   else return -0.10159632948783619;  // std dev = 5,37e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(E, D) )
%   | then if ( publication(F, E), publication(F, G), tempadvisedby(H, G) )
%   | | then return 0.22340596137710186;  // std dev = 0,360, 59,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=46 */
%   | | else return 0.3167379632273445;  // std dev = 0,282, 57,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=51 */
%   | else if ( tempadvisedby(I, B), inphase(I, J), inphase(A, J) )
%   | | then return 0.3895445357347646;  // std dev = 0,060, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( projectmember(K, B) )
%   | | | then return 0.04849808550289338;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.32385193976695725;  // std dev = 0,730, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(M, B) )
%   | | | | | then return 0.1394941781365181;  // std dev = 0,630, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( publication(N, A) )
%   | | | | | | then return 0.2028290674852916;  // std dev = 0,680, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else return 0.16416022214267834;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.09269127618926105;  // std dev = 1,05e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(E, B), publication(E, A) )
%   | | then return 0.2576773120434686;  // std dev = 0,228, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.03160823598197615;  // std dev = 0,427, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else if ( publication(G, B), publication(G, H), tempadvisedby(H, I) )
%   | | | | then return 0.31111226028043926;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( publication(J, A) )
%   | | | | | then return 0.17612739931792146;  // std dev = 0,355, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | | | else if ( projectmember(K, B) )
%   | | | | | | then return 0.18873211936647552;  // std dev = 0,864, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | | else if ( inphase(A, L), inphase(C, L) )
%   | | | | | | | then return 0.34702812648184783;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | | else return 0.15894928834105485;  // std dev = 0,384, 22,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | else return 0.22651440510136459;  // std dev = 0,312, 53,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=44 */
%   else return -0.0851847513883968;  // std dev = 2,11e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then if ( publication(D, A) )
%   | | | then return 0.23838264404968967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(E, A) )
%   | | | | then return -0.09312051591000935;  // std dev = 0,722, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.06310553316433247;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(F, B), publication(F, G), student(G) )
%   | | | then return 0.17136453032770874;  // std dev = 0,316, 56,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=49 */
%   | | | else if ( publication(H, B) )
%   | | | | then return 0.04581199773431845;  // std dev = 0,989, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else if ( projectmember(I, B), inphase(C, J), inphase(A, J) )
%   | | | | | then return 0.2648195905304728;  // std dev = 0,047, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.09393568886880324;  // std dev = 0,401, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else return 0.17749131701355658;  // std dev = 0,312, 53,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=44 */
%   else return -0.07877675473109168;  // std dev = 3,94e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.16633093387521278;  // std dev = 0,235, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, E), publication(D, F) )
%   | | | then return 0.2589277242322514;  // std dev = 0,091, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( tempadvisedby(G, E), publication(H, G), publication(I, B) )
%   | | | | then return -0.37349418803296025;  // std dev = 0,153, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | else if ( tempadvisedby(J, E) )
%   | | | | | then if ( tempadvisedby(K, B) )
%   | | | | | | then return 0.04967469424350977;  // std dev = 1,077, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | | else return 0.28571018687703653;  // std dev = 0,769, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return -0.15409259802384323;  // std dev = 0,819, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.11081547977367856;  // std dev = 0,376, 43,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=35 */
%   | | | else return 0.16541078260943837;  // std dev = 0,296, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else return -0.07324622576333704;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.13828166913514714;  // std dev = 0,236, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, E), publication(G, E), publication(G, F) )
%   | | | then return 0.1537212900503098;  // std dev = 0,454, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else if ( publication(H, B), publication(H, I), tempadvisedby(J, I) )
%   | | | | then if ( publication(H, E), publication(K, J) )
%   | | | | | then return 0.0882343143908504;  // std dev = 0,992, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return -0.012534144303534634;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return -0.2065716847558051;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then if ( publication(M, A) )
%   | | | | then return 0.0477573820700638;  // std dev = 0,870, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.09279087183060175;  // std dev = 0,369, 39,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=32 */
%   | | | else return 0.134460441211451;  // std dev = 0,296, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else return -0.06842697784420268;  // std dev = 3,25e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, B) )
%   | then if ( publication(C, A) )
%   | | then return 0.1538703298719174;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A) )
%   | | | then return -0.11444287685048887;  // std dev = 0,711, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.0021804102704062523;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, B), publication(F, A) )
%   | | then return 0.12445289493708224;  // std dev = 0,219, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, H), publication(J, H), publication(J, I) )
%   | | | | then return 0.12714006775497141;  // std dev = 0,454, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else if ( tempadvisedby(K, B) )
%   | | | | | then return 0.05907564160379032;  // std dev = 1,062, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return -0.06848876996495117;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09453772017353906;  // std dev = 0,332, 68,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=59 */
%   else return -0.06419184008202625;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'inphase(person,prequals).', 'projectmember(project,person).', 'publication(title,person).', 'professor(person).', 'student(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(I, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,false,false': 'tempadvisedby(J, E), publication(K, E), publication(K, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(H, B)', 'true,false,true,false,false,false': 'tempadvisedby(L, E)', 'true,false,true': 'projectmember(F, B), publication(D, G), tempadvisedby(G, E)'}, {'true,false,true,false,true,true': [0.866, 3, 1], 'false': [6.83e-08, 88, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,false,false': [0.816, 2, 1], 'true,false,false': [0.358, 11, 62], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,true': [0.866, 1, 3], 'true,false,true,false,false,true': [0.866, 3, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(J, B)', 'true,false': 'publication(D, A)', 'true,false,true,false,false,false': 'publication(K, B), publication(D, L), professor(L)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(H, B), publication(D, I), professor(I)', 'true,false,true,false,false,false,true': 'publication(K, L)', 'true,false,true': 'projectmember(E, B), publication(D, F), tempadvisedby(F, G)'}, {'true,false,true,false,false,false,true,false': [1.086, 2, 3], 'true,false,true,false,true': [0.451, 5, 2], 'false': [0.0, 88, 0], 'true,false,false': [0.361, 10, 55], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.866, 3, 1], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.839, 1, 5], 'true,false,true,false,false,true': [0.866, 1, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,true,false,false': 'publication(F, B), publication(F, A)', 'true,true,false': 'publication(E, A)', 'true,true,false,false,false,true': 'tempadvisedby(I, H)', 'true,true,false,false,false,true,true': 'publication(G, I)', 'true': 'publication(C, B), publication(C, D), tempadvisedby(D, B)', 'true,true,false,false,false': 'publication(G, A), publication(G, H), professor(H)', 'true,true': 'publication(C, A)'}, {'true,true,false,false,false,false': [0.338, 9, 59], 'true,false': [6.32e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true,false': [0.833, 2, 1], 'true,true,false,false,true': [0.221, 2, 37], 'true,true,false,true': [1.095, 2, 3], 'true,true,false,false,false,true,true,false': [0.468, 8, 5], 'true,true,false,false,false,true,true,true': [0.116, 0, 4]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,true,false,false,false,false': 'publication(J, A)', 'true,true,false,false,false,false,true': 'publication(K, B), publication(J, L), tempadvisedby(M, L)', 'true,true,false,false': 'publication(F, B), publication(F, G), tempadvisedby(G, H)', 'true,true,false': 'publication(E, A)', 'true': 'publication(C, B), publication(C, D), tempadvisedby(D, B)', 'true,true,false,false,false': 'publication(I, B), publication(I, A)', 'true,true': 'publication(C, A)'}, {'true,true,false,false,false,false,true,true': [0.463, 6, 3], 'true,false': [5.37e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true': [0.242, 2, 30], 'true,true,false,false,true': [0.116, 0, 15], 'true,true,false,false,false,false,true,false': [0.392, 5, 12], 'true,true,false,false,false,false,false': [0.355, 8, 46], 'true,true,false,true': [1.095, 2, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'tempadvisedby(I, B), inphase(I, J), inphase(A, J)', 'true,false,false,false,false,false': 'publication(N, A)', 'true,false,false': 'projectmember(K, B)', 'true': 'publication(C, B), publication(C, D), tempadvisedby(E, D)', 'true,false,false,false': 'tempadvisedby(L, B)', 'true,true': 'publication(F, E), publication(F, G), tempadvisedby(H, G)', 'true,false,false,false,false': 'publication(M, B)'}, {'true,false,false,true': [0.898, 2, 3], 'false': [1.05e-08, 88, 0], 'true,false,true': [0.06, 0, 3], 'true,true,false': [0.282, 6, 51], 'true,false,false,false,false,true': [0.63, 1, 2], 'true,false,false,false,false,false,true': [0.68, 1, 2], 'true,false,false,false,false,false,false': [0.866, 1, 3], 'true,false,false,false,true': [0.73, 1, 3], 'true,true,true': [0.36, 13, 46]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,true,false,false,false,false': 'projectmember(K, B)', 'true,true,false,false': 'publication(G, B), publication(G, H), tempadvisedby(H, I)', 'true,true,false': 'publication(F, C)', 'true,true,false,false,false,false,false': 'inphase(A, L), inphase(C, L)', 'true': 'tempadvisedby(C, B)', 'true,true,false,false,false': 'publication(J, A)', 'true,true': 'publication(D, C), publication(E, B), publication(E, A)'}, {'true,false': [0.312, 9, 44], 'false': [2.11e-08, 88, 0], 'true,true,true': [0.228, 1, 11], 'true,true,false,false,false,false,true': [0.864, 1, 5], 'true,true,false,false,false,true': [0.355, 6, 24], 'true,true,false,false,true': [0.042, 0, 4], 'true,true,false,false,false,false,false,false': [0.384, 4, 18], 'true,true,false,true': [0.427, 4, 4], 'true,true,false,false,false,false,false,true': [0.017, 0, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,true,true': 'publication(D, A)', 'true,true,false': 'publication(F, B), publication(F, G), student(G)', 'true,true,true,false': 'publication(E, A)', 'true': 'tempadvisedby(C, B)', 'true,true,false,false,false': 'projectmember(I, B), inphase(C, J), inphase(A, J)', 'true,true': 'publication(D, C), publication(D, B)', 'true,true,false,false': 'publication(H, B)'}, {'true,true,false,false,false,false': [0.401, 3, 6], 'true,true,true,true': [0.0, 0, 3], 'true,false': [0.312, 9, 44], 'false': [3.94e-08, 88, 0], 'true,true,false,false,false,true': [0.047, 0, 3], 'true,true,true,false,true': [0.722, 2, 1], 'true,true,false,false,true': [0.989, 2, 4], 'true,true,false,true': [0.316, 7, 49], 'true,true,true,false,false': [1.095, 2, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(J, E)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(L, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(G, E), publication(H, G), publication(I, B)', 'true,false,true': 'tempadvisedby(F, E), publication(D, F)', 'true,false,true,false,false,true': 'tempadvisedby(K, B)'}, {'true,false,true,false,false,true,false': [0.769, 1, 3], 'true,false,true,false,true': [0.153, 4, 0], 'true,false,true,false,false,true,true': [1.077, 3, 2], 'false': [0.0, 88, 0], 'true,false,true,true': [0.091, 0, 4], 'true,false,true,false,false,false': [0.819, 3, 1], 'true,false,false,true': [0.376, 8, 35], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.235, 3, 41]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(H, E), publication(K, J)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(L, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'publication(H, B), publication(H, I), tempadvisedby(J, I)', 'true,false,false,true': 'publication(M, A)', 'true,false,true': 'tempadvisedby(F, E), publication(G, E), publication(G, F)'}, {'true,false,true,false,true,true': [0.992, 3, 2], 'true,false,true,false,false': [0.896, 4, 1], 'true,false,false,false': [0.296, 3, 27], 'true,false,false,true,false': [0.369, 7, 32], 'true,false,true,true': [0.454, 1, 5], 'true,false,true,false,true,false': [0.918, 3, 2], 'false': [3.25e-08, 88, 0], 'true,false,false,true,true': [0.87, 1, 3], 'true,true': [0.236, 3, 41]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'tempadvisedby(I, H), publication(J, H), publication(J, I)', 'true,false': 'publication(F, B), publication(F, A)', 'true,false,false,true,false': 'tempadvisedby(K, B)', 'true,false,false': 'publication(G, A), publication(G, H), professor(H)', 'true,true,false': 'publication(E, A)', 'true': 'publication(C, B), publication(C, D), tempadvisedby(D, B)', 'true,true': 'publication(C, A)'}, {'true,false,false,false': [0.332, 9, 59], 'true,false,false,true,false,true': [1.062, 3, 2], 'false': [0.0, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,false,false,true,false,false': [0.416, 6, 3], 'true,false,false,true,true': [0.454, 1, 5], 'true,true,false,true': [0.711, 2, 1], 'true,false,true': [0.219, 2, 37], 'true,true,false,false': [1.095, 2, 3]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(J, E), movie(K, E), movie(K, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B)', 'true,false,true,false,false,false': 'workedunder(L, E)', 'true,false,true': 'genre(B, F), movie(D, G), workedunder(G, E)'}, {'true,false,true,false,true,true': [0.866, 3, 1], 'false': [6.83e-08, 88, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,false': [0.358, 11, 62], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.816, 2, 1], 'true,false,true,false,false,false,true': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A)', 'true,false,true,false,false,false': 'movie(K, B), movie(D, L), director(L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B), movie(D, I), director(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'genre(B, E), movie(D, F), workedunder(F, G)'}, {'true,false,true,false,false,false,true,false': [1.086, 2, 3], 'true,false,true,false,true': [0.451, 5, 2], 'false': [0.0, 88, 0], 'true,false,false': [0.361, 10, 55], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.866, 3, 1], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.839, 1, 5], 'true,false,true,false,false,true': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false': 'movie(F, B), movie(F, A)', 'true,true,false': 'movie(E, A)', 'true,true,false,false,false,true,true': 'movie(G, I)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,true,false,false,false,true': 'workedunder(I, H)', 'true,true,false,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false': [0.338, 9, 59], 'true,false': [6.32e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true,false': [0.833, 2, 1], 'true,true,false,false,true': [0.221, 2, 37], 'true,true,false,true': [1.095, 2, 3], 'true,true,false,false,false,true,true,false': [0.468, 8, 5], 'true,true,false,false,false,true,true,true': [0.116, 0, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false,false,false': 'movie(J, A)', 'true,true,false,false,false,false,true': 'movie(K, B), movie(J, L), workedunder(M, L)', 'true,true,false,false': 'movie(F, B), movie(F, G), workedunder(G, H)', 'true,true,false': 'movie(E, A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,true,false,false,false': 'movie(I, B), movie(I, A)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false,true,true': [0.463, 6, 3], 'true,false': [5.37e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,false,false': [0.355, 8, 46], 'true,true,false,false,true': [0.116, 0, 15], 'true,true,false,false,false,false,true,false': [0.392, 5, 12], 'true,true,false,false,false,true': [0.242, 2, 30], 'true,true,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(I, B), movie(J, I), movie(J, A)', 'true,false,false,false,false,false': 'movie(N, A)', 'true,false,false': 'genre(B, K)', 'true': 'movie(C, B), movie(C, D), workedunder(E, D)', 'true,false,false,false': 'workedunder(L, B)', 'true,true': 'movie(F, E), movie(F, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.898, 2, 3], 'false': [1.05e-08, 88, 0], 'true,false,false,false,true': [0.73, 1, 3], 'true,true,false': [0.282, 6, 51], 'true,true,true': [0.36, 13, 46], 'true,false,false,false,false,true': [0.63, 1, 2], 'true,false,false,false,false,false,true': [0.68, 1, 2], 'true,false,true': [0.06, 0, 3], 'true,false,false,false,false,false,false': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false,false,false': 'genre(B, K)', 'true,true,false,false': 'movie(G, B), movie(G, H), workedunder(H, I)', 'true,true,false': 'movie(F, C)', 'true,true,false,false,false,false,false': 'movie(L, A), movie(L, C)', 'true': 'workedunder(C, B)', 'true,true,false,false,false': 'movie(J, A)', 'true,true': 'movie(D, C), movie(E, B), movie(E, A)'}, {'true,false': [0.312, 9, 44], 'false': [2.11e-08, 88, 0], 'true,true,true': [0.228, 1, 11], 'true,true,false,false,false,false,true': [0.864, 1, 5], 'true,true,false,false,true': [0.042, 0, 4], 'true,true,false,false,false,false,false,false': [0.384, 4, 18], 'true,true,false,false,false,true': [0.355, 6, 24], 'true,true,false,false,false,false,false,true': [0.017, 0, 3], 'true,true,false,true': [0.427, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,true': 'movie(D, A)', 'true,true,false': 'movie(F, B), movie(F, G), actor(G)', 'true,true,true,false': 'movie(E, A)', 'true': 'workedunder(C, B)', 'true,true,false,false,false': 'genre(B, I), movie(J, C), movie(J, A)', 'true,true': 'movie(D, C), movie(D, B)', 'true,true,false,false': 'movie(H, B)'}, {'true,true,false,false,false,false': [0.401, 3, 6], 'true,false': [0.312, 9, 44], 'false': [3.94e-08, 88, 0], 'true,true,false,false,true': [0.989, 2, 4], 'true,true,true,false,true': [0.722, 2, 1], 'true,true,false,false,false,true': [0.047, 0, 3], 'true,true,true,true': [0.0, 0, 3], 'true,true,false,true': [0.316, 7, 49], 'true,true,true,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G), movie(I, B)', 'true,false,true': 'workedunder(F, E), movie(D, F)', 'true,false,true,false,false,true': 'workedunder(K, B)'}, {'true,false,true,false,false,true,false': [0.769, 1, 3], 'true,false,true,false,true': [0.153, 4, 0], 'true,false,true,false,false,true,true': [1.077, 3, 2], 'false': [0.0, 88, 0], 'true,false,true,true': [0.091, 0, 4], 'true,false,true,false,false,false': [0.819, 3, 1], 'true,false,false,true': [0.376, 8, 35], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.235, 3, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, E), movie(K, J)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), workedunder(J, I)', 'true,false,false,true': 'movie(M, A)', 'true,false,true': 'workedunder(F, E), movie(G, E), movie(G, F)'}, {'true,false,true,false,true,true': [0.992, 3, 2], 'true,false,true,false,false': [0.896, 4, 1], 'true,false,false,true,true': [0.87, 1, 3], 'true,false,false,true,false': [0.369, 7, 32], 'true,false,true,false,true,false': [0.918, 3, 2], 'true,false,true,true': [0.454, 1, 5], 'false': [3.25e-08, 88, 0], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.236, 3, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,true,false': 'movie(E, A)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,true': 'movie(C, A)'}, {'true,false,false,true,true': [0.454, 1, 5], 'true,false,false,true,false,true': [1.062, 3, 2], 'false': [0.0, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,false,false,true,false,false': [0.416, 6, 3], 'true,false,false,false': [0.332, 9, 59], 'true,true,false,true': [0.711, 2, 1], 'true,false,true': [0.219, 2, 37], 'true,true,false,false': [1.095, 2, 3]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(J, E), movie(K, E), movie(K, B).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(H, B).;true;true', '0;true,false,true,false,false,false;workedunder(L, E).;false;false', '0;true,false,true;genre(B, F), movie(D, G), workedunder(G, E).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(J, B).;false;true', '1;true,false;movie(D, A).;true;false', '1;true,false,true,false,false,false;movie(K, B), movie(D, L), director(L).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(H, B), movie(D, I), director(I).;false;true', '1;true,false,true,false,false,false,true;movie(K, L).;false;false', '1;true,false,true;genre(B, E), movie(D, F), workedunder(F, G).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,true,false,false;movie(F, B), movie(F, A).;false;true', '2;true,true,false;movie(E, A).;false;true', '2;true,true,false,false,false,true,true;movie(G, I).;false;false', '2;true;movie(C, B), movie(C, D), workedunder(D, B).;true;false', '2;true,true,false,false,false,true;workedunder(I, H).;true;false', '2;true,true,false,false,false;movie(G, A), movie(G, H), director(H).;true;false', '2;true,true;movie(C, A).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,true,false,false,false,false;movie(J, A).;true;false', '3;true,true,false,false,false,false,true;movie(K, B), movie(J, L), workedunder(M, L).;false;false', '3;true,true,false,false;movie(F, B), movie(F, G), workedunder(G, H).;false;true', '3;true,true,false;movie(E, A).;false;true', '3;true;movie(C, B), movie(C, D), workedunder(D, B).;true;false', '3;true,true,false,false,false;movie(I, B), movie(I, A).;false;true', '3;true,true;movie(C, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;workedunder(I, B), movie(J, I), movie(J, A).;false;true', '4;true,false,false,false,false,false;movie(N, A).;false;false', '4;true,false,false;genre(B, K).;false;true', '4;true;movie(C, B), movie(C, D), workedunder(E, D).;true;true', '4;true,false,false,false;workedunder(L, B).;false;true', '4;true,true;movie(F, E), movie(F, G), workedunder(H, G).;false;false', '4;true,false,false,false,false;movie(M, B).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,true,false,false,false,false;genre(B, K).;false;true', '5;true,true,false,false;movie(G, B), movie(G, H), workedunder(H, I).;false;true', '5;true,true,false;movie(F, C).;false;true', '5;true,true,false,false,false,false,false;movie(L, A), movie(L, C).;false;false', '5;true;workedunder(C, B).;true;false', '5;true,true,false,false,false;movie(J, A).;false;true', '5;true,true;movie(D, C), movie(E, B), movie(E, A).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,true,true;movie(D, A).;false;true', '6;true,true,false;movie(F, B), movie(F, G), actor(G).;false;true', '6;true,true,true,false;movie(E, A).;false;false', '6;true;workedunder(C, B).;true;false', '6;true,true,false,false,false;genre(B, I), movie(J, C), movie(J, A).;false;false', '6;true,true;movie(D, C), movie(D, B).;true;true', '6;true,true,false,false;movie(H, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;workedunder(J, E).;true;false', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,false;workedunder(L, B).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false,true,false;workedunder(G, E), movie(H, G), movie(I, B).;false;true', '7;true,false,true;workedunder(F, E), movie(D, F).;false;true', '7;true,false,true,false,false,true;workedunder(K, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,true,false,true;movie(H, E), movie(K, J).;false;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;true', '8;true,false,false;workedunder(L, B).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true,false;movie(H, B), movie(H, I), workedunder(J, I).;true;false', '8;true,false,false,true;movie(M, A).;false;false', '8;true,false,true;workedunder(F, E), movie(G, E), movie(G, F).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false,false,true;workedunder(I, H), movie(J, H), movie(J, I).;false;true', '9;true,false,false,true,false;workedunder(K, B).;false;false', '9;true,true,false;movie(E, A).;false;false', '9;true,false;movie(F, B), movie(F, A).;false;true', '9;true;movie(C, B), movie(C, D), workedunder(D, B).;true;true', '9;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '9;true,true;movie(C, A).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(E, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, B), movie(G, F), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, H) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, A) )
%   | | then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.905 seconds
Total inference time: 0.643 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)'}, {'false': [5.77e-08, 56, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)'}, {'false': [0.0, 56, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)'}, {'false': [3.94e-08, 56, 0], 'true,false': [1.03e-07, 0, 56], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)'}, {'false': [3.8e-08, 56, 0], 'true,false': [0.0, 0, 56], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(E, D)', 'true,false': 'workedunder(F, B), movie(G, F), movie(G, A)', 'true,false,false': 'genre(B, H)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 56, 0], 'true,false,false,true': [0.0, 0, 56], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)'}, {'false': [1.83e-08, 56, 0], 'true,false': [0.0, 0, 56], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)'}, {'false': [1.83e-08, 56, 0], 'true,false': [0.0, 0, 56], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)'}, {'false': [7.45e-09, 56, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)'}, {'false': [1.67e-08, 56, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,false': 'movie(E, B), movie(E, A)'}, {'false': [0.0, 56, 0], 'true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true': [5.16e-08, 0, 56]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, B), movie(C, D), workedunder(E, D).;false;true', '4;true,false;workedunder(F, B), movie(G, F), movie(G, A).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0)]
Tree #2: [('true,false', 0)]
Tree #3: [('true,true', 0)]
Tree #4: [('true,true', 0)]
Tree #5: [('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0)]
Tree #6: [('true,true', 0)]
Tree #7: [('true,true', 0)]
Tree #8: [('true,false', 0)]
Tree #9: [('true,false', 0)]
Tree #10: [('true,true', 0), ('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(E, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, B), movie(G, F), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.692 seconds
Total inference time: 0.396 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 4.636
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105159
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.575 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: transfer, Total folds for small set: 1, Time: 00:03:50
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.575, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.636, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.5456161499023438, 'Generating mappings time': 0.6329810619354248, 'Knowledge compiling time': 0.01467585563659668, 'Total time': 6.5071446895599365, 'Finding best mapping': 3.3138644695281982}, 'CLL': -0.105159}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
Results
   AUC ROC   = 0.982759
   AUC PR    = 0.966667
   CLL	      = -0.130233
   Precision = 0.966667 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.983051


Total learning time: 1.993 seconds
Total inference time: 0.489 seconds
AUC ROC: 0.982759


Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: scratch, Total folds for small set: 1, Time: 00:03:53
{'AUC PR': 0.966667, 'F1': 0.983051, 'Inference time': 0.489, 'Recall': 1.0, 'Precision': [0.966667, 0.5], 'AUC ROC': 0.982759, 'Learning time': 1.993, 'CLL': -0.130233}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(J, E), movie(K, E), movie(K, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B)', 'true,false,true,false,false,false': 'workedunder(L, E)', 'true,false,true': 'genre(B, F), movie(D, G), workedunder(G, E)'}, {'true,false,true,false,true,true': [0.866, 3, 1], 'false': [6.83e-08, 88, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,false': [0.358, 11, 62], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.816, 2, 1], 'true,false,true,false,false,false,true': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A)', 'true,false,true,false,false,false': 'movie(K, B), movie(D, L), director(L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B), movie(D, I), director(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'genre(B, E), movie(D, F), workedunder(F, G)'}, {'true,false,true,false,false,false,true,false': [1.086, 2, 3], 'true,false,true,false,true': [0.451, 5, 2], 'false': [0.0, 88, 0], 'true,false,false': [0.361, 10, 55], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.866, 3, 1], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.839, 1, 5], 'true,false,true,false,false,true': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false': 'movie(F, B), movie(F, A)', 'true,true,false': 'movie(E, A)', 'true,true,false,false,false,true,true': 'movie(G, I)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,true,false,false,false,true': 'workedunder(I, H)', 'true,true,false,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false': [0.338, 9, 59], 'true,false': [6.32e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true,false': [0.833, 2, 1], 'true,true,false,false,true': [0.221, 2, 37], 'true,true,false,true': [1.095, 2, 3], 'true,true,false,false,false,true,true,false': [0.468, 8, 5], 'true,true,false,false,false,true,true,true': [0.116, 0, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false,false,false': 'movie(J, A)', 'true,true,false,false,false,false,true': 'movie(K, B), movie(J, L), workedunder(M, L)', 'true,true,false,false': 'movie(F, B), movie(F, G), workedunder(G, H)', 'true,true,false': 'movie(E, A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,true,false,false,false': 'movie(I, B), movie(I, A)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false,true,true': [0.463, 6, 3], 'true,false': [5.37e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,false,false': [0.355, 8, 46], 'true,true,false,false,true': [0.116, 0, 15], 'true,true,false,false,false,false,true,false': [0.392, 5, 12], 'true,true,false,false,false,true': [0.242, 2, 30], 'true,true,false,true': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(I, B), movie(J, I), movie(J, A)', 'true,false,false,false,false,false': 'movie(N, A)', 'true,false,false': 'genre(B, K)', 'true': 'movie(C, B), movie(C, D), workedunder(E, D)', 'true,false,false,false': 'workedunder(L, B)', 'true,true': 'movie(F, E), movie(F, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.898, 2, 3], 'false': [1.05e-08, 88, 0], 'true,false,false,false,true': [0.73, 1, 3], 'true,true,false': [0.282, 6, 51], 'true,true,true': [0.36, 13, 46], 'true,false,false,false,false,true': [0.63, 1, 2], 'true,false,false,false,false,false,true': [0.68, 1, 2], 'true,false,true': [0.06, 0, 3], 'true,false,false,false,false,false,false': [0.866, 1, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,false,false,false,false': 'genre(B, K)', 'true,true,false,false': 'movie(G, B), movie(G, H), workedunder(H, I)', 'true,true,false': 'movie(F, C)', 'true,true,false,false,false,false,false': 'movie(L, A), movie(L, C)', 'true': 'workedunder(C, B)', 'true,true,false,false,false': 'movie(J, A)', 'true,true': 'movie(D, C), movie(E, B), movie(E, A)'}, {'true,false': [0.312, 9, 44], 'false': [2.11e-08, 88, 0], 'true,true,true': [0.228, 1, 11], 'true,true,false,false,false,false,true': [0.864, 1, 5], 'true,true,false,false,true': [0.042, 0, 4], 'true,true,false,false,false,false,false,false': [0.384, 4, 18], 'true,true,false,false,false,true': [0.355, 6, 24], 'true,true,false,false,false,false,false,true': [0.017, 0, 3], 'true,true,false,true': [0.427, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,true,true': 'movie(D, A)', 'true,true,false': 'movie(F, B), movie(F, G), actor(G)', 'true,true,true,false': 'movie(E, A)', 'true': 'workedunder(C, B)', 'true,true,false,false,false': 'genre(B, I), movie(J, C), movie(J, A)', 'true,true': 'movie(D, C), movie(D, B)', 'true,true,false,false': 'movie(H, B)'}, {'true,true,false,false,false,false': [0.401, 3, 6], 'true,false': [0.312, 9, 44], 'false': [3.94e-08, 88, 0], 'true,true,false,false,true': [0.989, 2, 4], 'true,true,true,false,true': [0.722, 2, 1], 'true,true,false,false,false,true': [0.047, 0, 3], 'true,true,true,true': [0.0, 0, 3], 'true,true,false,true': [0.316, 7, 49], 'true,true,true,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G), movie(I, B)', 'true,false,true': 'workedunder(F, E), movie(D, F)', 'true,false,true,false,false,true': 'workedunder(K, B)'}, {'true,false,true,false,false,true,false': [0.769, 1, 3], 'true,false,true,false,true': [0.153, 4, 0], 'true,false,true,false,false,true,true': [1.077, 3, 2], 'false': [0.0, 88, 0], 'true,false,true,true': [0.091, 0, 4], 'true,false,true,false,false,false': [0.819, 3, 1], 'true,false,false,true': [0.376, 8, 35], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.235, 3, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, E), movie(K, J)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(L, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), workedunder(J, I)', 'true,false,false,true': 'movie(M, A)', 'true,false,true': 'workedunder(F, E), movie(G, E), movie(G, F)'}, {'true,false,true,false,true,true': [0.992, 3, 2], 'true,false,true,false,false': [0.896, 4, 1], 'true,false,false,true,true': [0.87, 1, 3], 'true,false,false,true,false': [0.369, 7, 32], 'true,false,true,false,true,false': [0.918, 3, 2], 'true,false,true,true': [0.454, 1, 5], 'false': [3.25e-08, 88, 0], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.236, 3, 41]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, H), movie(J, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,true,false': 'movie(E, A)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,true': 'movie(C, A)'}, {'true,false,false,true,true': [0.454, 1, 5], 'true,false,false,true,false,true': [1.062, 3, 2], 'false': [0.0, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,false,false,true,false,false': [0.416, 6, 3], 'true,false,false,false': [0.332, 9, 59], 'true,true,false,true': [0.711, 2, 1], 'true,false,true': [0.219, 2, 37], 'true,true,false,false': [1.095, 2, 3]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(J, E), movie(K, E), movie(K, B).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(H, B).;true;true', '0;true,false,true,false,false,false;workedunder(L, E).;false;false', '0;true,false,true;genre(B, F), movie(D, G), workedunder(G, E).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,false;workedunder(J, B).;false;true', '1;true,false;movie(D, A).;true;false', '1;true,false,true,false,false,false;movie(K, B), movie(D, L), director(L).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(H, B), movie(D, I), director(I).;false;true', '1;true,false,true,false,false,false,true;movie(K, L).;false;false', '1;true,false,true;genre(B, E), movie(D, F), workedunder(F, G).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,true,false,false;movie(F, B), movie(F, A).;false;true', '2;true,true,false;movie(E, A).;false;true', '2;true,true,false,false,false,true,true;movie(G, I).;false;false', '2;true;movie(C, B), movie(C, D), workedunder(D, B).;true;false', '2;true,true,false,false,false,true;workedunder(I, H).;true;false', '2;true,true,false,false,false;movie(G, A), movie(G, H), director(H).;true;false', '2;true,true;movie(C, A).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,true,false,false,false,false;movie(J, A).;true;false', '3;true,true,false,false,false,false,true;movie(K, B), movie(J, L), workedunder(M, L).;false;false', '3;true,true,false,false;movie(F, B), movie(F, G), workedunder(G, H).;false;true', '3;true,true,false;movie(E, A).;false;true', '3;true;movie(C, B), movie(C, D), workedunder(D, B).;true;false', '3;true,true,false,false,false;movie(I, B), movie(I, A).;false;true', '3;true,true;movie(C, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;workedunder(I, B), movie(J, I), movie(J, A).;false;true', '4;true,false,false,false,false,false;movie(N, A).;false;false', '4;true,false,false;genre(B, K).;false;true', '4;true;movie(C, B), movie(C, D), workedunder(E, D).;true;true', '4;true,false,false,false;workedunder(L, B).;false;true', '4;true,true;movie(F, E), movie(F, G), workedunder(H, G).;false;false', '4;true,false,false,false,false;movie(M, B).;false;true', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,true,false,false,false,false;genre(B, K).;false;true', '5;true,true,false,false;movie(G, B), movie(G, H), workedunder(H, I).;false;true', '5;true,true,false;movie(F, C).;false;true', '5;true,true,false,false,false,false,false;movie(L, A), movie(L, C).;false;false', '5;true;workedunder(C, B).;true;false', '5;true,true,false,false,false;movie(J, A).;false;true', '5;true,true;movie(D, C), movie(E, B), movie(E, A).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,true,true;movie(D, A).;false;true', '6;true,true,false;movie(F, B), movie(F, G), actor(G).;false;true', '6;true,true,true,false;movie(E, A).;false;false', '6;true;workedunder(C, B).;true;false', '6;true,true,false,false,false;genre(B, I), movie(J, C), movie(J, A).;false;false', '6;true,true;movie(D, C), movie(D, B).;true;true', '6;true,true,false,false;movie(H, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,false;workedunder(J, E).;true;false', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,false;workedunder(L, B).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false,true,false;workedunder(G, E), movie(H, G), movie(I, B).;false;true', '7;true,false,true;workedunder(F, E), movie(D, F).;false;true', '7;true,false,true,false,false,true;workedunder(K, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,true,false,true;movie(H, E), movie(K, J).;false;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;true', '8;true,false,false;workedunder(L, B).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true,false;movie(H, B), movie(H, I), workedunder(J, I).;true;false', '8;true,false,false,true;movie(M, A).;false;false', '8;true,false,true;workedunder(F, E), movie(G, E), movie(G, F).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false,false,true;workedunder(I, H), movie(J, H), movie(J, I).;false;true', '9;true,false,false,true,false;workedunder(K, B).;false;false', '9;true,true,false;movie(E, A).;false;false', '9;true,false;movie(F, B), movie(F, A).;false;true', '9;true;movie(C, B), movie(C, D), workedunder(D, B).;true;true', '9;true,false,false;movie(G, A), movie(G, H), director(H).;true;false', '9;true,true;movie(C, A).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995088;  // std dev = 1,07e-06, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G), workedunder(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(H, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(I, E), movie(J, E), movie(J, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(K, E) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109573;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A) )
%   | | then if ( genre(B, E), movie(D, F), workedunder(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(H, B), movie(D, I), director(I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(K, B), movie(D, L), director(L) )
%   | | | | | | then if ( movie(K, L) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.497987444837386;  // std dev = 2,994, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.11231637819360656;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.37963745278643657;  // std dev = 2,708, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.10159632948783649;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(E, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, B), movie(G, F), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, H) )
%   | | | then return 0.30404726894357215;  // std dev = 2,004, 198,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=185 */
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, B) )
%   | | | | | then return 0.25256438838318795;  // std dev = 1,586, 58,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=49 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 9,19e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.23048437502910907;  // std dev = 2,543, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.186063757173564;  // std dev = 2,568, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.0787767547310915;  // std dev = 7,30e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.20343991449671225;  // std dev = 0,052, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(G, E), movie(H, G), movie(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.3798796207351207;  // std dev = 0,028, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,15e-07, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17245060852959446;  // std dev = 0,046, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, B), movie(H, I), workedunder(J, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.29527827647344274;  // std dev = 0,025, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, A) )
%   | | then return 0.14921158570301954;  // std dev = 0,041, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), movie(I, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.2377370476989684;  // std dev = 0,021, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115458
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.381 seconds
Total inference time: 0.548 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, E), movie(J, E), movie(J, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'workedunder(K, E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B)', 'true,false,true': 'genre(B, F), movie(D, G), workedunder(G, E)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 212, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [1.05e-08, 22, 0], 'true,true': [1.07e-06, 0, 234], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A)', 'true,false,true,false,false,false': 'movie(K, B), movie(D, L), director(L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(H, B), movie(D, I), director(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'genre(B, E), movie(D, F), workedunder(F, G)'}, {'true,false,true,false,false,false,true,false': [0.0, 22, 0], 'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 212, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 234], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)'}, {'false': [0.0, 212, 0], 'true,false': [2.994, 22, 234], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)'}, {'false': [0.0, 212, 0], 'true,false': [2.708, 22, 234], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(F, B), movie(G, F), movie(G, A)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, B), movie(C, D), workedunder(E, D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,false': 'movie(J, B)'}, {'true,false,false,true': [2.004, 13, 185], 'false': [9.19e-08, 212, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [1.586, 9, 49], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)'}, {'false': [7.6e-08, 212, 0], 'true,false': [2.543, 22, 234], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)'}, {'false': [7.3e-08, 212, 0], 'true,false': [2.568, 22, 234], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G), movie(I, B)', 'true,false,true': 'workedunder(F, E), movie(D, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [1.15e-07, 212, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [0.028, 22, 0], 'true,true': [0.052, 0, 234], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), workedunder(J, I)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'workedunder(F, E), movie(G, E), movie(G, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [8.16e-08, 212, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false,false': [0.025, 22, 0], 'true,true': [0.046, 0, 234]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), movie(I, G), movie(I, H)', 'true,false': 'movie(E, B), movie(E, A)', 'true,false,false,true,false': 'workedunder(J, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)', 'true': 'movie(C, B), movie(C, D), workedunder(D, B)'}, {'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 212, 0], 'true,false,false,true,false,false': [0.021, 22, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.041, 0, 234]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true;genre(B, F), movie(D, G), workedunder(G, E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true;genre(B, E), movie(D, F), workedunder(F, G).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, B), movie(C, D), workedunder(E, D).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false;movie(D, A), movie(D, E), director(E).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false,true;workedunder(F, E), movie(D, F).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false;movie(D, A), movie(D, E), director(E).;true;false', '8;true,false,true;workedunder(F, E), movie(G, E), movie(G, F).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, B), movie(E, A).;false;true', '9;true,false,false;movie(F, A), movie(F, G), director(G).;false;false', '9;true;movie(C, B), movie(C, D), workedunder(D, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,true', 0), ('true,false,true,false,false,false,true,true', 0), ('true,false,true,false,false,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,true', 0), ('true,false', 0.9140625)]
Tree #4: [('true,true', 0), ('true,false', 0.9140625)]
Tree #5: [('true,false,true', 0), ('true,true', 0), ('true,false,false,false,true', 0), ('true,false,false,false,false,false', 0), ('true,false,false,false,false,true', 0.8448275862068966), ('true,false,false,true', 0.9343434343434344)]
Tree #6: [('true,true', 0), ('true,false', 0.9140625)]
Tree #7: [('true,true', 0), ('true,false', 0.9140625)]
Tree #8: [('true,false,true,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #9: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,true', 0)]
Tree #10: [('true,false,false,true,true', 0), ('true,false,false,false', 0), ('true,true', 0), ('true,false,false,true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995088;  // std dev = 1,07e-06, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G), workedunder(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109573;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A) )
%   | | then if ( genre(B, E), movie(D, F), workedunder(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.497987444837386;  // std dev = 2,994, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.11231637819360656;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.37963745278643657;  // std dev = 2,708, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.10159632948783649;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(E, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.2923831788166111;  // std dev = 2,579, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.0926912761892606;  // std dev = 9,19e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.23046576840470462;  // std dev = 2,551, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.18601468831862605;  // std dev = 2,577, 256,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=234 */
%   else return -0.0787767547310915;  // std dev = 7,30e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2035729887783882;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.38206154185055213;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,15e-07, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17254682519756345;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.2967403381382017;  // std dev = 3,94e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, A) )
%   | | then return 0.1492836344194355;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then return -0.2387383300212553;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.963 seconds
Total inference time: 0.527 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 11.419
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103592
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.647 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: transfer, Total folds for small set: 2, Time: 00:04:13
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.647, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 11.419, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.625979423522949, 'Generating mappings time': 0.6056571006774902, 'Knowledge compiling time': 0.017476320266723633, 'Total time': 6.506673812866211, 'Finding best mapping': 3.257553815841675}, 'CLL': -0.103592}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995107;  // std dev = 6,19e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.8497455737549728;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.14185106490048827;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109551;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.7127629809728174;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.12544463852839158;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462834;  // std dev = 4,54e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.5506920017523224;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.11231637819360651;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583094;  // std dev = 3,32e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.4139303508500771;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.1015963294878365;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716015;  // std dev = 1,88e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.3174212842029711;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.09269127618926064;  // std dev = 8,43e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.2518692396405697;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253545;  // std dev = 1,81e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.20636453892033657;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.07877675473109151;  // std dev = 7,15e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.17360701248042307;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.07324622576333673;  // std dev = 1,13e-07, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367136;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.1491703270742376;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.06842697784420264;  // std dev = 8,02e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801084;  // std dev = 7,60e-08, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else return 0.13036429669339697;  // std dev = 0,091, 119,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   else return -0.06419184008202626;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096392
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.444 seconds
Total inference time: 0.527 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: scratch, Total folds for small set: 2, Time: 00:04:20
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.527, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 6.444, 'CLL': -0.096392}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'student(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,true,false,false': 'workedunder(E, J), movie(K, E), movie(K, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, H)', 'true,false,true,false,false,false': 'workedunder(E, L)', 'true,false,true': 'movie(F, B), movie(D, G), workedunder(E, G)'}, {'true,false,true,false,true,true': [0.866, 3, 1], 'false': [6.83e-08, 88, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,false': [0.358, 11, 62], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.816, 2, 1], 'true,false,true,false,false,false,true': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, J)', 'true,false': 'movie(D, A)', 'true,false,true,false,false,false': 'movie(K, B), movie(D, L), actor(L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, H), movie(D, I), actor(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'movie(E, B), movie(D, F), workedunder(G, F)'}, {'true,false,true,false,false,false,true,false': [1.086, 2, 3], 'true,false,true,false,true': [0.451, 5, 2], 'false': [0.0, 88, 0], 'true,false,false': [0.361, 10, 55], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.866, 3, 1], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.839, 1, 5], 'true,false,true,false,false,true': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false': 'movie(F, B), movie(F, A)', 'true,true,false': 'movie(E, A)', 'true,true,false,false,false,true,true': 'movie(G, I)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,true,false,false,false,true': 'workedunder(H, I)', 'true,true,false,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false': [0.338, 9, 59], 'true,false': [6.32e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true,false': [0.833, 2, 1], 'true,true,false,false,true': [0.221, 2, 37], 'true,true,false,true': [1.095, 2, 3], 'true,true,false,false,false,true,true,false': [0.468, 8, 5], 'true,true,false,false,false,true,true,true': [0.116, 0, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false,false,false': 'movie(J, A)', 'true,true,false,false,false,false,true': 'movie(K, B), movie(J, L), workedunder(L, M)', 'true,true,false,false': 'movie(F, B), movie(F, G), workedunder(H, G)', 'true,true,false': 'movie(E, A)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,true,false,false,false': 'movie(I, B), movie(I, A)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false,true,true': [0.463, 6, 3], 'true,false': [5.37e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,false,false': [0.355, 8, 46], 'true,true,false,false,true': [0.116, 0, 15], 'true,true,false,false,false,false,true,false': [0.392, 5, 12], 'true,true,false,false,false,true': [0.242, 2, 30], 'true,true,false,true': [1.095, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'workedunder(B, I), genre(I, J), genre(A, J)', 'true,false,false,false,false,false': 'movie(N, A)', 'true,false,false': 'movie(K, B)', 'true': 'movie(C, B), movie(C, D), workedunder(D, E)', 'true,false,false,false': 'workedunder(B, L)', 'true,true': 'movie(F, E), movie(F, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.898, 2, 3], 'false': [1.05e-08, 88, 0], 'true,false,false,false,true': [0.73, 1, 3], 'true,true,false': [0.282, 6, 51], 'true,true,true': [0.36, 13, 46], 'true,false,false,false,false,true': [0.63, 1, 2], 'true,false,false,false,false,false,true': [0.68, 1, 2], 'true,false,true': [0.06, 0, 3], 'true,false,false,false,false,false,false': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false,false,false': 'movie(K, B)', 'true,true,false,false': 'movie(G, B), movie(G, H), workedunder(I, H)', 'true,true,false': 'movie(F, C)', 'true,true,false,false,false,false,false': 'genre(A, L), genre(C, L)', 'true': 'workedunder(B, C)', 'true,true,false,false,false': 'movie(J, A)', 'true,true': 'movie(D, C), movie(E, B), movie(E, A)'}, {'true,false': [0.312, 9, 44], 'false': [2.11e-08, 88, 0], 'true,true,true': [0.228, 1, 11], 'true,true,false,false,false,false,true': [0.864, 1, 5], 'true,true,false,false,true': [0.042, 0, 4], 'true,true,false,false,false,false,false,false': [0.384, 4, 18], 'true,true,false,false,false,true': [0.355, 6, 24], 'true,true,false,false,false,false,false,true': [0.017, 0, 3], 'true,true,false,true': [0.427, 4, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,true': 'movie(D, A)', 'true,true,false': 'movie(F, B), movie(F, G), director(G)', 'true,true,true,false': 'movie(E, A)', 'true': 'workedunder(B, C)', 'true,true,false,false,false': 'movie(I, B), genre(C, J), genre(A, J)', 'true,true': 'movie(D, C), movie(D, B)', 'true,true,false,false': 'movie(H, B)'}, {'true,true,false,false,false,false': [0.401, 3, 6], 'true,false': [0.312, 9, 44], 'false': [3.94e-08, 88, 0], 'true,true,false,false,true': [0.989, 2, 4], 'true,true,true,false,true': [0.722, 2, 1], 'true,true,false,false,false,true': [0.047, 0, 3], 'true,true,true,true': [0.0, 0, 3], 'true,true,false,true': [0.316, 7, 49], 'true,true,true,false,false': [1.095, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(E, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(E, G), movie(H, G), movie(I, B)', 'true,false,true': 'workedunder(E, F), movie(D, F)', 'true,false,true,false,false,true': 'workedunder(B, K)'}, {'true,false,true,false,false,true,false': [0.769, 1, 3], 'true,false,true,false,true': [0.153, 4, 0], 'true,false,true,false,false,true,true': [1.077, 3, 2], 'false': [0.0, 88, 0], 'true,false,true,true': [0.091, 0, 4], 'true,false,true,false,false,false': [0.819, 3, 1], 'true,false,false,true': [0.376, 8, 35], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.235, 3, 41]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(H, E), movie(K, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), workedunder(I, J)', 'true,false,false,true': 'movie(M, A)', 'true,false,true': 'workedunder(E, F), movie(G, E), movie(G, F)'}, {'true,false,true,false,true,true': [0.992, 3, 2], 'true,false,true,false,false': [0.896, 4, 1], 'true,false,false,true,true': [0.87, 1, 3], 'true,false,false,true,false': [0.369, 7, 32], 'true,false,true,false,true,false': [0.918, 3, 2], 'true,false,true,true': [0.454, 1, 5], 'false': [3.25e-08, 88, 0], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.236, 3, 41]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(H, I), movie(J, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(B, K)', 'true,true,false': 'movie(E, A)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,true': 'movie(C, A)'}, {'true,false,false,true,true': [0.454, 1, 5], 'true,false,false,true,false,true': [1.062, 3, 2], 'false': [0.0, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,false,false,true,false,false': [0.416, 6, 3], 'true,false,false,false': [0.332, 9, 59], 'true,true,false,true': [0.711, 2, 1], 'true,false,true': [0.219, 2, 37], 'true,true,false,false': [1.095, 2, 3]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,true;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;false', '0;true,false,true,false,false;workedunder(E, J), movie(K, E), movie(K, B).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(B, H).;true;true', '0;true,false,true,false,false,false;workedunder(E, L).;false;false', '0;true,false,true;movie(F, B), movie(D, G), workedunder(E, G).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false,true,false,false;workedunder(B, J).;false;true', '1;true,false;movie(D, A).;true;false', '1;true,false,true,false,false,false;movie(K, B), movie(D, L), actor(L).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(B, H), movie(D, I), actor(I).;false;true', '1;true,false,true,false,false,false,true;movie(K, L).;false;false', '1;true,false,true;movie(E, B), movie(D, F), workedunder(G, F).;false;true', '2;;workedunder(B, A) :- actor(B), director(A).;true;false', '2;true,true,false,false;movie(F, B), movie(F, A).;false;true', '2;true,true,false;movie(E, A).;false;true', '2;true,true,false,false,false,true,true;movie(G, I).;false;false', '2;true;movie(C, B), movie(C, D), workedunder(B, D).;true;false', '2;true,true,false,false,false,true;workedunder(H, I).;true;false', '2;true,true,false,false,false;movie(G, A), movie(G, H), actor(H).;true;false', '2;true,true;movie(C, A).;false;true', '3;;workedunder(B, A) :- actor(B), director(A).;true;false', '3;true,true,false,false,false,false;movie(J, A).;true;false', '3;true,true,false,false,false,false,true;movie(K, B), movie(J, L), workedunder(L, M).;false;false', '3;true,true,false,false;movie(F, B), movie(F, G), workedunder(H, G).;false;true', '3;true,true,false;movie(E, A).;false;true', '3;true;movie(C, B), movie(C, D), workedunder(B, D).;true;false', '3;true,true,false,false,false;movie(I, B), movie(I, A).;false;true', '3;true,true;movie(C, A).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false;workedunder(B, I), genre(I, J), genre(A, J).;false;true', '4;true,false,false,false,false,false;movie(N, A).;false;false', '4;true,false,false;movie(K, B).;false;true', '4;true;movie(C, B), movie(C, D), workedunder(D, E).;true;true', '4;true,false,false,false;workedunder(B, L).;false;true', '4;true,true;movie(F, E), movie(F, G), workedunder(G, H).;false;false', '4;true,false,false,false,false;movie(M, B).;false;true', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,true,false,false,false,false;movie(K, B).;false;true', '5;true,true,false,false;movie(G, B), movie(G, H), workedunder(I, H).;false;true', '5;true,true,false;movie(F, C).;false;true', '5;true,true,false,false,false,false,false;genre(A, L), genre(C, L).;false;false', '5;true;workedunder(B, C).;true;false', '5;true,true,false,false,false;movie(J, A).;false;true', '5;true,true;movie(D, C), movie(E, B), movie(E, A).;false;true', '6;;workedunder(B, A) :- actor(B), director(A).;true;false', '6;true,true,true;movie(D, A).;false;true', '6;true,true,false;movie(F, B), movie(F, G), director(G).;false;true', '6;true,true,true,false;movie(E, A).;false;false', '6;true;workedunder(B, C).;true;false', '6;true,true,false,false,false;movie(I, B), genre(C, J), genre(A, J).;false;false', '6;true,true;movie(D, C), movie(D, B).;true;true', '6;true,true,false,false;movie(H, B).;false;true', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false,true,false,false;workedunder(E, J).;true;false', '7;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '7;true,false,false;workedunder(B, L).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false,true,false;workedunder(E, G), movie(H, G), movie(I, B).;false;true', '7;true,false,true;workedunder(E, F), movie(D, F).;false;true', '7;true,false,true,false,false,true;workedunder(B, K).;false;false', '8;;workedunder(B, A) :- actor(B), director(A).;true;false', '8;true,false,true,false,true;movie(H, E), movie(K, J).;false;false', '8;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '8;true,false,false;workedunder(B, L).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true,false;movie(H, B), movie(H, I), workedunder(I, J).;true;false', '8;true,false,false,true;movie(M, A).;false;false', '8;true,false,true;workedunder(E, F), movie(G, E), movie(G, F).;false;true', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false,false,true;workedunder(H, I), movie(J, H), movie(J, I).;false;true', '9;true,false,false,true,false;workedunder(B, K).;false;false', '9;true,true,false;movie(E, A).;false;false', '9;true,false;movie(F, B), movie(F, A).;false;true', '9;true;movie(C, B), movie(C, D), workedunder(B, D).;true;true', '9;true,false,false;movie(G, A), movie(G, H), actor(H).;true;false', '9;true,true;movie(C, A).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,08e-06, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), movie(D, G), workedunder(E, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(E, I), movie(J, E), movie(J, A) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(E, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(E, A), movie(D, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, H), movie(D, I), actor(I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(K, A), movie(D, L), actor(L) )
%   | | | | | | then if ( movie(K, L) )
%   | | | | | | | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839166;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.496453247192763;  // std dev = 3,313, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.11231637819360661;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.37861242241250576;  // std dev = 2,997, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.1015963294878365;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), genre(F, G), genre(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return 0.2916271969968424;  // std dev = 2,854, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 9,19e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.2298275014493185;  // std dev = 2,823, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.08518475138839678;  // std dev = 8,16e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.18542196453416004;  // std dev = 2,850, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.0787767547310915;  // std dev = 6,66e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20431106231614235;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(E, G), movie(H, G), movie(I, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(E, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.3809888040110979;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,28e-07, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1730912064971216;  // std dev = 1,74e-07, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.2960159889251716;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 8,56e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.14969859832161145;  // std dev = 2,21e-07, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then if ( workedunder(G, H), movie(I, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.23823905860686015;  // std dev = 5,16e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107589
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.835 seconds
Total inference time: 0.544 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(E, I), movie(J, E), movie(J, A)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true,false,false,false': 'workedunder(E, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(A, H)', 'true,false,true': 'movie(F, A), movie(D, G), workedunder(E, G)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 252, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [2.36e-08, 27, 0], 'true,true': [1.08e-06, 0, 279], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(A, J)', 'true,false': 'movie(D, B)', 'true,false,true,false,false,false': 'movie(K, A), movie(D, L), actor(L)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(A, H), movie(D, I), actor(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'movie(E, A), movie(D, F), workedunder(G, F)'}, {'true,false,true,false,false,false,true,false': [0.0, 20, 0], 'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 252, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,true,true': [0.0, 7, 0], 'true,true': [0.0, 0, 279], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'false': [0.0, 252, 0], 'true,false': [3.313, 27, 279], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'false': [0.0, 252, 0], 'true,false': [2.997, 27, 279], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(D, E)', 'true,false': 'workedunder(A, F), genre(F, G), genre(B, G)', 'true,false,false': 'movie(H, A)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [9.19e-08, 252, 0], 'true,false,false,true': [2.854, 27, 279], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)'}, {'false': [8.16e-08, 252, 0], 'true,false': [2.823, 27, 279], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)'}, {'false': [6.66e-08, 252, 0], 'true,false': [2.85, 27, 279], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(E, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(E, G), movie(H, G), movie(I, A)', 'true,false,true': 'workedunder(E, F), movie(D, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [1.28e-07, 252, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [0.0, 27, 0], 'true,true': [0.0, 0, 279], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'workedunder(E, F), movie(G, E), movie(G, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [8.56e-08, 252, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 27, 0], 'true,true': [1.74e-07, 0, 279]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,false,true': 'workedunder(G, H), movie(I, G), movie(I, H)', 'true,false': 'movie(E, A), movie(E, B)', 'true,false,false,true,false': 'workedunder(A, J)', 'true,false,false': 'movie(F, B), movie(F, G), actor(G)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 252, 0], 'true,false,false,true,false,false': [5.16e-08, 27, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [2.21e-07, 0, 279]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, A), movie(D, G), workedunder(E, G).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true,false;movie(D, B).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true;movie(E, A), movie(D, F), workedunder(G, F).;false;false', '2;;workedunder(A, B) :- actor(A), director(B).;false;false', '3;;workedunder(A, B) :- actor(A), director(B).;false;false', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true;movie(C, A), movie(C, D), workedunder(D, E).;false;true', '4;true,false;workedunder(A, F), genre(F, G), genre(B, G).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;false;false', '6;;workedunder(A, B) :- actor(A), director(B).;false;false', '7;;workedunder(A, B) :- actor(A), director(B).;true;false', '7;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true;workedunder(E, F), movie(D, F).;false;false', '8;;workedunder(A, B) :- actor(A), director(B).;true;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '8;true,false,true;workedunder(E, F), movie(G, E), movie(G, F).;false;false', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true,false;movie(E, A), movie(E, B).;false;true', '9;true,false,false;movie(F, B), movie(F, G), actor(G).;false;false', '9;true;movie(C, A), movie(C, D), workedunder(A, D).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #3: [('true,true', 0), ('true,false', 0.9117647058823529)]
Tree #4: [('true,true', 0), ('true,false', 0.9117647058823529)]
Tree #5: [('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,true', 0.9117647058823529)]
Tree #6: [('true,true', 0), ('true,false', 0.9117647058823529)]
Tree #7: [('true,true', 0), ('true,false', 0.9117647058823529)]
Tree #8: [('true,false,true,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #9: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,true', 0)]
Tree #10: [('true,false,false,true,true', 0), ('true,false,false,false', 0), ('true,true', 0), ('true,false,false,true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,08e-06, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), movie(D, G), workedunder(E, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(E, A), movie(D, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839166;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.496453247192763;  // std dev = 3,313, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.11231637819360661;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.37861242241250576;  // std dev = 2,997, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.1015963294878365;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), genre(F, G), genre(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2916271969968424;  // std dev = 2,854, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.0926912761892606;  // std dev = 9,19e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.2298275014493185;  // std dev = 2,823, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.08518475138839678;  // std dev = 8,16e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.18542196453416004;  // std dev = 2,850, 306,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=279 */
%   else return -0.0787767547310915;  // std dev = 6,66e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20431106231614235;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.3809888040110979;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,28e-07, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1730912064971216;  // std dev = 1,74e-07, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.2960159889251716;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 8,56e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.14969859832161145;  // std dev = 2,21e-07, 279,000 (wgt'ed) examples reached here.  /* #pos=279 */
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then return -0.23823905860686015;  // std dev = 5,16e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107589
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.281 seconds
Total inference time: 0.406 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 12.065999999999999
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104462
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.504 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: transfer, Total folds for small set: 3, Time: 00:04:40
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.504, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 12.065999999999999, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.337557077407837, 'Generating mappings time': 0.6034622192382812, 'Knowledge compiling time': 0.014156103134155273, 'Total time': 6.2058844566345215, 'Finding best mapping': 3.2507033348083496}, 'CLL': -0.104462}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995102;  // std dev = 8,34e-07, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.8510567365179498;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.14185106490048824;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109558;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.7138104115422396;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.12544463852839177;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462834;  // std dev = 4,99e-07, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.5514216722279787;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.11231637819360674;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.417513584158309;  // std dev = 4,17e-07, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.41448825749988316;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.10159632948783653;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014994;  // std dev = 2,31e-07, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.3179320276334178;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.09269127618926051;  // std dev = 8,69e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256949017;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.25238086646431;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253526;  // std dev = 2,27e-07, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.20688943504398352;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.07877675473109148;  // std dev = 5,77e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.17414623943200877;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.07324622576333677;  // std dev = 1,22e-07, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.14972200480811276;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.06842697784420267;  // std dev = 3,94e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801104;  // std dev = 5,96e-08, 139,000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | else return 0.13092611385179487;  // std dev = 0,084, 141,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=140 */
%   else return -0.06419184008202626;  // std dev = 1,49e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096115
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.772 seconds
Total inference time: 0.438 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: scratch, Total folds for small set: 3, Time: 00:04:47
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.438, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 6.772, 'CLL': -0.096115}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'student(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,true,false,false': 'workedunder(E, J), movie(K, E), movie(K, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, H)', 'true,false,true,false,false,false': 'workedunder(E, L)', 'true,false,true': 'movie(F, B), movie(D, G), workedunder(E, G)'}, {'true,false,true,false,true,true': [0.866, 3, 1], 'false': [6.83e-08, 88, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,false': [0.358, 11, 62], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.816, 2, 1], 'true,false,true,false,false,false,true': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, J)', 'true,false': 'movie(D, A)', 'true,false,true,false,false,false': 'movie(K, B), movie(D, L), actor(L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, H), movie(D, I), actor(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'movie(E, B), movie(D, F), workedunder(G, F)'}, {'true,false,true,false,false,false,true,false': [1.086, 2, 3], 'true,false,true,false,true': [0.451, 5, 2], 'false': [0.0, 88, 0], 'true,false,false': [0.361, 10, 55], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,false,false,true,true': [0.866, 3, 1], 'true,true': [0.252, 3, 41], 'true,false,true,false,false,false,false': [0.839, 1, 5], 'true,false,true,false,false,true': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false': 'movie(F, B), movie(F, A)', 'true,true,false': 'movie(E, A)', 'true,true,false,false,false,true,true': 'movie(G, I)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,true,false,false,false,true': 'workedunder(H, I)', 'true,true,false,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false': [0.338, 9, 59], 'true,false': [6.32e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,true,false': [0.833, 2, 1], 'true,true,false,false,true': [0.221, 2, 37], 'true,true,false,true': [1.095, 2, 3], 'true,true,false,false,false,true,true,false': [0.468, 8, 5], 'true,true,false,false,false,true,true,true': [0.116, 0, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false,false,false': 'movie(J, A)', 'true,true,false,false,false,false,true': 'movie(K, B), movie(J, L), workedunder(L, M)', 'true,true,false,false': 'movie(F, B), movie(F, G), workedunder(H, G)', 'true,true,false': 'movie(E, A)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,true,false,false,false': 'movie(I, B), movie(I, A)', 'true,true': 'movie(C, A)'}, {'true,true,false,false,false,false,true,true': [0.463, 6, 3], 'true,false': [5.37e-08, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,true,false,false,false,false,false': [0.355, 8, 46], 'true,true,false,false,true': [0.116, 0, 15], 'true,true,false,false,false,false,true,false': [0.392, 5, 12], 'true,true,false,false,false,true': [0.242, 2, 30], 'true,true,false,true': [1.095, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'workedunder(B, I), genre(I, J), genre(A, J)', 'true,false,false,false,false,false': 'movie(N, A)', 'true,false,false': 'movie(K, B)', 'true': 'movie(C, B), movie(C, D), workedunder(D, E)', 'true,false,false,false': 'workedunder(B, L)', 'true,true': 'movie(F, E), movie(F, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.898, 2, 3], 'false': [1.05e-08, 88, 0], 'true,false,false,false,true': [0.73, 1, 3], 'true,true,false': [0.282, 6, 51], 'true,true,true': [0.36, 13, 46], 'true,false,false,false,false,true': [0.63, 1, 2], 'true,false,false,false,false,false,true': [0.68, 1, 2], 'true,false,true': [0.06, 0, 3], 'true,false,false,false,false,false,false': [0.866, 1, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,false,false,false,false': 'movie(K, B)', 'true,true,false,false': 'movie(G, B), movie(G, H), workedunder(I, H)', 'true,true,false': 'movie(F, C)', 'true,true,false,false,false,false,false': 'genre(A, L), genre(C, L)', 'true': 'workedunder(B, C)', 'true,true,false,false,false': 'movie(J, A)', 'true,true': 'movie(D, C), movie(E, B), movie(E, A)'}, {'true,false': [0.312, 9, 44], 'false': [2.11e-08, 88, 0], 'true,true,true': [0.228, 1, 11], 'true,true,false,false,false,false,true': [0.864, 1, 5], 'true,true,false,false,true': [0.042, 0, 4], 'true,true,false,false,false,false,false,false': [0.384, 4, 18], 'true,true,false,false,false,true': [0.355, 6, 24], 'true,true,false,false,false,false,false,true': [0.017, 0, 3], 'true,true,false,true': [0.427, 4, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,true,true': 'movie(D, A)', 'true,true,false': 'movie(F, B), movie(F, G), director(G)', 'true,true,true,false': 'movie(E, A)', 'true': 'workedunder(B, C)', 'true,true,false,false,false': 'movie(I, B), genre(C, J), genre(A, J)', 'true,true': 'movie(D, C), movie(D, B)', 'true,true,false,false': 'movie(H, B)'}, {'true,true,false,false,false,false': [0.401, 3, 6], 'true,false': [0.312, 9, 44], 'false': [3.94e-08, 88, 0], 'true,true,false,false,true': [0.989, 2, 4], 'true,true,true,false,true': [0.722, 2, 1], 'true,true,false,false,false,true': [0.047, 0, 3], 'true,true,true,true': [0.0, 0, 3], 'true,true,false,true': [0.316, 7, 49], 'true,true,true,false,false': [1.095, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(E, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(E, G), movie(H, G), movie(I, B)', 'true,false,true': 'workedunder(E, F), movie(D, F)', 'true,false,true,false,false,true': 'workedunder(B, K)'}, {'true,false,true,false,false,true,false': [0.769, 1, 3], 'true,false,true,false,true': [0.153, 4, 0], 'true,false,true,false,false,true,true': [1.077, 3, 2], 'false': [0.0, 88, 0], 'true,false,true,true': [0.091, 0, 4], 'true,false,true,false,false,false': [0.819, 3, 1], 'true,false,false,true': [0.376, 8, 35], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.235, 3, 41]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(H, E), movie(K, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), workedunder(I, J)', 'true,false,false,true': 'movie(M, A)', 'true,false,true': 'workedunder(E, F), movie(G, E), movie(G, F)'}, {'true,false,true,false,true,true': [0.992, 3, 2], 'true,false,true,false,false': [0.896, 4, 1], 'true,false,false,true,true': [0.87, 1, 3], 'true,false,false,true,false': [0.369, 7, 32], 'true,false,true,false,true,false': [0.918, 3, 2], 'true,false,true,true': [0.454, 1, 5], 'false': [3.25e-08, 88, 0], 'true,false,false,false': [0.296, 3, 27], 'true,true': [0.236, 3, 41]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(H, I), movie(J, H), movie(J, I)', 'true,false,false,true,false': 'workedunder(B, K)', 'true,true,false': 'movie(E, A)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(C, B), movie(C, D), workedunder(B, D)', 'true,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,true': 'movie(C, A)'}, {'true,false,false,true,true': [0.454, 1, 5], 'true,false,false,true,false,true': [1.062, 3, 2], 'false': [0.0, 88, 0], 'true,true,true': [0.0, 0, 3], 'true,false,false,true,false,false': [0.416, 6, 3], 'true,false,false,false': [0.332, 9, 59], 'true,true,false,true': [0.711, 2, 1], 'true,false,true': [0.219, 2, 37], 'true,true,false,false': [1.095, 2, 3]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,true;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;false', '0;true,false,true,false,false;workedunder(E, J), movie(K, E), movie(K, B).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(B, H).;true;true', '0;true,false,true,false,false,false;workedunder(E, L).;false;false', '0;true,false,true;movie(F, B), movie(D, G), workedunder(E, G).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false,true,false,false;workedunder(B, J).;false;true', '1;true,false;movie(D, A).;true;false', '1;true,false,true,false,false,false;movie(K, B), movie(D, L), actor(L).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,true,false;workedunder(B, H), movie(D, I), actor(I).;false;true', '1;true,false,true,false,false,false,true;movie(K, L).;false;false', '1;true,false,true;movie(E, B), movie(D, F), workedunder(G, F).;false;true', '2;;workedunder(B, A) :- actor(B), director(A).;true;false', '2;true,true,false,false;movie(F, B), movie(F, A).;false;true', '2;true,true,false;movie(E, A).;false;true', '2;true,true,false,false,false,true,true;movie(G, I).;false;false', '2;true;movie(C, B), movie(C, D), workedunder(B, D).;true;false', '2;true,true,false,false,false,true;workedunder(H, I).;true;false', '2;true,true,false,false,false;movie(G, A), movie(G, H), actor(H).;true;false', '2;true,true;movie(C, A).;false;true', '3;;workedunder(B, A) :- actor(B), director(A).;true;false', '3;true,true,false,false,false,false;movie(J, A).;true;false', '3;true,true,false,false,false,false,true;movie(K, B), movie(J, L), workedunder(L, M).;false;false', '3;true,true,false,false;movie(F, B), movie(F, G), workedunder(H, G).;false;true', '3;true,true,false;movie(E, A).;false;true', '3;true;movie(C, B), movie(C, D), workedunder(B, D).;true;false', '3;true,true,false,false,false;movie(I, B), movie(I, A).;false;true', '3;true,true;movie(C, A).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false;workedunder(B, I), genre(I, J), genre(A, J).;false;true', '4;true,false,false,false,false,false;movie(N, A).;false;false', '4;true,false,false;movie(K, B).;false;true', '4;true;movie(C, B), movie(C, D), workedunder(D, E).;true;true', '4;true,false,false,false;workedunder(B, L).;false;true', '4;true,true;movie(F, E), movie(F, G), workedunder(G, H).;false;false', '4;true,false,false,false,false;movie(M, B).;false;true', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,true,false,false,false,false;movie(K, B).;false;true', '5;true,true,false,false;movie(G, B), movie(G, H), workedunder(I, H).;false;true', '5;true,true,false;movie(F, C).;false;true', '5;true,true,false,false,false,false,false;genre(A, L), genre(C, L).;false;false', '5;true;workedunder(B, C).;true;false', '5;true,true,false,false,false;movie(J, A).;false;true', '5;true,true;movie(D, C), movie(E, B), movie(E, A).;false;true', '6;;workedunder(B, A) :- actor(B), director(A).;true;false', '6;true,true,true;movie(D, A).;false;true', '6;true,true,false;movie(F, B), movie(F, G), director(G).;false;true', '6;true,true,true,false;movie(E, A).;false;false', '6;true;workedunder(B, C).;true;false', '6;true,true,false,false,false;movie(I, B), genre(C, J), genre(A, J).;false;false', '6;true,true;movie(D, C), movie(D, B).;true;true', '6;true,true,false,false;movie(H, B).;false;true', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false,true,false,false;workedunder(E, J).;true;false', '7;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '7;true,false,false;workedunder(B, L).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false,true,false;workedunder(E, G), movie(H, G), movie(I, B).;false;true', '7;true,false,true;workedunder(E, F), movie(D, F).;false;true', '7;true,false,true,false,false,true;workedunder(B, K).;false;false', '8;;workedunder(B, A) :- actor(B), director(A).;true;false', '8;true,false,true,false,true;movie(H, E), movie(K, J).;false;false', '8;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '8;true,false,false;workedunder(B, L).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true,false;movie(H, B), movie(H, I), workedunder(I, J).;true;false', '8;true,false,false,true;movie(M, A).;false;false', '8;true,false,true;workedunder(E, F), movie(G, E), movie(G, F).;false;true', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false,false,true;workedunder(H, I), movie(J, H), movie(J, I).;false;true', '9;true,false,false,true,false;workedunder(B, K).;false;false', '9;true,true,false;movie(E, A).;false;false', '9;true,false;movie(F, B), movie(F, A).;false;true', '9;true;movie(C, B), movie(C, D), workedunder(B, D).;true;true', '9;true,false,false;movie(G, A), movie(G, H), actor(H).;true;false', '9;true,true;movie(C, A).;false;true']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), movie(D, G), workedunder(E, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(E, I), movie(J, E), movie(J, A) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(E, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048813;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(E, A), movie(D, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, H), movie(D, I), actor(I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(K, A), movie(D, L), actor(L) )
%   | | | | | | then if ( movie(K, L) )
%   | | | | | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283918;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5040062202124451;  // std dev = 3,333, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.11231637819360678;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.3836522724516157;  // std dev = 3,012, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.10159632948783655;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), genre(F, G), genre(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return 0.2953488224165714;  // std dev = 2,869, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892605;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.23297967814864584;  // std dev = 2,841, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1883595133084567;  // std dev = 2,872, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.07877675473109148;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2006929793291388;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(E, G), movie(H, G), movie(I, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(E, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.38628642599921287;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333684;  // std dev = 1,16e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17041883181101425;  // std dev = 3,04e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.29959322764726354;  // std dev = 2,98e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.14765905729170276;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then if ( workedunder(G, H), movie(I, G), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.240703063292865;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10332
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.382 seconds
Total inference time: 0.606 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(E, I), movie(J, E), movie(J, A)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true,false,false,false': 'workedunder(E, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(A, H)', 'true,false,true': 'movie(F, A), movie(D, G), workedunder(E, G)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [2.36e-08, 27, 0], 'true,true': [1.04e-06, 0, 324], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(A, J)', 'true,false': 'movie(D, B)', 'true,false,true,false,false,false': 'movie(K, A), movie(D, L), actor(L)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(A, H), movie(D, I), actor(I)', 'true,false,true,false,false,false,true': 'movie(K, L)', 'true,false,true': 'movie(E, A), movie(D, F), workedunder(G, F)'}, {'true,false,true,false,false,false,true,false': [0.0, 22, 0], 'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,true,true': [0.0, 5, 0], 'true,true': [0.0, 0, 324], 'true,false,true,false,false,false,false': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'false': [0.0, 297, 0], 'true,false': [3.333, 27, 324], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'false': [0.0, 297, 0], 'true,false': [3.012, 27, 324], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, D), workedunder(D, E)', 'true,false': 'workedunder(A, F), genre(F, G), genre(B, G)', 'true,false,false': 'movie(H, A)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [1.13e-07, 297, 0], 'true,false,false,true': [2.869, 27, 324], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)'}, {'false': [9.19e-08, 297, 0], 'true,false': [2.841, 27, 324], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)'}, {'false': [4.47e-08, 297, 0], 'true,false': [2.872, 27, 324], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(E, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(E, G), movie(H, G), movie(I, A)', 'true,false,true': 'workedunder(E, F), movie(D, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [1.16e-07, 297, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [0.0, 27, 0], 'true,true': [0.0, 0, 324], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'workedunder(E, F), movie(G, E), movie(G, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 297, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false,false': [2.98e-08, 27, 0], 'true,true': [3.04e-07, 0, 324]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,false,true': 'workedunder(G, H), movie(I, G), movie(I, H)', 'true,false': 'movie(E, A), movie(E, B)', 'true,false,false,true,false': 'workedunder(A, J)', 'true,false,false': 'movie(F, B), movie(F, G), actor(G)', 'true': 'movie(C, A), movie(C, D), workedunder(A, D)'}, {'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [4.47e-08, 297, 0], 'true,false,false,true,false,false': [0.0, 27, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 324]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, A), movie(D, G), workedunder(E, G).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true,false;movie(D, B).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true;movie(E, A), movie(D, F), workedunder(G, F).;false;false', '2;;workedunder(A, B) :- actor(A), director(B).;false;false', '3;;workedunder(A, B) :- actor(A), director(B).;false;false', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true;movie(C, A), movie(C, D), workedunder(D, E).;false;true', '4;true,false;workedunder(A, F), genre(F, G), genre(B, G).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;false;false', '6;;workedunder(A, B) :- actor(A), director(B).;false;false', '7;;workedunder(A, B) :- actor(A), director(B).;true;false', '7;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,true;workedunder(E, F), movie(D, F).;false;false', '8;;workedunder(A, B) :- actor(A), director(B).;true;false', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '8;true,false,true;workedunder(E, F), movie(G, E), movie(G, F).;false;false', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true,false;movie(E, A), movie(E, B).;false;true', '9;true,false,false;movie(F, B), movie(F, G), actor(G).;false;false', '9;true;movie(C, A), movie(C, D), workedunder(A, D).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,false', 0)]
Tree #3: [('true,true', 0), ('true,false', 0.9230769230769231)]
Tree #4: [('true,true', 0), ('true,false', 0.9230769230769231)]
Tree #5: [('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,true', 0.9230769230769231)]
Tree #6: [('true,true', 0), ('true,false', 0.9230769230769231)]
Tree #7: [('true,true', 0), ('true,false', 0.9230769230769231)]
Tree #8: [('true,false,true,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #9: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,true', 0)]
Tree #10: [('true,false,false,true,true', 0), ('true,false,false,false', 0), ('true,true', 0), ('true,false,false,true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), movie(D, G), workedunder(E, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048813;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(E, A), movie(D, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283918;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.5040062202124451;  // std dev = 3,333, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.11231637819360678;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.3836522724516157;  // std dev = 3,012, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.10159632948783655;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), genre(F, G), genre(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2953488224165714;  // std dev = 2,869, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.0926912761892605;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.23297967814864584;  // std dev = 2,841, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.1883595133084567;  // std dev = 2,872, 351,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=324 */
%   else return -0.07877675473109148;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2006929793291388;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(D, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.38628642599921287;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333684;  // std dev = 1,16e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17041883181101425;  // std dev = 3,04e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( workedunder(E, F), movie(G, E), movie(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.29959322764726354;  // std dev = 2,98e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, D), workedunder(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.14765905729170276;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then return -0.240703063292865;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 4,47e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10332
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.702 seconds
Total inference time: 0.543 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 11.233
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103579
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.636 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: transfer, Total folds for small set: 4, Time: 00:05:07
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.636, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 11.233, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.277815818786621, 'Generating mappings time': 0.6098227500915527, 'Knowledge compiling time': 0.015882015228271484, 'Total time': 6.126715183258057, 'Finding best mapping': 3.223188638687134}, 'CLL': -0.103579}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.85814893509951;  // std dev = 9,23e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.8356770249871499;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.14185106490048788;  // std dev = 5,16e-08, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109562;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.7015145912413361;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.1254446385283919;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,26e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.5428546188788582;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.11231637819360689;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830886;  // std dev = 4,54e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.4079705308323158;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.10159632948783659;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601498;  // std dev = 2,80e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.31200248854567314;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.09269127618926046;  // std dev = 1,48e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694904;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.24646572561289223;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325352;  // std dev = 2,46e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.20083728851666519;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.07877675473109146;  // std dev = 3,94e-08, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.18424849699982696;  // std dev = 0,120, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333702;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( director(A), movie(D, B), movie(D, A) )
%   | then if ( director(B) )
%   | | then return -0.8095859864014223;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333698;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.07324622576333682;  // std dev = 1,17e-07, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15182059212106103;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.14523648983269782;  // std dev = 0,121, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.06842697784420292;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13941449532057723;  // std dev = 0,102, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202611;  // std dev = 9,13e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( director(B), movie(D, A), movie(D, B) )
%   | then return -0.6863204604436495;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.064191840082026;  // std dev = 1,05e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097794
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.13 seconds
Total inference time: 0.538 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 2, Type: scratch, Total folds for small set: 4, Time: 00:05:15
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.538, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 8.13, 'CLL': -0.097794}
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else if ( publication(I, B) )
%   | | | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(J, B), publication(J, K), tempadvisedby(L, K) )
%   | | | then return 0.7564540198452752;  // std dev = 0,302, 59,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=53 */
%   | | | else if ( projectmember(M, B) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 0.4581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   else return -0.14185106490048768;  // std dev = 7,30e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), tempadvisedby(E, B), publication(F, B) )
%   | | then if ( publication(D, G), professor(G) )
%   | | | then return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.4895336256342566;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(H, B), publication(I, H) )
%   | | | then return 0.4062002923009233;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.6978669589675901;  // std dev = 0,200, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | | else if ( projectmember(L, B) )
%   | | | | | then return 0.7194734122109545;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | then return 0.39598357401876605;  // std dev = 1,101, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.5590275696781843;  // std dev = 0,390, 40,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else return -0.12544463852839147;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5553664367462842;  // std dev = 1,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, E), publication(H, G) )
%   | | | | then return 0.3286582130848362;  // std dev = 1,043, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( tempadvisedby(I, B) )
%   | | | | | then return 0.052383206278143676;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.1836424347963931;  // std dev = 1,196, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | then return 0.32081987017382335;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( publication(L, B), publication(L, M), tempadvisedby(N, M) )
%   | | | | then return 0.5295148150127197;  // std dev = 0,262, 53,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=49 */
%   | | | | else return 0.35884327676960687;  // std dev = 0,441, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   else return -0.11231637819360624;  // std dev = 6,66e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583102;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), professor(G) )
%   | | | then return 0.0057385829344660565;  // std dev = 0,921, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.2561240786100105;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( projectmember(H, B) )
%   | | | then return 0.44483627188318275;  // std dev = 0,061, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(I, B), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return 0.37581694595549886;  // std dev = 0,312, 58,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=51 */
%   | | | | else if ( publication(L, B) )
%   | | | | | then return -0.06514967575360853;  // std dev = 0,809, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | then return 0.24854409410502684;  // std dev = 1,106, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.3412649905570416;  // std dev = 0,426, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.10159632948783617;  // std dev = 5,87e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), professor(G) )
%   | | | then return 0.00496344828161296;  // std dev = 0,921, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.1923508787626568;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(H, B), yearsinprogram(H, I), yearsinprogram(A, I) )
%   | | | then return 0.42440468581253565;  // std dev = 0,122, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.26701417602859023;  // std dev = 0,312, 37,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=32 */
%   | | | | else if ( publication(K, A), publication(K, L), tempadvisedby(M, L) )
%   | | | | | then if ( publication(N, M) )
%   | | | | | | then return 0.2224046753096567;  // std dev = 0,882, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else return -0.04112900761150606;  // std dev = 1,060, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return 0.3053005889256024;  // std dev = 0,307, 32,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   else return -0.09269127618926105;  // std dev = 1,05e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), professor(G) )
%   | | | then return 0.004290590104315377;  // std dev = 0,921, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.14556538180759748;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(H, B), publication(I, A) )
%   | | | then return 0.3327236593426969;  // std dev = 0,251, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( publication(J, B), publication(J, K), tempadvisedby(L, K) )
%   | | | | then return 0.2226649315344785;  // std dev = 0,305, 60,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=53 */
%   | | | | else if ( publication(M, B) )
%   | | | | | then return -0.11701178575272553;  // std dev = 0,826, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( publication(N, A), publication(N, P), professor(P) )
%   | | | | | | then return -0.10181988727534774;  // std dev = 0,734, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.24992029943420596;  // std dev = 0,353, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.0851847513883968;  // std dev = 2,79e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253545;  // std dev = 5,96e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), tempadvisedby(H, G) )
%   | | | then return 0.16371150197716988;  // std dev = 0,833, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(D, I), professor(I) )
%   | | | | then return -0.15629723829970543;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.11134232813225978;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(J, B), publication(K, A) )
%   | | | then return 0.26787018893654524;  // std dev = 0,230, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( publication(L, B), publication(L, M), tempadvisedby(N, M) )
%   | | | | then return 0.17544454066699816;  // std dev = 0,306, 60,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=53 */
%   | | | | else if ( publication(P, B) )
%   | | | | | then return -0.08825063521030374;  // std dev = 0,826, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.13405073552050295;  // std dev = 0,387, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return -0.07877675473109166;  // std dev = 4,34e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(E, F) )
%   | | then return 0.27309227560283333;  // std dev = 0,386, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, B), tempadvisedby(J, H) )
%   | | | | then return 0.20498621275711726;  // std dev = 0,865, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( tempadvisedby(K, B) )
%   | | | | | then return -0.13677502489265614;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | | else if ( publication(L, B) )
%   | | | | | | then return 0.013848174409175028;  // std dev = 1,123, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return -0.10968479112552725;  // std dev = 0,734, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( tempadvisedby(M, B), publication(N, M) )
%   | | | | then return -0.018117686433157254;  // std dev = 1,136, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else return 0.14878066335884926;  // std dev = 0,291, 66,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   else return -0.07324622576333704;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), tempadvisedby(E, B), publication(F, B) )
%   | | then if ( publication(D, G), tempadvisedby(H, G) )
%   | | | then return 0.10551154374835871;  // std dev = 0,838, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(D, I), professor(I) )
%   | | | | then return -0.12141342974093616;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.05371574151423808;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | then return -0.014198465414866876;  // std dev = 1,136, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.13330509887924322;  // std dev = 0,255, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | | else if ( publication(M, B), publication(M, N), student(N) )
%   | | | | | then return 0.06921564963010897;  // std dev = 0,377, 27,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=21 */
%   | | | | | else return 0.18014777892144793;  // std dev = 0,253, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.06842697784420267;  // std dev = 3,49e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801106;  // std dev = 1,83e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), tempadvisedby(E, B), publication(F, B) )
%   | | then if ( publication(D, G), tempadvisedby(H, G) )
%   | | | then return 0.08648229311410233;  // std dev = 0,839, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(D, I), professor(I) )
%   | | | | then return -0.10904567043366674;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.04247753265792198;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(J, B), tempadvisedby(K, B), publication(L, K) )
%   | | | then return -0.011109064286419815;  // std dev = 1,136, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( tempadvisedby(M, B), publication(N, B) )
%   | | | | then return 0.13705119915288533;  // std dev = 0,199, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | | else if ( publication(P, A), tempadvisedby(Q, B) )
%   | | | | | then return 0.16630297956759219;  // std dev = 0,182, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.07151264473683824;  // std dev = 0,357, 47,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=37 */
%   else return -0.06419184008202623;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'projectmember(project,person).', 'publication(title,person).', 'yearsinprogram(person,year).', 'professor(person).', 'student(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'publication(I, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'publication(J, B), publication(J, K), tempadvisedby(L, K)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(G, B), publication(H, B)', 'true,false,false,false': 'projectmember(M, B)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,true': [0.913, 5, 1], 'true,false,false,true': [0.302, 6, 53], 'false': [7.3e-08, 94, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false': [1.0, 2, 2], 'true,false,false,false,false': [0.49, 4, 6], 'true,true': [2.46e-07, 0, 41], 'true,false,false,false,true': [2.11e-08, 0, 3], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), tempadvisedby(E, B), publication(F, B)', 'true,false,false,false,false,false': 'tempadvisedby(M, B)', 'true,false,false': 'tempadvisedby(H, B), publication(I, H)', 'true': 'publication(C, B), publication(C, A)', 'true,false,false,false': 'tempadvisedby(J, B), publication(K, B)', 'true,false,true': 'publication(D, G), professor(G)', 'true,false,false,false,false': 'projectmember(L, B)'}, {'true,false,false,true': [1.155, 2, 4], 'false': [0.0, 94, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false,false,true': [2.11e-08, 0, 6], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.101, 2, 3], 'true,false,false,false,true': [0.2, 1, 23], 'true,false,false,false,false,false,false': [0.39, 8, 32]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(I, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(J, B), publication(K, J)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false': 'tempadvisedby(G, E), publication(H, G)', 'true,false,false,false': 'publication(L, B), publication(L, M), tempadvisedby(N, M)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,true': [1.043, 2, 3], 'true,false,false,true': [1.155, 2, 4], 'false': [6.66e-08, 94, 0], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,false,false': [1.196, 3, 3], 'true,false,false,false,false': [0.441, 4, 9], 'true,true': [1.46e-07, 0, 41], 'true,false,false,false,true': [0.262, 4, 49], 'true,false,true,false,false,true': [0.894, 4, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false,false,false,false': 'tempadvisedby(M, B)', 'true,false,false': 'projectmember(H, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,false': 'publication(I, B), publication(I, J), tempadvisedby(K, J)', 'true,false,true': 'publication(D, G), professor(G)', 'true,false,false,false,false': 'publication(L, B)'}, {'true,false,false,true': [0.061, 0, 8], 'false': [5.87e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.809, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.106, 2, 3], 'true,false,false,false,true': [0.312, 7, 51], 'true,false,false,false,false,false,false': [0.426, 2, 5]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false': 'tempadvisedby(H, B), yearsinprogram(H, I), yearsinprogram(A, I)', 'true,false,false,false,false,true': 'publication(N, M)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,false': 'tempadvisedby(J, B)', 'true,false,true': 'publication(D, G), professor(G)', 'true,false,false,false,false': 'publication(K, A), publication(K, L), tempadvisedby(M, L)'}, {'true,false,false,true': [0.122, 0, 4], 'false': [1.05e-08, 94, 0], 'true,false,false,false,false,false': [0.307, 4, 28], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true,false': [1.06, 3, 2], 'true,false,true,false': [0.866, 1, 3], 'true,true': [2.98e-08, 0, 41], 'true,false,false,false,false,true,true': [0.882, 1, 2], 'true,false,false,false,true': [0.312, 5, 32]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false,false,false,false': 'publication(N, A), publication(N, P), professor(P)', 'true,false,false': 'tempadvisedby(H, B), publication(I, A)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,false': 'publication(J, B), publication(J, K), tempadvisedby(L, K)', 'true,false,true': 'publication(D, G), professor(G)', 'true,false,false,false,false': 'publication(M, B)'}, {'true,false,false,true': [0.251, 0, 4], 'false': [2.79e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [0.734, 2, 1], 'true,false,false,false,true': [0.305, 7, 53], 'true,false,false,false,false,false,false': [0.353, 2, 9]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false': 'tempadvisedby(J, B), publication(K, A)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(D, I), professor(I)', 'true,false,false,false': 'publication(L, B), publication(L, M), tempadvisedby(N, M)', 'true,false,true': 'publication(D, G), tempadvisedby(H, G)', 'true,false,false,false,false': 'publication(P, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.23, 0, 4], 'false': [4.34e-08, 94, 0], 'true,false,false,false,false,false': [0.387, 4, 10], 'true,false,true,true': [0.833, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.306, 7, 53]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'tempadvisedby(I, B), tempadvisedby(J, H)', 'true,false': 'publication(D, A), publication(D, E), tempadvisedby(E, F)', 'true,false,false,true,false': 'tempadvisedby(K, B)', 'true,false,false,true,false,false': 'publication(L, B)', 'true,false,false': 'publication(G, A), publication(G, H), professor(H)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,false': 'tempadvisedby(M, B), publication(N, M)'}, {'true,false,false,true,false,false,true': [1.123, 2, 3], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'false': [0.0, 94, 0], 'true,false,false,false,true': [1.136, 2, 4], 'true,false,false,true,true': [0.865, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.291, 8, 58], 'true,false,true': [0.386, 0, 4], 'true,false,false,true,false,false,false': [0.734, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), tempadvisedby(E, B), publication(F, B)', 'true,false,false': 'tempadvisedby(J, B), publication(K, J)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(D, I), professor(I)', 'true,false,false,false': 'tempadvisedby(L, B)', 'true,false,true': 'publication(D, G), tempadvisedby(H, G)', 'true,false,false,false,false': 'publication(M, B), publication(M, N), student(N)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [3.49e-08, 94, 0], 'true,false,false,false,false,false': [0.253, 2, 11], 'true,false,true,true': [0.838, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.377, 6, 21], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.255, 3, 32]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), tempadvisedby(E, B), publication(F, B)', 'true,false,false': 'publication(J, B), tempadvisedby(K, B), publication(L, K)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(D, I), professor(I)', 'true,false,false,false': 'tempadvisedby(M, B), publication(N, B)', 'true,false,true': 'publication(D, G), tempadvisedby(H, G)', 'true,false,false,false,false': 'publication(P, A), tempadvisedby(Q, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [0.0, 94, 0], 'true,false,false,false,false,false': [0.357, 10, 37], 'true,false,true,true': [0.839, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.182, 0, 4], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true': [0.199, 1, 23]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'student(A) -> director(A)', 'yearsinprogram(A,B) -> genre(A,B)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, G), movie(H, B)', 'true,false,false,false': 'movie(M, B)', 'true,false,true': 'movie(F, B)'}, {'true,false,true,false,true': [0.913, 5, 1], 'true,false,false,true': [0.302, 6, 53], 'false': [7.3e-08, 94, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false': [1.0, 2, 2], 'true,false,false,false,false': [0.49, 4, 6], 'true,true': [2.46e-07, 0, 41], 'true,false,false,false,true': [2.11e-08, 0, 3], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false,false,false,false': 'workedunder(B, M)', 'true,false,false': 'workedunder(B, H), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(B, J), movie(K, B)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [1.155, 2, 4], 'false': [0.0, 94, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false,false,true': [2.11e-08, 0, 6], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.101, 2, 3], 'true,false,false,false,true': [0.2, 1, 23], 'true,false,false,false,false,false,false': [0.39, 8, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, I)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, J), movie(K, J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(E, G), movie(H, G)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, N)', 'true,false,true': 'movie(F, B)'}, {'true,false,true,false,true': [1.043, 2, 3], 'true,false,false,true': [1.155, 2, 4], 'false': [6.66e-08, 94, 0], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,false,false': [1.196, 3, 3], 'true,false,false,false,false': [0.441, 4, 9], 'true,true': [1.46e-07, 0, 41], 'true,false,false,false,true': [0.262, 4, 49], 'true,false,true,false,false,true': [0.894, 4, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false,false,false,false': 'workedunder(B, M)', 'true,false,false': 'movie(H, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(J, K)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.061, 0, 8], 'false': [5.87e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.809, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.106, 2, 3], 'true,false,false,false,true': [0.312, 7, 51], 'true,false,false,false,false,false,false': [0.426, 2, 5]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false': 'workedunder(B, H), genre(H, I), genre(A, I)', 'true,false,false,false,false,true': 'movie(N, M)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(B, J)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(K, A), movie(K, L), workedunder(L, M)'}, {'true,false,false,true': [0.122, 0, 4], 'false': [1.05e-08, 94, 0], 'true,false,false,false,false,false': [0.307, 4, 28], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true,false': [1.06, 3, 2], 'true,false,true,false': [0.866, 1, 3], 'true,true': [2.98e-08, 0, 41], 'true,false,false,false,false,true,true': [0.882, 1, 2], 'true,false,false,false,true': [0.312, 5, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false,false,false,false': 'movie(N, A), movie(N, P), actor(P)', 'true,false,false': 'workedunder(B, H), movie(I, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.251, 0, 4], 'false': [2.79e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [0.734, 2, 1], 'true,false,false,false,true': [0.305, 7, 53], 'true,false,false,false,false,false,false': [0.353, 2, 9]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false': 'workedunder(B, J), movie(K, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, N)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(P, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.23, 0, 4], 'false': [4.34e-08, 94, 0], 'true,false,false,false,false,false': [0.387, 4, 10], 'true,false,true,true': [0.833, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.306, 7, 53]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(B, I), workedunder(H, J)', 'true,false,false,true,false': 'workedunder(B, K)', 'true,false': 'movie(D, A), movie(D, E), workedunder(F, E)', 'true,false,false,true,false,false': 'movie(L, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,false,false,false': 'workedunder(B, M), movie(N, M)'}, {'true,false,false,false,false': [0.291, 8, 58], 'true,false,false,true,false,false,true': [1.123, 2, 3], 'false': [0.0, 94, 0], 'true,false,true': [0.386, 0, 4], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'true,false,false,true,true': [0.865, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [1.136, 2, 4], 'true,false,false,true,false,false,false': [0.734, 2, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false': 'workedunder(B, J), movie(K, J)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'workedunder(B, L)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), director(N)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [3.49e-08, 94, 0], 'true,false,false,false,false,false': [0.253, 2, 11], 'true,false,true,true': [0.838, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.377, 6, 21], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.255, 3, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false': 'movie(J, B), workedunder(B, K), movie(L, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'workedunder(B, M), movie(N, B)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(P, A), workedunder(B, Q)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [0.0, 94, 0], 'true,false,false,false,false,false': [0.357, 10, 37], 'true,false,true,true': [0.839, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.182, 0, 4], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true': [0.199, 1, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,false;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '0;true,false,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(B, G), movie(H, B).;false;true', '0;true,false,false,false;movie(M, B).;false;false', '0;true,false,true;movie(F, B).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '1;true,false,false,false,false,false;workedunder(B, M).;false;false', '1;true,false,false;workedunder(B, H), movie(I, H).;false;true', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,false,false;workedunder(B, J), movie(K, B).;false;true', '1;true,false,true;movie(D, G), actor(G).;false;false', '1;true,false,false,false,false;movie(L, B).;false;true', '2;;workedunder(B, A) :- actor(B), director(A).;true;false', '2;true,false,true,false,false;workedunder(B, I).;false;false', '2;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '2;true,false,false;workedunder(B, J), movie(K, J).;false;true', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;workedunder(E, G), movie(H, G).;false;true', '2;true,false,false,false;movie(L, B), movie(L, M), workedunder(M, N).;false;false', '2;true,false,true;movie(F, B).;false;true', '3;;workedunder(B, A) :- actor(B), director(A).;true;false', '3;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '3;true,false,false,false,false,false;workedunder(B, M).;false;false', '3;true,false,false;movie(H, B).;false;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,false,false;movie(I, B), movie(I, J), workedunder(J, K).;false;true', '3;true,false,true;movie(D, G), actor(G).;false;false', '3;true,false,false,false,false;movie(L, B).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '4;true,false,false;workedunder(B, H), genre(H, I), genre(A, I).;false;true', '4;true,false,false,false,false,true;movie(N, M).;false;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(B, J).;false;true', '4;true,false,true;movie(D, G), actor(G).;false;false', '4;true,false,false,false,false;movie(K, A), movie(K, L), workedunder(L, M).;true;false', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '5;true,false,false,false,false,false;movie(N, A), movie(N, P), actor(P).;false;false', '5;true,false,false;workedunder(B, H), movie(I, A).;false;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '5;true,false,true;movie(D, G), actor(G).;false;false', '5;true,false,false,false,false;movie(M, B).;false;true', '6;;workedunder(B, A) :- actor(B), director(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '6;true,false,false;workedunder(B, J), movie(K, A).;false;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,true,false;movie(D, I), actor(I).;false;false', '6;true,false,false,false;movie(L, B), movie(L, M), workedunder(M, N).;false;true', '6;true,false,true;movie(D, G), workedunder(G, H).;false;true', '6;true,false,false,false,false;movie(P, B).;false;false', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false,false,true;workedunder(B, I), workedunder(H, J).;false;true', '7;true,false,false,true,false;workedunder(B, K).;false;true', '7;true,false;movie(D, A), movie(D, E), workedunder(F, E).;false;true', '7;true,false,false,true,false,false;movie(L, B).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,false;movie(G, A), movie(G, H), actor(H).;true;true', '7;true,false,false,false;workedunder(B, M), movie(N, M).;false;false', '8;;workedunder(B, A) :- actor(B), director(A).;true;false', '8;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '8;true,false,false;workedunder(B, J), movie(K, J).;false;true', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,true,false;movie(D, I), actor(I).;false;false', '8;true,false,false,false;workedunder(B, L).;false;true', '8;true,false,true;movie(D, G), workedunder(G, H).;false;true', '8;true,false,false,false,false;movie(M, B), movie(M, N), director(N).;false;false', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '9;true,false,false;movie(J, B), workedunder(B, K), movie(L, K).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(D, I), actor(I).;false;false', '9;true,false,false,false;workedunder(B, M), movie(N, B).;false;true', '9;true,false,true;movie(D, G), workedunder(G, H).;false;true', '9;true,false,false,false,false;movie(P, A), workedunder(B, Q).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 2,58e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I), movie(J, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(K, A) )
%   | | | | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360642;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), genre(G, H), genre(B, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, B), movie(J, K), workedunder(K, L) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926098;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(J, K) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A) )
%   | | | | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 2,24e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(J, K) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A) )
%   | | | | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109176;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), movie(G, H), actor(H) )
%   | | | then if ( workedunder(A, I), workedunder(H, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, K) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, A) )
%   | | | | | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, A), movie(J, K), director(K) )
%   | | | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), workedunder(A, H), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, J), movie(K, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B), workedunder(A, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.029 seconds
Total inference time: 0.357 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'movie(F, A)'}, {'false': [2.58e-08, 39, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [2.23e-07, 0, 45], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'workedunder(A, G), movie(H, G)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(A, I), movie(J, A)', 'true,false,false,false,false': 'movie(K, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 6, 0], 'true,true': [0.0, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'movie(F, A)'}, {'false': [0.0, 39, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 45], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'movie(G, A)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,false,true': [0.0, 6, 0], 'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), genre(G, H), genre(B, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, I)', 'true,false,false,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [2.98e-08, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [2.63e-09, 6, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), movie(H, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true,false,false,false,false': 'movie(L, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [2.24e-08, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [2.63e-09, 6, 0], 'true,true': [0.0, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), movie(H, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true,false,false,false,false': 'movie(L, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 6, 0], 'true,true': [5.58e-08, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,false,true': 'workedunder(A, I), workedunder(H, J)', 'true,false': 'movie(D, B), movie(D, E), workedunder(F, E)', 'true,false,false,true,false': 'workedunder(A, K)', 'true,false,false,true,false,false': 'movie(L, A)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true': 'movie(C, B), movie(C, A)'}, {'true,false,false,true,false,false,true': [0.0, 6, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [7.45e-09, 39, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'workedunder(A, G), movie(H, G)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, I)', 'true,false,false,false,false': 'movie(J, A), movie(J, K), director(K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [1.86e-09, 6, 0], 'true,true': [0.0, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'movie(G, A), workedunder(A, H), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, J), movie(K, A)', 'true,false,false,false,false': 'movie(L, B), workedunder(A, M)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 39, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [2.36e-08, 0, 45], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 6, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false;movie(D, B), movie(D, E), actor(E).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '2;;workedunder(A, B) :- actor(A), director(B).;true;false', '2;true;movie(C, A), movie(C, B).;false;true', '2;true,false;movie(D, B), movie(D, E), actor(E).;false;false', '3;;workedunder(A, B) :- actor(A), director(B).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;true', '4;true,false,false;workedunder(A, G), genre(G, H), genre(B, H).;false;true', '4;true;movie(C, B), movie(C, A).;false;true', '4;true,false,false,false;workedunder(A, I).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;true;false', '5;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '5;true;movie(C, B), movie(C, A).;false;true', '6;;workedunder(A, B) :- actor(A), director(B).;true;false', '6;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '6;true;movie(C, B), movie(C, A).;false;true', '7;;workedunder(A, B) :- actor(A), director(B).;true;false', '7;true,false;movie(D, B), movie(D, E), workedunder(F, E).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '8;;workedunder(A, B) :- actor(A), director(B).;true;false', '8;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;true', '9;true,false,false;movie(G, A), workedunder(A, H), movie(I, H).;false;true', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false,false;workedunder(A, J), movie(K, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #4: [('true,false,false,false', 0), ('true,false,true', 0)]
Tree #5: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #8: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0), ('true,false,false,true,false,false,false', 0)]
Tree #9: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #10: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 2,58e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360642;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783635;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), genre(G, H), genre(B, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926098;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 2,24e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109176;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420275;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), workedunder(A, H), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, J), movie(K, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.368 seconds
Total inference time: 0.407 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 5.161
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.698 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: transfer, Total folds for small set: 1, Time: 00:05:41
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.698, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 5.161, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.364579916000366, 'Generating mappings time': 0.46625566482543945, 'Knowledge compiling time': 0.042087554931640625, 'Total time': 5.775496959686279, 'Finding best mapping': 2.9025678634643555}, 'CLL': -0.094637}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1418510649004877;  // std dev = 3,65e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839133;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360639;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783635;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839682;  // std dev = 2,11e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07877675473109176;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420272;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202622;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
Results
   AUC ROC   = 0.985955
   AUC PR    = 0.972678
   CLL	      = -0.123634
   Precision = 0.972678 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.98615


Total learning time: 1.54 seconds
Total inference time: 0.609 seconds
AUC ROC: 0.985955


Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: scratch, Total folds for small set: 1, Time: 00:05:43
{'AUC PR': 0.972678, 'F1': 0.98615, 'Inference time': 0.609, 'Recall': 1.0, 'Precision': [0.972678, 0.5], 'AUC ROC': 0.985955, 'Learning time': 1.54, 'CLL': -0.123634}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'yearsinprogram(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,false,false': 'genre(B, M)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.913, 5, 1], 'true,false,false,true': [0.302, 6, 53], 'false': [7.3e-08, 94, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false': [1.0, 2, 2], 'true,false,false,false,false': [0.49, 4, 6], 'true,true': [2.46e-07, 0, 41], 'true,false,false,false,true': [2.11e-08, 0, 3], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false,false,false,false': 'workedunder(M, B)', 'true,false,false': 'workedunder(H, B), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(J, B), movie(K, B)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'genre(B, L)'}, {'true,false,false,true': [1.155, 2, 4], 'false': [0.0, 94, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false,false,true': [2.11e-08, 0, 6], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.101, 2, 3], 'true,false,false,false,true': [0.2, 1, 23], 'true,false,false,false,false,false,false': [0.39, 8, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(J, B), movie(K, J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(N, M)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.043, 2, 3], 'true,false,false,true': [1.155, 2, 4], 'false': [6.66e-08, 94, 0], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,false,false': [1.196, 3, 3], 'true,false,false,false,false': [0.441, 4, 9], 'true,true': [1.46e-07, 0, 41], 'true,false,false,false,true': [0.262, 4, 49], 'true,false,true,false,false,true': [0.894, 4, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false,false,false,false': 'workedunder(M, B)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.061, 0, 8], 'false': [5.87e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.809, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.106, 2, 3], 'true,false,false,false,true': [0.312, 7, 51], 'true,false,false,false,false,false,false': [0.426, 2, 5]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(H, B), movie(I, H), movie(I, A)', 'true,false,false,false,false,true': 'movie(N, M)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(J, B)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(K, A), movie(K, L), workedunder(M, L)'}, {'true,false,false,true': [0.122, 0, 4], 'false': [1.05e-08, 94, 0], 'true,false,false,false,false,false': [0.307, 4, 28], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true,false': [1.06, 3, 2], 'true,false,true,false': [0.866, 1, 3], 'true,true': [2.98e-08, 0, 41], 'true,false,false,false,false,true,true': [0.882, 1, 2], 'true,false,false,false,true': [0.312, 5, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false,false,false,false': 'movie(N, A), movie(N, P), director(P)', 'true,false,false': 'workedunder(H, B), movie(I, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.251, 0, 4], 'false': [2.79e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [0.734, 2, 1], 'true,false,false,false,true': [0.305, 7, 53], 'true,false,false,false,false,false,false': [0.353, 2, 9]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(J, B), movie(K, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(P, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.23, 0, 4], 'false': [4.34e-08, 94, 0], 'true,false,false,false,false,false': [0.387, 4, 10], 'true,false,true,true': [0.833, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.306, 7, 53]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, B), workedunder(J, H)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false,true,false,false': 'movie(L, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,false,false': 'workedunder(M, B), movie(N, M)'}, {'true,false,false,false,false': [0.291, 8, 58], 'true,false,false,true,false,false,true': [1.123, 2, 3], 'false': [0.0, 94, 0], 'true,false,true': [0.386, 0, 4], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'true,false,false,true,true': [0.865, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [1.136, 2, 4], 'true,false,false,true,false,false,false': [0.734, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(J, B), movie(K, J)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'workedunder(L, B)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [3.49e-08, 94, 0], 'true,false,false,false,false,false': [0.253, 2, 11], 'true,false,true,true': [0.838, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.377, 6, 21], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.255, 3, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'movie(J, B), workedunder(K, B), movie(L, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'workedunder(M, B), movie(N, B)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(P, A), workedunder(Q, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [0.0, 94, 0], 'true,false,false,false,false,false': [0.357, 10, 37], 'true,false,true,true': [0.839, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.182, 0, 4], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true': [0.199, 1, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,false,false;genre(B, M).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '1;true,false,false,false,false,false;workedunder(M, B).;false;false', '1;true,false,false;workedunder(H, B), movie(I, H).;false;true', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,false,false;workedunder(J, B), movie(K, B).;false;true', '1;true,false,true;movie(D, G), director(G).;false;false', '1;true,false,false,false,false;genre(B, L).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(I, B).;false;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;workedunder(J, B), movie(K, J).;false;true', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '2;true,false,false,false;movie(L, B), movie(L, M), workedunder(N, M).;false;false', '2;true,false,true;genre(B, F).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '3;true,false,false,false,false,false;workedunder(M, B).;false;false', '3;true,false,false;genre(B, H).;false;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,false,false;movie(I, B), movie(I, J), workedunder(K, J).;false;true', '3;true,false,true;movie(D, G), director(G).;false;false', '3;true,false,false,false,false;movie(L, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '4;true,false,false;workedunder(H, B), movie(I, H), movie(I, A).;false;true', '4;true,false,false,false,false,true;movie(N, M).;false;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(J, B).;false;true', '4;true,false,true;movie(D, G), director(G).;false;false', '4;true,false,false,false,false;movie(K, A), movie(K, L), workedunder(M, L).;true;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '5;true,false,false,false,false,false;movie(N, A), movie(N, P), director(P).;false;false', '5;true,false,false;workedunder(H, B), movie(I, A).;false;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '5;true,false,true;movie(D, G), director(G).;false;false', '5;true,false,false,false,false;movie(M, B).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '6;true,false,false;workedunder(J, B), movie(K, A).;false;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,true,false;movie(D, I), director(I).;false;false', '6;true,false,false,false;movie(L, B), movie(L, M), workedunder(N, M).;false;true', '6;true,false,true;movie(D, G), workedunder(H, G).;false;true', '6;true,false,false,false,false;movie(P, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,false,true;workedunder(I, B), workedunder(J, H).;false;true', '7;true,false,false,true,false;workedunder(K, B).;false;true', '7;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;true', '7;true,false,false,true,false,false;movie(L, B).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,false;movie(G, A), movie(G, H), director(H).;true;true', '7;true,false,false,false;workedunder(M, B), movie(N, M).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '8;true,false,false;workedunder(J, B), movie(K, J).;false;true', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,true,false;movie(D, I), director(I).;false;false', '8;true,false,false,false;workedunder(L, B).;false;true', '8;true,false,true;movie(D, G), workedunder(H, G).;false;true', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '9;true,false,false;movie(J, B), workedunder(K, B), movie(L, K).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(D, I), director(I).;false;false', '9;true,false,false,false;workedunder(M, B), movie(N, B).;false;true', '9;true,false,true;movie(D, G), workedunder(H, G).;false;true', '9;true,false,false,false,false;movie(P, A), workedunder(Q, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B), movie(J, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, K) )
%   | | | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G) )
%   | | | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, A), movie(J, K), workedunder(L, K) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.092691276189261;  // std dev = 3,94e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, B), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B) )
%   | | | | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, B), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B) )
%   | | | | | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), movie(G, H), director(H) )
%   | | | then if ( workedunder(I, B), workedunder(J, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, B), movie(J, K), actor(K) )
%   | | | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,65e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(H, B), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A), workedunder(M, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202626;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.413 seconds
Total inference time: 0.46 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [8.69e-08, 98, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [4.46e-07, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(I, B), movie(J, B)', 'true,false,false,false,false': 'genre(B, K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 5, 0], 'true,true': [0.0, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [7.88e-08, 98, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [4.3e-07, 0, 103], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'genre(B, G)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [4.71e-08, 98, 0], 'true,false,false,true': [0.0, 5, 0], 'true,true': [2.6e-07, 0, 103], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,false': 'movie(J, A), movie(J, K), workedunder(L, K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [3.94e-08, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [5.58e-08, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 5, 0], 'true,true': [0.0, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [5.58e-08, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 5, 0], 'true,true': [1.46e-07, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, B), workedunder(J, H)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,false,false,true,false,false': 'movie(L, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 5, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 98, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [5.16e-08, 0, 103], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,false': 'movie(J, B), movie(J, K), actor(K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [4.65e-08, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [1.86e-09, 5, 0], 'true,true': [0.0, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'movie(G, B), workedunder(H, B), movie(I, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,false,false': 'movie(L, A), workedunder(M, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 98, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [6.83e-08, 0, 103], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 5, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;true', '4;true,false,false;workedunder(G, B), movie(H, G), movie(H, A).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(I, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '5;true;movie(C, A), movie(C, B).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '6;true;movie(C, A), movie(C, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;true', '9;true,false,false;movie(G, B), workedunder(H, B), movie(I, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,false,false;workedunder(J, B), movie(K, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #4: [('true,false,false,false', 0), ('true,false,true', 0)]
Tree #5: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #8: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0), ('true,false,false,true,false,false,false', 0)]
Tree #9: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #10: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.092691276189261;  // std dev = 3,94e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420265;  // std dev = 4,65e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(H, B), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202626;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.56 seconds
Total inference time: 0.444 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 7.877000000000001
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095049
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.74 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: transfer, Total folds for small set: 2, Time: 00:06:00
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.74, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 7.877000000000001, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.5705649852752686, 'Generating mappings time': 0.602583646774292, 'Knowledge compiling time': 0.016062498092651367, 'Total time': 6.385755777359009, 'Finding best mapping': 3.196537733078003}, 'CLL': -0.095049}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.14185106490048766;  // std dev = 8,69e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.12544463852839138;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.11231637819360621;  // std dev = 7,88e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.10159632948783626;  // std dev = 4,47e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.09269127618926098;  // std dev = 4,21e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.08518475138839683;  // std dev = 5,27e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.0787767547310916;  // std dev = 5,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.07324622576333707;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.06842697784420265;  // std dev = 4,59e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return -0.06419184008202626;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
Results
   AUC ROC   = 0.985955
   AUC PR    = 0.972678
   CLL	      = -0.123634
   Precision = 0.972678 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.98615


Total learning time: 2.208 seconds
Total inference time: 0.656 seconds
AUC ROC: 0.985955


Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: scratch, Total folds for small set: 2, Time: 00:06:03
{'AUC PR': 0.972678, 'F1': 0.98615, 'Inference time': 0.656, 'Recall': 1.0, 'Precision': [0.972678, 0.5], 'AUC ROC': 0.985955, 'Learning time': 2.208, 'CLL': -0.123634}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'yearsinprogram(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, B), movie(H, B)', 'true,false,false,false': 'genre(B, M)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.913, 5, 1], 'true,false,false,true': [0.302, 6, 53], 'false': [7.3e-08, 94, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false': [1.0, 2, 2], 'true,false,false,false,false': [0.49, 4, 6], 'true,true': [2.46e-07, 0, 41], 'true,false,false,false,true': [2.11e-08, 0, 3], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false,false,false,false': 'workedunder(M, B)', 'true,false,false': 'workedunder(H, B), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(J, B), movie(K, B)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'genre(B, L)'}, {'true,false,false,true': [1.155, 2, 4], 'false': [0.0, 94, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false,false,true': [2.11e-08, 0, 6], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.101, 2, 3], 'true,false,false,false,true': [0.2, 1, 23], 'true,false,false,false,false,false,false': [0.39, 8, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'workedunder(J, B), movie(K, J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(G, E), movie(H, G)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(N, M)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [1.043, 2, 3], 'true,false,false,true': [1.155, 2, 4], 'false': [6.66e-08, 94, 0], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,false,false': [1.196, 3, 3], 'true,false,false,false,false': [0.441, 4, 9], 'true,true': [1.46e-07, 0, 41], 'true,false,false,false,true': [0.262, 4, 49], 'true,false,true,false,false,true': [0.894, 4, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false,false,false,false': 'workedunder(M, B)', 'true,false,false': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.061, 0, 8], 'false': [5.87e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.809, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.106, 2, 3], 'true,false,false,false,true': [0.312, 7, 51], 'true,false,false,false,false,false,false': [0.426, 2, 5]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(H, B), movie(I, H), movie(I, A)', 'true,false,false,false,false,true': 'movie(N, M)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(J, B)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(K, A), movie(K, L), workedunder(M, L)'}, {'true,false,false,true': [0.122, 0, 4], 'false': [1.05e-08, 94, 0], 'true,false,false,false,false,false': [0.307, 4, 28], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true,false': [1.06, 3, 2], 'true,false,true,false': [0.866, 1, 3], 'true,true': [2.98e-08, 0, 41], 'true,false,false,false,false,true,true': [0.882, 1, 2], 'true,false,false,false,true': [0.312, 5, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false,false,false,false': 'movie(N, A), movie(N, P), director(P)', 'true,false,false': 'workedunder(H, B), movie(I, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true,false,true': 'movie(D, G), director(G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.251, 0, 4], 'false': [2.79e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [0.734, 2, 1], 'true,false,false,false,true': [0.305, 7, 53], 'true,false,false,false,false,false,false': [0.353, 2, 9]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(J, B), movie(K, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(N, M)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(P, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.23, 0, 4], 'false': [4.34e-08, 94, 0], 'true,false,false,false,false,false': [0.387, 4, 10], 'true,false,true,true': [0.833, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.306, 7, 53]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, B), workedunder(J, H)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false,true,false,false': 'movie(L, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true,false,false,false': 'workedunder(M, B), movie(N, M)'}, {'true,false,false,false,false': [0.291, 8, 58], 'true,false,false,true,false,false,true': [1.123, 2, 3], 'false': [0.0, 94, 0], 'true,false,true': [0.386, 0, 4], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'true,false,false,true,true': [0.865, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [1.136, 2, 4], 'true,false,false,true,false,false,false': [0.734, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(J, B), movie(K, J)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'workedunder(L, B)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [3.49e-08, 94, 0], 'true,false,false,false,false,false': [0.253, 2, 11], 'true,false,true,true': [0.838, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.377, 6, 21], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.255, 3, 32]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'movie(J, B), workedunder(K, B), movie(L, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), director(I)', 'true,false,false,false': 'workedunder(M, B), movie(N, B)', 'true,false,true': 'movie(D, G), workedunder(H, G)', 'true,false,false,false,false': 'movie(P, A), workedunder(Q, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [0.0, 94, 0], 'true,false,false,false,false,false': [0.357, 10, 37], 'true,false,true,true': [0.839, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.182, 0, 4], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true': [0.199, 1, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(G, B), movie(H, B).;false;true', '0;true,false,false,false;genre(B, M).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '1;true,false,false,false,false,false;workedunder(M, B).;false;false', '1;true,false,false;workedunder(H, B), movie(I, H).;false;true', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,false,false;workedunder(J, B), movie(K, B).;false;true', '1;true,false,true;movie(D, G), director(G).;false;false', '1;true,false,false,false,false;genre(B, L).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,true,false,false;workedunder(I, B).;false;false', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;workedunder(J, B), movie(K, J).;false;true', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;workedunder(G, E), movie(H, G).;false;true', '2;true,false,false,false;movie(L, B), movie(L, M), workedunder(N, M).;false;false', '2;true,false,true;genre(B, F).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '3;true,false,false,false,false,false;workedunder(M, B).;false;false', '3;true,false,false;genre(B, H).;false;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,false,false;movie(I, B), movie(I, J), workedunder(K, J).;false;true', '3;true,false,true;movie(D, G), director(G).;false;false', '3;true,false,false,false,false;movie(L, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '4;true,false,false;workedunder(H, B), movie(I, H), movie(I, A).;false;true', '4;true,false,false,false,false,true;movie(N, M).;false;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(J, B).;false;true', '4;true,false,true;movie(D, G), director(G).;false;false', '4;true,false,false,false,false;movie(K, A), movie(K, L), workedunder(M, L).;true;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '5;true,false,false,false,false,false;movie(N, A), movie(N, P), director(P).;false;false', '5;true,false,false;workedunder(H, B), movie(I, A).;false;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '5;true,false,true;movie(D, G), director(G).;false;false', '5;true,false,false,false,false;movie(M, B).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(F, B).;true;true', '6;true,false,false;workedunder(J, B), movie(K, A).;false;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,true,false;movie(D, I), director(I).;false;false', '6;true,false,false,false;movie(L, B), movie(L, M), workedunder(N, M).;false;true', '6;true,false,true;movie(D, G), workedunder(H, G).;false;true', '6;true,false,false,false,false;movie(P, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,false,true;workedunder(I, B), workedunder(J, H).;false;true', '7;true,false,false,true,false;workedunder(K, B).;false;true', '7;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;true', '7;true,false,false,true,false,false;movie(L, B).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,false;movie(G, A), movie(G, H), director(H).;true;true', '7;true,false,false,false;workedunder(M, B), movie(N, M).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '8;true,false,false;workedunder(J, B), movie(K, J).;false;true', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,true,false;movie(D, I), director(I).;false;false', '8;true,false,false,false;workedunder(L, B).;false;true', '8;true,false,true;movie(D, G), workedunder(H, G).;false;true', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), workedunder(E, B), movie(F, B).;true;true', '9;true,false,false;movie(J, B), workedunder(K, B), movie(L, K).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(D, I), director(I).;false;false', '9;true,false,false,false;workedunder(M, B), movie(N, B).;false;true', '9;true,false,true;movie(D, G), workedunder(H, G).;false;true', '9;true,false,false,false,false;movie(P, A), workedunder(Q, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995097;  // std dev = 9,90e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004881;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B), movie(J, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, K) )
%   | | | | | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283913;  // std dev = 4,71e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462833;  // std dev = 5,46e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360625;  // std dev = 9,19e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158309;  // std dev = 4,54e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G) )
%   | | | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783646;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014967;  // std dev = 3,10e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, A), movie(J, K), workedunder(L, K) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0926912761892607;  // std dev = 7,74e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949056;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, B), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B) )
%   | | | | | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,66e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253517;  // std dev = 2,60e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, B), movie(I, J), workedunder(K, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B) )
%   | | | | | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109151;  // std dev = 8,23e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), movie(G, H), director(H) )
%   | | | then if ( workedunder(I, B), workedunder(J, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(K, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, B) )
%   | | | | | | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633368;  // std dev = 8,36e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, B), movie(J, K), actor(K) )
%   | | | | | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 6,83e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,19e-08, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(H, B), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A), workedunder(M, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202626;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.944 seconds
Total inference time: 0.51 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [0.0, 152, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [9.9e-07, 0, 159], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(I, B), movie(J, B)', 'true,false,false,false,false': 'genre(B, K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [4.71e-08, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 7, 0], 'true,true': [0.0, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [9.19e-08, 152, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [5.46e-07, 0, 159], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'genre(B, G)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 152, 0], 'true,false,false,true': [0.0, 7, 0], 'true,true': [4.54e-07, 0, 159], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,false': 'movie(J, A), movie(J, K), workedunder(L, K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [7.74e-08, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [3.1e-07, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [6.66e-08, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [2.63e-09, 7, 0], 'true,true': [0.0, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(K, J)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [8.23e-08, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 7, 0], 'true,true': [2.6e-07, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(I, B), workedunder(J, H)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false,true,false': 'workedunder(K, B)', 'true,false,false,true,false,false': 'movie(L, B)', 'true,false,false': 'movie(G, A), movie(G, H), director(H)', 'true': 'movie(C, A), movie(C, B)'}, {'true,false,false,true,false,false,true': [2.63e-09, 7, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [8.36e-08, 152, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 159], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,false': 'movie(J, B), movie(J, K), actor(K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [6.83e-08, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [2.63e-09, 7, 0], 'true,true': [0.0, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), workedunder(E, B), movie(F, B)', 'true,false,false': 'movie(G, B), workedunder(H, B), movie(I, H)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(J, B), movie(K, B)', 'true,false,false,false,false': 'movie(L, A), workedunder(M, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 152, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [9.19e-08, 0, 159], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 7, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;false', '1;true;movie(C, B), movie(C, A).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;true', '4;true,false,false;workedunder(G, B), movie(H, G), movie(H, A).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(I, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '5;true;movie(C, A), movie(C, B).;false;true', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(F, B).;false;false', '6;true;movie(C, A), movie(C, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;false', '8;true;movie(C, A), movie(C, B).;false;true', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), workedunder(E, B), movie(F, B).;false;true', '9;true,false,false;movie(G, B), workedunder(H, B), movie(I, H).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,false,false;workedunder(J, B), movie(K, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #4: [('true,false,false,false', 0), ('true,false,true', 0)]
Tree #5: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #8: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0), ('true,false,false,true,false,false,false', 0)]
Tree #9: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #10: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995097;  // std dev = 9,90e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004881;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1254446385283913;  // std dev = 4,71e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462833;  // std dev = 5,46e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360625;  // std dev = 9,19e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158309;  // std dev = 4,54e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783646;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014967;  // std dev = 3,10e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G), movie(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0926912761892607;  // std dev = 7,74e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949056;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 6,66e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253517;  // std dev = 2,60e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(E, B), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109151;  // std dev = 8,23e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0732462257633368;  // std dev = 8,36e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420264;  // std dev = 6,83e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,19e-08, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( movie(D, A), workedunder(E, B), movie(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(H, B), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(J, B), movie(K, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202626;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.482 seconds
Total inference time: 0.362 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 4.298
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095049
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.66 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: transfer, Total folds for small set: 3, Time: 00:06:16
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.66, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.298, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.6464803218841553, 'Generating mappings time': 0.5999672412872314, 'Knowledge compiling time': 0.017946720123291016, 'Total time': 6.500923156738281, 'Finding best mapping': 3.2365219593048096}, 'CLL': -0.095049}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995097;  // std dev = 9,90e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.14185106490048807;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109564;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.1254446385283913;  // std dev = 4,71e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462833;  // std dev = 5,46e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.11231637819360626;  // std dev = 9,19e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.417513584158309;  // std dev = 4,54e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.10159632948783645;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 3,10e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.0926912761892607;  // std dev = 7,88e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256949056;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.08518475138839679;  // std dev = 6,50e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253517;  // std dev = 2,60e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.07877675473109153;  // std dev = 8,16e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1770964977452782;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.07324622576333682;  // std dev = 8,23e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367147;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.06842697784420264;  // std dev = 6,75e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1340070300080108;  // std dev = 9,19e-08, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   else return -0.06419184008202626;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
Results
   AUC ROC   = 0.985955
   AUC PR    = 0.972678
   CLL	      = -0.123634
   Precision = 0.972678 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.98615


Total learning time: 2.309 seconds
Total inference time: 0.625 seconds
AUC ROC: 0.985955


Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: scratch, Total folds for small set: 3, Time: 00:06:19
{'AUC PR': 0.972678, 'F1': 0.98615, 'Inference time': 0.625, 'Recall': 1.0, 'Precision': [0.972678, 0.5], 'AUC ROC': 0.985955, 'Learning time': 2.309, 'CLL': -0.123634}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'student(A) -> director(A)', 'yearsinprogram(A,B) -> genre(A,B)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(B, G), movie(H, B)', 'true,false,false,false': 'movie(M, B)', 'true,false,true': 'movie(F, B)'}, {'true,false,true,false,true': [0.913, 5, 1], 'true,false,false,true': [0.302, 6, 53], 'false': [7.3e-08, 94, 0], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,false,false': [1.0, 2, 2], 'true,false,false,false,false': [0.49, 4, 6], 'true,true': [2.46e-07, 0, 41], 'true,false,false,false,true': [2.11e-08, 0, 3], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false,false,false,false': 'workedunder(B, M)', 'true,false,false': 'workedunder(B, H), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(B, J), movie(K, B)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [1.155, 2, 4], 'false': [0.0, 94, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false,false,true': [2.11e-08, 0, 6], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.101, 2, 3], 'true,false,false,false,true': [0.2, 1, 23], 'true,false,false,false,false,false,false': [0.39, 8, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, I)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'workedunder(B, J), movie(K, J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'workedunder(E, G), movie(H, G)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, N)', 'true,false,true': 'movie(F, B)'}, {'true,false,true,false,true': [1.043, 2, 3], 'true,false,false,true': [1.155, 2, 4], 'false': [6.66e-08, 94, 0], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,false,false': [1.196, 3, 3], 'true,false,false,false,false': [0.441, 4, 9], 'true,true': [1.46e-07, 0, 41], 'true,false,false,false,true': [0.262, 4, 49], 'true,false,true,false,false,true': [0.894, 4, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false,false,false,false': 'workedunder(B, M)', 'true,false,false': 'movie(H, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(I, B), movie(I, J), workedunder(J, K)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(L, B)'}, {'true,false,false,true': [0.061, 0, 8], 'false': [5.87e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.809, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [1.106, 2, 3], 'true,false,false,false,true': [0.312, 7, 51], 'true,false,false,false,false,false,false': [0.426, 2, 5]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false': 'workedunder(B, H), genre(H, I), genre(A, I)', 'true,false,false,false,false,true': 'movie(N, M)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(B, J)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(K, A), movie(K, L), workedunder(L, M)'}, {'true,false,false,true': [0.122, 0, 4], 'false': [1.05e-08, 94, 0], 'true,false,false,false,false,false': [0.307, 4, 28], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true,false': [1.06, 3, 2], 'true,false,true,false': [0.866, 1, 3], 'true,true': [2.98e-08, 0, 41], 'true,false,false,false,false,true,true': [0.882, 1, 2], 'true,false,false,false,true': [0.312, 5, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false,false,false,false': 'movie(N, A), movie(N, P), actor(P)', 'true,false,false': 'workedunder(B, H), movie(I, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true,false,true': 'movie(D, G), actor(G)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,false,false,true': [0.251, 0, 4], 'false': [2.79e-08, 94, 0], 'true,false,true,true': [0.921, 5, 1], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,false,true,false': [0.866, 1, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false,true': [0.734, 2, 1], 'true,false,false,false,true': [0.305, 7, 53], 'true,false,false,false,false,false,false': [0.353, 2, 9]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), movie(E, B), workedunder(B, F)', 'true,false,false': 'workedunder(B, J), movie(K, A)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, N)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(P, B)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.23, 0, 4], 'false': [4.34e-08, 94, 0], 'true,false,false,false,false,false': [0.387, 4, 10], 'true,false,true,true': [0.833, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.826, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,false,true': [0.306, 7, 53]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(B, I), workedunder(H, J)', 'true,false,false,true,false': 'workedunder(B, K)', 'true,false': 'movie(D, A), movie(D, E), workedunder(F, E)', 'true,false,false,true,false,false': 'movie(L, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(G, A), movie(G, H), actor(H)', 'true,false,false,false': 'workedunder(B, M), movie(N, M)'}, {'true,false,false,false,false': [0.291, 8, 58], 'true,false,false,true,false,false,true': [1.123, 2, 3], 'false': [0.0, 94, 0], 'true,false,true': [0.386, 0, 4], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'true,false,false,true,true': [0.865, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [1.136, 2, 4], 'true,false,false,true,false,false,false': [0.734, 2, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false': 'workedunder(B, J), movie(K, J)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'workedunder(B, L)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), director(N)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [3.49e-08, 94, 0], 'true,false,false,false,false,false': [0.253, 2, 11], 'true,false,true,true': [0.838, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.377, 6, 21], 'true,true': [0.0, 0, 41], 'true,false,false,false,true': [0.255, 3, 32]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(D, A), workedunder(B, E), movie(F, B)', 'true,false,false': 'movie(J, B), workedunder(B, K), movie(L, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(D, I), actor(I)', 'true,false,false,false': 'workedunder(B, M), movie(N, B)', 'true,false,true': 'movie(D, G), workedunder(G, H)', 'true,false,false,false,false': 'movie(P, A), workedunder(B, Q)'}, {'true,false,true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.136, 2, 4], 'false': [0.0, 94, 0], 'true,false,false,false,false,false': [0.357, 10, 37], 'true,false,true,true': [0.839, 2, 1], 'true,false,true,false,false': [0.866, 1, 3], 'true,false,false,false,false,true': [0.182, 0, 4], 'true,true': [1.83e-08, 0, 41], 'true,false,false,false,true': [0.199, 1, 23]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,false;movie(I, B).;false;false', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '0;true,false,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true,false;workedunder(B, G), movie(H, B).;false;true', '0;true,false,false,false;movie(M, B).;false;false', '0;true,false,true;movie(F, B).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '1;true,false,false,false,false,false;workedunder(B, M).;false;false', '1;true,false,false;workedunder(B, H), movie(I, H).;false;true', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false,false,false;workedunder(B, J), movie(K, B).;false;true', '1;true,false,true;movie(D, G), actor(G).;false;false', '1;true,false,false,false,false;movie(L, B).;false;true', '2;;workedunder(B, A) :- actor(B), director(A).;true;false', '2;true,false,true,false,false;workedunder(B, I).;false;false', '2;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '2;true,false,false;workedunder(B, J), movie(K, J).;false;true', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false,true,false;workedunder(E, G), movie(H, G).;false;true', '2;true,false,false,false;movie(L, B), movie(L, M), workedunder(M, N).;false;false', '2;true,false,true;movie(F, B).;false;true', '3;;workedunder(B, A) :- actor(B), director(A).;true;false', '3;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '3;true,false,false,false,false,false;workedunder(B, M).;false;false', '3;true,false,false;movie(H, B).;false;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,false,false;movie(I, B), movie(I, J), workedunder(J, K).;false;true', '3;true,false,true;movie(D, G), actor(G).;false;false', '3;true,false,false,false,false;movie(L, B).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '4;true,false,false;workedunder(B, H), genre(H, I), genre(A, I).;false;true', '4;true,false,false,false,false,true;movie(N, M).;false;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,false;workedunder(B, J).;false;true', '4;true,false,true;movie(D, G), actor(G).;false;false', '4;true,false,false,false,false;movie(K, A), movie(K, L), workedunder(L, M).;true;false', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '5;true,false,false,false,false,false;movie(N, A), movie(N, P), actor(P).;false;false', '5;true,false,false;workedunder(B, H), movie(I, A).;false;true', '5;true;movie(C, A), movie(C, B).;false;true', '5;true,false,false,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '5;true,false,true;movie(D, G), actor(G).;false;false', '5;true,false,false,false,false;movie(M, B).;false;true', '6;;workedunder(B, A) :- actor(B), director(A).;true;false', '6;true,false;movie(D, A), movie(E, B), workedunder(B, F).;true;true', '6;true,false,false;workedunder(B, J), movie(K, A).;false;true', '6;true;movie(C, A), movie(C, B).;false;true', '6;true,false,true,false;movie(D, I), actor(I).;false;false', '6;true,false,false,false;movie(L, B), movie(L, M), workedunder(M, N).;false;true', '6;true,false,true;movie(D, G), workedunder(G, H).;false;true', '6;true,false,false,false,false;movie(P, B).;false;false', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false,false,true;workedunder(B, I), workedunder(H, J).;false;true', '7;true,false,false,true,false;workedunder(B, K).;false;true', '7;true,false;movie(D, A), movie(D, E), workedunder(F, E).;false;true', '7;true,false,false,true,false,false;movie(L, B).;false;false', '7;true;movie(C, A), movie(C, B).;false;true', '7;true,false,false;movie(G, A), movie(G, H), actor(H).;true;true', '7;true,false,false,false;workedunder(B, M), movie(N, M).;false;false', '8;;workedunder(B, A) :- actor(B), director(A).;true;false', '8;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '8;true,false,false;workedunder(B, J), movie(K, J).;false;true', '8;true;movie(C, A), movie(C, B).;false;true', '8;true,false,true,false;movie(D, I), actor(I).;false;false', '8;true,false,false,false;workedunder(B, L).;false;true', '8;true,false,true;movie(D, G), workedunder(G, H).;false;true', '8;true,false,false,false,false;movie(M, B), movie(M, N), director(N).;false;false', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false;movie(D, A), workedunder(B, E), movie(F, B).;true;true', '9;true,false,false;movie(J, B), workedunder(B, K), movie(L, K).;false;true', '9;true;movie(C, A), movie(C, B).;false;true', '9;true,false,true,false;movie(D, I), actor(I).;false;false', '9;true,false,false,false;workedunder(B, M), movie(N, B).;false;true', '9;true,false,true;movie(D, G), workedunder(G, H).;false;true', '9;true,false,false,false,false;movie(P, A), workedunder(B, Q).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004883;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I), movie(J, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(K, A) )
%   | | | | | then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936065;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), genre(G, H), genre(B, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, B), movie(J, K), workedunder(K, L) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.09269127618926061;  // std dev = 8,69e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(J, K) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A) )
%   | | | | | then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(I, A), movie(I, J), workedunder(J, K) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, A) )
%   | | | | | then return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 7,60e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), movie(G, H), actor(H) )
%   | | | then if ( workedunder(A, I), workedunder(H, J) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, K) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( movie(L, A) )
%   | | | | | | then return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333671;  // std dev = 1,07e-07, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(J, A), movie(J, K), director(K) )
%   | | | | | then return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 7,67e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), workedunder(A, H), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, J), movie(K, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( movie(L, B), workedunder(A, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202626;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.241 seconds
Total inference time: 0.573 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'movie(F, A)'}, {'false': [0.0, 195, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [1.08e-06, 0, 204], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'workedunder(A, G), movie(H, G)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,false': 'workedunder(A, I), movie(J, A)', 'true,false,false,false,false': 'movie(K, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 9, 0], 'true,true': [0.0, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true': 'movie(F, A)'}, {'false': [0.0, 195, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [6.36e-07, 0, 204], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'movie(G, A)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 195, 0], 'true,false,false,true': [5.27e-09, 9, 0], 'true,true': [2.53e-07, 0, 204], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), genre(G, H), genre(B, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, I)', 'true,false,false,false,false': 'movie(J, B), movie(J, K), workedunder(K, L)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [8.69e-08, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [4e-07, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), movie(H, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true,false,false,false,false': 'movie(L, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [7.3e-08, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [3.73e-09, 9, 0], 'true,true': [4.46e-07, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), movie(E, A), workedunder(A, F)', 'true,false,false': 'workedunder(A, G), movie(H, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true,false,false,false,false': 'movie(L, A)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [7.6e-08, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 9, 0], 'true,true': [3.04e-07, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,false,true': 'workedunder(A, I), workedunder(H, J)', 'true,false': 'movie(D, B), movie(D, E), workedunder(F, E)', 'true,false,false,true,false': 'workedunder(A, K)', 'true,false,false,true,false,false': 'movie(L, A)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true': 'movie(C, B), movie(C, A)'}, {'true,false,false,true,false,false,true': [2.63e-09, 9, 0], 'true,false,false,true,false,true': [0.0, 0, 0], 'false': [1.07e-07, 195, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 204], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'workedunder(A, G), movie(H, G)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, I)', 'true,false,false,false,false': 'movie(J, A), movie(J, K), director(K)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [7.67e-08, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 9, 0], 'true,true': [0.0, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false': 'movie(D, B), workedunder(A, E), movie(F, A)', 'true,false,false': 'movie(G, A), workedunder(A, H), movie(I, H)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false,false': 'workedunder(A, J), movie(K, A)', 'true,false,false,false,false': 'movie(L, B), workedunder(A, M)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 195, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false,true': [0.0, 0, 0], 'true,true': [1.38e-07, 0, 204], 'true,false,false,false,true': [0.0, 0, 0], 'true,false,false,false,false,false': [2.63e-09, 9, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false;movie(D, B), movie(D, E), actor(E).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '2;;workedunder(A, B) :- actor(A), director(B).;true;false', '2;true;movie(C, A), movie(C, B).;false;true', '2;true,false;movie(D, B), movie(D, E), actor(E).;false;false', '3;;workedunder(A, B) :- actor(A), director(B).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;true', '4;true,false,false;workedunder(A, G), genre(G, H), genre(B, H).;false;true', '4;true;movie(C, B), movie(C, A).;false;true', '4;true,false,false,false;workedunder(A, I).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;true;false', '5;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '5;true;movie(C, B), movie(C, A).;false;true', '6;;workedunder(A, B) :- actor(A), director(B).;true;false', '6;true,false;movie(D, B), movie(E, A), workedunder(A, F).;false;false', '6;true;movie(C, B), movie(C, A).;false;true', '7;;workedunder(A, B) :- actor(A), director(B).;true;false', '7;true,false;movie(D, B), movie(D, E), workedunder(F, E).;false;false', '7;true;movie(C, B), movie(C, A).;false;true', '8;;workedunder(A, B) :- actor(A), director(B).;true;false', '8;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true,false;movie(D, B), workedunder(A, E), movie(F, A).;false;true', '9;true,false,false;movie(G, A), workedunder(A, H), movie(I, H).;false;true', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false,false;workedunder(A, J), movie(K, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #4: [('true,false,false,false', 0), ('true,false,true', 0)]
Tree #5: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #7: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #8: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,false,true,false,true', 0), ('true,false,true', 0), ('true,false,false,true,false,false,false', 0)]
Tree #9: [('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false,false', 0)]
Tree #10: [('true,false,false,false,false,true', 0), ('true,false,false,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004883;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.12544463852839155;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936065;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1015963294878365;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, G), genre(G, H), genre(B, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.09269127618926061;  // std dev = 8,69e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(E, A), workedunder(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07877675473109148;  // std dev = 7,60e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07324622576333671;  // std dev = 1,07e-07, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420264;  // std dev = 7,67e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, B), workedunder(A, E), movie(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), workedunder(A, H), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(A, J), movie(K, A) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202626;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.021 seconds
Total inference time: 0.508 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 5.343
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.74 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: transfer, Total folds for small set: 4, Time: 00:06:33
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.74, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 5.343, 'Mapping Results': {'Possible mappings': 12000, 'Generating paths time': 2.655231237411499, 'Generating mappings time': 0.6347179412841797, 'Knowledge compiling time': 0.01864480972290039, 'Total time': 6.501680135726929, 'Finding best mapping': 3.1930794715881348}, 'CLL': -0.094637}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048835;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1254446385283916;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360656;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783652;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0926912761892606;  // std dev = 9,06e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109148;  // std dev = 7,45e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333667;  // std dev = 1,15e-07, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420264;  // std dev = 8,02e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202626;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
Results
   AUC ROC   = 0.985955
   AUC PR    = 0.972678
   CLL	      = -0.123634
   Precision = 0.972678 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.98615


Total learning time: 2.907 seconds
Total inference time: 0.64 seconds
AUC ROC: 0.985955


Dataset: uwcse,imdb, Run: 1, Fold: 3, Type: scratch, Total folds for small set: 4, Time: 00:06:37
{'AUC PR': 0.972678, 'F1': 0.98615, 'Inference time': 0.64, 'Recall': 1.0, 'Precision': [0.972678, 0.5], 'AUC ROC': 0.985955, 'Learning time': 2.907, 'CLL': -0.123634}
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), tempadvisedby(G, B) )
%   | | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else if ( projectmember(H, B), publication(D, I), tempadvisedby(I, E) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( tempadvisedby(J, B) )
%   | | | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else if ( tempadvisedby(K, E), publication(D, K) )
%   | | | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(L, B), projectmember(M, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7812258581764355;  // std dev = 0,266, 65,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(D, B) )
%   | | then if ( projectmember(E, B), inphase(D, F), inphase(A, F) )
%   | | | then return 0.7296469696601341;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(G, A) )
%   | | | | then if ( publication(H, B), publication(G, I), professor(I) )
%   | | | | | then return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | | else if ( publication(J, B) )
%   | | | | | | then return 0.7347337483847238;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.3028027626274885;  // std dev = 1,127, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else return 0.6212245005485975;  // std dev = 0,320, 34,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=30 */
%   | | else if ( publication(K, A), publication(K, L), tempadvisedby(M, L) )
%   | | | then return 0.3009701464463902;  // std dev = 0,494, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.6696302547577427;  // std dev = 0,250, 30,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else return -0.12544463852839144;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), publication(E, A), publication(E, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(H, B), publication(F, I), professor(I) )
%   | | | then return 0.01904987294481035;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else if ( publication(J, B) )
%   | | | | then return 0.5705365006107759;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(F, K), tempadvisedby(K, L) )
%   | | | | | then return 0.6206431441327769;  // std dev = 0,083, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.05044026656577774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(M, B) )
%   | | | then if ( tempadvisedby(N, B), publication(M, N) )
%   | | | | then return 0.3480987929925373;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.4906877961708647;  // std dev = 0,298, 71,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=63 */
%   | | | else return 0.602561090878013;  // std dev = 0,134, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10678028123551334;  // std dev = 0,073, 97,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B) )
%   then if ( student(A) )
%   | then if ( publication(C, A), publication(C, B) )
%   | | then return 0.4221404373670782;  // std dev = 0,046, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | | then if ( publication(F, B), tempadvisedby(G, B) )
%   | | | | then return 0.01663677639228948;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else if ( tempadvisedby(H, B), tempadvisedby(I, E), publication(D, I) )
%   | | | | | then return 0.4694962620786896;  // std dev = 0,086, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( tempadvisedby(J, B) )
%   | | | | | | then return 0.04226094022409674;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | else if ( tempadvisedby(K, E), publication(D, K) )
%   | | | | | | | then return 0.026902687519185082;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.2871610542309069;  // std dev = 1,054, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3842784464234522;  // std dev = 0,280, 68,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=62 */
%   | else return -0.1021027497222038;  // std dev = 6,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.10210274972220386;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3238690340997323;  // std dev = 0,041, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(D, B), publication(E, D), publication(E, B) )
%   | | then return 0.10322040739888405;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | then if ( tempadvisedby(H, G), hasposition(B, I) )
%   | | | | then if ( publication(J, H), publication(K, B) )
%   | | | | | then return -0.04817224941224665;  // std dev = 0,838, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else if ( projectmember(L, B) )
%   | | | | | | then return 0.12844953954743596;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | | then return 0.47275844134717365;  // std dev = 0,843, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | | else return 0.2919782762871247;  // std dev = 0,858, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.039660295623061795;  // std dev = 0,588, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.2986893283842375;  // std dev = 0,266, 64,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   else return -0.09311513744934594;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), yearsinprogram(C, D), yearsinprogram(A, D) )
%   | then return 0.35368297109715435;  // std dev = 0,077, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(E, B) )
%   | | then if ( publication(F, B) )
%   | | | then return 0.039590064868979126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16776500884672835;  // std dev = 0,236, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( publication(G, B), publication(G, H), student(H) )
%   | | | then return 0.22844564382648136;  // std dev = 0,234, 93,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=83 */
%   | | | else if ( tempadvisedby(I, B), publication(J, B) )
%   | | | | then return 0.0580560841884153;  // std dev = 0,906, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else if ( publication(K, B) )
%   | | | | | then return 0.16194965192118657;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | | else if ( publication(L, A), publication(L, M), professor(M) )
%   | | | | | | then return 0.13385051870987735;  // std dev = 0,893, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | | else return 0.3119048555036683;  // std dev = 0,145, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08554436122277939;  // std dev = 3,49e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.03037940889400074;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(G, A), publication(G, B) )
%   | | | then return 0.21291488659501825;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | | then if ( publication(J, B) )
%   | | | | | then return -0.025375445411344035;  // std dev = 0,833, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | | else return 0.09612995048887692;  // std dev = 0,358, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.18743536973360458;  // std dev = 0,268, 36,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | else if ( publication(K, B), publication(K, L), tempadvisedby(M, L) )
%   | | then return 0.20198983983679936;  // std dev = 0,224, 40,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | else if ( publication(N, B) )
%   | | | then return -0.05541251689218937;  // std dev = 1,064, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2711184418506958;  // std dev = 0,167, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0770781193700117;  // std dev = 0,052, 97,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( projectmember(C, B), publication(D, B) )
%   | then return 0.023378355474261408;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( publication(E, A), publication(F, B) )
%   | | then return 0.15233369382596962;  // std dev = 0,204, 60,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=52 */
%   | | else if ( publication(G, A), publication(G, H), tempadvisedby(H, I) )
%   | | | then return 0.2736109190584037;  // std dev = 0,067, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(J, A), publication(J, K), professor(K) )
%   | | | | then return -0.0419332821140388;  // std dev = 0,959, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else if ( publication(L, B), publication(L, M), tempadvisedby(M, B) )
%   | | | | | then return 0.03583326811197385;  // std dev = 0,852, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else if ( publication(N, B) )
%   | | | | | | then if ( tempadvisedby(P, B), publication(N, Q), student(Q) )
%   | | | | | | | then return 0.1832253525568394;  // std dev = 0,213, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | | | | | else return 0.11169855527262702;  // std dev = 0,316, 25,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | | | | | else return 0.21777338564541193;  // std dev = 0,061, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07365079399108534;  // std dev = 2,11e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( projectmember(D, B), publication(E, A) )
%   | then return 0.021936738053973736;  // std dev = 0,554, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, B), publication(F, A) )
%   | | then return 0.1620424348109612;  // std dev = 0,055, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( publication(G, B) )
%   | | | then if ( publication(H, A), hasposition(I, C), publication(H, I) )
%   | | | | then if ( publication(G, I), tempadvisedby(J, B) )
%   | | | | | then return 0.10504810755050642;  // std dev = 0,739, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.13660716058041492;  // std dev = 0,908, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else if ( tempadvisedby(K, B), inphase(K, L), inphase(A, L) )
%   | | | | | then return 0.060245834153091905;  // std dev = 0,898, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else if ( publication(M, A), hasposition(N, C), projectmember(P, N) )
%   | | | | | | then return 0.2160147044461413;  // std dev = 0,124, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | | | else return 0.10742320163867074;  // std dev = 0,307, 50,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=43 */
%   | | | else return 0.18046314484048145;  // std dev = 0,221, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06705053827810346;  // std dev = 0,469, 97,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, A), publication(D, B) )
%   | | then return 0.13767517571103263;  // std dev = 3,16e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( publication(E, A) )
%   | | | then if ( publication(F, B), publication(E, G), professor(G) )
%   | | | | then return -0.05111959653981805;  // std dev = 0,810, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else return 0.08014688299582626;  // std dev = 0,291, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else if ( publication(H, B), yearsinprogram(C, I), yearsinprogram(A, I) )
%   | | | | then return 0.21231117005935593;  // std dev = 0,084, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.07742990437273617;  // std dev = 0,315, 32,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   | else if ( publication(J, B), publication(J, K), tempadvisedby(L, K) )
%   | | then return 0.12691984582132124;  // std dev = 0,221, 40,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | else if ( publication(M, A), hasposition(B, N) )
%   | | | then return 0.16616771608210107;  // std dev = 0,731, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.0911513136440601;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.06460859019519144;  // std dev = 2,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'hasposition(person,faculty).', 'inphase(person,prequals).', 'projectmember(project,person).', 'publication(title,person).', 'yearsinprogram(person,year).', 'professor(person).', 'student(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(J, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'publication(L, B), projectmember(M, B)', 'true,false,true,false,false,false': 'tempadvisedby(K, E), publication(D, K)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'projectmember(H, B), publication(D, I), tempadvisedby(I, E)', 'true,false,true': 'publication(F, B), tempadvisedby(G, B)'}, {'true,false,true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'false': [7.88e-08, 95, 0], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false,false': [1.155, 2, 4], 'true,false,false,false': [0.266, 5, 60], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,true': [0.816, 2, 1], 'true,false,true,false,false,true': [0.866, 3, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(H, B), publication(G, I), professor(I)', 'true,false': 'tempadvisedby(D, B)', 'true,false,false': 'publication(K, A), publication(K, L), tempadvisedby(M, L)', 'true,false,true,false,true,false': 'publication(J, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'publication(G, A)', 'true,false,true': 'projectmember(E, B), inphase(D, F), inphase(A, F)'}, {'true,false,true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false': [0.32, 4, 30], 'true,false,false,true': [0.494, 4, 4], 'false': [0.0, 95, 0], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false,true,false,false': [1.127, 3, 3], 'true,false,true,false,true,false,true': [1.49e-08, 0, 3], 'true,false,false,false': [0.25, 2, 28], 'true,true': [0.0, 0, 41]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false,true,false,false': 'publication(F, K), tempadvisedby(K, L)', 'true,false': 'publication(F, A), tempadvisedby(G, B)', 'true,false,false': 'publication(M, B)', 'true': 'tempadvisedby(D, B), publication(E, A), publication(E, B)', 'true,false,true,false': 'publication(J, B)', 'true,false,false,true': 'tempadvisedby(N, B), publication(M, N)', 'true,false,true': 'publication(H, B), publication(F, I), professor(I)'}, {'true,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,false': [0.134, 0, 9], 'true,false,false,true,false': [0.298, 8, 63], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false': [0.866, 3, 1], 'false': [0.073, 96, 1], 'true,false,false,true,true': [0.866, 1, 3], 'true,true': [0.0, 0, 29], 'true,false,true,false,false,true': [0.083, 0, 3]}], ['advisedby(A, B)', {'': 'professor(B)', 'true,true,false,true,false': 'tempadvisedby(H, B), tempadvisedby(I, E), publication(D, I)', 'true,true,false,true,false,false,false': 'tempadvisedby(K, E), publication(D, K)', 'true,true,false': 'publication(D, A), publication(D, E), professor(E)', 'true': 'student(A)', 'true,true,false,true,false,false': 'tempadvisedby(J, B)', 'true,true': 'publication(C, A), publication(C, B)', 'true,true,false,true': 'publication(F, B), tempadvisedby(G, B)'}, {'true,true,false,true,false,true': [0.086, 0, 3], 'true,false': [6.45e-09, 11, 0], 'false': [0.0, 84, 0], 'true,true,false,true,false,false,false,true': [0.816, 2, 1], 'true,true,false,true,true': [0.913, 5, 1], 'true,true,false,false': [0.28, 6, 62], 'true,true,false,true,false,false,true': [0.866, 3, 1], 'true,true,false,true,false,false,false,false': [1.054, 2, 4], 'true,true,true': [0.046, 0, 41]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'tempadvisedby(H, G), hasposition(B, I)', 'true,false': 'tempadvisedby(D, B), publication(E, D), publication(E, B)', 'true,false,false,true,true,false,false': 'tempadvisedby(M, B)', 'true,false,false,true,true,false': 'projectmember(L, B)', 'true,false,false': 'publication(F, A), publication(F, G), professor(G)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,true,true': 'publication(J, H), publication(K, B)'}, {'true,false,false,true,true,true': [0.838, 4, 1], 'true,false,false,true,false': [0.588, 3, 1], 'true,false,false,true,true,false,true': [0.631, 2, 3], 'true,false,false,true,true,false,false,true': [0.843, 1, 2], 'false': [0.0, 95, 0], 'true,false,false,true,true,false,false,false': [0.858, 1, 3], 'true,false,false,false': [0.266, 5, 59], 'true,true': [0.041, 0, 41], 'true,false,true': [0.912, 2, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'projectmember(E, B)', 'true,false,false,false,false,false': 'publication(L, A), publication(L, M), professor(M)', 'true,false,false': 'publication(G, B), publication(G, H), student(H)', 'true': 'tempadvisedby(C, B), yearsinprogram(C, D), yearsinprogram(A, D)', 'true,false,false,false': 'tempadvisedby(I, B), publication(J, B)', 'true,false,true': 'publication(F, B)', 'true,false,false,false,false': 'publication(K, B)'}, {'true,false,false,true': [0.234, 10, 83], 'false': [3.49e-08, 95, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false,false,true': [0.35, 1, 6], 'true,false,true,false': [0.236, 2, 6], 'true,true': [0.077, 0, 4], 'true,false,false,false,false,false,true': [0.893, 2, 2], 'true,false,false,false,true': [0.906, 2, 4], 'true,false,false,false,false,false,false': [0.145, 0, 6]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(K, B), publication(K, L), tempadvisedby(M, L)', 'true,true,false,false': 'publication(H, A), publication(H, I), professor(I)', 'true,true,false': 'publication(G, A), publication(G, B)', 'true,true,false,false,true': 'publication(J, B)', 'true': 'tempadvisedby(D, B)', 'true,false,false': 'publication(N, B)', 'true,true': 'projectmember(E, B), publication(F, B)'}, {'true,false,false,false': [0.167, 0, 4], 'true,false,false,true': [1.064, 2, 2], 'false': [0.052, 96, 1], 'true,true,true': [0.816, 1, 2], 'true,false,true': [0.224, 3, 37], 'true,true,false,false,true,true': [0.833, 5, 1], 'true,true,false,false,false': [0.268, 3, 33], 'true,true,false,true': [0.0, 0, 29], 'true,true,false,false,true,false': [0.358, 3, 4]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(E, A), publication(F, B)', 'true,false,false,false,false,false': 'publication(N, B)', 'true,false,false': 'publication(G, A), publication(G, H), tempadvisedby(H, I)', 'true': 'projectmember(C, B), publication(D, B)', 'true,false,false,false,false,false,true': 'tempadvisedby(P, B), publication(N, Q), student(Q)', 'true,false,false,false': 'publication(J, A), publication(J, K), professor(K)', 'true,false,false,false,false': 'publication(L, B), publication(L, M), tempadvisedby(M, B)'}, {'true,false,false,true': [0.067, 0, 3], 'true,false,false,false,false,false,true,true': [0.213, 1, 20], 'true,false,true': [0.204, 8, 52], 'false': [2.11e-08, 95, 0], 'true,false,false,false,false,false,true,false': [0.316, 3, 22], 'true,false,false,false,false,true': [0.852, 1, 3], 'true,true': [0.816, 1, 2], 'true,false,false,false,true': [0.959, 4, 2], 'true,false,false,false,false,false,false': [0.061, 0, 9]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false,false,true': 'publication(H, A), hasposition(I, C), publication(H, I)', 'true,false': 'publication(F, B), publication(F, A)', 'true,false,false,true,false': 'tempadvisedby(K, B), inphase(K, L), inphase(A, L)', 'true,false,false,true,false,false': 'publication(M, A), hasposition(N, C), projectmember(P, N)', 'true,false,false': 'publication(G, B)', 'true': 'projectmember(D, B), publication(E, A)', 'true,false,false,true,true': 'publication(G, I), tempadvisedby(J, B)'}, {'true,false,false,false': [0.221, 1, 10], 'true,false,false,true,true,true': [0.739, 2, 1], 'true,false,false,true,false,true': [0.898, 1, 5], 'false': [0.469, 96, 1], 'true,false,false,true,true,false': [0.908, 4, 2], 'true,false,false,true,false,false,true': [0.124, 0, 7], 'true,true': [0.554, 2, 3], 'true,false,true': [0.055, 0, 41], 'true,false,false,true,false,false,false': [0.307, 7, 43]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(J, B), publication(J, K), tempadvisedby(L, K)', 'true,true,false,false': 'publication(H, B), yearsinprogram(C, I), yearsinprogram(A, I)', 'true,true,false': 'publication(E, A)', 'true': 'tempadvisedby(C, B)', 'true,false,false': 'publication(M, A), hasposition(B, N)', 'true,true': 'publication(D, A), publication(D, B)', 'true,true,false,true': 'publication(F, B), publication(E, G), professor(G)'}, {'true,true,false,true,false': [0.291, 3, 7], 'true,false,false,true': [0.731, 1, 4], 'false': [2.69e-08, 95, 0], 'true,true,true': [3.16e-08, 0, 29], 'true,true,false,true,true': [0.81, 5, 1], 'true,true,false,false,true': [0.084, 0, 4], 'true,true,false,false,false': [0.315, 4, 28], 'true,false,false,false': [0.892, 2, 3], 'true,false,true': [0.221, 3, 37]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'hasposition(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'student(A) -> director(A)', 'yearsinprogram(A,B) -> genre(A,B)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'movie(L, B), movie(M, B)', 'true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(H, B), movie(D, I), workedunder(E, I)', 'true,false,true': 'movie(F, B), workedunder(B, G)'}, {'true,false,true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'false': [7.88e-08, 95, 0], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false': [0.266, 5, 60], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.155, 2, 4], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(H, B), movie(G, I), actor(I)', 'true,false': 'workedunder(B, D)', 'true,false,false': 'movie(K, A), movie(K, L), workedunder(L, M)', 'true,false,true,false,true,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, A)', 'true,false,true': 'movie(E, B), genre(D, F), genre(A, F)'}, {'true,false,true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false': [0.32, 4, 30], 'true,false,false,true': [0.494, 4, 4], 'false': [0.0, 95, 0], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false,true,false,false': [1.127, 3, 3], 'true,false,true,false,true,false,true': [1.49e-08, 0, 3], 'true,false,false,false': [0.25, 2, 28], 'true,true': [0.0, 0, 41]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false,true,false,false': 'movie(F, K), workedunder(L, K)', 'true,false': 'movie(F, A), workedunder(B, G)', 'true,false,false': 'movie(M, B)', 'true': 'workedunder(B, D), movie(E, A), movie(E, B)', 'true,false,true,false': 'movie(J, B)', 'true,false,false,true': 'workedunder(B, N), movie(M, N)', 'true,false,true': 'movie(H, B), movie(F, I), actor(I)'}, {'true,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,true': [0.866, 1, 3], 'true,false,false,true,false': [0.298, 8, 63], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false': [0.866, 3, 1], 'false': [0.073, 96, 1], 'true,false,false,false': [0.134, 0, 9], 'true,true': [0.0, 0, 29], 'true,false,true,false,false,true': [0.083, 0, 3]}], ['workedunder(B, A)', {'': 'actor(B)', 'true,true,false,true,false': 'workedunder(B, H), workedunder(E, I), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), actor(E)', 'true': 'director(A)', 'true,true,false,true,false,false': 'workedunder(B, J)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(B, G)'}, {'true,true,false,true,false,true': [0.086, 0, 3], 'true,false': [6.45e-09, 11, 0], 'false': [0.0, 84, 0], 'true,true,false,true,false,false,false,true': [0.816, 2, 1], 'true,true,true': [0.046, 0, 41], 'true,true,false,true,true': [0.913, 5, 1], 'true,true,false,true,false,false,true': [0.866, 3, 1], 'true,true,false,true,false,false,false,false': [1.054, 2, 4], 'true,true,false,false': [0.28, 6, 62]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(G, H), workedunder(B, I)', 'true,false,false,true,true,false,false': 'workedunder(B, M)', 'true,false,false,true,true,false': 'movie(L, B)', 'true,false': 'workedunder(B, D), movie(E, D), movie(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(J, H), movie(K, B)', 'true,false,false': 'movie(F, A), movie(F, G), actor(G)'}, {'true,false,false,true,true,true': [0.838, 4, 1], 'false': [0.0, 95, 0], 'true,false,false,true,true,false,true': [0.631, 2, 3], 'true,false,false,true,true,false,false,true': [0.843, 1, 2], 'true,false,false,true,false': [0.588, 3, 1], 'true,false,false,true,true,false,false,false': [0.858, 1, 3], 'true,false,false,false': [0.266, 5, 59], 'true,true': [0.041, 0, 41], 'true,false,true': [0.912, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(E, B)', 'true,false,false,false,false,false': 'movie(L, A), movie(L, M), actor(M)', 'true,false,false': 'movie(G, B), movie(G, H), director(H)', 'true': 'workedunder(B, C), genre(C, D), genre(A, D)', 'true,false,false,false': 'workedunder(B, I), movie(J, B)', 'true,false,true': 'movie(F, B)', 'true,false,false,false,false': 'movie(K, B)'}, {'true,false,false,true': [0.234, 10, 83], 'false': [3.49e-08, 95, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false,false,true': [0.35, 1, 6], 'true,false,true,false': [0.236, 2, 6], 'true,true': [0.077, 0, 4], 'true,false,false,false,false,false,true': [0.893, 2, 2], 'true,false,false,false,true': [0.906, 2, 4], 'true,false,false,false,false,false,false': [0.145, 0, 6]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false': 'movie(K, B), movie(K, L), workedunder(L, M)', 'true,true,false,false': 'movie(H, A), movie(H, I), actor(I)', 'true,true,false': 'movie(G, A), movie(G, B)', 'true,true,false,false,true': 'movie(J, B)', 'true': 'workedunder(B, D)', 'true,false,false': 'movie(N, B)', 'true,true': 'movie(E, B), movie(F, B)'}, {'true,false,false,true': [1.064, 2, 2], 'false': [0.052, 96, 1], 'true,true,true': [0.816, 1, 2], 'true,true,false,false,false': [0.268, 3, 33], 'true,true,false,false,true,true': [0.833, 5, 1], 'true,false,false,false': [0.167, 0, 4], 'true,true,false,true': [0.0, 0, 29], 'true,false,true': [0.224, 3, 37], 'true,true,false,false,true,false': [0.358, 3, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true,false,false,false,false,false': 'movie(N, B)', 'true,false,false': 'movie(G, A), movie(G, H), workedunder(I, H)', 'true': 'movie(C, B), movie(D, B)', 'true,false,false,false,false,false,true': 'workedunder(B, P), movie(N, Q), director(Q)', 'true,false,false,false': 'movie(J, A), movie(J, K), actor(K)', 'true,false,false,false,false': 'movie(L, B), movie(L, M), workedunder(B, M)'}, {'true,false,false,true': [0.067, 0, 3], 'false': [2.11e-08, 95, 0], 'true,false,false,false,true': [0.959, 4, 2], 'true,false,false,false,false,true': [0.852, 1, 3], 'true,false,false,false,false,false,true,false': [0.316, 3, 22], 'true,false,false,false,false,false,true,true': [0.213, 1, 20], 'true,true': [0.816, 1, 2], 'true,false,true': [0.204, 8, 52], 'true,false,false,false,false,false,false': [0.061, 0, 9]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false,false,true': 'movie(H, A), workedunder(I, C), movie(H, I)', 'true,false,false,true,false': 'workedunder(B, K), genre(K, L), genre(A, L)', 'true,false,false,true,false,false': 'movie(M, A), workedunder(N, C), movie(P, N)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(D, B), movie(E, A)', 'true,false,false,true,true': 'movie(G, I), workedunder(B, J)', 'true,false,false': 'movie(G, B)'}, {'true,false,false,true,false,false,true': [0.124, 0, 7], 'true,false,false,true,true,true': [0.739, 2, 1], 'true,false,false,true,false,true': [0.898, 1, 5], 'false': [0.469, 96, 1], 'true,false,false,true,true,false': [0.908, 4, 2], 'true,false,false,false': [0.221, 1, 10], 'true,true': [0.554, 2, 3], 'true,false,true': [0.055, 0, 41], 'true,false,false,true,false,false,false': [0.307, 7, 43]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true,true,false,false': 'movie(H, B), genre(C, I), genre(A, I)', 'true,true,false': 'movie(E, A)', 'true': 'workedunder(B, C)', 'true,false,false': 'movie(M, A), workedunder(B, N)', 'true,true': 'movie(D, A), movie(D, B)', 'true,true,false,true': 'movie(F, B), movie(E, G), actor(G)'}, {'true,true,false,true,false': [0.291, 3, 7], 'true,false,false,true': [0.731, 1, 4], 'false': [2.69e-08, 95, 0], 'true,true,true': [3.16e-08, 0, 29], 'true,true,false,true,true': [0.81, 5, 1], 'true,true,false,false,true': [0.084, 0, 4], 'true,true,false,false,false': [0.315, 4, 28], 'true,false,false,false': [0.892, 2, 3], 'true,false,true': [0.221, 3, 37]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,false;workedunder(B, J).;false;true', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '0;true,false,false;movie(L, B), movie(M, B).;false;false', '0;true,false,true,false,false,false;workedunder(E, K), movie(D, K).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;movie(H, B), movie(D, I), workedunder(E, I).;false;true', '0;true,false,true;movie(F, B), workedunder(B, G).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false,true,false,true;movie(H, B), movie(G, I), actor(I).;false;true', '1;true,false;workedunder(B, D).;true;true', '1;true,false,false;movie(K, A), movie(K, L), workedunder(L, M).;false;false', '1;true,false,true,false,true,false;movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;movie(G, A).;true;false', '1;true,false,true;movie(E, B), genre(D, F), genre(A, F).;false;true', '2;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '2;true,false,true,false,false;movie(F, K), workedunder(L, K).;false;false', '2;true,false;movie(F, A), workedunder(B, G).;true;true', '2;true,false,false;movie(M, B).;true;false', '2;true;workedunder(B, D), movie(E, A), movie(E, B).;false;true', '2;true,false,true,false;movie(J, B).;false;true', '2;true,false,false,true;workedunder(B, N), movie(M, N).;false;false', '2;true,false,true;movie(H, B), movie(F, I), actor(I).;false;true', '3;;workedunder(B, A) :- actor(B).;true;false', '3;true,true,false,true,false;workedunder(B, H), workedunder(E, I), movie(D, I).;false;true', '3;true,true,false,true,false,false,false;workedunder(E, K), movie(D, K).;false;false', '3;true,true,false;movie(D, A), movie(D, E), actor(E).;true;false', '3;true;director(A).;true;false', '3;true,true,false,true,false,false;workedunder(B, J).;false;true', '3;true,true;movie(C, A), movie(C, B).;false;true', '3;true,true,false,true;movie(F, B), workedunder(B, G).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false,false,true;workedunder(G, H), workedunder(B, I).;true;false', '4;true,false,false,true,true,false,false;workedunder(B, M).;false;false', '4;true,false,false,true,true,false;movie(L, B).;false;true', '4;true,false;workedunder(B, D), movie(E, D), movie(E, B).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,true,true;movie(J, H), movie(K, B).;false;true', '4;true,false,false;movie(F, A), movie(F, G), actor(G).;true;false', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,false;movie(E, B).;true;true', '5;true,false,false,false,false,false;movie(L, A), movie(L, M), actor(M).;false;false', '5;true,false,false;movie(G, B), movie(G, H), director(H).;false;true', '5;true;workedunder(B, C), genre(C, D), genre(A, D).;false;true', '5;true,false,false,false;workedunder(B, I), movie(J, B).;false;true', '5;true,false,true;movie(F, B).;false;false', '5;true,false,false,false,false;movie(K, B).;false;true', '6;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '6;true,false;movie(K, B), movie(K, L), workedunder(L, M).;false;true', '6;true,true,false,false;movie(H, A), movie(H, I), actor(I).;true;false', '6;true,true,false;movie(G, A), movie(G, B).;false;true', '6;true,true,false,false,true;movie(J, B).;false;false', '6;true;workedunder(B, D).;true;true', '6;true,false,false;movie(N, B).;false;false', '6;true,true;movie(E, B), movie(F, B).;false;true', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false;movie(E, A), movie(F, B).;false;true', '7;true,false,false,false,false,false;movie(N, B).;true;false', '7;true,false,false;movie(G, A), movie(G, H), workedunder(I, H).;false;true', '7;true;movie(C, B), movie(D, B).;false;true', '7;true,false,false,false,false,false,true;workedunder(B, P), movie(N, Q), director(Q).;false;false', '7;true,false,false,false;movie(J, A), movie(J, K), actor(K).;false;true', '7;true,false,false,false,false;movie(L, B), movie(L, M), workedunder(B, M).;false;true', '8;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '8;true,false,false,true;movie(H, A), workedunder(I, C), movie(H, I).;true;true', '8;true,false,false,true,false;workedunder(B, K), genre(K, L), genre(A, L).;false;true', '8;true,false,false,true,false,false;movie(M, A), workedunder(N, C), movie(P, N).;false;false', '8;true,false;movie(F, B), movie(F, A).;false;true', '8;true;movie(D, B), movie(E, A).;false;true', '8;true,false,false,true,true;movie(G, I), workedunder(B, J).;false;false', '8;true,false,false;movie(G, B).;true;false', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '9;true,true,false,false;movie(H, B), genre(C, I), genre(A, I).;false;false', '9;true,true,false;movie(E, A).;true;true', '9;true;workedunder(B, C).;true;true', '9;true,false,false;movie(M, A), workedunder(B, N).;false;false', '9;true,true;movie(D, A), movie(D, B).;false;true', '9;true,true,false,true;movie(F, B), movie(E, G), actor(G).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), workedunder(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, A), movie(D, I), workedunder(E, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(E, K), movie(D, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 1,10e-07, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, B), movie(E, F), workedunder(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839144;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.22152502927633594;  // std dev = 6,299, 356,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( director(B) )
%   | then if ( movie(C, B), movie(C, A) )
%   | | then return 0.500213155840385;  // std dev = 4,38e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | | then if ( movie(F, A), workedunder(A, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, H), workedunder(E, I), movie(D, I) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(A, J) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else if ( workedunder(E, K), movie(D, K) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.13637023346435753;  // std dev = 1,97e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.13637023346435787;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.13637023346435753;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.377690957815417;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( workedunder(A, D), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then if ( workedunder(G, H), workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.12109080086507173;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1210908008650719;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C), genre(C, D), genre(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( movie(F, A) )
%   | | | then return 0.24421128946503057;  // std dev = 1,885, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10878311281985784;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07101223834615794;  // std dev = 3,302, 356,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(D, A) )
%   | then return 0.1865260170565913;  // std dev = 1,761, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10517499585880337;  // std dev = 6,50e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04769812685353087;  // std dev = 2,916, 356,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=178 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1483017428399361;  // std dev = 1,724, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   else return -0.09988711795971089;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.149209
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.365 seconds
Total inference time: 0.486 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(A, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, A), movie(D, I), workedunder(E, I)', 'true,false,true': 'movie(F, A), workedunder(A, G)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [1.1e-07, 153, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [1.83e-08, 25, 0], 'true,true': [1.09e-06, 0, 178], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'workedunder(A, D)', 'true,false,false': 'movie(E, B), movie(E, F), workedunder(F, G)'}, {'true,false,false,false': [0.0, 25, 0], 'false': [0.0, 153, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 178], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [6.299, 178, 178]}], ['workedunder(A, B)', {'': 'actor(A)', 'true,true,false,true,false': 'workedunder(A, H), workedunder(E, I), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true,true,false': 'movie(D, B), movie(D, E), actor(E)', 'true': 'director(B)', 'true,true,false,true,false,false': 'workedunder(A, J)', 'true,true': 'movie(C, B), movie(C, A)', 'true,true,false,true': 'movie(F, A), workedunder(A, G)'}, {'true,true,false,true,false,true': [0.0, 0, 0], 'true,false': [0.0, 99, 0], 'false': [0.0, 54, 0], 'true,true,false,true,false,false,false,true': [0.0, 0, 0], 'true,true,false,true,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 0], 'true,true,false,true,false,false,true': [0.0, 0, 0], 'true,true,false,true,false,false,false,false': [1.97e-08, 25, 0], 'true,true,true': [4.38e-07, 0, 178]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'workedunder(A, D), movie(E, D), movie(E, A)', 'true,false,false,true': 'workedunder(G, H), workedunder(A, I)', 'true,false,false': 'movie(F, B), movie(F, G), actor(G)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [0.0, 25, 0], 'false': [0.0, 153, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 178], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C), genre(C, D), genre(B, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'movie(F, A)'}, {'false': [0.0, 153, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [1.885, 25, 178]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [3.302, 178, 178]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(D, A)'}, {'false': [6.5e-08, 153, 0], 'true,false': [0.0, 0, 0], 'true,true': [1.761, 25, 178]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [2.916, 178, 178]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false': 'movie(G, B), workedunder(A, H)'}, {'true,false,false,false': [1.724, 25, 178], 'false': [0.0, 153, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true;movie(F, A), workedunder(A, G).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;workedunder(A, D).;false;false', '3;;workedunder(A, B) :- actor(A).;true;false', '3;true,true,false;movie(D, B), movie(D, E), actor(E).;false;false', '3;true;director(B).;true;false', '3;true,true;movie(C, B), movie(C, A).;false;true', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true;movie(C, B), movie(C, A).;false;true', '4;true,false;workedunder(A, D), movie(E, D), movie(E, A).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;true;false', '5;true;workedunder(A, C), genre(C, D), genre(B, D).;false;true', '5;true,false;movie(E, A).;false;false', '7;;workedunder(A, B) :- actor(A), director(B).;false;false', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true;workedunder(A, C).;false;true', '9;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,true', 0)]
Tree #3: [('true', 0), ('false', 0.5)]
Tree #4: [('true,true,false,true,true', 0), ('true,true,false,true,false,true', 0), ('true,true,false,true,false,false,false,true', 0), ('true,true,false,true,false,false,true', 0), ('true,true,false,false', 0)]
Tree #5: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,true,false', 0), ('true,true', 0), ('true,false,false', 0), ('true,false,true,true', 0.8768472906403941)]
Tree #7: [('true', 0), ('false', 0.5)]
Tree #8: [('true,false', 0), ('true,true', 0.8768472906403941)]
Tree #9: [('true', 0), ('false', 0.5)]
Tree #10: [('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false', 0.8768472906403941)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), workedunder(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 1,10e-07, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839144;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462835;  // std dev = 3,94e-08, 89,000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.5553664367462835;  // std dev = 3,94e-08, 89,000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 1,86e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.11231637819360642;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.11231637819360642;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.11231637819360638;  // std dev = 2,28e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( actor(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.11231637819360638;  // std dev = 2,28e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( director(B) )
%   | then if ( movie(C, B), movie(C, A) )
%   | | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | | then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783627;  // std dev = 3,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.10159632948783624;  // std dev = 3,65e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( workedunder(A, D), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.092691276189261;  // std dev = 4,47e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C), genre(C, D), genre(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.2132563566140841;  // std dev = 1,594, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 4,47e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.21679019428226082;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then if ( female(A) )
%   | | | | then return -0.07877675473109179;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | | else return -0.07877675473109179;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.07877675473109179;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.07877675473109179;  // std dev = 9,31e-10, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.1033408242592363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.10334082425923628;  // std dev = 2,28e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.07877675473109179;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.14819968003777959;  // std dev = 1,294, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   else return -0.07324622576333706;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return 0.16118188513330445;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.16118188513330445;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then return -0.10757209335148842;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else if ( actor(A) )
%   | | | | then return -0.06842697784420276;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420271;  // std dev = 1,32e-09, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1112214611793312;  // std dev = 1,115, 203,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=178 */
%   else return -0.06419184008202625;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102508
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.893 seconds
Total inference time: 0.414 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 10.158
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.141936
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.45 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: transfer, Total folds for small set: 1, Time: 00:09:31
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.45, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 10.158, 'Mapping Results': {'Possible mappings': 300000, 'Generating paths time': 2.180499792098999, 'Generating mappings time': 15.606204271316528, 'Knowledge compiling time': 0.0162198543548584, 'Total time': 143.9187512397766, 'Finding best mapping': 126.1158196926117}, 'CLL': -0.141936}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048788;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839116;  // std dev = 8,16e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360622;  // std dev = 1,01e-07, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1015963294878364;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926082;  // std dev = 7,74e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   else return -0.08518475138839682;  // std dev = 7,15e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.0787767547310916;  // std dev = 7,60e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07324622576333721;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420267;  // std dev = 6,05e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202625;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.476 seconds
Total inference time: 0.555 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: scratch, Total folds for small set: 1, Time: 00:09:36
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.555, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.476, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'professor(A) -> actor(A)', 'hasposition(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'student(A) -> director(A)', 'yearsinprogram(A,B) -> genre(A,B)'] 

Tranferred structured tree: [['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,false': 'workedunder(B, J)', 'true,false': 'movie(D, A), movie(D, E), actor(E)', 'true,false,false': 'movie(L, B), movie(M, B)', 'true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(H, B), movie(D, I), workedunder(E, I)', 'true,false,true': 'movie(F, B), workedunder(B, G)'}, {'true,false,true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'false': [7.88e-08, 95, 0], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false': [0.266, 5, 60], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.155, 2, 4], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,true,false,true': 'movie(H, B), movie(G, I), actor(I)', 'true,false': 'workedunder(B, D)', 'true,false,false': 'movie(K, A), movie(K, L), workedunder(L, M)', 'true,false,true,false,true,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, A)', 'true,false,true': 'movie(E, B), genre(D, F), genre(A, F)'}, {'true,false,true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false': [0.32, 4, 30], 'true,false,false,true': [0.494, 4, 4], 'false': [0.0, 95, 0], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false,true,false,false': [1.127, 3, 3], 'true,false,true,false,true,false,true': [1.49e-08, 0, 3], 'true,false,false,false': [0.25, 2, 28], 'true,true': [0.0, 0, 41]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false,true,false,false': 'movie(F, K), workedunder(L, K)', 'true,false': 'movie(F, A), workedunder(B, G)', 'true,false,false': 'movie(M, B)', 'true': 'workedunder(B, D), movie(E, A), movie(E, B)', 'true,false,true,false': 'movie(J, B)', 'true,false,false,true': 'workedunder(B, N), movie(M, N)', 'true,false,true': 'movie(H, B), movie(F, I), actor(I)'}, {'true,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,true': [0.866, 1, 3], 'true,false,false,true,false': [0.298, 8, 63], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false': [0.866, 3, 1], 'false': [0.073, 96, 1], 'true,false,false,false': [0.134, 0, 9], 'true,true': [0.0, 0, 29], 'true,false,true,false,false,true': [0.083, 0, 3]}], ['workedunder(B, A)', {'': 'actor(B)', 'true,true,false,true,false': 'workedunder(B, H), workedunder(E, I), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), actor(E)', 'true': 'director(A)', 'true,true,false,true,false,false': 'workedunder(B, J)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(B, G)'}, {'true,true,false,true,false,true': [0.086, 0, 3], 'true,false': [6.45e-09, 11, 0], 'false': [0.0, 84, 0], 'true,true,false,true,false,false,false,true': [0.816, 2, 1], 'true,true,true': [0.046, 0, 41], 'true,true,false,true,true': [0.913, 5, 1], 'true,true,false,true,false,false,true': [0.866, 3, 1], 'true,true,false,true,false,false,false,false': [1.054, 2, 4], 'true,true,false,false': [0.28, 6, 62]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false,false,true': 'workedunder(G, H), workedunder(B, I)', 'true,false,false,true,true,false,false': 'workedunder(B, M)', 'true,false,false,true,true,false': 'movie(L, B)', 'true,false': 'workedunder(B, D), movie(E, D), movie(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(J, H), movie(K, B)', 'true,false,false': 'movie(F, A), movie(F, G), actor(G)'}, {'true,false,false,true,true,true': [0.838, 4, 1], 'false': [0.0, 95, 0], 'true,false,false,true,true,false,true': [0.631, 2, 3], 'true,false,false,true,true,false,false,true': [0.843, 1, 2], 'true,false,false,true,false': [0.588, 3, 1], 'true,false,false,true,true,false,false,false': [0.858, 1, 3], 'true,false,false,false': [0.266, 5, 59], 'true,true': [0.041, 0, 41], 'true,false,true': [0.912, 2, 3]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(E, B)', 'true,false,false,false,false,false': 'movie(L, A), movie(L, M), actor(M)', 'true,false,false': 'movie(G, B), movie(G, H), director(H)', 'true': 'workedunder(B, C), genre(C, D), genre(A, D)', 'true,false,false,false': 'workedunder(B, I), movie(J, B)', 'true,false,true': 'movie(F, B)', 'true,false,false,false,false': 'movie(K, B)'}, {'true,false,false,true': [0.234, 10, 83], 'false': [3.49e-08, 95, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false,false,true': [0.35, 1, 6], 'true,false,true,false': [0.236, 2, 6], 'true,true': [0.077, 0, 4], 'true,false,false,false,false,false,true': [0.893, 2, 2], 'true,false,false,false,true': [0.906, 2, 4], 'true,false,false,false,false,false,false': [0.145, 0, 6]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false': 'movie(K, B), movie(K, L), workedunder(L, M)', 'true,true,false,false': 'movie(H, A), movie(H, I), actor(I)', 'true,true,false': 'movie(G, A), movie(G, B)', 'true,true,false,false,true': 'movie(J, B)', 'true': 'workedunder(B, D)', 'true,false,false': 'movie(N, B)', 'true,true': 'movie(E, B), movie(F, B)'}, {'true,false,false,true': [1.064, 2, 2], 'false': [0.052, 96, 1], 'true,true,true': [0.816, 1, 2], 'true,true,false,false,false': [0.268, 3, 33], 'true,true,false,false,true,true': [0.833, 5, 1], 'true,false,false,false': [0.167, 0, 4], 'true,true,false,true': [0.0, 0, 29], 'true,false,true': [0.224, 3, 37], 'true,true,false,false,true,false': [0.358, 3, 4]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true,false,false,false,false,false': 'movie(N, B)', 'true,false,false': 'movie(G, A), movie(G, H), workedunder(I, H)', 'true': 'movie(C, B), movie(D, B)', 'true,false,false,false,false,false,true': 'workedunder(B, P), movie(N, Q), director(Q)', 'true,false,false,false': 'movie(J, A), movie(J, K), actor(K)', 'true,false,false,false,false': 'movie(L, B), movie(L, M), workedunder(B, M)'}, {'true,false,false,true': [0.067, 0, 3], 'false': [2.11e-08, 95, 0], 'true,false,false,false,true': [0.959, 4, 2], 'true,false,false,false,false,true': [0.852, 1, 3], 'true,false,false,false,false,false,true,false': [0.316, 3, 22], 'true,false,false,false,false,false,true,true': [0.213, 1, 20], 'true,true': [0.816, 1, 2], 'true,false,true': [0.204, 8, 52], 'true,false,false,false,false,false,false': [0.061, 0, 9]}], ['workedunder(B, A)', {'': 'workedunder(B, C), director(A)', 'true,false,false,true': 'movie(H, A), workedunder(I, C), movie(H, I)', 'true,false,false,true,false': 'workedunder(B, K), genre(K, L), genre(A, L)', 'true,false,false,true,false,false': 'movie(M, A), workedunder(N, C), movie(P, N)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'movie(D, B), movie(E, A)', 'true,false,false,true,true': 'movie(G, I), workedunder(B, J)', 'true,false,false': 'movie(G, B)'}, {'true,false,false,true,false,false,true': [0.124, 0, 7], 'true,false,false,true,true,true': [0.739, 2, 1], 'true,false,false,true,false,true': [0.898, 1, 5], 'false': [0.469, 96, 1], 'true,false,false,true,true,false': [0.908, 4, 2], 'true,false,false,false': [0.221, 1, 10], 'true,true': [0.554, 2, 3], 'true,false,true': [0.055, 0, 41], 'true,false,false,true,false,false,false': [0.307, 7, 43]}], ['workedunder(B, A)', {'': 'actor(B), director(A)', 'true,false': 'movie(J, B), movie(J, K), workedunder(K, L)', 'true,true,false,false': 'movie(H, B), genre(C, I), genre(A, I)', 'true,true,false': 'movie(E, A)', 'true': 'workedunder(B, C)', 'true,false,false': 'movie(M, A), workedunder(B, N)', 'true,true': 'movie(D, A), movie(D, B)', 'true,true,false,true': 'movie(F, B), movie(E, G), actor(G)'}, {'true,true,false,true,false': [0.291, 3, 7], 'true,false,false,true': [0.731, 1, 4], 'false': [2.69e-08, 95, 0], 'true,true,true': [3.16e-08, 0, 29], 'true,true,false,true,true': [0.81, 5, 1], 'true,true,false,false,true': [0.084, 0, 4], 'true,true,false,false,false': [0.315, 4, 28], 'true,false,false,false': [0.892, 2, 3], 'true,false,true': [0.221, 3, 37]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(B, A) :- actor(B), director(A).;true;false', '0;true,false,true,false,false;workedunder(B, J).;false;true', '0;true,false;movie(D, A), movie(D, E), actor(E).;true;true', '0;true,false,false;movie(L, B), movie(M, B).;false;false', '0;true,false,true,false,false,false;workedunder(E, K), movie(D, K).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;movie(H, B), movie(D, I), workedunder(E, I).;false;true', '0;true,false,true;movie(F, B), workedunder(B, G).;false;true', '1;;workedunder(B, A) :- actor(B), director(A).;true;false', '1;true,false,true,false,true;movie(H, B), movie(G, I), actor(I).;false;true', '1;true,false;workedunder(B, D).;true;true', '1;true,false,false;movie(K, A), movie(K, L), workedunder(L, M).;false;false', '1;true,false,true,false,true,false;movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;movie(G, A).;true;false', '1;true,false,true;movie(E, B), genre(D, F), genre(A, F).;false;true', '2;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '2;true,false,true,false,false;movie(F, K), workedunder(L, K).;false;false', '2;true,false;movie(F, A), workedunder(B, G).;true;true', '2;true,false,false;movie(M, B).;true;false', '2;true;workedunder(B, D), movie(E, A), movie(E, B).;false;true', '2;true,false,true,false;movie(J, B).;false;true', '2;true,false,false,true;workedunder(B, N), movie(M, N).;false;false', '2;true,false,true;movie(H, B), movie(F, I), actor(I).;false;true', '3;;workedunder(B, A) :- actor(B).;true;false', '3;true,true,false,true,false;workedunder(B, H), workedunder(E, I), movie(D, I).;false;true', '3;true,true,false,true,false,false,false;workedunder(E, K), movie(D, K).;false;false', '3;true,true,false;movie(D, A), movie(D, E), actor(E).;true;false', '3;true;director(A).;true;false', '3;true,true,false,true,false,false;workedunder(B, J).;false;true', '3;true,true;movie(C, A), movie(C, B).;false;true', '3;true,true,false,true;movie(F, B), workedunder(B, G).;false;true', '4;;workedunder(B, A) :- actor(B), director(A).;true;false', '4;true,false,false,true;workedunder(G, H), workedunder(B, I).;true;false', '4;true,false,false,true,true,false,false;workedunder(B, M).;false;false', '4;true,false,false,true,true,false;movie(L, B).;false;true', '4;true,false;workedunder(B, D), movie(E, D), movie(E, B).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,true,true;movie(J, H), movie(K, B).;false;true', '4;true,false,false;movie(F, A), movie(F, G), actor(G).;true;false', '5;;workedunder(B, A) :- actor(B), director(A).;true;false', '5;true,false;movie(E, B).;true;true', '5;true,false,false,false,false,false;movie(L, A), movie(L, M), actor(M).;false;false', '5;true,false,false;movie(G, B), movie(G, H), director(H).;false;true', '5;true;workedunder(B, C), genre(C, D), genre(A, D).;false;true', '5;true,false,false,false;workedunder(B, I), movie(J, B).;false;true', '5;true,false,true;movie(F, B).;false;false', '5;true,false,false,false,false;movie(K, B).;false;true', '6;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '6;true,false;movie(K, B), movie(K, L), workedunder(L, M).;false;true', '6;true,true,false,false;movie(H, A), movie(H, I), actor(I).;true;false', '6;true,true,false;movie(G, A), movie(G, B).;false;true', '6;true,true,false,false,true;movie(J, B).;false;false', '6;true;workedunder(B, D).;true;true', '6;true,false,false;movie(N, B).;false;false', '6;true,true;movie(E, B), movie(F, B).;false;true', '7;;workedunder(B, A) :- actor(B), director(A).;true;false', '7;true,false;movie(E, A), movie(F, B).;false;true', '7;true,false,false,false,false,false;movie(N, B).;true;false', '7;true,false,false;movie(G, A), movie(G, H), workedunder(I, H).;false;true', '7;true;movie(C, B), movie(D, B).;false;true', '7;true,false,false,false,false,false,true;workedunder(B, P), movie(N, Q), director(Q).;false;false', '7;true,false,false,false;movie(J, A), movie(J, K), actor(K).;false;true', '7;true,false,false,false,false;movie(L, B), movie(L, M), workedunder(B, M).;false;true', '8;;workedunder(B, A) :- workedunder(B, C), director(A).;true;false', '8;true,false,false,true;movie(H, A), workedunder(I, C), movie(H, I).;true;true', '8;true,false,false,true,false;workedunder(B, K), genre(K, L), genre(A, L).;false;true', '8;true,false,false,true,false,false;movie(M, A), workedunder(N, C), movie(P, N).;false;false', '8;true,false;movie(F, B), movie(F, A).;false;true', '8;true;movie(D, B), movie(E, A).;false;true', '8;true,false,false,true,true;movie(G, I), workedunder(B, J).;false;false', '8;true,false,false;movie(G, B).;true;false', '9;;workedunder(B, A) :- actor(B), director(A).;true;false', '9;true,false;movie(J, B), movie(J, K), workedunder(K, L).;false;true', '9;true,true,false,false;movie(H, B), genre(C, I), genre(A, I).;false;false', '9;true,true,false;movie(E, A).;true;true', '9;true;workedunder(B, C).;true;true', '9;true,false,false;movie(M, A), workedunder(B, N).;false;false', '9;true,true;movie(D, A), movie(D, B).;false;true', '9;true,true,false,true;movie(F, B), movie(E, G), actor(G).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.858148935099509;  // std dev = 1,07e-06, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), workedunder(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(H, A), movie(D, I), workedunder(E, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, J) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(E, K), movie(D, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048782;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109572;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, B), movie(E, F), workedunder(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839113;  // std dev = 9,88e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2215250292763359;  // std dev = 7,050, 446,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=223 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( director(B) )
%   | then if ( movie(C, B), movie(C, A) )
%   | | then return 0.5002131558403848;  // std dev = 5,06e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | | then if ( movie(F, A), workedunder(A, G) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(A, H), workedunder(E, I), movie(D, I) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(A, J) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else if ( workedunder(E, K), movie(D, K) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.13637023346435753;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.13637023346435798;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.13637023346435753;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.37769095781541717;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( workedunder(A, D), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B), movie(F, G), actor(G) )
%   | | | then if ( workedunder(G, H), workedunder(A, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.12109080086507173;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12109080086507204;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C), genre(C, D), genre(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( movie(F, A) )
%   | | | then return 0.23917663800834962;  // std dev = 2,214, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10878311281985777;  // std dev = 6,66e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07122729207479547;  // std dev = 3,711, 446,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=223 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(D, A) )
%   | then return 0.18264680113515971;  // std dev = 2,070, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10519523697540772;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( workedunder(A, C), director(B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04789208518142327;  // std dev = 3,290, 446,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=223 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.14501375216306497;  // std dev = 2,026, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   else return -0.09992207766876636;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.153996
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.992 seconds
Total inference time: 0.408 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'actor(A), director(B)', 'true,false,true,false,false': 'workedunder(A, J)', 'true,false': 'movie(D, B), movie(D, E), actor(E)', 'true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true,false': 'movie(H, A), movie(D, I), workedunder(E, I)', 'true,false,true': 'movie(F, A), workedunder(A, G)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 188, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [3.49e-08, 35, 0], 'true,true': [1.07e-06, 0, 223], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'workedunder(A, D)', 'true,false,false': 'movie(E, B), movie(E, F), workedunder(F, G)'}, {'true,false,false,false': [1.49e-08, 35, 0], 'false': [9.88e-08, 188, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 223], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [7.05, 223, 223]}], ['workedunder(A, B)', {'': 'actor(A)', 'true,true,false,true,false': 'workedunder(A, H), workedunder(E, I), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(E, K), movie(D, K)', 'true,true,false': 'movie(D, B), movie(D, E), actor(E)', 'true': 'director(B)', 'true,true,false,true,false,false': 'workedunder(A, J)', 'true,true': 'movie(C, B), movie(C, A)', 'true,true,false,true': 'movie(F, A), workedunder(A, G)'}, {'true,true,false,true,false,true': [0.0, 0, 0], 'true,false': [0.0, 132, 0], 'false': [0.0, 56, 0], 'true,true,false,true,false,false,false,true': [0.0, 0, 0], 'true,true,false,true,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 0], 'true,true,false,true,false,false,true': [0.0, 0, 0], 'true,true,false,true,false,false,false,false': [1.05e-08, 35, 0], 'true,true,true': [5.06e-07, 0, 223]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'workedunder(A, D), movie(E, D), movie(E, A)', 'true,false,false,true': 'workedunder(G, H), workedunder(A, I)', 'true,false,false': 'movie(F, B), movie(F, G), actor(G)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [0.0, 35, 0], 'false': [0.0, 188, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 223], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C), genre(C, D), genre(B, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'movie(F, A)'}, {'false': [6.66e-08, 188, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [2.214, 35, 223]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [3.711, 223, 223]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'movie(C, A), movie(D, A)'}, {'false': [0.0, 188, 0], 'true,false': [0.0, 0, 0], 'true,true': [2.07, 35, 223]}], ['workedunder(A, B)', {'': 'workedunder(A, C), director(B)'}, {'true': [0.0, 0, 0], 'false': [3.29, 223, 223]}], ['workedunder(A, B)', {'': 'actor(A), director(B)', 'true': 'workedunder(A, C)', 'true,false': 'movie(D, A), movie(D, E), workedunder(E, F)', 'true,false,false': 'movie(G, B), workedunder(A, H)'}, {'true,false,false,false': [2.026, 35, 223], 'false': [0.0, 188, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- actor(A), director(B).;true;false', '0;true,false;movie(D, B), movie(D, E), actor(E).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false,true;movie(F, A), workedunder(A, G).;false;false', '1;;workedunder(A, B) :- actor(A), director(B).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;workedunder(A, D).;false;false', '3;;workedunder(A, B) :- actor(A).;true;false', '3;true,true,false;movie(D, B), movie(D, E), actor(E).;false;false', '3;true;director(B).;true;false', '3;true,true;movie(C, B), movie(C, A).;false;true', '4;;workedunder(A, B) :- actor(A), director(B).;true;false', '4;true;movie(C, B), movie(C, A).;false;true', '4;true,false;workedunder(A, D), movie(E, D), movie(E, A).;false;false', '5;;workedunder(A, B) :- actor(A), director(B).;true;false', '5;true;workedunder(A, C), genre(C, D), genre(B, D).;false;true', '5;true,false;movie(E, A).;false;false', '7;;workedunder(A, B) :- actor(A), director(B).;false;false', '9;;workedunder(A, B) :- actor(A), director(B).;true;false', '9;true;workedunder(A, C).;false;true', '9;true,false;movie(D, A), movie(D, E), workedunder(E, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,true', 0)]
Tree #3: [('true', 0), ('false', 0.5)]
Tree #4: [('true,true,false,true,true', 0), ('true,true,false,true,false,true', 0), ('true,true,false,true,false,false,false,true', 0), ('true,true,false,true,false,false,true', 0), ('true,true,false,false', 0)]
Tree #5: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,true,false', 0), ('true,true', 0), ('true,false,false', 0), ('true,false,true,true', 0.8643410852713178)]
Tree #7: [('true', 0), ('false', 0.5)]
Tree #8: [('true,false', 0), ('true,true', 0.8643410852713178)]
Tree #9: [('true', 0), ('false', 0.5)]
Tree #10: [('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false', 0.8643410852713178)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.858148935099509;  // std dev = 1,07e-06, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | then if ( movie(F, A), workedunder(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048782;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109572;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839113;  // std dev = 9,88e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462834;  // std dev = 4,15e-08, 112,000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else return 0.5553664367462834;  // std dev = 4,21e-08, 111,000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then if ( female(B) )
%   | | | | then return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else if ( female(B) )
%   | | | | then return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | | else return -0.11231637819360642;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.11231637819360636;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( director(B) )
%   | then if ( movie(C, B), movie(C, A) )
%   | | then return 0.41751358415831047;  // std dev = 8,43e-08, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( movie(D, B), movie(D, E), actor(E) )
%   | | | then return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783641;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.3207118471601495;  // std dev = 3,42e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( workedunder(A, D), movie(E, D), movie(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926085;  // std dev = 8,16e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C), genre(C, D), genre(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.2089997821488449;  // std dev = 1,872, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 6,66e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return 0.21751379866564569;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else return 0.21751379866564569;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else return -0.0787767547310918;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then return -0.10294706910604742;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07877675473109179;  // std dev = 9,31e-10, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.07877675473109179;  // std dev = 9,31e-10, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109179;  // std dev = 9,31e-10, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else if ( actor(A) )
%   | | | | then return -0.07877675473109179;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | | else return -0.0787767547310918;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.14524333559337133;  // std dev = 1,521, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   else return -0.07324622576333695;  // std dev = 6,14e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return 0.1620611855152774;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else return 0.1620611855152774;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return -0.10691920101501418;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.10691920101501418;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420268;  // std dev = 2,46e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.06842697784420271;  // std dev = 1,61e-09, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( workedunder(A, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, A), movie(D, E), workedunder(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.10890256319083977;  // std dev = 1,311, 258,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=223 */
%   else return -0.06419184008202626;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104597
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.593 seconds
Total inference time: 0.502 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 12.495000000000001
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.541 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: transfer, Total folds for small set: 2, Time: 00:12:10
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.541, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 12.495000000000001, 'Mapping Results': {'Possible mappings': 300000, 'Generating paths time': 2.3283941745758057, 'Generating mappings time': 17.54048442840576, 'Knowledge compiling time': 0.0183408260345459, 'Total time': 139.55543780326843, 'Finding best mapping': 119.66821050643921}, 'CLL': -0.142969}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.858148935099509;  // std dev = 1,07e-06, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048813;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.7194734122109572;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   else return -0.12544463852839144;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.5553664367462832;  // std dev = 5,84e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360644;  // std dev = 3,65e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.41751358415831047;  // std dev = 8,43e-08, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   else return -0.10159632948783646;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.3207118471601495;  // std dev = 3,42e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926071;  // std dev = 7,88e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.25517224256948823;  // std dev = 2,80e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.20975771563253492;  // std dev = 3,01e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07877675473109154;  // std dev = 8,16e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.17709649774527764;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   else return -0.07324622576333678;  // std dev = 1,04e-07, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.1527438580936717;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420265;  // std dev = 7,45e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1,46e-07, 223,000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202626;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.819 seconds
Total inference time: 0.428 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: scratch, Total folds for small set: 2, Time: 00:12:15
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.428, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.819, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)', 'yearsinprogram(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(L, B), genre(B, M)', 'true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'genre(B, H), movie(D, I), workedunder(I, E)', 'true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,false,true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'false': [7.88e-08, 95, 0], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false': [0.266, 5, 60], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.155, 2, 4], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B), movie(G, I), director(I)', 'true,false': 'workedunder(D, B)', 'true,false,false': 'movie(K, A), movie(K, L), workedunder(M, L)', 'true,false,true,false,true,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, A)', 'true,false,true': 'genre(B, E), movie(F, D), movie(F, A)'}, {'true,false,true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false': [0.32, 4, 30], 'true,false,false,true': [0.494, 4, 4], 'false': [0.0, 95, 0], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false,true,false,false': [1.127, 3, 3], 'true,false,true,false,true,false,true': [1.49e-08, 0, 3], 'true,false,false,false': [0.25, 2, 28], 'true,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false,false': 'movie(F, K), workedunder(K, L)', 'true,false': 'movie(F, A), workedunder(G, B)', 'true,false,false': 'movie(M, B)', 'true': 'workedunder(D, B), movie(E, A), movie(E, B)', 'true,false,true,false': 'movie(J, B)', 'true,false,false,true': 'workedunder(N, B), movie(M, N)', 'true,false,true': 'movie(H, B), movie(F, I), director(I)'}, {'true,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,true': [0.866, 1, 3], 'true,false,false,true,false': [0.298, 8, 63], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false': [0.866, 3, 1], 'false': [0.073, 96, 1], 'true,false,false,false': [0.134, 0, 9], 'true,true': [0.0, 0, 29], 'true,false,true,false,false,true': [0.083, 0, 3]}], ['workedunder(A, B)', {'': 'director(B)', 'true,true,false,true,false': 'workedunder(H, B), workedunder(I, E), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'actor(A)', 'true,true,false,true,false,false': 'workedunder(J, B)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,true,false,true,false,true': [0.086, 0, 3], 'true,false': [6.45e-09, 11, 0], 'false': [0.0, 84, 0], 'true,true,false,true,false,false,false,true': [0.816, 2, 1], 'true,true,true': [0.046, 0, 41], 'true,true,false,true,true': [0.913, 5, 1], 'true,true,false,true,false,false,true': [0.866, 3, 1], 'true,true,false,true,false,false,false,false': [1.054, 2, 4], 'true,true,false,false': [0.28, 6, 62]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), genre(B, I)', 'true,false,false,true,true,false,false': 'workedunder(M, B)', 'true,false,false,true,true,false': 'genre(B, L)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(J, H), movie(K, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)'}, {'true,false,false,true,true,true': [0.838, 4, 1], 'false': [0.0, 95, 0], 'true,false,false,true,true,false,true': [0.631, 2, 3], 'true,false,false,true,true,false,false,true': [0.843, 1, 2], 'true,false,false,true,false': [0.588, 3, 1], 'true,false,false,true,true,false,false,false': [0.858, 1, 3], 'true,false,false,false': [0.266, 5, 59], 'true,true': [0.041, 0, 41], 'true,false,true': [0.912, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, E)', 'true,false,false,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true': 'workedunder(C, B), movie(D, C), movie(D, A)', 'true,false,false,false': 'workedunder(I, B), movie(J, B)', 'true,false,true': 'movie(F, B)', 'true,false,false,false,false': 'movie(K, B)'}, {'true,false,false,true': [0.234, 10, 83], 'false': [3.49e-08, 95, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false,false,true': [0.35, 1, 6], 'true,false,true,false': [0.236, 2, 6], 'true,true': [0.077, 0, 4], 'true,false,false,false,false,false,true': [0.893, 2, 2], 'true,false,false,false,true': [0.906, 2, 4], 'true,false,false,false,false,false,false': [0.145, 0, 6]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(K, B), movie(K, L), workedunder(M, L)', 'true,true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true,true,false': 'movie(G, A), movie(G, B)', 'true,true,false,false,true': 'movie(J, B)', 'true': 'workedunder(D, B)', 'true,false,false': 'movie(N, B)', 'true,true': 'genre(B, E), movie(F, B)'}, {'true,false,false,true': [1.064, 2, 2], 'false': [0.052, 96, 1], 'true,true,true': [0.816, 1, 2], 'true,true,false,false,false': [0.268, 3, 33], 'true,true,false,false,true,true': [0.833, 5, 1], 'true,false,false,false': [0.167, 0, 4], 'true,true,false,true': [0.0, 0, 29], 'true,false,true': [0.224, 3, 37], 'true,true,false,false,true,false': [0.358, 3, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true,false,false,false,false,false': 'movie(N, B)', 'true,false,false': 'movie(G, A), movie(G, H), workedunder(H, I)', 'true': 'genre(B, C), movie(D, B)', 'true,false,false,false,false,false,true': 'workedunder(P, B), movie(N, Q), actor(Q)', 'true,false,false,false': 'movie(J, A), movie(J, K), director(K)', 'true,false,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, B)'}, {'true,false,false,true': [0.067, 0, 3], 'false': [2.11e-08, 95, 0], 'true,false,false,false,true': [0.959, 4, 2], 'true,false,false,false,false,true': [0.852, 1, 3], 'true,false,false,false,false,false,true,false': [0.316, 3, 22], 'true,false,false,false,false,false,true,true': [0.213, 1, 20], 'true,true': [0.816, 1, 2], 'true,false,true': [0.204, 8, 52], 'true,false,false,false,false,false,false': [0.061, 0, 9]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,false,true,false,false': 'movie(M, A), genre(N, C), genre(N, P)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'genre(B, D), movie(E, A)', 'true,false,false,true,true': 'movie(G, I), workedunder(J, B)', 'true,false,false': 'movie(G, B)'}, {'true,false,false,true,false,false,true': [0.124, 0, 7], 'true,false,false,true,true,true': [0.739, 2, 1], 'true,false,false,true,false,true': [0.898, 1, 5], 'false': [0.469, 96, 1], 'true,false,false,true,true,false': [0.908, 4, 2], 'true,false,false,false': [0.221, 1, 10], 'true,true': [0.554, 2, 3], 'true,false,true': [0.055, 0, 41], 'true,false,false,true,false,false,false': [0.307, 7, 43]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true,true,false,false': 'movie(H, B), movie(I, C), movie(I, A)', 'true,true,false': 'movie(E, A)', 'true': 'workedunder(C, B)', 'true,false,false': 'movie(M, A), genre(B, N)', 'true,true': 'movie(D, A), movie(D, B)', 'true,true,false,true': 'movie(F, B), movie(E, G), director(G)'}, {'true,true,false,true,false': [0.291, 3, 7], 'true,false,false,true': [0.731, 1, 4], 'false': [2.69e-08, 95, 0], 'true,true,true': [3.16e-08, 0, 29], 'true,true,false,true,true': [0.81, 5, 1], 'true,true,false,false,true': [0.084, 0, 4], 'true,true,false,false,false': [0.315, 4, 28], 'true,false,false,false': [0.892, 2, 3], 'true,false,true': [0.221, 3, 37]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;workedunder(J, B).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;movie(L, B), genre(B, M).;false;false', '0;true,false,true,false,false,false;workedunder(K, E), movie(D, K).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;genre(B, H), movie(D, I), workedunder(I, E).;false;true', '0;true,false,true;movie(F, B), workedunder(G, B).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B), movie(G, I), director(I).;false;true', '1;true,false;workedunder(D, B).;true;true', '1;true,false,false;movie(K, A), movie(K, L), workedunder(M, L).;false;false', '1;true,false,true,false,true,false;movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;movie(G, A).;true;false', '1;true,false,true;genre(B, E), movie(F, D), movie(F, A).;false;true', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,false,true,false,false;movie(F, K), workedunder(K, L).;false;false', '2;true,false;movie(F, A), workedunder(G, B).;true;true', '2;true,false,false;movie(M, B).;true;false', '2;true;workedunder(D, B), movie(E, A), movie(E, B).;false;true', '2;true,false,true,false;movie(J, B).;false;true', '2;true,false,false,true;workedunder(N, B), movie(M, N).;false;false', '2;true,false,true;movie(H, B), movie(F, I), director(I).;false;true', '3;;workedunder(A, B) :- director(B).;true;false', '3;true,true,false,true,false;workedunder(H, B), workedunder(I, E), movie(D, I).;false;true', '3;true,true,false,true,false,false,false;workedunder(K, E), movie(D, K).;false;false', '3;true,true,false;movie(D, A), movie(D, E), director(E).;true;false', '3;true;actor(A).;true;false', '3;true,true,false,true,false,false;workedunder(J, B).;false;true', '3;true,true;movie(C, A), movie(C, B).;false;true', '3;true,true,false,true;movie(F, B), workedunder(G, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,false,true;workedunder(H, G), genre(B, I).;true;false', '4;true,false,false,true,true,false,false;workedunder(M, B).;false;false', '4;true,false,false,true,true,false;genre(B, L).;false;true', '4;true,false;workedunder(D, B), movie(E, D), movie(E, B).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,true,true;movie(J, H), movie(K, B).;false;true', '4;true,false,false;movie(F, A), movie(F, G), director(G).;true;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;genre(B, E).;true;true', '5;true,false,false,false,false,false;movie(L, A), movie(L, M), director(M).;false;false', '5;true,false,false;movie(G, B), movie(G, H), actor(H).;false;true', '5;true;workedunder(C, B), movie(D, C), movie(D, A).;false;true', '5;true,false,false,false;workedunder(I, B), movie(J, B).;false;true', '5;true,false,true;movie(F, B).;false;false', '5;true,false,false,false,false;movie(K, B).;false;true', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false;movie(K, B), movie(K, L), workedunder(M, L).;false;true', '6;true,true,false,false;movie(H, A), movie(H, I), director(I).;true;false', '6;true,true,false;movie(G, A), movie(G, B).;false;true', '6;true,true,false,false,true;movie(J, B).;false;false', '6;true;workedunder(D, B).;true;true', '6;true,false,false;movie(N, B).;false;false', '6;true,true;genre(B, E), movie(F, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false;movie(E, A), movie(F, B).;false;true', '7;true,false,false,false,false,false;movie(N, B).;true;false', '7;true,false,false;movie(G, A), movie(G, H), workedunder(H, I).;false;true', '7;true;genre(B, C), movie(D, B).;false;true', '7;true,false,false,false,false,false,true;workedunder(P, B), movie(N, Q), actor(Q).;false;false', '7;true,false,false,false;movie(J, A), movie(J, K), director(K).;false;true', '7;true,false,false,false,false;movie(L, B), movie(L, M), workedunder(M, B).;false;true', '8;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '8;true,false,false,true;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, K), movie(L, A).;false;true', '8;true,false,false,true,false,false;movie(M, A), genre(N, C), genre(N, P).;false;false', '8;true,false;movie(F, B), movie(F, A).;false;true', '8;true;genre(B, D), movie(E, A).;false;true', '8;true,false,false,true,true;movie(G, I), workedunder(J, B).;false;false', '8;true,false,false;movie(G, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '9;true,true,false,false;movie(H, B), movie(I, C), movie(I, A).;false;false', '9;true,true,false;movie(E, A).;true;true', '9;true;workedunder(C, B).;true;true', '9;true,false,false;movie(M, A), genre(B, N).;false;false', '9;true,true;movie(D, A), movie(D, B).;false;true', '9;true,true,false,true;movie(F, B), movie(E, G), director(G).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( genre(B, H), movie(D, I), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(K, E), movie(D, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, A), movie(E, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.1254446385283918;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B), movie(E, A), movie(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then if ( workedunder(I, B), movie(H, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.4926860092213135;  // std dev = 3,048, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.011952663072807988;  // std dev = 4,627, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.45793927517184035;  // std dev = 0,816, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | | else if ( movie(D, A), movie(D, E), director(E) )
%   | | | then if ( movie(F, B), workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, B), workedunder(I, E), movie(D, I) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(J, B) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else if ( workedunder(K, E), movie(D, K) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.15801602303867945;  // std dev = 0,134, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11351360908464453;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11351360908464493;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.34927513872467986;  // std dev = 0,771, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), genre(B, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.13818991189066218;  // std dev = 0,120, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10258224147968532;  // std dev = 1,32e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, C), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( movie(F, B) )
%   | | | then return 0.21760482274392265;  // std dev = 1,769, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), movie(G, H), actor(H) )
%   | | | then return 0.3081975193503523;  // std dev = 1,106, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09351616480855084;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then return 0.17971998143380305;  // std dev = 1,715, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.01692896736839919;  // std dev = 2,598, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C), movie(D, B) )
%   | then return 0.15122631547964602;  // std dev = 1,701, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then return 0.24860622061760365;  // std dev = 1,012, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08456460283858674;  // std dev = 1,32e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( genre(B, D), movie(E, A) )
%   | then return 0.12918259898758536;  // std dev = 1,711, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.019839822877516466;  // std dev = 2,243, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), genre(B, H) )
%   | | | then return 0.11170316888160362;  // std dev = 1,735, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0.20580365773128698;  // std dev = 0,962, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   else return -0.07682501835729769;  // std dev = 1,02e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137757
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.071 seconds
Total inference time: 0.466 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'genre(B, H), movie(D, I), workedunder(I, E)', 'true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 251, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [2.79e-08, 30, 0], 'true,true': [1.07e-06, 0, 281], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B)', 'true,false,false': 'movie(E, A), movie(E, F), workedunder(G, F)'}, {'true,false,false,false': [0.0, 30, 0], 'false': [0.0, 251, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 281], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'workedunder(D, B), movie(E, A), movie(E, B)', 'true,false': 'movie(F, A), workedunder(G, B)', 'true,false,false,true': 'workedunder(I, B), movie(H, I)', 'true,false,false': 'movie(H, B)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [3.048, 23, 222], 'false': [4.627, 258, 59], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B)', 'true,true,false,true,false': 'workedunder(H, B), workedunder(I, E), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'actor(A)', 'true,true,false,true,false,false': 'workedunder(J, B)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,true,false,true,false,true': [0.0, 0, 0], 'true,false': [0.0, 12, 0], 'false': [0.0, 239, 0], 'true,true,false,true,false,false,false,true': [0.0, 0, 0], 'true,true,false,true,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 0], 'true,true,false,true,false,false,true': [0.0, 0, 0], 'true,true,false,true,false,false,false,false': [0.134, 30, 0], 'true,true,true': [0.816, 0, 281]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, B)', 'true,false,false,true': 'workedunder(H, G), genre(B, I)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [0.12, 30, 0], 'false': [1.32e-07, 251, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.771, 0, 281], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B), movie(D, C), movie(D, A)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true,false,true': 'movie(F, B)'}, {'true,false,false,true': [1.106, 7, 59], 'false': [0.0, 251, 0], 'true,false,true,true': [1.769, 23, 222], 'true,false,true,false': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'workedunder(D, B)', 'true,false': 'movie(E, B), movie(E, F), workedunder(G, F)', 'true,false,false': 'movie(H, B)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [2.598, 258, 59], 'true,false,false,true': [1.715, 23, 222], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'genre(B, C), movie(D, B)', 'true,false': 'movie(E, A), movie(F, B)'}, {'false': [1.32e-07, 251, 0], 'true,true': [1.701, 23, 222], 'true,false,false': [0.0, 0, 0], 'true,false,true': [1.012, 7, 59]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'genre(B, D), movie(E, A)'}, {'false': [2.243, 258, 59], 'true,false': [0.0, 0, 0], 'true,true': [1.711, 23, 222]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)', 'true,false': 'movie(D, B), movie(D, E), workedunder(F, E)', 'true,false,false': 'movie(G, A), genre(B, H)'}, {'true,false,false,false': [0.962, 7, 59], 'false': [1.02e-07, 251, 0], 'true,false,false,true': [1.735, 23, 222], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), workedunder(G, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false;workedunder(D, B).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true;workedunder(D, B), movie(E, A), movie(E, B).;false;true', '2;true,false;movie(F, A), workedunder(G, B).;false;true', '2;true,false,false;movie(H, B).;false;false', '3;;workedunder(A, B) :- director(B).;true;false', '3;true,true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;true;actor(A).;true;false', '3;true,true;movie(C, A), movie(C, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false;workedunder(D, B), movie(E, D), movie(E, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;workedunder(C, B), movie(D, C), movie(D, A).;false;true', '5;true,false;genre(B, E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;workedunder(D, B).;false;true', '6;true,false;movie(E, B), movie(E, F), workedunder(G, F).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;genre(B, C), movie(D, B).;false;false', '8;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,true', 0)]
Tree #3: [('true,false,false,true,true', 0), ('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('false', 0.8138801261829653), ('true,false,false,true,false', 0.9061224489795918)]
Tree #4: [('true,true,false,true,true', 0), ('true,true,false,true,false,true', 0), ('true,true,false,true,false,false,false,true', 0), ('true,true,false,true,false,false,true', 0), ('true,true,false,false', 0)]
Tree #5: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,false', 0), ('true,false,true,false', 0), ('true,true', 0), ('true,false,false,true', 0.8939393939393939), ('true,false,true,true', 0.9061224489795918)]
Tree #7: [('true,false,false,false', 0), ('true,false,true', 0), ('true,true', 0), ('false', 0.8138801261829653), ('true,false,false,true', 0.9061224489795918)]
Tree #8: [('true,false,false', 0), ('true,false,true', 0.8939393939393939), ('true,true', 0.9061224489795918)]
Tree #9: [('true,false', 0), ('false', 0.8138801261829653), ('true,true', 0.9061224489795918)]
Tree #10: [('true,true', 0), ('true,false,true', 0), ('true,false,false,false', 0.8939393939393939), ('true,false,false,true', 0.9061224489795918)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.1254446385283918;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B), movie(E, A), movie(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then return 0.4926860092213135;  // std dev = 3,048, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.011952663072807988;  // std dev = 4,627, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.45793927517184035;  // std dev = 0,816, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | | else if ( movie(D, A), movie(D, E), director(E) )
%   | | | then return -0.15801602303867945;  // std dev = 0,134, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11351360908464453;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11351360908464493;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.34927513872467986;  // std dev = 0,771, 281,000 (wgt'ed) examples reached here.  /* #pos=281 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13818991189066218;  // std dev = 0,120, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.10258224147968532;  // std dev = 1,32e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, C), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( movie(F, B) )
%   | | | then return 0.21760482274392265;  // std dev = 1,769, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.3081975193503523;  // std dev = 1,106, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   else return -0.09351616480855084;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17971998143380305;  // std dev = 1,715, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   else return -0.01692896736839919;  // std dev = 2,598, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C), movie(D, B) )
%   | then return 0.15122631547964602;  // std dev = 1,701, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   | else return 0.24860622061760365;  // std dev = 1,012, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   else return -0.08456460283858674;  // std dev = 1,32e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.12918259898758536;  // std dev = 1,711, 245,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=222 */
%   else return -0.019839822877516466;  // std dev = 2,243, 317,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=59 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13167304754423748;  // std dev = 2,097, 311,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=281 */
%   else return -0.07682501835729769;  // std dev = 1,02e-07, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139469
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.611 seconds
Total inference time: 0.542 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 14.69
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108994
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.551 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: transfer, Total folds for small set: 3, Time: 00:14:55
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.551, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 14.69, 'Mapping Results': {'Possible mappings': 300000, 'Generating paths time': 2.2849466800689697, 'Generating mappings time': 17.462672472000122, 'Knowledge compiling time': 0.015648841857910156, 'Total time': 143.46993803977966, 'Finding best mapping': 123.70666241645813}, 'CLL': -0.108994}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995103;  // std dev = 7,73e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.85814893509951;  // std dev = 9,23e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048827;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.7194734122109562;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839177;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462834;  // std dev = 4,84e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 5,26e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360672;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830914;  // std dev = 3,91e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.4175135841583089;  // std dev = 4,50e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783653;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 2,60e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.3207118471601498;  // std dev = 2,73e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.09269127618926051;  // std dev = 8,43e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948967;  // std dev = 9,42e-08, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( director(A) )
%   | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2551722425694904;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   else return -0.08518475138839678;  // std dev = 8,82e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325353;  // std dev = 2,15e-07, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.2097577156325352;  // std dev = 2,46e-07, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109146;  // std dev = 6,50e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.1770964977452782;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333677;  // std dev = 1,21e-07, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.15274385809367147;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420264;  // std dev = 4,71e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 132,000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | else if ( actor(A) )
%   | | then return 0.134007030008011;  // std dev = 6,66e-08, 149,000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202626;  // std dev = 2,11e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.623 seconds
Total inference time: 0.699 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: scratch, Total folds for small set: 3, Time: 00:15:05
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.699, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 8.623, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)', 'yearsinprogram(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(L, B), genre(B, M)', 'true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'genre(B, H), movie(D, I), workedunder(I, E)', 'true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,false,true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'false': [7.88e-08, 95, 0], 'true,false,true,false,false,true': [0.866, 3, 1], 'true,false,true,true': [0.913, 5, 1], 'true,false,false,false': [0.266, 5, 60], 'true,true': [2.46e-07, 0, 41], 'true,false,true,false,false,false,false': [1.155, 2, 4], 'true,false,true,false,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B), movie(G, I), director(I)', 'true,false': 'workedunder(D, B)', 'true,false,false': 'movie(K, A), movie(K, L), workedunder(M, L)', 'true,false,true,false,true,false': 'movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'movie(G, A)', 'true,false,true': 'genre(B, E), movie(F, D), movie(F, A)'}, {'true,false,true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false': [0.32, 4, 30], 'true,false,false,true': [0.494, 4, 4], 'false': [0.0, 95, 0], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false,true,false,false': [1.127, 3, 3], 'true,false,true,false,true,false,true': [1.49e-08, 0, 3], 'true,false,false,false': [0.25, 2, 28], 'true,true': [0.0, 0, 41]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false,false': 'movie(F, K), workedunder(K, L)', 'true,false': 'movie(F, A), workedunder(G, B)', 'true,false,false': 'movie(M, B)', 'true': 'workedunder(D, B), movie(E, A), movie(E, B)', 'true,false,true,false': 'movie(J, B)', 'true,false,false,true': 'workedunder(N, B), movie(M, N)', 'true,false,true': 'movie(H, B), movie(F, I), director(I)'}, {'true,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,true': [0.866, 1, 3], 'true,false,false,true,false': [0.298, 8, 63], 'true,false,true,true': [0.913, 5, 1], 'true,false,true,false,false,false': [0.866, 3, 1], 'false': [0.073, 96, 1], 'true,false,false,false': [0.134, 0, 9], 'true,true': [0.0, 0, 29], 'true,false,true,false,false,true': [0.083, 0, 3]}], ['workedunder(A, B)', {'': 'director(B)', 'true,true,false,true,false': 'workedunder(H, B), workedunder(I, E), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'actor(A)', 'true,true,false,true,false,false': 'workedunder(J, B)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,true,false,true,false,true': [0.086, 0, 3], 'true,false': [6.45e-09, 11, 0], 'false': [0.0, 84, 0], 'true,true,false,true,false,false,false,true': [0.816, 2, 1], 'true,true,true': [0.046, 0, 41], 'true,true,false,true,true': [0.913, 5, 1], 'true,true,false,true,false,false,true': [0.866, 3, 1], 'true,true,false,true,false,false,false,false': [1.054, 2, 4], 'true,true,false,false': [0.28, 6, 62]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'workedunder(H, G), genre(B, I)', 'true,false,false,true,true,false,false': 'workedunder(M, B)', 'true,false,false,true,true,false': 'genre(B, L)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false,true,true': 'movie(J, H), movie(K, B)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)'}, {'true,false,false,true,true,true': [0.838, 4, 1], 'false': [0.0, 95, 0], 'true,false,false,true,true,false,true': [0.631, 2, 3], 'true,false,false,true,true,false,false,true': [0.843, 1, 2], 'true,false,false,true,false': [0.588, 3, 1], 'true,false,false,true,true,false,false,false': [0.858, 1, 3], 'true,false,false,false': [0.266, 5, 59], 'true,true': [0.041, 0, 41], 'true,false,true': [0.912, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, E)', 'true,false,false,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true': 'workedunder(C, B), movie(D, C), movie(D, A)', 'true,false,false,false': 'workedunder(I, B), movie(J, B)', 'true,false,true': 'movie(F, B)', 'true,false,false,false,false': 'movie(K, B)'}, {'true,false,false,true': [0.234, 10, 83], 'false': [3.49e-08, 95, 0], 'true,false,true,true': [0.816, 1, 2], 'true,false,false,false,false,true': [0.35, 1, 6], 'true,false,true,false': [0.236, 2, 6], 'true,true': [0.077, 0, 4], 'true,false,false,false,false,false,true': [0.893, 2, 2], 'true,false,false,false,true': [0.906, 2, 4], 'true,false,false,false,false,false,false': [0.145, 0, 6]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(K, B), movie(K, L), workedunder(M, L)', 'true,true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true,true,false': 'movie(G, A), movie(G, B)', 'true,true,false,false,true': 'movie(J, B)', 'true': 'workedunder(D, B)', 'true,false,false': 'movie(N, B)', 'true,true': 'genre(B, E), movie(F, B)'}, {'true,false,false,true': [1.064, 2, 2], 'false': [0.052, 96, 1], 'true,true,true': [0.816, 1, 2], 'true,true,false,false,false': [0.268, 3, 33], 'true,true,false,false,true,true': [0.833, 5, 1], 'true,false,false,false': [0.167, 0, 4], 'true,true,false,true': [0.0, 0, 29], 'true,false,true': [0.224, 3, 37], 'true,true,false,false,true,false': [0.358, 3, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true,false,false,false,false,false': 'movie(N, B)', 'true,false,false': 'movie(G, A), movie(G, H), workedunder(H, I)', 'true': 'genre(B, C), movie(D, B)', 'true,false,false,false,false,false,true': 'workedunder(P, B), movie(N, Q), actor(Q)', 'true,false,false,false': 'movie(J, A), movie(J, K), director(K)', 'true,false,false,false,false': 'movie(L, B), movie(L, M), workedunder(M, B)'}, {'true,false,false,true': [0.067, 0, 3], 'false': [2.11e-08, 95, 0], 'true,false,false,false,true': [0.959, 4, 2], 'true,false,false,false,false,true': [0.852, 1, 3], 'true,false,false,false,false,false,true,false': [0.316, 3, 22], 'true,false,false,false,false,false,true,true': [0.213, 1, 20], 'true,true': [0.816, 1, 2], 'true,false,true': [0.204, 8, 52], 'true,false,false,false,false,false,false': [0.061, 0, 9]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true,false': 'workedunder(K, B), movie(L, K), movie(L, A)', 'true,false,false,true,false,false': 'movie(M, A), genre(N, C), genre(N, P)', 'true,false': 'movie(F, B), movie(F, A)', 'true': 'genre(B, D), movie(E, A)', 'true,false,false,true,true': 'movie(G, I), workedunder(J, B)', 'true,false,false': 'movie(G, B)'}, {'true,false,false,true,false,false,true': [0.124, 0, 7], 'true,false,false,true,true,true': [0.739, 2, 1], 'true,false,false,true,false,true': [0.898, 1, 5], 'false': [0.469, 96, 1], 'true,false,false,true,true,false': [0.908, 4, 2], 'true,false,false,false': [0.221, 1, 10], 'true,true': [0.554, 2, 3], 'true,false,true': [0.055, 0, 41], 'true,false,false,true,false,false,false': [0.307, 7, 43]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(J, B), movie(J, K), workedunder(L, K)', 'true,true,false,false': 'movie(H, B), movie(I, C), movie(I, A)', 'true,true,false': 'movie(E, A)', 'true': 'workedunder(C, B)', 'true,false,false': 'movie(M, A), genre(B, N)', 'true,true': 'movie(D, A), movie(D, B)', 'true,true,false,true': 'movie(F, B), movie(E, G), director(G)'}, {'true,true,false,true,false': [0.291, 3, 7], 'true,false,false,true': [0.731, 1, 4], 'false': [2.69e-08, 95, 0], 'true,true,true': [3.16e-08, 0, 29], 'true,true,false,true,true': [0.81, 5, 1], 'true,true,false,false,true': [0.084, 0, 4], 'true,true,false,false,false': [0.315, 4, 28], 'true,false,false,false': [0.892, 2, 3], 'true,false,true': [0.221, 3, 37]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,false;workedunder(J, B).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true,false,false;movie(L, B), genre(B, M).;false;false', '0;true,false,true,false,false,false;workedunder(K, E), movie(D, K).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;genre(B, H), movie(D, I), workedunder(I, E).;false;true', '0;true,false,true;movie(F, B), workedunder(G, B).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B), movie(G, I), director(I).;false;true', '1;true,false;workedunder(D, B).;true;true', '1;true,false,false;movie(K, A), movie(K, L), workedunder(M, L).;false;false', '1;true,false,true,false,true,false;movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;movie(G, A).;true;false', '1;true,false,true;genre(B, E), movie(F, D), movie(F, A).;false;true', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,false,true,false,false;movie(F, K), workedunder(K, L).;false;false', '2;true,false;movie(F, A), workedunder(G, B).;true;true', '2;true,false,false;movie(M, B).;true;false', '2;true;workedunder(D, B), movie(E, A), movie(E, B).;false;true', '2;true,false,true,false;movie(J, B).;false;true', '2;true,false,false,true;workedunder(N, B), movie(M, N).;false;false', '2;true,false,true;movie(H, B), movie(F, I), director(I).;false;true', '3;;workedunder(A, B) :- director(B).;true;false', '3;true,true,false,true,false;workedunder(H, B), workedunder(I, E), movie(D, I).;false;true', '3;true,true,false,true,false,false,false;workedunder(K, E), movie(D, K).;false;false', '3;true,true,false;movie(D, A), movie(D, E), director(E).;true;false', '3;true;actor(A).;true;false', '3;true,true,false,true,false,false;workedunder(J, B).;false;true', '3;true,true;movie(C, A), movie(C, B).;false;true', '3;true,true,false,true;movie(F, B), workedunder(G, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false,false,true;workedunder(H, G), genre(B, I).;true;false', '4;true,false,false,true,true,false,false;workedunder(M, B).;false;false', '4;true,false,false,true,true,false;genre(B, L).;false;true', '4;true,false;workedunder(D, B), movie(E, D), movie(E, B).;false;true', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false,false,true,true;movie(J, H), movie(K, B).;false;true', '4;true,false,false;movie(F, A), movie(F, G), director(G).;true;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;genre(B, E).;true;true', '5;true,false,false,false,false,false;movie(L, A), movie(L, M), director(M).;false;false', '5;true,false,false;movie(G, B), movie(G, H), actor(H).;false;true', '5;true;workedunder(C, B), movie(D, C), movie(D, A).;false;true', '5;true,false,false,false;workedunder(I, B), movie(J, B).;false;true', '5;true,false,true;movie(F, B).;false;false', '5;true,false,false,false,false;movie(K, B).;false;true', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false;movie(K, B), movie(K, L), workedunder(M, L).;false;true', '6;true,true,false,false;movie(H, A), movie(H, I), director(I).;true;false', '6;true,true,false;movie(G, A), movie(G, B).;false;true', '6;true,true,false,false,true;movie(J, B).;false;false', '6;true;workedunder(D, B).;true;true', '6;true,false,false;movie(N, B).;false;false', '6;true,true;genre(B, E), movie(F, B).;false;true', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false;movie(E, A), movie(F, B).;false;true', '7;true,false,false,false,false,false;movie(N, B).;true;false', '7;true,false,false;movie(G, A), movie(G, H), workedunder(H, I).;false;true', '7;true;genre(B, C), movie(D, B).;false;true', '7;true,false,false,false,false,false,true;workedunder(P, B), movie(N, Q), actor(Q).;false;false', '7;true,false,false,false;movie(J, A), movie(J, K), director(K).;false;true', '7;true,false,false,false,false;movie(L, B), movie(L, M), workedunder(M, B).;false;true', '8;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '8;true,false,false,true;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true,false;workedunder(K, B), movie(L, K), movie(L, A).;false;true', '8;true,false,false,true,false,false;movie(M, A), genre(N, C), genre(N, P).;false;false', '8;true,false;movie(F, B), movie(F, A).;false;true', '8;true;genre(B, D), movie(E, A).;false;true', '8;true,false,false,true,true;movie(G, I), workedunder(J, B).;false;false', '8;true,false,false;movie(G, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(J, B), movie(J, K), workedunder(L, K).;false;true', '9;true,true,false,false;movie(H, B), movie(I, C), movie(I, A).;false;false', '9;true,true,false;movie(E, A).;true;true', '9;true;workedunder(C, B).;true;true', '9;true,false,false;movie(M, A), genre(B, N).;false;false', '9;true,true;movie(D, A), movie(D, B).;false;true', '9;true,true,false,true;movie(F, B), movie(E, G), director(G).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( genre(B, H), movie(D, I), workedunder(I, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(J, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(K, E), movie(D, K) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( workedunder(D, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, A), movie(E, F), workedunder(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.12544463852839197;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B), movie(E, A), movie(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then if ( workedunder(I, B), movie(H, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.510555509569109;  // std dev = 2,884, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.007547000317400645;  // std dev = 4,709, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.4509959381104053;  // std dev = 0,898, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else if ( movie(D, A), movie(D, E), director(E) )
%   | | | then if ( movie(F, B), workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, B), workedunder(I, E), movie(D, I) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else if ( workedunder(J, B) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else if ( workedunder(K, E), movie(D, K) )
%   | | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | | else return -0.15326531391082684;  // std dev = 0,162, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11156613029796374;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11156613029796329;  // std dev = 9,19e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3445038556363125;  // std dev = 0,850, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, G), director(G) )
%   | | | then if ( workedunder(H, G), genre(B, I) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.13452687533820162;  // std dev = 0,144, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10097763691389895;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, C), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( movie(F, B) )
%   | | | then return 0.22668136952953774;  // std dev = 1,682, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), movie(G, H), actor(H) )
%   | | | then return 0.29728380085988537;  // std dev = 1,311, 69,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=59 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09217300960851539;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then return 0.1870624626423895;  // std dev = 1,632, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.02562216794396131;  // std dev = 2,698, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C), movie(D, B) )
%   | then return 0.1575898608271964;  // std dev = 1,623, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then return 0.24239325244106874;  // std dev = 1,205, 69,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=59 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08277842234785976;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( genre(B, D), movie(E, A) )
%   | then return 0.1349869641233545;  // std dev = 1,638, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.026458299065237056;  // std dev = 2,350, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B), movie(D, E), workedunder(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A), genre(B, H) )
%   | | | then return 0.11718556367396019;  // std dev = 1,666, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0.2018663144715124;  // std dev = 1,145, 69,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=59 */
%   else return -0.07485355979551042;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.117659
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.938 seconds
Total inference time: 0.586 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(J, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'genre(B, H), movie(D, I), workedunder(I, E)', 'true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [8.43e-08, 307, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false,false': [2.79e-08, 30, 0], 'true,true': [1.04e-06, 0, 337], 'true,false,true,false,false,false,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B)', 'true,false,false': 'movie(E, A), movie(E, F), workedunder(G, F)'}, {'true,false,false,false': [0.0, 30, 0], 'false': [0.0, 307, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 337], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'workedunder(D, B), movie(E, A), movie(E, B)', 'true,false': 'movie(F, A), workedunder(G, B)', 'true,false,false,true': 'workedunder(I, B), movie(H, I)', 'true,false,false': 'movie(H, B)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [2.884, 20, 278], 'false': [4.709, 317, 59], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B)', 'true,true,false,true,false': 'workedunder(H, B), workedunder(I, E), movie(D, I)', 'true,true,false,true,false,false,false': 'workedunder(K, E), movie(D, K)', 'true,true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'actor(A)', 'true,true,false,true,false,false': 'workedunder(J, B)', 'true,true': 'movie(C, A), movie(C, B)', 'true,true,false,true': 'movie(F, B), workedunder(G, B)'}, {'true,true,false,true,false,true': [0.0, 0, 0], 'true,false': [0.0, 10, 0], 'false': [9.19e-08, 297, 0], 'true,true,false,true,false,false,false,true': [0.0, 0, 0], 'true,true,false,true,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 0], 'true,true,false,true,false,false,true': [0.0, 0, 0], 'true,true,false,true,false,false,false,false': [0.162, 30, 0], 'true,true,true': [0.898, 0, 337]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'workedunder(D, B), movie(E, D), movie(E, B)', 'true,false,false,true': 'workedunder(H, G), genre(B, I)', 'true,false,false': 'movie(F, A), movie(F, G), director(G)'}, {'true,false,false,true,true': [0.0, 0, 0], 'true,false,false,true,false': [0.144, 30, 0], 'false': [0.0, 307, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.85, 0, 337], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B), movie(D, C), movie(D, A)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(G, B), movie(G, H), actor(H)', 'true,false,true': 'movie(F, B)'}, {'true,false,false,true': [1.311, 10, 59], 'false': [0.0, 307, 0], 'true,false,true,true': [1.682, 20, 278], 'true,false,true,false': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'workedunder(D, B)', 'true,false': 'movie(E, B), movie(E, F), workedunder(G, F)', 'true,false,false': 'movie(H, B)'}, {'true,false,false,false': [0.0, 0, 0], 'false': [2.698, 317, 59], 'true,false,false,true': [1.632, 20, 278], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'genre(B, C), movie(D, B)', 'true,false': 'movie(E, A), movie(F, B)'}, {'false': [0.0, 307, 0], 'true,true': [1.623, 20, 278], 'true,false,false': [0.0, 0, 0], 'true,false,true': [1.205, 10, 59]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true': 'genre(B, D), movie(E, A)'}, {'false': [2.35, 317, 59], 'true,false': [0.0, 0, 0], 'true,true': [1.638, 20, 278]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'workedunder(C, B)', 'true,false': 'movie(D, B), movie(D, E), workedunder(F, E)', 'true,false,false': 'movie(G, A), genre(B, H)'}, {'true,false,false,false': [1.145, 10, 59], 'false': [0.0, 307, 0], 'true,false,false,true': [1.666, 20, 278], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), workedunder(G, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false;workedunder(D, B).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true;workedunder(D, B), movie(E, A), movie(E, B).;false;true', '2;true,false;movie(F, A), workedunder(G, B).;false;true', '2;true,false,false;movie(H, B).;false;false', '3;;workedunder(A, B) :- director(B).;true;false', '3;true,true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;true;actor(A).;true;false', '3;true,true;movie(C, A), movie(C, B).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B).;false;true', '4;true,false;workedunder(D, B), movie(E, D), movie(E, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;workedunder(C, B), movie(D, C), movie(D, A).;false;true', '5;true,false;genre(B, E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;workedunder(D, B).;false;true', '6;true,false;movie(E, B), movie(E, F), workedunder(G, F).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;genre(B, C), movie(D, B).;false;false', '8;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,true,false,false,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,false,true', 0)]
Tree #2: [('true,false,false,true', 0), ('true,false,true', 0)]
Tree #3: [('true,false,false,true,true', 0), ('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('false', 0.8430851063829787), ('true,false,false,true,false', 0.9328859060402684)]
Tree #4: [('true,true,false,true,true', 0), ('true,true,false,true,false,true', 0), ('true,true,false,true,false,false,false,true', 0), ('true,true,false,true,false,false,true', 0), ('true,true,false,false', 0)]
Tree #5: [('true,false,false,false', 0), ('true,false,false,true,true', 0), ('true,false,true', 0)]
Tree #6: [('true,false,false,false', 0), ('true,false,true,false', 0), ('true,true', 0), ('true,false,false,true', 0.855072463768116), ('true,false,true,true', 0.9328859060402684)]
Tree #7: [('true,false,false,false', 0), ('true,false,true', 0), ('true,true', 0), ('false', 0.8430851063829787), ('true,false,false,true', 0.9328859060402684)]
Tree #8: [('true,false,false', 0), ('true,false,true', 0.855072463768116), ('true,true', 0.9328859060402684)]
Tree #9: [('true,false', 0), ('false', 0.8430851063829787), ('true,true', 0.9328859060402684)]
Tree #10: [('true,true', 0), ('true,false,true', 0), ('true,false,false,false', 0.855072463768116), ('true,false,false,true', 0.9328859060402684)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( workedunder(D, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.12544463852839197;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B), movie(E, A), movie(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B) )
%   | | | then return 0.510555509569109;  // std dev = 2,884, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.007547000317400645;  // std dev = 4,709, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.4509959381104053;  // std dev = 0,898, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else if ( movie(D, A), movie(D, E), director(E) )
%   | | | then return -0.15326531391082684;  // std dev = 0,162, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11156613029796374;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11156613029796329;  // std dev = 9,19e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3445038556363125;  // std dev = 0,850, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( workedunder(D, B), movie(E, D), movie(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13452687533820162;  // std dev = 0,144, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.10097763691389895;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, C), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( movie(F, B) )
%   | | | then return 0.22668136952953774;  // std dev = 1,682, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.29728380085988537;  // std dev = 1,311, 69,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=59 */
%   else return -0.09217300960851539;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), movie(E, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1870624626423895;  // std dev = 1,632, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   else return -0.02562216794396131;  // std dev = 2,698, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( genre(B, C), movie(D, B) )
%   | then return 0.1575898608271964;  // std dev = 1,623, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   | else return 0.24239325244106874;  // std dev = 1,205, 69,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=59 */
%   else return -0.08277842234785976;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.1349869641233545;  // std dev = 1,638, 298,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=278 */
%   else return -0.026458299065237056;  // std dev = 2,350, 376,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=59 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13310646777486299;  // std dev = 2,119, 367,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=337 */
%   else return -0.07485355979551042;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11757
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.431 seconds
Total inference time: 0.556 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 14.511
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105423
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.542 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: transfer, Total folds for small set: 4, Time: 00:17:55
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.542, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 14.511, 'Mapping Results': {'Possible mappings': 300000, 'Generating paths time': 2.415562868118286, 'Generating mappings time': 18.369792938232422, 'Knowledge compiling time': 0.03213047981262207, 'Total time': 153.7852656841278, 'Finding best mapping': 132.9677698612213}, 'CLL': -0.105423}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995097;  // std dev = 9,90e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.8415743494641503;  // std dev = 0,128, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.14185106490048785;  // std dev = 8,94e-08, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.7062318977990664;  // std dev = 0,128, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.12544463852839194;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.43728361565313206;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5592486049151365;  // std dev = 0,067, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   else return -0.11231637819360682;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4165697598450732;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.41127052214820475;  // std dev = 0,097, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.10159632948783658;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3200720495437465;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.3151874562254856;  // std dev = 0,097, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.0926912761892605;  // std dev = 1,66e-07, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.254735628217257;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.24961389424915975;  // std dev = 0,099, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20944924967726222;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.20395468799858663;  // std dev = 0,101, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.07877675473109147;  // std dev = 2,98e-08, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17687021953584317;  // std dev = 1,66e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.1710243503359314;  // std dev = 0,103, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.07324622576333696;  // std dev = 9,88e-08, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.6596137743295581;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15650416360929367;  // std dev = 0,068, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   else return -0.06842697784420294;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13341772930405782;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.1294646840525173;  // std dev = 0,082, 181,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=178 */
%   else return -0.06419184008202598;  // std dev = 1,13e-07, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097153
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.841 seconds
Total inference time: 0.531 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 4, Type: scratch, Total folds for small set: 4, Time: 00:18:03
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.531, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 7.841, 'CLL': -0.097153}
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.834339411289988;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( publication(H, B) )
%   | | | | | then if ( publication(H, E) )
%   | | | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(I, E) )
%   | | | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7438632208137983;  // std dev = 0,318, 70,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=62 */
%   else return -0.14185106490048766;  // std dev = 7,60e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7004441928528997;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( publication(H, B) )
%   | | | | | then if ( publication(H, E) )
%   | | | | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(I, E), publication(J, E), publication(J, B) )
%   | | | | | then return 0.11496227290862865;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.47408388207008856;  // std dev = 1,111, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.6276658725961729;  // std dev = 0,318, 70,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=62 */
%   else return -0.12544463852839147;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), tempadvisedby(D, B), publication(C, B) )
%   | then return 0.5659181623336699;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), tempadvisedby(F, B), publication(G, B) )
%   | | then if ( publication(E, H), professor(H) )
%   | | | then return -0.0032832549039616054;  // std dev = 0,333, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.3555084759944849;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(I, A), publication(I, J), professor(J) )
%   | | | then if ( publication(I, B) )
%   | | | | then return 0.48899508541059283;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else if ( projectmember(K, B) )
%   | | | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( tempadvisedby(L, J) )
%   | | | | | | then return 0.30900349765118573;  // std dev = 0,470, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | | | | else return 0.08998955517683337;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.49944786993387813;  // std dev = 0,308, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   else return -0.11231637819360625;  // std dev = 6,66e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, D), professor(D) )
%   | then return 0.3249511039273933;  // std dev = 0,298, 64,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=51 */
%   | else if ( tempadvisedby(E, B), inphase(E, F), inphase(A, F) )
%   | | then return 0.48226320463676753;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tempadvisedby(G, B), publication(H, G) )
%   | | | then return 0.16091964307119544;  // std dev = 0,787, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then if ( publication(J, A) )
%   | | | | | then return 0.5182325199400515;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | | | then return 0.38226320463676755;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | | | | else if ( publication(M, B) )
%   | | | | | | | then return 0.14892987130343407;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | | else return 0.23226320463676742;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.3822632046367676;  // std dev = 0,300, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else return -0.10159632948783617;  // std dev = 5,77e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B), tempadvisedby(D, B) )
%   | then return 0.3484968885350959;  // std dev = 5,96e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), tempadvisedby(F, B), publication(G, B) )
%   | | then if ( publication(G, H), student(H) )
%   | | | then if ( publication(E, I), tempadvisedby(J, I), inphase(H, K) )
%   | | | | then return 0.11983110584503172;  // std dev = 0,780, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13492836016453416;  // std dev = 0,662, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.21079078681432994;  // std dev = 0,440, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(L, A), publication(L, M), tempadvisedby(M, N) )
%   | | | then return 0.3862912475984356;  // std dev = 0,175, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( publication(P, B), publication(P, Q), student(Q) )
%   | | | | then return 0.2817436872087766;  // std dev = 0,310, 64,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=56 */
%   | | | | else if ( tempadvisedby(R, B), publication(S, A) )
%   | | | | | then return 0.025021669379576467;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.23880462918384984;  // std dev = 0,361, 22,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   else return -0.09269127618926105;  // std dev = 1,05e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B), tempadvisedby(D, B) )
%   | then return 0.2740541403962898;  // std dev = 3,65e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | then if ( tempadvisedby(G, B) )
%   | | | then if ( projectmember(H, B) )
%   | | | | then return 0.26033441889316244;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(I, B), publication(I, J), inphase(J, K) )
%   | | | | | then return 0.006649777842763627;  // std dev = 0,818, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.06802017727905162;  // std dev = 0,852, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(E, B) )
%   | | | | then return 0.22495744147150037;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else if ( tempadvisedby(L, F), publication(M, F), publication(M, B) )
%   | | | | | then return -0.10583849197185084;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.20537708145287345;  // std dev = 1,034, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.22064553079384916;  // std dev = 0,310, 70,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=62 */
%   else return -0.08518475138839679;  // std dev = 3,16e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B), tempadvisedby(D, B) )
%   | then return 0.22301120729494178;  // std dev = 5,37e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), publication(F, B), tempadvisedby(G, B) )
%   | | then if ( publication(E, H), professor(H) )
%   | | | then return -0.04995354848806821;  // std dev = 0,321, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.10367459504092527;  // std dev = 0,750, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(I, A), publication(I, J), tempadvisedby(J, K) )
%   | | | then return 0.2548598424480444;  // std dev = 0,159, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( publication(L, A), publication(L, M), professor(M) )
%   | | | | then if ( publication(L, B) )
%   | | | | | then return 0.17485024584666287;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | | | else if ( tempadvisedby(N, M), publication(P, N) )
%   | | | | | | then return -0.04884391835422532;  // std dev = 1,088, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.13828998482063568;  // std dev = 1,058, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.17783281632434259;  // std dev = 0,305, 66,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=59 */
%   else return -0.07877675473109165;  // std dev = 4,47e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), tempadvisedby(D, B), publication(C, A) )
%   | then return 0.18675799399881485;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), tempadvisedby(F, B) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.17372911428149218;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(H, B), publication(H, I), student(I) )
%   | | | | then if ( publication(E, J), tempadvisedby(K, J), inphase(I, L) )
%   | | | | | then return 0.10687156530675511;  // std dev = 0,778, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.13588132885416898;  // std dev = 0,652, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08627821718029875;  // std dev = 0,896, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tempadvisedby(M, B), publication(N, M) )
%   | | | then return 0.25607126370763084;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( tempadvisedby(P, B) )
%   | | | | then return 0.1259522694482067;  // std dev = 0,325, 32,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   | | | | else return 0.13078318666113226;  // std dev = 0,324, 52,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=44 */
%   else return -0.07324622576333704;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.14917909268924445;  // std dev = 0,149, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, E) )
%   | | | then if ( publication(G, F), publication(H, B), publication(H, E) )
%   | | | | then return -0.38270434627831856;  // std dev = 0,124, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else if ( tempadvisedby(I, B) )
%   | | | | | then if ( projectmember(J, B) )
%   | | | | | | then return 0.15018452777578695;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else if ( publication(K, F) )
%   | | | | | | | then return -0.023522565069486655;  // std dev = 0,834, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | | else return 0.12135847851959507;  // std dev = 0,731, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.39905683889641597;  // std dev = 0,158, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1485864567567547;  // std dev = 0,815, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1169252334890125;  // std dev = 0,309, 70,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=62 */
%   else return -0.06842697784420268;  // std dev = 3,57e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then return 0.14098266128772774;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(E, A), tempadvisedby(F, B), publication(G, B) )
%   | | then if ( publication(G, H), student(H) )
%   | | | then if ( publication(E, I), tempadvisedby(J, I), inphase(H, K) )
%   | | | | then return 0.09699966809862075;  // std dev = 0,730, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.12225243370386958;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09981349649568161;  // std dev = 0,330, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(L, B), tempadvisedby(M, B) )
%   | | | then return 0.10355326402348129;  // std dev = 0,296, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | | else if ( publication(N, A), publication(N, P), hasposition(P, Q) )
%   | | | | then if ( hasposition(B, Q), hasposition(R, Q), tempadvisedby(S, R) )
%   | | | | | then return 0.05085390650825273;  // std dev = 0,323, 23,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | | | else return 0.15927729210162994;  // std dev = 0,743, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | else return 0.0951198715299441;  // std dev = 0,313, 36,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   else return -0.06419184008202625;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'hasposition(person,faculty).', 'inphase(person,prequals).', 'projectmember(project,person).', 'publication(title,person).', 'professor(person).', 'student(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(H, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,false,false': 'tempadvisedby(I, E)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'tempadvisedby(G, B)', 'true,false,true,false,true,true': 'publication(H, E)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [7.6e-08, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(H, B)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,false,false': 'tempadvisedby(I, E), publication(J, E), publication(J, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,true,false': 'tempadvisedby(G, B)', 'true,false,true,false,true,true': 'publication(H, E)', 'true,false,true': 'projectmember(F, B)'}, {'true,false,true,false,false,false': [1.111, 2, 4], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,true': 'publication(I, B)', 'true,false': 'publication(E, A), tempadvisedby(F, B), publication(G, B)', 'true,false,false,true,false': 'projectmember(K, B)', 'true,false,false,true,false,false': 'tempadvisedby(L, J)', 'true,false,false': 'publication(I, A), publication(I, J), professor(J)', 'true': 'publication(C, A), tempadvisedby(D, B), publication(C, B)', 'true,false,true': 'publication(E, H), professor(H)'}, {'true,false,false,true,false,false,true': [0.47, 4, 5], 'true,false,false,true,false,true': [1.05e-08, 0, 3], 'false': [6.66e-08, 92, 0], 'true,false,true,true': [0.333, 6, 1], 'true,false,false,false': [0.308, 7, 59], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,true,true': [0.266, 1, 12], 'true,true': [0.0, 0, 29], 'true,false,false,true,false,false,false': [0.816, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'tempadvisedby(E, B), inphase(E, F), inphase(A, F)', 'true,false,false': 'tempadvisedby(G, B), publication(H, G)', 'true,false,false,false,true,false,false': 'publication(M, B)', 'true': 'publication(C, A), publication(C, D), professor(D)', 'true,false,false,false': 'tempadvisedby(I, B)', 'true,false,false,false,true,false': 'publication(K, B), publication(K, L), student(L)', 'true,false,false,false,true': 'publication(J, A)'}, {'true,false,false,false,true,true': [0.0, 0, 3], 'true,false,false,false,true,false,true': [0.3, 2, 18], 'true,false,false,true': [0.787, 1, 2], 'true,false,false,false,true,false,false,false': [0.866, 1, 3], 'false': [5.77e-08, 92, 0], 'true,false,false,false,true,false,false,true': [0.816, 1, 2], 'true,true': [0.298, 13, 51], 'true,false,true': [0.0, 0, 7], 'true,false,false,false,false': [0.3, 3, 27]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(E, A), tempadvisedby(F, B), publication(G, B)', 'true,false,false': 'publication(L, A), publication(L, M), tempadvisedby(M, N)', 'true,false,true,true': 'publication(E, I), tempadvisedby(J, I), inphase(H, K)', 'true': 'publication(C, A), publication(C, B), tempadvisedby(D, B)', 'true,false,false,false': 'publication(P, B), publication(P, Q), student(Q)', 'true,false,true': 'publication(G, H), student(H)', 'true,false,false,false,false': 'tempadvisedby(R, B), publication(S, A)'}, {'true,false,false,true': [0.175, 0, 5], 'false': [1.05e-08, 92, 0], 'true,false,false,false,false,false': [0.361, 4, 18], 'true,false,false,false,false,true': [0.816, 2, 1], 'true,false,true,false': [0.44, 1, 2], 'true,false,true,true,true': [0.78, 2, 1], 'true,true': [5.96e-08, 0, 29], 'true,false,false,false,true': [0.31, 8, 56], 'true,false,true,true,false': [0.662, 4, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,false': 'tempadvisedby(L, F), publication(M, F), publication(M, B)', 'true,false': 'publication(E, A), publication(E, F), professor(F)', 'true,false,true,true': 'projectmember(H, B)', 'true': 'publication(C, A), publication(C, B), tempadvisedby(D, B)', 'true,false,true,false': 'publication(E, B)', 'true,false,true': 'tempadvisedby(G, B)', 'true,false,true,true,false': 'publication(I, B), publication(I, J), inphase(J, K)'}, {'true,false,true,false,true': [0.266, 1, 12], 'true,false,true,true,false,false': [0.852, 4, 1], 'true,false,false': [0.31, 8, 62], 'true,false,true,true,false,true': [0.818, 4, 1], 'true,false,true,false,false,false': [1.034, 2, 4], 'false': [3.16e-08, 92, 0], 'true,false,true,false,false,true': [0.816, 2, 1], 'true,true': [3.65e-08, 0, 29], 'true,false,true,true,true': [5.27e-09, 0, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(E, A), publication(F, B), tempadvisedby(G, B)', 'true,false,false,false,true': 'publication(L, B)', 'true,false,false': 'publication(I, A), publication(I, J), tempadvisedby(J, K)', 'true': 'publication(C, A), publication(C, B), tempadvisedby(D, B)', 'true,false,false,false': 'publication(L, A), publication(L, M), professor(M)', 'true,false,false,false,true,false': 'tempadvisedby(N, M), publication(P, N)', 'true,false,true': 'publication(E, H), professor(H)'}, {'true,false,false,false,true,true': [0.276, 1, 11], 'true,false,false,false,true,false,true': [1.088, 4, 2], 'true,false,false,true': [0.159, 0, 5], 'false': [4.47e-08, 92, 0], 'true,false,true,true': [0.321, 6, 1], 'true,false,false,false,true,false,false': [1.058, 2, 3], 'true,false,true,false': [0.75, 1, 3], 'true,false,false,false,false': [0.305, 7, 59], 'true,true': [5.37e-08, 0, 29]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,true,false,true': 'publication(E, J), tempadvisedby(K, J), inphase(I, L)', 'true,false': 'publication(E, A), tempadvisedby(F, B)', 'true,false,false': 'tempadvisedby(M, B), publication(N, M)', 'true': 'publication(C, B), tempadvisedby(D, B), publication(C, A)', 'true,false,true,false': 'publication(H, B), publication(H, I), student(I)', 'true,false,false,false': 'tempadvisedby(P, B)', 'true,false,true': 'projectmember(G, B)'}, {'true,false,true,false,true,true': [0.778, 2, 1], 'true,false,true,false,false': [0.896, 3, 3], 'true,false,false,true': [0.061, 0, 4], 'false': [0.0, 92, 0], 'true,false,true,true': [3.73e-09, 0, 3], 'true,false,true,false,true,false': [0.652, 4, 1], 'true,false,false,false,false': [0.324, 8, 44], 'true,true': [0.0, 0, 29], 'true,false,false,false,true': [0.325, 4, 28]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,true,false,true': 'projectmember(J, B)', 'true,false,true,true': 'publication(G, F), publication(H, B), publication(H, E)', 'true,false,true,true,false,true,false': 'publication(K, F)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true': 'tempadvisedby(F, E)', 'true,false,true,true,false': 'tempadvisedby(I, B)'}, {'true,false,true,true,false,false': [0.158, 0, 4], 'true,false,true,true,false,true,false,true': [0.834, 3, 1], 'true,false,false': [0.309, 8, 62], 'true,false,true,true,true': [0.124, 3, 0], 'false': [3.57e-08, 92, 0], 'true,false,true,false': [0.815, 4, 1], 'true,false,true,true,false,true,true': [0.0, 0, 3], 'true,true': [0.149, 1, 41], 'true,false,true,true,false,true,false,false': [0.731, 2, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(E, A), tempadvisedby(F, B), publication(G, B)', 'true,false,false': 'publication(L, B), tempadvisedby(M, B)', 'true,false,true,true': 'publication(E, I), tempadvisedby(J, I), inphase(H, K)', 'true': 'tempadvisedby(C, B), publication(D, B), publication(D, A)', 'true,false,false,false,true': 'hasposition(B, Q), hasposition(R, Q), tempadvisedby(S, R)', 'true,false,false,false': 'publication(N, A), publication(N, P), hasposition(P, Q)', 'true,false,true': 'publication(G, H), student(H)'}, {'true,false,false,false,true,true': [0.323, 6, 17], 'true,false,false,true': [0.296, 3, 27], 'false': [0.0, 92, 0], 'true,false,true,false': [0.33, 1, 2], 'true,false,true,true,true': [0.73, 2, 1], 'true,true': [0.0, 0, 29], 'true,false,false,false,true,false': [0.743, 1, 4], 'true,false,false,false,false': [0.313, 4, 32], 'true,false,true,true,false': [0.653, 4, 1]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [7.6e-08, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E), movie(J, E), movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [1.111, 2, 4], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(I, B)', 'true,false,false,true,false': 'genre(B, K)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false,false': 'workedunder(L, J)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)', 'true,false,false': 'movie(I, A), movie(I, J), director(J)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,true,true': [0.266, 1, 12], 'true,false,false,true,false,false,true': [0.47, 4, 5], 'false': [6.66e-08, 92, 0], 'true,false,true,true': [0.333, 6, 1], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,false': [0.308, 7, 59], 'true,true': [0.0, 0, 29], 'true,false,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,false,false,false': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(E, B), movie(F, E), movie(F, A)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true,false,false,false,true,false,false': 'movie(M, B)', 'true': 'movie(C, A), movie(C, D), director(D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,true,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false,false,true': 'movie(J, A)'}, {'true,false,false,false,true,true': [0.0, 0, 3], 'true,false,false,false,true,false,true': [0.3, 2, 18], 'true,false,false,true': [0.787, 1, 2], 'true,false,false,false,true,false,false,false': [0.866, 1, 3], 'false': [5.77e-08, 92, 0], 'true,false,false,false,true,false,false,true': [0.816, 1, 2], 'true,true': [0.298, 13, 51], 'true,false,true': [0.0, 0, 7], 'true,false,false,false,false': [0.3, 3, 27]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, A), movie(L, M), workedunder(M, N)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(P, B), movie(P, Q), actor(Q)', 'true,false,true': 'movie(G, H), actor(H)', 'true,false,false,false,false': 'workedunder(R, B), movie(S, A)'}, {'true,false,false,true': [0.175, 0, 5], 'false': [1.05e-08, 92, 0], 'true,false,false,false,false,false': [0.361, 4, 18], 'true,false,false,false,false,true': [0.816, 2, 1], 'true,false,true,false': [0.44, 1, 2], 'true,false,true,true,false': [0.662, 4, 1], 'true,true': [5.96e-08, 0, 29], 'true,false,false,false,true': [0.31, 8, 56], 'true,false,true,true,true': [0.78, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(L, F), movie(M, F), movie(M, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)', 'true,false,true,true,false': 'movie(I, B), movie(I, J), movie(K, J)'}, {'true,false,true,false,true': [0.266, 1, 12], 'true,false,true,true,false,false': [0.852, 4, 1], 'true,false,false': [0.31, 8, 62], 'true,false,true,true,false,true': [0.818, 4, 1], 'true,false,true,false,false,false': [1.034, 2, 4], 'false': [3.16e-08, 92, 0], 'true,false,true,true,true': [5.27e-09, 0, 3], 'true,true': [3.65e-08, 0, 29], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false,false,true': 'movie(L, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false,false,true,false': 'workedunder(N, M), movie(P, N)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,false,true,true': [0.276, 1, 11], 'true,false,false,false,true,false,true': [1.088, 4, 2], 'true,false,false,true': [0.159, 0, 5], 'false': [4.47e-08, 92, 0], 'true,false,true,true': [0.321, 6, 1], 'true,false,false,false,true,false,false': [1.058, 2, 3], 'true,false,true,false': [0.75, 1, 3], 'true,false,false,false,false': [0.305, 7, 59], 'true,true': [5.37e-08, 0, 29]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(E, J), workedunder(K, J), movie(L, I)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false': 'workedunder(M, B), movie(N, M)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), actor(I)', 'true,false,false,false': 'workedunder(P, B)', 'true,false,true': 'genre(B, G)'}, {'true,false,true,false,true,true': [0.778, 2, 1], 'true,false,true,false,false': [0.896, 3, 3], 'true,false,false,true': [0.061, 0, 4], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.652, 4, 1], 'true,false,true,true': [3.73e-09, 0, 3], 'true,false,false,false,false': [0.324, 8, 44], 'true,true': [0.0, 0, 29], 'true,false,false,false,true': [0.325, 4, 28]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,true,false,true': 'genre(B, J)', 'true,false,true,true': 'movie(G, F), movie(H, B), movie(H, E)', 'true,false,true,true,false,true,false': 'movie(K, F)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'workedunder(F, E)', 'true,false,true,true,false': 'workedunder(I, B)'}, {'false': [3.57e-08, 92, 0], 'true,false,true,true,false,true,false,true': [0.834, 3, 1], 'true,false,false': [0.309, 8, 62], 'true,false,true,true,false,true,false,false': [0.731, 2, 1], 'true,false,true,true,false,false': [0.158, 0, 4], 'true,false,true,false': [0.815, 4, 1], 'true,false,true,true,false,true,true': [0.0, 0, 3], 'true,true': [0.149, 1, 41], 'true,false,true,true,true': [0.124, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, B), workedunder(M, B)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false,true': 'genre(B, Q), genre(R, Q), workedunder(S, R)', 'true,false,false,false': 'movie(N, A), movie(N, P), genre(P, Q)', 'true,false,true': 'movie(G, H), actor(H)'}, {'true,false,false,false,true,true': [0.323, 6, 17], 'true,false,false,true': [0.296, 3, 27], 'false': [0.0, 92, 0], 'true,false,true,true,false': [0.653, 4, 1], 'true,false,true,false': [0.33, 1, 2], 'true,false,false,false,false': [0.313, 4, 32], 'true,true': [0.0, 0, 29], 'true,false,false,false,true,false': [0.743, 1, 4], 'true,false,true,true,true': [0.73, 2, 1]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(H, B).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(I, E).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;workedunder(G, B).;true;true', '0;true,false,true,false,true,true;movie(H, E).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true,false,false;workedunder(I, E), movie(J, E), movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;workedunder(G, B).;true;true', '1;true,false,true,false,true,true;movie(H, E).;false;false', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,false,true;movie(I, B).;false;true', '2;true,false,false,true,false;genre(B, K).;false;true', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '2;true,false,false,true,false,false;workedunder(L, J).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '2;true,false,false;movie(I, A), movie(I, J), director(J).;true;false', '2;true,false,true;movie(E, H), director(H).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;workedunder(E, B), movie(F, E), movie(F, A).;false;true', '3;true,false,false;workedunder(G, B), movie(H, G).;false;true', '3;true,false,false,false,true,false,false;movie(M, B).;false;false', '3;true;movie(C, A), movie(C, D), director(D).;false;true', '3;true,false,false,false;workedunder(I, B).;true;false', '3;true,false,false,false,true,false;movie(K, B), movie(K, L), actor(L).;false;true', '3;true,false,false,false,true;movie(J, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '4;true,false,false;movie(L, A), movie(L, M), workedunder(M, N).;false;true', '4;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false,false,false;movie(P, B), movie(P, Q), actor(Q).;false;true', '4;true,false,true;movie(G, H), actor(H).;true;false', '4;true,false,false,false,false;workedunder(R, B), movie(S, A).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,true,false,false;workedunder(L, F), movie(M, F), movie(M, B).;false;false', '5;true,false;movie(E, A), movie(E, F), director(F).;true;false', '5;true,false,true,true;genre(B, H).;false;true', '5;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '5;true,false,true,false;movie(E, B).;false;true', '5;true,false,true;workedunder(G, B).;true;true', '5;true,false,true,true,false;movie(I, B), movie(I, J), movie(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;true;true', '6;true,false,false,false,true;movie(L, B).;false;true', '6;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(L, A), movie(L, M), director(M).;true;false', '6;true,false,false,false,true,false;workedunder(N, M), movie(P, N).;false;false', '6;true,false,true;movie(E, H), director(H).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,true;movie(E, J), workedunder(K, J), movie(L, I).;false;false', '7;true,false;movie(E, A), workedunder(F, B).;true;true', '7;true,false,false;workedunder(M, B), movie(N, M).;false;true', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false,true,false;movie(H, B), movie(H, I), actor(I).;true;false', '7;true,false,false,false;workedunder(P, B).;false;false', '7;true,false,true;genre(B, G).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;false', '8;true,false,true,true,false,true;genre(B, J).;false;true', '8;true,false,true,true;movie(G, F), movie(H, B), movie(H, E).;false;true', '8;true,false,true,true,false,true,false;movie(K, F).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true;workedunder(F, E).;true;false', '8;true,false,true,true,false;workedunder(I, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '9;true,false,false;movie(L, B), workedunder(M, B).;false;true', '9;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false,true;genre(B, Q), genre(R, Q), workedunder(S, R).;false;false', '9;true,false,false,false;movie(N, A), movie(N, P), genre(P, Q).;true;false', '9;true,false,true;movie(G, H), actor(H).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), director(I) )
%   | | | then if ( movie(H, B) )
%   | | | | then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | | else if ( genre(B, J) )
%   | | | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936063;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, D), director(D) )
%   | then return 0.39111816482037065;  // std dev = 0,876, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783624;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, B), movie(K, L), actor(L) )
%   | | | | then return 0.30260382028433835;  // std dev = 0,793, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(E, B) )
%   | | | | then return 0.26372228691437577;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | | else if ( workedunder(H, F), movie(I, F), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.18453940295563762;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.21577952060840205;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | | | else if ( workedunder(M, L), movie(N, M) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1583669238166023;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.16523555649519134;  // std dev = 0,540, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1582312005908071;  // std dev = 7,15e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15928457187133013;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442027;  // std dev = 1,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then if ( genre(B, L), genre(M, L), workedunder(N, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.12417295581489252;  // std dev = 0,468, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097444
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.85 seconds
Total inference time: 0.452 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [5.58e-08, 53, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F)'}, {'false': [0.0, 53, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 56], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(H, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false': 'genre(B, J)', 'true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)'}, {'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,false,true': [2.63e-09, 3, 0], 'false': [3.49e-08, 53, 0], 'true,false,false,true,false,false': [0.0, 0, 0], 'true,false,false,true,true': [1.03e-07, 0, 56], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, D), director(D)'}, {'false': [3.49e-08, 53, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.876, 3, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 53, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.793, 3, 56]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, F), movie(I, F), movie(I, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)'}, {'true,false,true,false,true': [0.0, 0, 56], 'false': [1.83e-08, 53, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [0.0, 3, 0], 'true,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(K, A), movie(K, L), director(L)', 'true,false,false,false,true,false': 'workedunder(M, L), movie(N, M)', 'true,false,false,false,true': 'movie(K, B)'}, {'true,false,false,false,true,true': [0.0, 0, 56], 'true,false,false,false,true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [1.05e-08, 53, 0], 'true,false,false,false,true,false,false': [0.0, 3, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [7.45e-09, 53, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.54, 3, 56], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'workedunder(F, E)'}, {'false': [1.58e-08, 53, 0], 'true,false,true,false': [3.73e-09, 3, 0], 'true,true': [7.15e-08, 0, 56], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(H, B), workedunder(I, B)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false': 'movie(J, A), movie(J, K), genre(K, L)', 'true,false,false,false,true': 'genre(B, L), genre(M, L), workedunder(N, M)'}, {'true,false,false,false,true,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 53, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false,false,true,false': [0.468, 3, 56], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '4;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;false;true', '6;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(K, A), movie(K, L), director(L).;true;false', '6;true,false,false,false,true;movie(K, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false;movie(E, A), workedunder(F, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false;movie(D, A), movie(D, E), director(E).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '9;true,false,false;movie(H, B), workedunder(I, B).;false;true', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false;movie(J, A), movie(J, K), genre(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #3: [('true,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,true,false,false', 0)]
Tree #4: [('true,false', 0), ('true,true', 0.9491525423728814)]
Tree #5: [('true,false,false,false,false', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true', 0.9491525423728814)]
Tree #6: [('true,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #7: [('true,false,false,false,true,false,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0.9491525423728814)]
Tree #9: [('true,false,true,true', 0), ('true,false,false', 0)]
Tree #10: [('true,false,false,false,true,true', 0), ('true,false,false,true', 0), ('true,false,false,false,false', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true,false', 0.9491525423728814)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5214164631052723;  // std dev = 1,127, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.1123163781936063;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.3952090113571863;  // std dev = 1,015, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.10159632948783624;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3039300382857023;  // std dev = 0,968, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.240346422369836;  // std dev = 0,961, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.22469296018707174;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | | | else return -0.35288226634283143;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.16433173670019727;  // std dev = 0,785, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16416640319957548;  // std dev = 2,98e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.31110801995000426;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442027;  // std dev = 1,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then return 0.1229572803584703;  // std dev = 0,661, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.099918
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.478 seconds
Total inference time: 0.435 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 4.215
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100246
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.634 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: transfer, Total folds for small set: 1, Time: 00:18:54
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.634, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 4.215, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.5797741413116455, 'Generating mappings time': 3.216277837753296, 'Knowledge compiling time': 0.015295267105102539, 'Total time': 26.056389570236206, 'Finding best mapping': 20.245033979415894}, 'CLL': -0.100246}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.1123163781936063;  // std dev = 3,65e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783624;  // std dev = 2,98e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 1,97e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109177;  // std dev = 1,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.0684269778442027;  // std dev = 1,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.829 seconds
Total inference time: 0.487 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: scratch, Total folds for small set: 1, Time: 00:18:57
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.487, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 1.829, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [7.6e-08, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E), movie(J, E), movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [1.111, 2, 4], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(I, B)', 'true,false,false,true,false': 'genre(B, K)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false,false': 'workedunder(L, J)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)', 'true,false,false': 'movie(I, A), movie(I, J), director(J)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,true,true': [0.266, 1, 12], 'true,false,false,true,false,false,true': [0.47, 4, 5], 'false': [6.66e-08, 92, 0], 'true,false,true,true': [0.333, 6, 1], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,false': [0.308, 7, 59], 'true,true': [0.0, 0, 29], 'true,false,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,false,false,false': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(E, B), movie(F, E), movie(F, A)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true,false,false,false,true,false,false': 'movie(M, B)', 'true': 'movie(C, A), movie(C, D), director(D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,true,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false,false,true': 'movie(J, A)'}, {'true,false,false,false,true,true': [0.0, 0, 3], 'true,false,false,false,true,false,true': [0.3, 2, 18], 'true,false,false,true': [0.787, 1, 2], 'true,false,false,false,true,false,false,false': [0.866, 1, 3], 'false': [5.77e-08, 92, 0], 'true,false,false,false,true,false,false,true': [0.816, 1, 2], 'true,true': [0.298, 13, 51], 'true,false,true': [0.0, 0, 7], 'true,false,false,false,false': [0.3, 3, 27]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, A), movie(L, M), workedunder(M, N)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(P, B), movie(P, Q), actor(Q)', 'true,false,true': 'movie(G, H), actor(H)', 'true,false,false,false,false': 'workedunder(R, B), movie(S, A)'}, {'true,false,false,true': [0.175, 0, 5], 'false': [1.05e-08, 92, 0], 'true,false,false,false,false,false': [0.361, 4, 18], 'true,false,false,false,false,true': [0.816, 2, 1], 'true,false,true,false': [0.44, 1, 2], 'true,false,true,true,false': [0.662, 4, 1], 'true,true': [5.96e-08, 0, 29], 'true,false,false,false,true': [0.31, 8, 56], 'true,false,true,true,true': [0.78, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(L, F), movie(M, F), movie(M, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)', 'true,false,true,true,false': 'movie(I, B), movie(I, J), movie(K, J)'}, {'true,false,true,false,true': [0.266, 1, 12], 'true,false,true,true,false,false': [0.852, 4, 1], 'true,false,false': [0.31, 8, 62], 'true,false,true,true,false,true': [0.818, 4, 1], 'true,false,true,false,false,false': [1.034, 2, 4], 'false': [3.16e-08, 92, 0], 'true,false,true,true,true': [5.27e-09, 0, 3], 'true,true': [3.65e-08, 0, 29], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false,false,true': 'movie(L, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false,false,true,false': 'workedunder(N, M), movie(P, N)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,false,true,true': [0.276, 1, 11], 'true,false,false,false,true,false,true': [1.088, 4, 2], 'true,false,false,true': [0.159, 0, 5], 'false': [4.47e-08, 92, 0], 'true,false,true,true': [0.321, 6, 1], 'true,false,false,false,true,false,false': [1.058, 2, 3], 'true,false,true,false': [0.75, 1, 3], 'true,false,false,false,false': [0.305, 7, 59], 'true,true': [5.37e-08, 0, 29]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(E, J), workedunder(K, J), movie(L, I)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false': 'workedunder(M, B), movie(N, M)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), actor(I)', 'true,false,false,false': 'workedunder(P, B)', 'true,false,true': 'genre(B, G)'}, {'true,false,true,false,true,true': [0.778, 2, 1], 'true,false,true,false,false': [0.896, 3, 3], 'true,false,false,true': [0.061, 0, 4], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.652, 4, 1], 'true,false,true,true': [3.73e-09, 0, 3], 'true,false,false,false,false': [0.324, 8, 44], 'true,true': [0.0, 0, 29], 'true,false,false,false,true': [0.325, 4, 28]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,true,false,true': 'genre(B, J)', 'true,false,true,true': 'movie(G, F), movie(H, B), movie(H, E)', 'true,false,true,true,false,true,false': 'movie(K, F)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'workedunder(F, E)', 'true,false,true,true,false': 'workedunder(I, B)'}, {'false': [3.57e-08, 92, 0], 'true,false,true,true,false,true,false,true': [0.834, 3, 1], 'true,false,false': [0.309, 8, 62], 'true,false,true,true,false,true,false,false': [0.731, 2, 1], 'true,false,true,true,false,false': [0.158, 0, 4], 'true,false,true,false': [0.815, 4, 1], 'true,false,true,true,false,true,true': [0.0, 0, 3], 'true,true': [0.149, 1, 41], 'true,false,true,true,true': [0.124, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, B), workedunder(M, B)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false,true': 'genre(B, Q), genre(R, Q), workedunder(S, R)', 'true,false,false,false': 'movie(N, A), movie(N, P), genre(P, Q)', 'true,false,true': 'movie(G, H), actor(H)'}, {'true,false,false,false,true,true': [0.323, 6, 17], 'true,false,false,true': [0.296, 3, 27], 'false': [0.0, 92, 0], 'true,false,true,true,false': [0.653, 4, 1], 'true,false,true,false': [0.33, 1, 2], 'true,false,false,false,false': [0.313, 4, 32], 'true,true': [0.0, 0, 29], 'true,false,false,false,true,false': [0.743, 1, 4], 'true,false,true,true,true': [0.73, 2, 1]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(H, B).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(I, E).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;workedunder(G, B).;true;true', '0;true,false,true,false,true,true;movie(H, E).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true,false,false;workedunder(I, E), movie(J, E), movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;workedunder(G, B).;true;true', '1;true,false,true,false,true,true;movie(H, E).;false;false', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,false,true;movie(I, B).;false;true', '2;true,false,false,true,false;genre(B, K).;false;true', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '2;true,false,false,true,false,false;workedunder(L, J).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '2;true,false,false;movie(I, A), movie(I, J), director(J).;true;false', '2;true,false,true;movie(E, H), director(H).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;workedunder(E, B), movie(F, E), movie(F, A).;false;true', '3;true,false,false;workedunder(G, B), movie(H, G).;false;true', '3;true,false,false,false,true,false,false;movie(M, B).;false;false', '3;true;movie(C, A), movie(C, D), director(D).;false;true', '3;true,false,false,false;workedunder(I, B).;true;false', '3;true,false,false,false,true,false;movie(K, B), movie(K, L), actor(L).;false;true', '3;true,false,false,false,true;movie(J, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '4;true,false,false;movie(L, A), movie(L, M), workedunder(M, N).;false;true', '4;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false,false,false;movie(P, B), movie(P, Q), actor(Q).;false;true', '4;true,false,true;movie(G, H), actor(H).;true;false', '4;true,false,false,false,false;workedunder(R, B), movie(S, A).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,true,false,false;workedunder(L, F), movie(M, F), movie(M, B).;false;false', '5;true,false;movie(E, A), movie(E, F), director(F).;true;false', '5;true,false,true,true;genre(B, H).;false;true', '5;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '5;true,false,true,false;movie(E, B).;false;true', '5;true,false,true;workedunder(G, B).;true;true', '5;true,false,true,true,false;movie(I, B), movie(I, J), movie(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;true;true', '6;true,false,false,false,true;movie(L, B).;false;true', '6;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(L, A), movie(L, M), director(M).;true;false', '6;true,false,false,false,true,false;workedunder(N, M), movie(P, N).;false;false', '6;true,false,true;movie(E, H), director(H).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,true;movie(E, J), workedunder(K, J), movie(L, I).;false;false', '7;true,false;movie(E, A), workedunder(F, B).;true;true', '7;true,false,false;workedunder(M, B), movie(N, M).;false;true', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false,true,false;movie(H, B), movie(H, I), actor(I).;true;false', '7;true,false,false,false;workedunder(P, B).;false;false', '7;true,false,true;genre(B, G).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;false', '8;true,false,true,true,false,true;genre(B, J).;false;true', '8;true,false,true,true;movie(G, F), movie(H, B), movie(H, E).;false;true', '8;true,false,true,true,false,true,false;movie(K, F).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true;workedunder(F, E).;true;false', '8;true,false,true,true,false;workedunder(I, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '9;true,false,false;movie(L, B), workedunder(M, B).;false;true', '9;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false,true;genre(B, Q), genre(R, Q), workedunder(S, R).;false;false', '9;true,false,false,false;movie(N, A), movie(N, P), genre(P, Q).;true;false', '9;true,false,true;movie(G, H), actor(H).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995088;  // std dev = 1,07e-06, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004884;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109573;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E), movie(I, E), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839166;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), director(I) )
%   | | | then if ( movie(H, B) )
%   | | | | then return 0.5553664367462832;  // std dev = 5,33e-07, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | | | else if ( genre(B, J) )
%   | | | | | then return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | | | else if ( workedunder(K, I) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360663;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, D), director(D) )
%   | then return 0.38043430461215755;  // std dev = 2,122, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783652;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, B), movie(K, L), actor(L) )
%   | | | | then return 0.29521475529847335;  // std dev = 1,925, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926054;  // std dev = 6,14e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(E, B) )
%   | | | | then return 0.2672465114893611;  // std dev = 1,19e-07, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | | | else if ( workedunder(H, F), movie(I, F), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.18183519690977062;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.21825161167943477;  // std dev = 1,33e-07, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | | | | else if ( workedunder(M, L), movie(N, M) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.1563292148108233;  // std dev = 1,29e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 7,60e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.16043735049543892;  // std dev = 1,309, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.07324622576333666;  // std dev = 1,23e-07, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1604918101906095;  // std dev = 4,21e-08, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1568718037232294;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,66e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then if ( genre(B, L), genre(M, L), workedunder(N, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.11923343248854765;  // std dev = 1,033, 200,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=185 */
%   | | | | else return 0.12403196486457316;  // std dev = 0,466, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   else return -0.06419184008202626;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107487
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.683 seconds
Total inference time: 0.601 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 216, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 13, 0], 'true,false,true,false,false,false': [0.0, 5, 0], 'true,true': [1.07e-06, 0, 234], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E), movie(I, E), movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 216, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [7.45e-09, 13, 0], 'true,false,true,false,false,false': [0.0, 5, 0], 'true,true': [0.0, 0, 234], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(H, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false': 'genre(B, J)', 'true,false,false,true,false,false': 'workedunder(K, I)', 'true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 0, 0], 'true,false,false,true,false,true': [1.05e-08, 13, 0], 'false': [0.0, 216, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [5.33e-07, 0, 234], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, D), director(D)'}, {'false': [0.0, 216, 0], 'true,false': [0.0, 0, 0], 'true,true': [2.122, 18, 234]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [6.14e-08, 216, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [1.925, 18, 234]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, F), movie(I, F), movie(I, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)'}, {'true,false,true,false,true': [1.19e-07, 0, 234], 'false': [7.88e-08, 216, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [0.0, 18, 0], 'true,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(K, A), movie(K, L), director(L)', 'true,false,false,false,true,false': 'workedunder(M, L), movie(N, M)', 'true,false,false,false,true': 'movie(K, B)'}, {'true,false,false,false,true,true': [1.33e-07, 0, 234], 'true,false,false,false,true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [7.6e-08, 216, 0], 'true,false,false,false,true,false,false': [1.29e-08, 18, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.23e-07, 216, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [1.309, 18, 234], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'workedunder(F, E)'}, {'false': [6.66e-08, 216, 0], 'true,false,true,false': [1.05e-08, 18, 0], 'true,true': [4.21e-08, 0, 234], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(H, B), workedunder(I, B)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false': 'movie(J, A), movie(J, K), genre(K, L)', 'true,false,false,false,true': 'genre(B, L), genre(M, L), workedunder(N, M)'}, {'true,false,false,false,true,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 216, 0], 'true,false,false,false,false': [0.466, 3, 49], 'true,true': [0.0, 0, 0], 'true,false,false,false,true,false': [1.033, 15, 185], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;genre(B, F).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true;genre(B, F).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '4;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;false;true', '6;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(K, A), movie(K, L), director(L).;true;false', '6;true,false,false,false,true;movie(K, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false;movie(E, A), workedunder(F, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false;movie(D, A), movie(D, E), director(E).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '9;true,false,false;movie(H, B), workedunder(I, B).;false;true', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false;movie(J, A), movie(J, K), genre(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,false,false,false', 0), ('true,false,false,true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0)]
Tree #4: [('true,false', 0), ('true,true', 0.9285714285714286)]
Tree #5: [('true,false,false,false,false', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true', 0.9285714285714286)]
Tree #6: [('true,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #7: [('true,false,false,false,true,false,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0.9285714285714286)]
Tree #9: [('true,false,true,true', 0), ('true,false,false', 0)]
Tree #10: [('true,false,false,false,true,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true,false', 0.925), ('true,false,false,false,false', 0.9423076923076923)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995088;  // std dev = 1,07e-06, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004884;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109573;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839166;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5076748071077193;  // std dev = 2,730, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.11231637819360663;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.38609440065023376;  // std dev = 2,465, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.10159632948783652;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2971564995679218;  // std dev = 2,348, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.09269127618926054;  // std dev = 6,14e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2345199596131286;  // std dev = 2,327, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.23092988351589167;  // std dev = 3,35e-07, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | | | | else return -0.3448284559335501;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 7,60e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15933044634260346;  // std dev = 1,897, 252,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=234 */
%   else return -0.07324622576333666;  // std dev = 1,23e-07, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16891613739810707;  // std dev = 2,46e-07, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.30420610370210877;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,66e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then return 0.11723066769718747;  // std dev = 1,454, 200,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=185 */
%   | | | | else return 0.12398731141519234;  // std dev = 0,656, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   else return -0.06419184008202626;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123563
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.576 seconds
Total inference time: 0.406 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 10.265999999999998
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.099746
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.505 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: transfer, Total folds for small set: 2, Time: 00:19:35
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.505, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 10.265999999999998, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.639517307281494, 'Generating mappings time': 3.2160820960998535, 'Knowledge compiling time': 0.0173492431640625, 'Total time': 26.14800262451172, 'Finding best mapping': 20.27504587173462}, 'CLL': -0.099746}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995107;  // std dev = 6,19e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.8581489350995107;  // std dev = 6,42e-07, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.14185106490048835;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109572;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #pos=234 */
%   else return -0.12544463852839163;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 3,95e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 4,13e-07, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1123163781936066;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583093;  // std dev = 3,04e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.41751358415830925;  // std dev = 3,10e-07, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1015963294878365;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.32071184716014983;  // std dev = 4,21e-08, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0926912761892606;  // std dev = 9,42e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694897;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.2551722425694897;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 8,02e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253526;  // std dev = 1,37e-07, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.20975771563253526;  // std dev = 1,43e-07, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0787767547310915;  // std dev = 6,99e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1770964977452774;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.17709649774527741;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333668;  // std dev = 1,22e-07, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367136;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(A) )
%   | | then return 0.15274385809367136;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420264;  // std dev = 8,30e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801084;  // std dev = 7,60e-08, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( director(A) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13400703000801084;  // std dev = 7,60e-08, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   else return -0.06419184008202626;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.971 seconds
Total inference time: 0.532 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: scratch, Total folds for small set: 2, Time: 00:19:42
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.532, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 6.971, 'CLL': -0.094637}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [7.6e-08, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E), movie(J, E), movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [1.111, 2, 4], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(I, B)', 'true,false,false,true,false': 'genre(B, K)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false,false': 'workedunder(L, J)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)', 'true,false,false': 'movie(I, A), movie(I, J), director(J)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,true,true': [0.266, 1, 12], 'true,false,false,true,false,false,true': [0.47, 4, 5], 'false': [6.66e-08, 92, 0], 'true,false,true,true': [0.333, 6, 1], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,false': [0.308, 7, 59], 'true,true': [0.0, 0, 29], 'true,false,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,false,false,false': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(E, B), movie(F, E), movie(F, A)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true,false,false,false,true,false,false': 'movie(M, B)', 'true': 'movie(C, A), movie(C, D), director(D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,true,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false,false,true': 'movie(J, A)'}, {'true,false,false,false,true,true': [0.0, 0, 3], 'true,false,false,false,true,false,true': [0.3, 2, 18], 'true,false,false,true': [0.787, 1, 2], 'true,false,false,false,true,false,false,false': [0.866, 1, 3], 'false': [5.77e-08, 92, 0], 'true,false,false,false,true,false,false,true': [0.816, 1, 2], 'true,true': [0.298, 13, 51], 'true,false,true': [0.0, 0, 7], 'true,false,false,false,false': [0.3, 3, 27]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, A), movie(L, M), workedunder(M, N)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(P, B), movie(P, Q), actor(Q)', 'true,false,true': 'movie(G, H), actor(H)', 'true,false,false,false,false': 'workedunder(R, B), movie(S, A)'}, {'true,false,false,true': [0.175, 0, 5], 'false': [1.05e-08, 92, 0], 'true,false,false,false,false,false': [0.361, 4, 18], 'true,false,false,false,false,true': [0.816, 2, 1], 'true,false,true,false': [0.44, 1, 2], 'true,false,true,true,false': [0.662, 4, 1], 'true,true': [5.96e-08, 0, 29], 'true,false,false,false,true': [0.31, 8, 56], 'true,false,true,true,true': [0.78, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(L, F), movie(M, F), movie(M, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)', 'true,false,true,true,false': 'movie(I, B), movie(I, J), movie(K, J)'}, {'true,false,true,false,true': [0.266, 1, 12], 'true,false,true,true,false,false': [0.852, 4, 1], 'true,false,false': [0.31, 8, 62], 'true,false,true,true,false,true': [0.818, 4, 1], 'true,false,true,false,false,false': [1.034, 2, 4], 'false': [3.16e-08, 92, 0], 'true,false,true,true,true': [5.27e-09, 0, 3], 'true,true': [3.65e-08, 0, 29], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false,false,true': 'movie(L, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false,false,true,false': 'workedunder(N, M), movie(P, N)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,false,true,true': [0.276, 1, 11], 'true,false,false,false,true,false,true': [1.088, 4, 2], 'true,false,false,true': [0.159, 0, 5], 'false': [4.47e-08, 92, 0], 'true,false,true,true': [0.321, 6, 1], 'true,false,false,false,true,false,false': [1.058, 2, 3], 'true,false,true,false': [0.75, 1, 3], 'true,false,false,false,false': [0.305, 7, 59], 'true,true': [5.37e-08, 0, 29]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(E, J), workedunder(K, J), movie(L, I)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false': 'workedunder(M, B), movie(N, M)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), actor(I)', 'true,false,false,false': 'workedunder(P, B)', 'true,false,true': 'genre(B, G)'}, {'true,false,true,false,true,true': [0.778, 2, 1], 'true,false,true,false,false': [0.896, 3, 3], 'true,false,false,true': [0.061, 0, 4], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.652, 4, 1], 'true,false,true,true': [3.73e-09, 0, 3], 'true,false,false,false,false': [0.324, 8, 44], 'true,true': [0.0, 0, 29], 'true,false,false,false,true': [0.325, 4, 28]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,true,false,true': 'genre(B, J)', 'true,false,true,true': 'movie(G, F), movie(H, B), movie(H, E)', 'true,false,true,true,false,true,false': 'movie(K, F)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'workedunder(F, E)', 'true,false,true,true,false': 'workedunder(I, B)'}, {'false': [3.57e-08, 92, 0], 'true,false,true,true,false,true,false,true': [0.834, 3, 1], 'true,false,false': [0.309, 8, 62], 'true,false,true,true,false,true,false,false': [0.731, 2, 1], 'true,false,true,true,false,false': [0.158, 0, 4], 'true,false,true,false': [0.815, 4, 1], 'true,false,true,true,false,true,true': [0.0, 0, 3], 'true,true': [0.149, 1, 41], 'true,false,true,true,true': [0.124, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, B), workedunder(M, B)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false,true': 'genre(B, Q), genre(R, Q), workedunder(S, R)', 'true,false,false,false': 'movie(N, A), movie(N, P), genre(P, Q)', 'true,false,true': 'movie(G, H), actor(H)'}, {'true,false,false,false,true,true': [0.323, 6, 17], 'true,false,false,true': [0.296, 3, 27], 'false': [0.0, 92, 0], 'true,false,true,true,false': [0.653, 4, 1], 'true,false,true,false': [0.33, 1, 2], 'true,false,false,false,false': [0.313, 4, 32], 'true,true': [0.0, 0, 29], 'true,false,false,false,true,false': [0.743, 1, 4], 'true,false,true,true,true': [0.73, 2, 1]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(H, B).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(I, E).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;workedunder(G, B).;true;true', '0;true,false,true,false,true,true;movie(H, E).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true,false,false;workedunder(I, E), movie(J, E), movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;workedunder(G, B).;true;true', '1;true,false,true,false,true,true;movie(H, E).;false;false', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,false,true;movie(I, B).;false;true', '2;true,false,false,true,false;genre(B, K).;false;true', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '2;true,false,false,true,false,false;workedunder(L, J).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '2;true,false,false;movie(I, A), movie(I, J), director(J).;true;false', '2;true,false,true;movie(E, H), director(H).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;workedunder(E, B), movie(F, E), movie(F, A).;false;true', '3;true,false,false;workedunder(G, B), movie(H, G).;false;true', '3;true,false,false,false,true,false,false;movie(M, B).;false;false', '3;true;movie(C, A), movie(C, D), director(D).;false;true', '3;true,false,false,false;workedunder(I, B).;true;false', '3;true,false,false,false,true,false;movie(K, B), movie(K, L), actor(L).;false;true', '3;true,false,false,false,true;movie(J, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '4;true,false,false;movie(L, A), movie(L, M), workedunder(M, N).;false;true', '4;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false,false,false;movie(P, B), movie(P, Q), actor(Q).;false;true', '4;true,false,true;movie(G, H), actor(H).;true;false', '4;true,false,false,false,false;workedunder(R, B), movie(S, A).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,true,false,false;workedunder(L, F), movie(M, F), movie(M, B).;false;false', '5;true,false;movie(E, A), movie(E, F), director(F).;true;false', '5;true,false,true,true;genre(B, H).;false;true', '5;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '5;true,false,true,false;movie(E, B).;false;true', '5;true,false,true;workedunder(G, B).;true;true', '5;true,false,true,true,false;movie(I, B), movie(I, J), movie(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;true;true', '6;true,false,false,false,true;movie(L, B).;false;true', '6;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(L, A), movie(L, M), director(M).;true;false', '6;true,false,false,false,true,false;workedunder(N, M), movie(P, N).;false;false', '6;true,false,true;movie(E, H), director(H).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,true;movie(E, J), workedunder(K, J), movie(L, I).;false;false', '7;true,false;movie(E, A), workedunder(F, B).;true;true', '7;true,false,false;workedunder(M, B), movie(N, M).;false;true', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false,true,false;movie(H, B), movie(H, I), actor(I).;true;false', '7;true,false,false,false;workedunder(P, B).;false;false', '7;true,false,true;genre(B, G).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;false', '8;true,false,true,true,false,true;genre(B, J).;false;true', '8;true,false,true,true;movie(G, F), movie(H, B), movie(H, E).;false;true', '8;true,false,true,true,false,true,false;movie(K, F).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true;workedunder(F, E).;true;false', '8;true,false,true,true,false;workedunder(I, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '9;true,false,false;movie(L, B), workedunder(M, B).;false;true', '9;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false,true;genre(B, Q), genre(R, Q), workedunder(S, R).;false;false', '9;true,false,false,false;movie(N, A), movie(N, P), genre(P, Q).;true;false', '9;true,false,true;movie(G, H), actor(H).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,07e-06, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048813;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E), movie(I, E), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), director(I) )
%   | | | then if ( movie(H, B) )
%   | | | | then return 0.5553664367462832;  // std dev = 1,19e-07, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | | | | else if ( genre(B, J) )
%   | | | | | then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | | else if ( workedunder(K, I) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360686;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, D), director(D) )
%   | then return 0.37808751476746494;  // std dev = 2,445, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783659;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, B), movie(K, L), actor(L) )
%   | | | | then return 0.29358688572322456;  // std dev = 2,218, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926046;  // std dev = 1,15e-07, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(E, B) )
%   | | | | then return 0.26802557209968714;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | | | | else if ( workedunder(H, F), movie(I, F), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.18124462983158815;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,31e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.21879732873856772;  // std dev = 2,73e-07, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | | | | | else if ( workedunder(M, L), movie(N, M) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.15588340445630197;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 5,58e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.1593834326470373;  // std dev = 1,508, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.07324622576333684;  // std dev = 1,13e-07, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16099146635757164;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1563445062445741;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420278;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then if ( genre(B, L), genre(M, L), workedunder(N, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.11739844341567267;  // std dev = 1,245, 265,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=243 */
%   | | | | else return 0.12954178585480516;  // std dev = 0,384, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else return -0.06419184008202618;  // std dev = 5,96e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.606 seconds
Total inference time: 0.618 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 268, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 14, 0], 'true,false,true,false,false,false': [0.0, 10, 0], 'true,true': [1.07e-06, 0, 292], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E), movie(I, E), movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 268, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [7.45e-09, 14, 0], 'true,false,true,false,false,false': [5.27e-09, 10, 0], 'true,true': [0.0, 0, 292], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(H, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false': 'genre(B, J)', 'true,false,false,true,false,false': 'workedunder(K, I)', 'true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 0, 0], 'true,false,false,true,false,true': [1.18e-08, 14, 0], 'false': [0.0, 268, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [1.19e-07, 0, 292], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, D), director(D)'}, {'false': [0.0, 268, 0], 'true,false': [0.0, 0, 0], 'true,true': [2.445, 24, 292]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.15e-07, 268, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [2.218, 24, 292]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, F), movie(I, F), movie(I, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)'}, {'true,false,true,false,true': [0.0, 0, 292], 'false': [9.31e-08, 268, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [1.49e-08, 24, 0], 'true,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(K, A), movie(K, L), director(L)', 'true,false,false,false,true,false': 'workedunder(M, L), movie(N, M)', 'true,false,false,false,true': 'movie(K, B)'}, {'true,false,false,false,true,true': [2.73e-07, 0, 292], 'true,false,false,false,true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [5.58e-08, 268, 0], 'true,false,false,false,true,false,false': [0.0, 24, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.13e-07, 268, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [1.508, 24, 292], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'workedunder(F, E)'}, {'false': [0.0, 268, 0], 'true,false,true,false': [1.05e-08, 24, 0], 'true,true': [0.0, 0, 292], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(H, B), workedunder(I, B)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false': 'movie(J, A), movie(J, K), genre(K, L)', 'true,false,false,false,true': 'genre(B, L), genre(M, L), workedunder(N, M)'}, {'true,false,false,false,true,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [5.96e-08, 268, 0], 'true,false,false,false,false': [0.384, 2, 49], 'true,true': [0.0, 0, 0], 'true,false,false,false,true,false': [1.245, 22, 243], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;genre(B, F).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true;genre(B, F).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '4;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;false;true', '6;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(K, A), movie(K, L), director(L).;true;false', '6;true,false,false,false,true;movie(K, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false;movie(E, A), workedunder(F, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false;movie(D, A), movie(D, E), director(E).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '9;true,false,false;movie(H, B), workedunder(I, B).;false;true', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false;movie(J, A), movie(J, K), genre(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,false,false,false', 0), ('true,false,false,true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0)]
Tree #4: [('true,false', 0), ('true,true', 0.9240506329113924)]
Tree #5: [('true,false,false,false,false', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true', 0.9240506329113924)]
Tree #6: [('true,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #7: [('true,false,false,false,true,false,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0.9240506329113924)]
Tree #9: [('true,false,true,true', 0), ('true,false,false', 0)]
Tree #10: [('true,false,false,false,true,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true,false', 0.9169811320754717), ('true,false,false,false,false', 0.9607843137254902)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,07e-06, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048813;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109577;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5046563495356582;  // std dev = 3,144, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.11231637819360686;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.384085329271254;  // std dev = 2,840, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.10159632948783659;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.29566916278627303;  // std dev = 2,706, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.09269127618926046;  // std dev = 1,15e-07, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.23325219071424133;  // std dev = 2,680, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.08518475138839678;  // std dev = 9,31e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.2323149828390348;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | | | | | else return -0.3430723188232412;  // std dev = 4,71e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 5,58e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1582436630616937;  // std dev = 2,184, 316,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=292 */
%   else return -0.07324622576333684;  // std dev = 1,13e-07, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16996941710084673;  // std dev = 2,42e-07, 292,000 (wgt'ed) examples reached here.  /* #pos=292 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.30270257326035765;  // std dev = 2,98e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420278;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then return 0.11492506770009636;  // std dev = 1,752, 265,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=243 */
%   | | | | else return 0.1320151814855029;  // std dev = 0,541, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else return -0.06419184008202618;  // std dev = 5,96e-08, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115232
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.173 seconds
Total inference time: 0.429 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 11.826
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.099963
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.536 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: transfer, Total folds for small set: 3, Time: 00:20:22
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.536, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 11.826, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.3264172077178955, 'Generating mappings time': 3.172924041748047, 'Knowledge compiling time': 0.01891946792602539, 'Total time': 25.621455192565918, 'Finding best mapping': 20.10318660736084}, 'CLL': -0.099963}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995102;  // std dev = 8,09e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.8454907072514085;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.1418510649004881;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.7093629005389674;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.12544463852839183;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.5483232764556856;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.11231637819360682;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583091;  // std dev = 4,04e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.412122823856392;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.10159632948783655;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716015;  // std dev = 2,19e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.3157706299065845;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.09269127618926049;  // std dev = 1,15e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948956;  // std dev = 1,40e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.25021842159618585;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.08518475138839678;  // std dev = 9,42e-08, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253529;  // std dev = 2,21e-07, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.20467270018781197;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.07877675473109147;  // std dev = 5,16e-08, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.17187043627452941;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.07324622576333685;  // std dev = 1,14e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.14739502598860177;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.06842697784420278;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 136,000 (wgt'ed) examples reached here.  /* #pos=136 */
%   | else return 0.1285577576039083;  // std dev = 0,112, 158,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else return -0.06419184008202618;  // std dev = 5,96e-08, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096624
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.978 seconds
Total inference time: 0.433 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: scratch, Total folds for small set: 3, Time: 00:20:29
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.433, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 6.978, 'CLL': -0.096624}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'professor(A) -> director(A)', 'hasposition(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> movie(B,A)', 'student(A) -> actor(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [7.6e-08, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [1.155, 2, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(H, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,false,false': 'workedunder(I, E), movie(J, E), movie(J, B)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true,false,true,true': 'movie(H, E)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,false,false': [1.111, 2, 4], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.318, 8, 62], 'true,true': [0.152, 1, 41], 'true,false,true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(I, B)', 'true,false,false,true,false': 'genre(B, K)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false,false': 'workedunder(L, J)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)', 'true,false,false': 'movie(I, A), movie(I, J), director(J)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,true,true': [0.266, 1, 12], 'true,false,false,true,false,false,true': [0.47, 4, 5], 'false': [6.66e-08, 92, 0], 'true,false,true,true': [0.333, 6, 1], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,false': [0.308, 7, 59], 'true,true': [0.0, 0, 29], 'true,false,false,true,false,true': [1.05e-08, 0, 3], 'true,false,false,true,false,false,false': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'workedunder(E, B), movie(F, E), movie(F, A)', 'true,false,false': 'workedunder(G, B), movie(H, G)', 'true,false,false,false,true,false,false': 'movie(M, B)', 'true': 'movie(C, A), movie(C, D), director(D)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false,false,true,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false,false,true': 'movie(J, A)'}, {'true,false,false,false,true,true': [0.0, 0, 3], 'true,false,false,false,true,false,true': [0.3, 2, 18], 'true,false,false,true': [0.787, 1, 2], 'true,false,false,false,true,false,false,false': [0.866, 1, 3], 'false': [5.77e-08, 92, 0], 'true,false,false,false,true,false,false,true': [0.816, 1, 2], 'true,true': [0.298, 13, 51], 'true,false,true': [0.0, 0, 7], 'true,false,false,false,false': [0.3, 3, 27]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, A), movie(L, M), workedunder(M, N)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(P, B), movie(P, Q), actor(Q)', 'true,false,true': 'movie(G, H), actor(H)', 'true,false,false,false,false': 'workedunder(R, B), movie(S, A)'}, {'true,false,false,true': [0.175, 0, 5], 'false': [1.05e-08, 92, 0], 'true,false,false,false,false,false': [0.361, 4, 18], 'true,false,false,false,false,true': [0.816, 2, 1], 'true,false,true,false': [0.44, 1, 2], 'true,false,true,true,false': [0.662, 4, 1], 'true,true': [5.96e-08, 0, 29], 'true,false,false,false,true': [0.31, 8, 56], 'true,false,true,true,true': [0.78, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(L, F), movie(M, F), movie(M, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'genre(B, H)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)', 'true,false,true,true,false': 'movie(I, B), movie(I, J), movie(K, J)'}, {'true,false,true,false,true': [0.266, 1, 12], 'true,false,true,true,false,false': [0.852, 4, 1], 'true,false,false': [0.31, 8, 62], 'true,false,true,true,false,true': [0.818, 4, 1], 'true,false,true,false,false,false': [1.034, 2, 4], 'false': [3.16e-08, 92, 0], 'true,false,true,true,true': [5.27e-09, 0, 3], 'true,true': [3.65e-08, 0, 29], 'true,false,true,false,false,true': [0.816, 2, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false,false,true': 'movie(L, B)', 'true,false,false': 'movie(I, A), movie(I, J), workedunder(J, K)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(L, A), movie(L, M), director(M)', 'true,false,false,false,true,false': 'workedunder(N, M), movie(P, N)', 'true,false,true': 'movie(E, H), director(H)'}, {'true,false,false,false,true,true': [0.276, 1, 11], 'true,false,false,false,true,false,true': [1.088, 4, 2], 'true,false,false,true': [0.159, 0, 5], 'false': [4.47e-08, 92, 0], 'true,false,true,true': [0.321, 6, 1], 'true,false,false,false,true,false,false': [1.058, 2, 3], 'true,false,true,false': [0.75, 1, 3], 'true,false,false,false,false': [0.305, 7, 59], 'true,true': [5.37e-08, 0, 29]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,true': 'movie(E, J), workedunder(K, J), movie(L, I)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false': 'workedunder(M, B), movie(N, M)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false,true,false': 'movie(H, B), movie(H, I), actor(I)', 'true,false,false,false': 'workedunder(P, B)', 'true,false,true': 'genre(B, G)'}, {'true,false,true,false,true,true': [0.778, 2, 1], 'true,false,true,false,false': [0.896, 3, 3], 'true,false,false,true': [0.061, 0, 4], 'false': [0.0, 92, 0], 'true,false,true,false,true,false': [0.652, 4, 1], 'true,false,true,true': [3.73e-09, 0, 3], 'true,false,false,false,false': [0.324, 8, 44], 'true,true': [0.0, 0, 29], 'true,false,false,false,true': [0.325, 4, 28]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true,true,false,true': 'genre(B, J)', 'true,false,true,true': 'movie(G, F), movie(H, B), movie(H, E)', 'true,false,true,true,false,true,false': 'movie(K, F)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'workedunder(F, E)', 'true,false,true,true,false': 'workedunder(I, B)'}, {'false': [3.57e-08, 92, 0], 'true,false,true,true,false,true,false,true': [0.834, 3, 1], 'true,false,false': [0.309, 8, 62], 'true,false,true,true,false,true,false,false': [0.731, 2, 1], 'true,false,true,true,false,false': [0.158, 0, 4], 'true,false,true,false': [0.815, 4, 1], 'true,false,true,true,false,true,true': [0.0, 0, 3], 'true,true': [0.149, 1, 41], 'true,false,true,true,true': [0.124, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(L, B), workedunder(M, B)', 'true,false,true,true': 'movie(E, I), workedunder(J, I), movie(K, H)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false,true': 'genre(B, Q), genre(R, Q), workedunder(S, R)', 'true,false,false,false': 'movie(N, A), movie(N, P), genre(P, Q)', 'true,false,true': 'movie(G, H), actor(H)'}, {'true,false,false,false,true,true': [0.323, 6, 17], 'true,false,false,true': [0.296, 3, 27], 'false': [0.0, 92, 0], 'true,false,true,true,false': [0.653, 4, 1], 'true,false,true,false': [0.33, 1, 2], 'true,false,false,false,false': [0.313, 4, 32], 'true,true': [0.0, 0, 29], 'true,false,false,false,true,false': [0.743, 1, 4], 'true,false,true,true,true': [0.73, 2, 1]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,true,false,true;movie(H, B).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true,false,false;workedunder(I, E).;false;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true,false;workedunder(G, B).;true;true', '0;true,false,true,false,true,true;movie(H, E).;false;false', '0;true,false,true;genre(B, F).;false;true', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false,true,false,true;movie(H, B).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true,false,false;workedunder(I, E), movie(J, E), movie(J, B).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true,false;workedunder(G, B).;true;true', '1;true,false,true,false,true,true;movie(H, E).;false;false', '1;true,false,true;genre(B, F).;false;true', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false,false,true;movie(I, B).;false;true', '2;true,false,false,true,false;genre(B, K).;false;true', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '2;true,false,false,true,false,false;workedunder(L, J).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '2;true,false,false;movie(I, A), movie(I, J), director(J).;true;false', '2;true,false,true;movie(E, H), director(H).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false;workedunder(E, B), movie(F, E), movie(F, A).;false;true', '3;true,false,false;workedunder(G, B), movie(H, G).;false;true', '3;true,false,false,false,true,false,false;movie(M, B).;false;false', '3;true;movie(C, A), movie(C, D), director(D).;false;true', '3;true,false,false,false;workedunder(I, B).;true;false', '3;true,false,false,false,true,false;movie(K, B), movie(K, L), actor(L).;false;true', '3;true,false,false,false,true;movie(J, A).;false;true', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '4;true,false,false;movie(L, A), movie(L, M), workedunder(M, N).;false;true', '4;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false,false,false;movie(P, B), movie(P, Q), actor(Q).;false;true', '4;true,false,true;movie(G, H), actor(H).;true;false', '4;true,false,false,false,false;workedunder(R, B), movie(S, A).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false,true,false,false;workedunder(L, F), movie(M, F), movie(M, B).;false;false', '5;true,false;movie(E, A), movie(E, F), director(F).;true;false', '5;true,false,true,true;genre(B, H).;false;true', '5;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '5;true,false,true,false;movie(E, B).;false;true', '5;true,false,true;workedunder(G, B).;true;true', '5;true,false,true,true,false;movie(I, B), movie(I, J), movie(K, J).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;true;true', '6;true,false,false,false,true;movie(L, B).;false;true', '6;true,false,false;movie(I, A), movie(I, J), workedunder(J, K).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(L, A), movie(L, M), director(M).;true;false', '6;true,false,false,false,true,false;workedunder(N, M), movie(P, N).;false;false', '6;true,false,true;movie(E, H), director(H).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true,false,true,false,true;movie(E, J), workedunder(K, J), movie(L, I).;false;false', '7;true,false;movie(E, A), workedunder(F, B).;true;true', '7;true,false,false;workedunder(M, B), movie(N, M).;false;true', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false,true,false;movie(H, B), movie(H, I), actor(I).;true;false', '7;true,false,false,false;workedunder(P, B).;false;false', '7;true,false,true;genre(B, G).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false;movie(D, A), movie(D, E), director(E).;true;false', '8;true,false,true,true,false,true;genre(B, J).;false;true', '8;true,false,true,true;movie(G, F), movie(H, B), movie(H, E).;false;true', '8;true,false,true,true,false,true,false;movie(K, F).;false;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,true;workedunder(F, E).;true;false', '8;true,false,true,true,false;workedunder(I, B).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;true;true', '9;true,false,false;movie(L, B), workedunder(M, B).;false;true', '9;true,false,true,true;movie(E, I), workedunder(J, I), movie(K, H).;false;false', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false,true;genre(B, Q), genre(R, Q), workedunder(S, R).;false;false', '9;true,false,false,false;movie(N, A), movie(N, P), genre(P, Q).;true;false', '9;true,false,true;movie(G, H), actor(H).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048788;  // std dev = 5,96e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else if ( workedunder(G, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(H, E), movie(I, E), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), director(I) )
%   | | | then if ( movie(H, B) )
%   | | | | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | | | else if ( genre(B, J) )
%   | | | | | then return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | | | else if ( workedunder(K, I) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360688;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, D), director(D) )
%   | then return 0.36994016889154785;  // std dev = 2,885, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, B), movie(K, L), actor(L) )
%   | | | | then return 0.2879216733149191;  // std dev = 2,622, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,49e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( workedunder(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(E, B) )
%   | | | | then return 0.2707440957811786;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | | | else if ( workedunder(H, F), movie(I, F), movie(I, B) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.1792039323348169;  // std dev = 2,58e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.2206994918588002;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | | | | else if ( workedunder(M, L), movie(N, M) )
%   | | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | | else return -0.15434068585244273;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 3,33e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, B), movie(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(I, B) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return 0.1557244275299248;  // std dev = 1,780, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.07324622576333695;  // std dev = 1,01e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16273484670719734;  // std dev = 2,02e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( workedunder(F, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15452137771268792;  // std dev = 1,49e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420296;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then if ( genre(B, L), genre(M, L), workedunder(N, M) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.11404411250048234;  // std dev = 1,487, 320,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=288 */
%   | | | | else return 0.13089064037501066;  // std dev = 0,384, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else return -0.064191840082026;  // std dev = 1,07e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.832 seconds
Total inference time: 0.508 seconds
AUC ROC: 1.0


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [5.96e-08, 303, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [1.83e-08, 25, 0], 'true,false,true,false,false,false': [0.0, 9, 0], 'true,true': [1.04e-06, 0, 337], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, E), movie(I, E), movie(I, B)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true,false': 'workedunder(G, B)', 'true,false,true': 'genre(B, F)'}, {'true,false,true,false,true': [0.0, 0, 0], 'false': [0.0, 303, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 25, 0], 'true,false,true,false,false,false': [0.0, 9, 0], 'true,true': [0.0, 0, 337], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,true': 'movie(H, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,true,false': 'genre(B, J)', 'true,false,false,true,false,false': 'workedunder(K, I)', 'true,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), workedunder(D, B), movie(C, B)'}, {'true,false,false,true,false,false,true': [0.0, 0, 0], 'true,false,false,true,false,true': [0.0, 25, 0], 'false': [0.0, 303, 0], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 0, 337], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true,false,false,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, D), director(D)'}, {'false': [0.0, 303, 0], 'true,false': [0.0, 0, 0], 'true,true': [2.885, 34, 337]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false,false': 'movie(K, B), movie(K, L), actor(L)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.49e-07, 303, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [2.622, 34, 337]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false,false': 'workedunder(H, F), movie(I, F), movie(I, B)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,true,false': 'movie(E, B)', 'true,false,true': 'workedunder(G, B)'}, {'true,false,true,false,true': [0.0, 0, 337], 'false': [1.03e-07, 303, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false,false,false': [2.58e-08, 34, 0], 'true,true': [0.0, 0, 0], 'true,false,true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), movie(F, B), workedunder(G, B)', 'true,false,false': 'movie(H, A), movie(H, I), workedunder(I, J)', 'true': 'movie(C, A), movie(C, B), workedunder(D, B)', 'true,false,false,false': 'movie(K, A), movie(K, L), director(L)', 'true,false,false,false,true,false': 'workedunder(M, L), movie(N, M)', 'true,false,false,false,true': 'movie(K, B)'}, {'true,false,false,false,true,true': [0.0, 0, 337], 'true,false,false,false,true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [3.33e-08, 303, 0], 'true,false,false,false,true,false,false': [0.0, 34, 0], 'true,false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), workedunder(D, B), movie(C, A)', 'true,false': 'movie(E, A), workedunder(F, B)', 'true,false,false,false': 'workedunder(I, B)', 'true,false,false': 'workedunder(G, B), movie(H, G)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [1.01e-07, 303, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false,false': [1.78, 34, 337], 'true,true': [0.0, 0, 0], 'true,false,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'workedunder(F, E)'}, {'false': [0.0, 303, 0], 'true,false,true,false': [1.49e-08, 34, 0], 'true,true': [2.02e-07, 0, 337], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(E, A), workedunder(F, B), movie(G, B)', 'true,false,false': 'movie(H, B), workedunder(I, B)', 'true': 'workedunder(C, B), movie(D, B), movie(D, A)', 'true,false,false,false': 'movie(J, A), movie(J, K), genre(K, L)', 'true,false,false,false,true': 'genre(B, L), genre(M, L), workedunder(N, M)'}, {'true,false,false,false,true,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [1.07e-07, 303, 0], 'true,false,false,false,false': [0.384, 2, 49], 'true,true': [0.0, 0, 0], 'true,false,false,false,true,false': [1.487, 32, 288], 'true,false,true': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;genre(B, F).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,true;genre(B, F).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;false', '2;true;movie(C, A), workedunder(D, B), movie(C, B).;false;true', '3;;workedunder(A, B) :- director(B), actor(A).;false;false', '4;;workedunder(A, B) :- director(B), actor(A).;true;false', '4;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '4;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '4;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true,false;movie(E, A), movie(F, B), workedunder(G, B).;false;true', '6;true,false,false;movie(H, A), movie(H, I), workedunder(I, J).;false;true', '6;true;movie(C, A), movie(C, B), workedunder(D, B).;false;true', '6;true,false,false,false;movie(K, A), movie(K, L), director(L).;true;false', '6;true,false,false,false,true;movie(K, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), workedunder(D, B), movie(C, A).;false;true', '7;true,false;movie(E, A), workedunder(F, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false;movie(D, A), movie(D, E), director(E).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(E, A), workedunder(F, B), movie(G, B).;false;true', '9;true,false,false;movie(H, B), workedunder(I, B).;false;true', '9;true;workedunder(C, B), movie(D, B), movie(D, A).;false;true', '9;true,false,false,false;movie(J, A), movie(J, K), genre(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #2: [('true,false,true,false,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #3: [('true,false,false,false', 0), ('true,false,false,true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0)]
Tree #4: [('true,false', 0), ('true,true', 0.9083557951482479)]
Tree #5: [('true,false,false,false,false', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true', 0.9083557951482479)]
Tree #6: [('true,true', 0), ('true,false,true,true', 0), ('true,false,false', 0), ('true,false,true,false,false,true', 0)]
Tree #7: [('true,false,false,false,true,false,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0)]
Tree #8: [('true,false,false,true', 0), ('true,true', 0), ('true,false,false,false,true', 0), ('true,false,true', 0), ('true,false,false,false,false', 0.9083557951482479)]
Tree #9: [('true,false,true,true', 0), ('true,false,false', 0)]
Tree #10: [('true,false,false,false,true,true', 0), ('true,false,false,true', 0), ('true,true', 0), ('true,false,true', 0), ('true,false,false,false,true,false', 0.9), ('true,false,false,false,false', 0.9607843137254902)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048788;  // std dev = 5,96e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), workedunder(D, B), movie(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.494177176077937;  // std dev = 3,711, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.11231637819360688;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.3770904897411688;  // std dev = 3,358, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.1015963294878366;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2905055971570937;  // std dev = 3,198, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.09269127618926044;  // std dev = 1,49e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.22888244371194086;  // std dev = 3,162, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B), workedunder(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(F, B), workedunder(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A), movie(H, I), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(K, A), movie(K, L), director(L) )
%   | | | | then if ( movie(K, B) )
%   | | | | | then return 0.23716637512819708;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | | | | else return -0.3370116326075938;  // std dev = 4,21e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 3,33e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), workedunder(D, B), movie(C, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15450220913532645;  // std dev = 2,574, 371,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=337 */
%   else return -0.07324622576333695;  // std dev = 1,01e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.173654304214297;  // std dev = 1,69e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.297517086777822;  // std dev = 2,11e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420296;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( workedunder(C, B), movie(D, B), movie(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), workedunder(F, B), movie(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, B), workedunder(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( movie(J, A), movie(J, K), genre(K, L) )
%   | | | | then return 0.11118745055496707;  // std dev = 2,090, 320,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=288 */
%   | | | | else return 0.13485692825931297;  // std dev = 0,540, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else return -0.064191840082026;  // std dev = 1,07e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.122446
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.244 seconds
Total inference time: 0.452 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 15.036
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100799
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.533 seconds
AUC ROC: 1.0
Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: transfer, Total folds for small set: 4, Time: 00:21:09
{'AUC PR': 1.0, 'F1': 1.0, 'Parameter Learning Results': 0, 'Inference time': 0.533, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 15.036, 'Mapping Results': {'Possible mappings': 60000, 'Generating paths time': 2.5531668663024902, 'Generating mappings time': 2.792025566101074, 'Knowledge compiling time': 0.015665769577026367, 'Total time': 23.4207866191864, 'Finding best mapping': 18.05992078781128}, 'CLL': -0.100799}
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.85814893509951;  // std dev = 9,00e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.8375303783984783;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109561;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.7029974352508991;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.1254446385283919;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,20e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.5438879823924021;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.11231637819360686;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583089;  // std dev = 4,42e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.40875296225147206;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.10159632948783659;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014983;  // std dev = 2,63e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.3127099815977003;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.09269127618926051;  // std dev = 1,63e-07, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256949034;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.24716860544692318;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325352;  // std dev = 2,42e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.20155451785084524;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.07877675473109147;  // std dev = 2,11e-08, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.1686757882501648;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.07324622576333696;  // std dev = 9,77e-08, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.14413478118927323;  // std dev = 0,142, 194,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=190 */
%   else return -0.06842697784420292;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.14069220166663016;  // std dev = 0,108, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202612;  // std dev = 1,05e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( actor(B) )
%   | then return -0.06419184008202598;  // std dev = 1,08e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.8541355865764381;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419184008202615;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.277 seconds
Total inference time: 0.454 seconds
AUC ROC: 1.0


Dataset: uwcse,imdb, Run: 1, Fold: 5, Type: scratch, Total folds for small set: 4, Time: 00:21:19
{'AUC PR': 1.0, 'F1': 1.0, 'Inference time': 0.454, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'Learning time': 9.277, 'CLL': -0.097223}
ueee
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995096;  // std dev = 1,07e-06, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.8396304165809906;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.14185106490048754;  // std dev = 2,29e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.7046772772613799;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.12544463852839213;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.5450585534393646;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.11231637819360647;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830936;  // std dev = 4,13e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.5718409726987249;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4281590273012764;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.1015963294878363;  // std dev = 1,03e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601492;  // std dev = 3,82e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.31390510516651643;  // std dev = 0,102, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.09269127618926051;  // std dev = 2,00e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694907;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.2485353366630766;  // std dev = 0,104, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.08518475138839678;  // std dev = 1,17e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.20298024689735417;  // std dev = 0,106, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07877675473109144;  // std dev = 7,30e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1814732230374093;  // std dev = 0,077, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(B) )
%   | then return -0.07324622576333711;  // std dev = 7,30e-08, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.6184432793802159;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15217831263512124;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.14758916408415107;  // std dev = 0,084, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.06842697784420317;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13735595081216528;  // std dev = 0,066, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(B) )
%   | then return -0.06419184008202576;  // std dev = 1,60e-07, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.5030229251710364;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419184008202618;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'movie(movie,person).', 'female(person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [2.29e-07, 378, 0], 'true,false': [0.135, 4, 212], 'true,true': [1.07e-06, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212], 'true,true': [0.0, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212], 'true,true': [5.72e-07, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'director(A)'}, {'false': [1.03e-07, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,false': [0.0, 0, 212], 'true,false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [2e-07, 378, 0], 'true,false': [0.102, 4, 212], 'true,true': [3.82e-07, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [1.17e-07, 378, 0], 'true,false': [0.104, 4, 212], 'true,true': [0.0, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [7.3e-08, 378, 0], 'true,false': [0.106, 4, 212], 'true,true': [2.76e-07, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'false': 'actor(B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'false,true': [7.3e-08, 350, 0], 'true,false': [0.0, 22, 0], 'true,true': [0.077, 0, 382], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'false': [0.0, 378, 0], 'true,false': [0.084, 4, 212], 'true,true': [0.0, 0, 170]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'false': 'actor(B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'false,true': [1.6e-07, 350, 0], 'true,false': [0.0, 22, 0], 'true,true': [0.066, 0, 382], 'false,false,true': [0.0, 4, 0], 'false,false,false': [1.86e-09, 6, 0]}]] 



Best mapping found: ['movie(A,B) -> teamplaysinleague(B,A)', 'workedunder(A,B) -> teamplaysagainstteam(A,B)'] 

Tranferred structured tree: [['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.29e-07, 378, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'false': [1.03e-07, 378, 0], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [2e-07, 378, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.17e-07, 378, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [7.3e-08, 378, 0]}], ['teamplaysagainstteam(A, B)', {'false,false': 'teamplaysinleague(A, D), teamplaysinleague(B, D)'}, {'true,true': [0.077, 0, 382], 'true,false': [0.0, 22, 0], 'false,true': [7.3e-08, 350, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.0, 6, 0]}], ['teamplaysagainstteam(A, B)', {'': 'teamplaysinleague(A, C), teamplaysinleague(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.084, 4, 212], 'false': [0.0, 378, 0]}], ['teamplaysagainstteam(A, B)', {'false,false': 'teamplaysinleague(A, D), teamplaysinleague(B, D)'}, {'true,true': [0.066, 0, 382], 'true,false': [0.0, 22, 0], 'false,true': [1.6e-07, 350, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [1.86e-09, 6, 0]}]] 

Transferred target predicate: teamplaysagainstteam 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '1;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '2;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '3;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '4;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '5;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '6;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '7;false,false;teamplaysinleague(A, D), teamplaysinleague(B, D).;false;false', '8;;teamplaysagainstteam(A, B) :- teamplaysinleague(A, C), teamplaysinleague(B, C).;false;false', '9;false,false;teamplaysinleague(A, D), teamplaysinleague(B, D).;false;false']
WILL Produced-Tree #1
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.38791083986141195;  // std dev = 31,693, 4.032,000 (wgt'ed) examples reached here.  /* #neg=1.896 #pos=2.136 */
%   else return 0.021712764886741707;  // std dev = 24,845, 4.512,000 (wgt'ed) examples reached here.  /* #neg=3.774 #pos=738 */
WILL Produced-Tree #2
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.3239297595419295;  // std dev = 32,026, 4.109,000 (wgt'ed) examples reached here.  /* #neg=1.973 #pos=2.136 */
%   else return 0.01732735053759602;  // std dev = 24,871, 4.560,000 (wgt'ed) examples reached here.  /* #neg=3.822 #pos=738 */
WILL Produced-Tree #3
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.2833733121740649;  // std dev = 31,504, 3.990,000 (wgt'ed) examples reached here.  /* #neg=1.854 #pos=2.136 */
%   else return 0.013243164317113292;  // std dev = 24,899, 4.615,000 (wgt'ed) examples reached here.  /* #neg=3.877 #pos=738 */
WILL Produced-Tree #4
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.21057895019228876;  // std dev = 32,034, 4.111,000 (wgt'ed) examples reached here.  /* #neg=1.975 #pos=2.136 */
%   else return 0.01336484510075423;  // std dev = 24,873, 4.564,000 (wgt'ed) examples reached here.  /* #neg=3.826 #pos=738 */
WILL Produced-Tree #5
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.1664516058847335;  // std dev = 31,949, 4.091,000 (wgt'ed) examples reached here.  /* #neg=1.955 #pos=2.136 */
%   else return 0.011633067932666307;  // std dev = 24,874, 4.565,000 (wgt'ed) examples reached here.  /* #neg=3.827 #pos=738 */
WILL Produced-Tree #6
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.13707768767129896;  // std dev = 31,626, 4.017,000 (wgt'ed) examples reached here.  /* #neg=1.881 #pos=2.136 */
%   else return 0.013468644152370242;  // std dev = 24,824, 4.473,000 (wgt'ed) examples reached here.  /* #neg=3.735 #pos=738 */
WILL Produced-Tree #7
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.09530681893610035;  // std dev = 31,915, 4.083,000 (wgt'ed) examples reached here.  /* #neg=1.947 #pos=2.136 */
%   else return 0.008758760153602996;  // std dev = 24,868, 4.555,000 (wgt'ed) examples reached here.  /* #neg=3.817 #pos=738 */
WILL Produced-Tree #8
% FOR teamplaysagainstteam(A, B):
%   if ( athleteplaysforteam(C, A), teamplayssport(B, D) )
%   then return 0.5667136113930334;  // std dev = 0,224, 2.581,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=2.428 */
%   else if ( athleteplaysforteam(E, B), teamplayssport(A, F) )
%   | then if ( athleteplayssport(E, F), athleteplaysinleague(E, G), teamplaysinleague(A, G) )
%   | | then return 0.5502660358447443;  // std dev = 0,230, 149,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=143 */
%   | | else if ( athleteplaysforteam(H, A), athleteledsportsteam(H, I), teamplaysinleague(I, J) )
%   | | | then return 0.5191511919640311;  // std dev = 0,332, 46,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=39 */
%   | | | else if ( athleteplaysinleague(E, K), teamplaysinleague(B, K), teamplaysinleague(A, L) )
%   | | | | then return -0.006291361575580155;  // std dev = 0,336, 48,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | | else if ( teamplayssport(B, M), teamplayssport(N, F), athleteledsportsteam(E, N) )
%   | | | | | then return 0.6391179932978385;  // std dev = 0,345, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | | | else if ( teamplayssport(B, P), athleteplayssport(E, P), athleteledsportsteam(Q, B) )
%   | | | | | | then return -0.07106776260188956;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | | | | else if ( teamplayssport(B, R), teamplayssport(S, R), teamalsoknownas(T, S) )
%   | | | | | | | then return 0.4356835830852831;  // std dev = 0,453, 47,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=31 */
%   | | | | | | | else return 0.22351886406767396;  // std dev = 0,423, 48,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=22 */
%   | else return -0.22055577872797655;  // std dev = 0,229, 5.615,000 (wgt'ed) examples reached here.  /* #neg=5.425 #pos=190 */
WILL Produced-Tree #9
% FOR teamplaysagainstteam(A, B):
%   if ( teamplaysinleague(A, C), teamplaysinleague(B, C) )
%   then return 0.031574124622187186;  // std dev = 25,889, 4.041,000 (wgt'ed) examples reached here.  /* #neg=1.905 #pos=2.136 */
%   else return 0.013948667891658148;  // std dev = 22,772, 4.549,000 (wgt'ed) examples reached here.  /* #neg=3.811 #pos=738 */
WILL Produced-Tree #10
% FOR teamplaysagainstteam(A, B):
%   if ( athleteplaysforteam(C, A), teamplayssport(B, D) )
%   then return 0.4271817159283514;  // std dev = 0,239, 2.603,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=2.428 */
%   else if ( athleteplaysforteam(E, B) )
%   | then if ( teamplayssport(A, F), teamplayssport(G, F), athleteplaysforteam(H, G) )
%   | | then if ( athleteledsportsteam(I, A), athleteledsportsteam(E, B) )
%   | | | then return 0.4614168204644881;  // std dev = 0,171, 87,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | | else if ( teamalsoknownas(G, J), athleteplaysforteam(K, J), teamplaysinleague(B, L) )
%   | | | | then if ( teamplaysinleague(A, L) )
%   | | | | | then return 0.34593386100144397;  // std dev = 0,274, 64,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | | | | | else if ( athleteplaysinleague(E, L) )
%   | | | | | | then return -0.03448261107402082;  // std dev = 0,345, 63,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | | | | | else if ( athleteplayssport(E, F) )
%   | | | | | | | then return 0.7621713982392067;  // std dev = 0,025, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | | | | | else return 0.06174248557263547;  // std dev = 0,439, 52,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | | else return 0.40104226831148315;  // std dev = 0,349, 97,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=79 */
%   | | else return -0.072993894484003;  // std dev = 0,262, 651,000 (wgt'ed) examples reached here.  /* #neg=599 #pos=52 */
%   | else return -0.2043678649854138;  // std dev = 0,213, 4.945,000 (wgt'ed) examples reached here.  /* #neg=4.806 #pos=139 */
