

Start learning from source dataset


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995096;  // std dev = 1,07e-06, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.8396304165809906;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1418510649004876;  // std dev = 2,09e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.7046772772613799;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1254446385283921;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.5450585534393646;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.11231637819360653;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830936;  // std dev = 4,13e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.5718409726987249;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4281590273012764;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.10159632948783638;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601492;  // std dev = 3,82e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.31390510516651643;  // std dev = 0,102, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.09269127618926049;  // std dev = 1,99e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694907;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.2485353366630766;  // std dev = 0,104, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.08518475138839678;  // std dev = 1,15e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.20298024689735417;  // std dev = 0,106, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07877675473109146;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.1701045993799653;  // std dev = 0,108, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07324622576333709;  // std dev = 7,88e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.14554162687515418;  // std dev = 0,110, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.06842697784420314;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1384554188765429;  // std dev = 0,078, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( actor(B) )
%   | then return -0.06419184008202579;  // std dev = 1,53e-07, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.689673256312479;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419184008202618;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Predicates from source: ['workedunder(person,person).', 'female(person).', 'movie(movie,person).', 'actor(person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true,false': 'director(A)', 'true': 'female(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,false': [0.0, 0, 212], 'true,false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.102, 4, 212], 'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.104, 4, 212], 'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.106, 4, 212], 'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.108, 4, 212], 'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.11, 4, 212], 'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'false': 'actor(B)', 'true': 'movie(C, A), movie(C, B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'true,false': [0.0, 30, 0], 'false,false,true': [0.0, 4, 0], 'true,true': [0.078, 0, 382], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 



Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true,false': 'professor(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [1.99e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.15e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [6.32e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.108, 4, 212], 'false': [7.88e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.11, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,true': [0.078, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;false', '9;false,false;publication(D, A), publication(D, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7018989350995116;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.26943925768015736;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.593654133293324;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.23337866527404738;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.4672538061283157;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.19665067181952461;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.35304720963643493;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.16164998426673943;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2654364702625149;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.13016397687795445;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20238569120389732;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.10312645467158524;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15727811232206607;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.08071652131229197;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.12445760704123841;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.06261667945137464;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.10002658028898015;  // std dev = 2,054, 32,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   else return 0.04826511047283202;  // std dev = 5,479, 124,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=51 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20196619237096053;  // std dev = 0,982, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.39846925674587225;  // std dev = 3,405, 66,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=51 */
%   else if ( student(B) )
%   | then return -0.37425801598140046;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( publication(D, A), publication(D, B) )
%   | | then return -0.7623195219147536;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.3742580159814005;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
Results
   AUC ROC   = 0.795918
   AUC PR    = 0.778132
   CLL	      = -0.556002
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.285714
   F1        = 0.4


Total learning time: 4.847 seconds
Total inference time: 0.465 seconds
AUC ROC: 0.795918


Results in test set
   AUC ROC   = 0.795918
   AUC PR    = 0.778132
   CLL	      = -0.556002
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.285714
   F1        = 0.4


Total inference time: 0.465 seconds
AUC ROC: 0.795918
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.479, 73, 51], 'true': [2.054, 5, 27]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,false': [3.405, 15, 51], 'false,false,true': [0.0, 4, 0], 'true,true': [0.982, 1, 27], 'false,true': [0.0, 53, 0], 'false,false,false': [0.0, 5, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['9;;advisedby(A, B) :- professor(B), student(A).;false;true', '9;false;student(B).;false;true', '9;false,false;publication(D, A), publication(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #2: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #3: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #4: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #5: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #6: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #7: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #8: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #9: [('false', 0.5887096774193549), ('true', 0.84375)]
Tree #10: [('true,false', 0.7727272727272727), ('true,true', 0.9642857142857143)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, B), publication(E, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(F, A), publication(G, B) )
%   | | | | then if ( publication(F, H), professor(H) )
%   | | | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(I, B), inphase(C, J), inphase(A, J) )
%   | | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( publication(K, B), publication(K, L), projectmember(M, L) )
%   | | | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.6407576307516862;  // std dev = 0,412, 23,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | else return 0.7265699877310904;  // std dev = 0,338, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.34859316165173615;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(E, A), publication(E, B) )
%   | | then return 0.6918455320532061;  // std dev = 0,194, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( publication(F, A), tempadvisedby(G, B), publication(H, B) )
%   | | | then if ( publication(F, I), professor(I) )
%   | | | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(J, A), publication(K, B) )
%   | | | | then if ( publication(K, L), student(L) )
%   | | | | | then return 0.745248661882312;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.07858199521564528;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.6192555145842865;  // std dev = 0,339, 45,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=39 */
%   else return -0.12544463852839155;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(E, A) )
%   | | then return 0.6145303524764396;  // std dev = 0,072, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24232234836982441;  // std dev = 0,989, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, A), publication(F, B) )
%   | | then return 0.537574986231402;  // std dev = 0,193, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, B), publication(J, B) )
%   | | | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.2509063671531041;  // std dev = 0,952, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then if ( publication(L, B) )
%   | | | | | then return 0.47875421201415286;  // std dev = 0,359, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | | | else return 0.2984760264572936;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.5233487598137009;  // std dev = 0,290, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else return -0.11231637819360632;  // std dev = 3,65e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then return 0.4352719051718809;  // std dev = 0,093, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tempadvisedby(E, B), publication(F, A), publication(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.298849898220079;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then if ( publication(J, I) )
%   | | | | then return 0.18629456379224751;  // std dev = 0,984, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(K, B), publication(K, L), projectmember(M, L) )
%   | | | | | then return 0.4610394751625837;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(N, B), publication(N, P), inphase(P, Q) )
%   | | | | | | then return 0.385820017115124;  // std dev = 0,342, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | | | | else return 0.28915529125888584;  // std dev = 0,435, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.35835064178913606;  // std dev = 0,315, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.10159632948783626;  // std dev = 3,33e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(E, A) )
%   | | then return 0.35993391205064246;  // std dev = 0,068, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, A), publication(F, B) )
%   | | | then return 0.3267676035376202;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else if ( publication(G, A), publication(H, B) )
%   | | | | then if ( publication(G, I), professor(I) )
%   | | | | | then return 0.03315494592188569;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.22431637349783498;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( projectmember(J, B) )
%   | | | | | then return 0.23302226588731356;  // std dev = 0,844, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else if ( publication(K, C) )
%   | | | | | | then return 0.14159077111850812;  // std dev = 0,981, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.28446522193855206;  // std dev = 0,351, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else return 0.27102436427655563;  // std dev = 0,315, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.09269127618926105;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then return 0.2877301885834501;  // std dev = 0,132, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( publication(F, B), publication(F, A), tempadvisedby(G, B) )
%   | | then return 0.26656351162562353;  // std dev = 0,061, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(H, B), publication(H, I), projectmember(J, I) )
%   | | | then return 0.29582734891143664;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then if ( tempadvisedby(M, B), publication(N, M) )
%   | | | | | then return -0.09739679349870145;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(P, B), publication(Q, A) )
%   | | | | | | then return 0.06467159607769275;  // std dev = 1,112, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | | else if ( publication(R, A) )
%   | | | | | | | then return 0.2227707476289123;  // std dev = 0,304, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | | | | else return 0.15523431688129977;  // std dev = 0,394, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | | | else return 0.20940099580066063;  // std dev = 0,335, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then return 0.230056390944193;  // std dev = 0,127, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( publication(F, B), publication(F, A), tempadvisedby(G, B) )
%   | | then return 0.21783657143940008;  // std dev = 0,054, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(H, B), publication(I, A) )
%   | | | then if ( publication(H, A), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return -0.06598858723236041;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( publication(H, A) )
%   | | | | | then return 0.2673447461009729;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | then if ( publication(H, M), inphase(M, N), inphase(A, N) )
%   | | | | | | | then return 0.3471668077412078;  // std dev = 0,710, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | | else return -0.04859134505414633;  // std dev = 0,831, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | | else return 0.04206862296480104;  // std dev = 0,986, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1516099360249566;  // std dev = 0,360, 45,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=37 */
%   else return -0.07877675473109177;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( projectmember(C, B) )
%   | then return 0.09274423552808111;  // std dev = 0,846, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( publication(D, B), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(G, F) )
%   | | | then if ( publication(G, E) )
%   | | | | then return 0.22500131526238248;  // std dev = 0,127, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | else if ( tempadvisedby(H, B), publication(I, A) )
%   | | | | | then return 0.2132725399717112;  // std dev = 0,233, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | | | | then return -0.1107269936934398;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | | then return 0.021329910702064525;  // std dev = 0,851, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | | else return -0.026850886247931804;  // std dev = 0,424, 16,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.16470134570966022;  // std dev = 0,265, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | | else return 0.2692750690610972;  // std dev = 0,092, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then return 0.15362912144890603;  // std dev = 0,049, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( publication(E, A), publication(F, B) )
%   | | | then if ( publication(E, G), professor(G) )
%   | | | | then return -0.05407628610758851;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.0847241998910864;  // std dev = 0,820, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(H, B), publication(H, I), tempadvisedby(I, J) )
%   | | | | then return 0.2461628013050277;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | | then if ( publication(M, C) )
%   | | | | | | then return -0.08360715068283085;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.08445079545724815;  // std dev = 0,366, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | | | else return 0.130287024356147;  // std dev = 0,885, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.11790445884704073;  // std dev = 0,301, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.0684269778442027;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.0890798865519714;  // std dev = 3,004, 94,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=78 */
%   else if ( student(B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( publication(C, A), publication(C, B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
Results
   AUC ROC   = 0.979592
   AUC PR    = 0.980867
   CLL	      = -0.333722
   Precision = 0.777778 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.875


Total learning time: 37.334 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.979592


Best model AUC ROC so far: 0.979592


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), student(A).;true;false', '0;true,true,false,false,true;publication(F, H), professor(H).;false;false', '0;true,true;publication(D, C), publication(D, B).;false;true', '0;true,true,false,false;publication(F, A), publication(G, B).;true;true', '0;true,true,false;publication(E, B), publication(E, A).;false;true', '0;true,true,false,false,false,false;publication(K, B), publication(K, L), projectmember(M, L).;false;false', '0;true;tempadvisedby(C, B).;true;false', '0;true,true,false,false,false;publication(I, B), inphase(C, J), inphase(A, J).;true;true', '1;;advisedby(A, B) :- professor(B), student(A).;true;false', '1;true,false;publication(E, A), publication(E, B).;false;true', '1;true,false,false,true;publication(F, I), professor(I).;false;false', '1;true,false,false,false;publication(J, A), publication(K, B).;true;false', '1;true,true;publication(D, B).;false;true', '1;true;tempadvisedby(C, B), publication(D, C).;true;true', '1;true,false,false;publication(F, A), tempadvisedby(G, B), publication(H, B).;true;true', '1;true,false,false,false,true;publication(K, L), student(L).;false;false', '2;;advisedby(A, B) :- professor(B), student(A).;true;false', '2;true,false;publication(F, A), publication(F, B).;false;true', '2;true,false,false,false;tempadvisedby(K, B).;true;false', '2;true,true;publication(E, A).;false;false', '2;true;tempadvisedby(C, B), publication(D, C).;true;true', '2;true,false,false;publication(G, A), publication(G, H), professor(H).;false;true', '2;true,false,false,false,true;publication(L, B).;false;false', '3;;advisedby(A, B) :- professor(B), student(A).;true;false', '3;true,false,false,true,false;publication(K, B), publication(K, L), projectmember(M, L).;false;true', '3;true,false;tempadvisedby(E, B), publication(F, A), publication(G, B).;true;true', '3;true,false,false,true;publication(J, I).;true;true', '3;true,false,true;publication(F, H), professor(H).;false;false', '3;true,false,false,true,false,false;publication(N, B), publication(N, P), inphase(P, Q).;false;false', '3;true;tempadvisedby(C, B), publication(D, B), publication(D, A).;false;true', '3;true,false,false;tempadvisedby(I, B).;true;false', '4;;advisedby(A, B) :- professor(B), student(A).;true;false', '4;true,true,false,false,true;publication(G, I), professor(I).;false;false', '4;true,true;publication(D, C), publication(E, A).;false;true', '4;true,true,false,false;publication(G, A), publication(H, B).;true;true', '4;true,true,false;publication(F, A), publication(F, B).;false;true', '4;true;tempadvisedby(C, B).;true;false', '4;true,true,false,false,false;projectmember(J, B).;false;false', '5;;advisedby(A, B) :- professor(B), student(A).;true;false', '5;true,false;publication(F, B), publication(F, A), tempadvisedby(G, B).;false;true', '5;true,false,false,false;publication(K, B), publication(K, L), student(L).;true;false', '5;true,false,false,false,true,false;tempadvisedby(P, B), publication(Q, A).;true;true', '5;true,false,false,false,true,false,false;publication(R, A).;false;false', '5;true;publication(C, B), publication(C, D), tempadvisedby(D, E).;false;true', '5;true,false,false;publication(H, B), publication(H, I), projectmember(J, I).;false;true', '5;true,false,false,false,true;tempadvisedby(M, B), publication(N, M).;false;true', '6;;advisedby(A, B) :- professor(B), student(A).;true;false', '6;true,false,false,true,false;publication(H, A).;false;true', '6;true,false;publication(F, B), publication(F, A), tempadvisedby(G, B).;false;true', '6;true,false,false,true;publication(H, A), publication(I, J), tempadvisedby(K, J).;false;true', '6;true,false,false,true,false,false;tempadvisedby(L, B).;false;false', '6;true;publication(C, B), publication(C, D), tempadvisedby(D, E).;false;true', '6;true,false,false;publication(H, B), publication(I, A).;true;false', '7;;advisedby(A, B) :- professor(B), student(A).;true;false', '7;true,false,true,true,false,false;tempadvisedby(J, B), publication(K, J).;true;true', '7;true,false;publication(D, B), publication(D, E), tempadvisedby(F, E).;true;false', '7;true,false,true,true;publication(G, E).;false;true', '7;true,false,true;publication(G, F).;true;false', '7;true;projectmember(C, B).;false;true', '7;true,false,true,true,false,false,false;tempadvisedby(L, B).;false;false', '7;true,false,true,true,false;tempadvisedby(H, B), publication(I, A).;false;true', '8;;advisedby(A, B) :- professor(B), student(A).;true;false', '8;true,true,false,true;publication(E, G), professor(G).;false;false', '8;true,true,false,false;publication(H, B), publication(H, I), tempadvisedby(I, J).;false;true', '8;true,true,false;publication(E, A), publication(F, B).;true;true', '8;true,true;publication(D, B), publication(D, A).;false;true', '8;true;tempadvisedby(C, B).;true;false', '8;true,true,false,false,false;publication(K, B), publication(K, L), student(L).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;false,false;publication(C, A), publication(C, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,true,false,false,false,true', 0.6666666666666666), ('true,true,false,false,true,false', 0.75), ('true,true,false,false,false,false,false', 0.782608695652174), ('true,true,false,false,true,true', 0.8), ('true,false', 0.868421052631579)]
Tree #2: [('true,true,false', 0.6), ('true,false,false,false,true,false', 0.6666666666666666), ('true,false,false,true,false', 0.75), ('true,false,false,true,true', 0.8), ('true,false,false,false,false', 0.8666666666666667), ('true,false,true', 0.96)]
Tree #3: [('true,false,false,true,false', 0.6), ('true,true,false', 0.6), ('true,false,false,false,true,false', 0.6666666666666666), ('true,false,false,true,true', 0.8), ('true,false,false,false,true,true', 0.8461538461538461), ('true,false,false,false,false', 0.9090909090909091), ('true,false,true', 0.96)]
Tree #4: [('true,false,false,true,true', 0.6), ('true,false,true,false', 0.75), ('true,false,false,true,false,false,false', 0.75), ('true,false,true,true', 0.8), ('true,false,false,true,false,false,true', 0.8666666666666667), ('true,false,false,false', 0.868421052631579)]
Tree #5: [('true,true,false,false,false,false,true', 0.6), ('true,true,false,false,true,false', 0.75), ('true,true,false,false,true,true', 0.8), ('true,true,false,false,false,true', 0.8), ('true,true,false,false,false,false,false', 0.8571428571428571), ('true,false', 0.868421052631579)]
Tree #6: [('true,false,false,false,true,false,true', 0.6), ('true,false,false,false,true,true', 0.6666666666666666), ('true,false,false,false,false', 0.7894736842105263), ('true,false,false,false,true,false,false,false', 0.8076923076923077), ('true,false,false,false,true,false,false,true', 0.9), ('true,true', 0.9333333333333333)]
Tree #7: [('true,false,false,true,false,false,true,false', 0.6), ('true,false,false,true,false,false,false', 0.6666666666666666), ('true,false,false,true,true', 0.6666666666666666), ('true,false,false,true,false,false,true,true', 0.6666666666666666), ('true,false,false,false', 0.8222222222222222), ('true,true', 0.9333333333333333)]
Tree #8: [('true,false,true,true,false,false,true', 0.6666666666666666), ('true,false,true,true,false,false,false,false', 0.6875), ('true,false,true,true,false,false,false,true', 0.75), ('true,true', 0.8), ('true,false,true,false', 0.8571428571428571), ('true,false,true,true,false,true', 0.9)]
Tree #9: [('true,true,false,false,false,true,true', 0.6666666666666666), ('true,true,false,true,false', 0.75), ('true,true,false,true,true', 0.8), ('true,true,false,false,false,true,false', 0.8333333333333334), ('true,true,false,false,false,false', 0.8333333333333334), ('true,false', 0.868421052631579)]
Tree #10: [('true', 0.8297872340425532)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, B), publication(E, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(F, A), publication(G, B) )
%   | | | | then if ( publication(F, H), professor(H) )
%   | | | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(I, B), inphase(C, J), inphase(A, J) )
%   | | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( publication(K, B), publication(K, L), projectmember(M, L) )
%   | | | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.6407576307516862;  // std dev = 1,978, 23,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | else return 0.7265699877310904;  // std dev = 2,084, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.34859316165173615;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(E, A), publication(E, B) )
%   | | then return 0.6918455320532061;  // std dev = 0,968, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( publication(F, A), tempadvisedby(G, B), publication(H, B) )
%   | | | then if ( publication(F, I), professor(I) )
%   | | | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(J, A), publication(K, B) )
%   | | | | then if ( publication(K, L), student(L) )
%   | | | | | then return 0.745248661882312;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.07858199521564528;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.6192555145842865;  // std dev = 2,273, 45,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=39 */
%   else return -0.12544463852839155;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(E, A) )
%   | | then return 0.6145303524764396;  // std dev = 0,072, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24232234836982441;  // std dev = 0,989, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(F, A), publication(F, B) )
%   | | then return 0.537574986231402;  // std dev = 0,966, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then return 0.14762633237888634;  // std dev = 1,346, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then if ( publication(J, B) )
%   | | | | | then return 0.47875421201415286;  // std dev = 1,828, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | | | else return 0.2984760264572936;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.5233487598137009;  // std dev = 1,358, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else return -0.11231637819360632;  // std dev = 3,65e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then return 0.4352719051718809;  // std dev = 0,093, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tempadvisedby(E, B), publication(F, A), publication(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.02394432780993976;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.298849898220079;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then if ( publication(J, I) )
%   | | | | then return 0.18629456379224751;  // std dev = 0,984, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(K, B), publication(K, L), projectmember(M, L) )
%   | | | | | then return 0.4610394751625837;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(N, B), publication(N, P), inphase(P, Q) )
%   | | | | | | then return 0.385820017115124;  // std dev = 1,323, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | | | | else return 0.29229026768820715;  // std dev = 1,235, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.36086823156449244;  // std dev = 1,933, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.10159632948783626;  // std dev = 3,33e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(E, A) )
%   | | then return 0.35993391205064246;  // std dev = 0,068, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, A), publication(F, B) )
%   | | | then return 0.3267676035376202;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else if ( publication(G, A), publication(H, B) )
%   | | | | then if ( publication(G, I), professor(I) )
%   | | | | | then return 0.020443978205073453;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.22431637349783498;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( projectmember(J, B) )
%   | | | | | then return 0.23255230411670533;  // std dev = 0,844, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else return 0.2578324948271385;  // std dev = 1,909, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | else return 0.27306297828799997;  // std dev = 1,928, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.09269127618926105;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then return 0.2836282912550991;  // std dev = 0,510, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( publication(F, B), publication(F, A), tempadvisedby(G, B) )
%   | | then return 0.26656351162562353;  // std dev = 0,061, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(H, B), publication(H, I), projectmember(J, I) )
%   | | | then return 0.2977263443829679;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then if ( tempadvisedby(M, B), publication(N, M) )
%   | | | | | then return -0.1260770678025626;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(P, B), publication(Q, A) )
%   | | | | | | then return 0.058022036172856895;  // std dev = 1,110, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | | else if ( publication(R, A) )
%   | | | | | | | then return 0.22662507409871474;  // std dev = 0,969, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | | | | else return 0.15829657643621106;  // std dev = 2,009, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | | | else return 0.21309158151105273;  // std dev = 1,448, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then return 0.22684250408141302;  // std dev = 0,494, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( publication(F, B), publication(F, A), tempadvisedby(G, B) )
%   | | then return 0.21783657143940008;  // std dev = 0,054, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(H, B), publication(I, A) )
%   | | | then if ( publication(H, A), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return -0.06763274378378333;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( publication(H, A) )
%   | | | | | then return 0.26570058954955;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | then return 0.0944060999088704;  // std dev = 1,221, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | | | else return 0.05632600253992356;  // std dev = 0,969, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1520694530550327;  // std dev = 2,422, 45,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=37 */
%   else return -0.07877675473109177;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( projectmember(C, B) )
%   | then return 0.09169411767065305;  // std dev = 0,847, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( publication(D, B), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(G, F) )
%   | | | then if ( publication(G, E) )
%   | | | | then return 0.22098455738926653;  // std dev = 0,102, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | else if ( tempadvisedby(H, B), publication(I, A) )
%   | | | | | then return 0.22122172365204568;  // std dev = 0,779, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | | | | then return -0.13253400899440365;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | | then return 0.026921107444357467;  // std dev = 0,852, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | | else return -0.024594384083906726;  // std dev = 1,688, 16,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.16303756485832918;  // std dev = 1,734, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | | else return 0.275200653583794;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then return 0.1534725590815892;  // std dev = 0,048, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( publication(E, A), publication(F, B) )
%   | | | then if ( publication(E, G), professor(G) )
%   | | | | then return -0.0588760535384268;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.07433493148949924;  // std dev = 0,843, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(H, B), publication(H, I), tempadvisedby(I, J) )
%   | | | | then return 0.23915903719344167;  // std dev = 0,014, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | | then return 0.061543898432232305;  // std dev = 1,774, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | | | else return 0.13508442353200337;  // std dev = 0,892, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.11867495732220779;  // std dev = 1,848, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.0684269778442027;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C), publication(D, B) )
%   | then return 0.1655196383201877;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tempadvisedby(E, B) )
%   | | then if ( publication(F, A), publication(F, B) )
%   | | | then return 0.1361124568300929;  // std dev = 0,036, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(G, E) )
%   | | | | then return -0.11493222756297643;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( publication(H, A), publication(I, B) )
%   | | | | | then if ( publication(H, J), publication(I, J) )
%   | | | | | | then return 0.07906303737316195;  // std dev = 0,843, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.04050954619054095;  // std dev = 0,910, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | | else if ( publication(K, B), publication(K, L), projectmember(M, L) )
%   | | | | | | then return 0.1847728920111744;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.08194986663429336;  // std dev = 0,374, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else return 0.09762632124263698;  // std dev = 0,301, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.06419184008202625;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
Results
   AUC ROC   = 0.918367
   AUC PR    = 0.917971
   CLL	      = -0.335368
   Precision = 0.777778 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.875


Total learning time: 42.144 seconds
Total inference time: 0.61 seconds
AUC ROC: 0.918367


Best model AUC ROC so far: 0.979592


******************************************
Best model found
******************************************
Total revision time: 86.136
Best validation AUC ROC: 0.979592


Results
   AUC ROC   = 0.904898
   AUC PR    = 0.840699
   CLL	      = -0.299258
   Precision = 0.853659 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.921053


Total inference time: 0.699 seconds
AUC ROC: 0.904898
Dataset: 0, Run: 1, Fold: 1, Type: transfer, Time: 00:01:41
{'Parameter Learning results': {'AUC ROC': 0.908571, 'AUC PR': 0.877722, 'F1': 0.56, 'Recall': 0.4, 'Learning time': 4.847, 'Inference time': 0.921, 'Precision': [0.933333, 0.5], 'CLL': -0.494726}, 'AUC ROC': 0.904898, 'AUC PR': 0.840699, 'Mapping results': {'Generating mappings time': 0.1174917221069336, 'Generating paths time': 2.5362846851348877, 'Knowledge compiling time': 0.02182793617248535, 'Total time': 2.7893974781036377, 'Possible mappings': 864, 'Finding best mapping': 0.11378645896911621}, 'F1': 0.921053, 'Recall': 1.0, 'Learning time': 86.136, 'Inference time': 0.699, 'Precision': [0.853659, 0.5], 'CLL': -0.299258}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, B), publication(E, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else if ( publication(H, B), publication(H, I), projectmember(J, I) )
%   | | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | | | then if ( publication(M, C) )
%   | | | | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | | | | else return 0.7152917922423693;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7265699877310904;  // std dev = 0,338, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, B), publication(E, A) )
%   | | | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( projectmember(F, B) )
%   | | | | then return 0.5362197249691285;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | | | then return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else if ( publication(I, A) )
%   | | | | | | then return 0.5036644103853913;  // std dev = 0,859, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | else if ( publication(J, C) )
%   | | | | | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.6066652181597799;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else return 0.6136697145138905;  // std dev = 0,338, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.12544463852839155;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), inphase(A, E), inphase(C, E) )
%   | | then return 0.30649792765826683;  // std dev = 0,610, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(F, A), publication(F, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else if ( publication(G, A), publication(H, B) )
%   | | | | then if ( publication(G, I), professor(I) )
%   | | | | | then return 0.00876090948223146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.39901396180382076;  // std dev = 0,857, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( projectmember(J, B) )
%   | | | | | then return 0.42028685983977754;  // std dev = 0,880, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else return 0.47857644410657035;  // std dev = 0,373, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | else if ( publication(K, A), publication(K, L), tempadvisedby(M, L) )
%   | | then return 0.3629573105638624;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5360342336407855;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   else return -0.11231637819360632;  // std dev = 3,65e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.45849274379012717;  // std dev = 0,050, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A), publication(E, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(F, A), publication(G, B) )
%   | | | | then if ( publication(F, H), professor(H) )
%   | | | | | then return 0.00740222192145491;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.30374231607634655;  // std dev = 0,856, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(I, C) )
%   | | | | | then return 0.06815133680559564;  // std dev = 0,803, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( projectmember(J, B) )
%   | | | | | | then return 0.3177384224271233;  // std dev = 0,879, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | | else return 0.37966519614818456;  // std dev = 0,355, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else return 0.36301689550476235;  // std dev = 0,334, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.10159632948783626;  // std dev = 3,33e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, C), publication(D, B) )
%   | | then return 0.3490035064987773;  // std dev = 0,046, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A), publication(E, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(F, A), publication(G, B) )
%   | | | | then return 0.10482737060844355;  // std dev = 0,427, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | | else return 0.254010390298598;  // std dev = 0,382, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | else if ( publication(H, A), publication(H, I), tempadvisedby(J, I) )
%   | | then if ( publication(H, B) )
%   | | | then if ( publication(K, J) )
%   | | | | then return 0.1838368100793557;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.4338368100793557;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.033836810079355704;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.3149868859813143;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   else return -0.09269127618926105;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.2617041968807684;  // std dev = 0,176, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), tempadvisedby(G, E) )
%   | | | then return 0.14781546752011168;  // std dev = 0,993, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.10169471136756916;  // std dev = 1,007, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then if ( publication(I, B), publication(I, J), projectmember(K, J) )
%   | | | | then return 0.34329103958935986;  // std dev = 0,035, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | | then if ( publication(N, H) )
%   | | | | | | then return 0.11688736220883136;  // std dev = 0,862, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.16185983016997832;  // std dev = 0,401, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | | | else return 0.2504305372691733;  // std dev = 0,353, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22898083201438002;  // std dev = 0,287, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.21072981696958257;  // std dev = 0,176, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.09165440455113179;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | then if ( tempadvisedby(H, B), tempadvisedby(I, G) )
%   | | | | then return 0.12004501892101857;  // std dev = 0,988, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return -0.07838989887960535;  // std dev = 1,008, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else if ( publication(J, B), publication(J, K), student(K) )
%   | | | | then if ( tempadvisedby(K, L) )
%   | | | | | then return 0.2988958478824324;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( yearsinprogram(K, M), yearsinprogram(A, M) )
%   | | | | | | then return 0.014038428789604245;  // std dev = 0,464, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | | | | else return 0.1905553843678883;  // std dev = 0,298, 19,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | | else return 0.23518546874906232;  // std dev = 0,244, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.07877675473109177;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17415231352263447;  // std dev = 0,176, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), tempadvisedby(G, E) )
%   | | | then return 0.09619240756157879;  // std dev = 0,985, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.060417595762011576;  // std dev = 1,009, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( publication(H, B), publication(H, I), student(I) )
%   | | | then if ( inphase(I, J), inphase(K, J), tempadvisedby(K, B) )
%   | | | | then return 0.25665949561616863;  // std dev = 0,014, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( yearsinprogram(I, L), yearsinprogram(M, L), tempadvisedby(M, N) )
%   | | | | | then if ( publication(P, A) )
%   | | | | | | then return 0.08020459091413121;  // std dev = 0,780, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | else return 0.0115290597300077;  // std dev = 0,437, 15,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | | | else return 0.15791228131647198;  // std dev = 0,310, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.18835329605220183;  // std dev = 0,244, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.14702766183298038;  // std dev = 0,177, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, A), publication(F, B) )
%   | | then if ( publication(E, G), professor(G) )
%   | | | then return -0.05668031238713769;  // std dev = 0,876, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0933330208150287;  // std dev = 0,808, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(H, A) )
%   | | | then if ( publication(H, I), hasposition(I, J), hasposition(B, J) )
%   | | | | then return 0.4872179590572747;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return -0.029741630830967147;  // std dev = 0,842, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, M) )
%   | | | | then return 0.21170028883425412;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else if ( publication(N, B), publication(N, P), projectmember(Q, P) )
%   | | | | | then return 0.2170628600400989;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.07306936209578094;  // std dev = 0,371, 40,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else return -0.0684269778442027;  // std dev = 1,29e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.12629361948229412;  // std dev = 0,177, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then return 0.12499533314022222;  // std dev = 0,556, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( projectmember(F, B) )
%   | | | then return -0.041853591673009116;  // std dev = 0,838, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(G, B) )
%   | | | | then if ( publication(H, A), publication(H, I), professor(I) )
%   | | | | | then if ( publication(G, I), publication(G, J), student(J) )
%   | | | | | | then return 0.31162827857080705;  // std dev = 0,639, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else return -0.24118431243643645;  // std dev = 0,716, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | | else if ( publication(K, A) )
%   | | | | | | then return 0.1373362003585445;  // std dev = 0,315, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | | | else return 0.08258190806821347;  // std dev = 0,349, 37,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=31 */
%   | | | | else return 0.25314037178501575;  // std dev = 0,147, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
Results
   AUC ROC   = 0.913469
   AUC PR    = 0.896168
   CLL	      = -0.310151
   Precision = 0.85 at threshold = 0.5
   Recall    = 0.971429
   F1        = 0.906667


Total learning time: 14.174 seconds
Total inference time: 0.712 seconds
AUC ROC: 0.913469


Dataset: 0, Run: 1, Fold: 1, Type: scratch, Time: 00:01:56
{'AUC ROC': 0.913469, 'AUC PR': 0.896168, 'F1': 0.906667, 'Recall': 0.971429, 'Learning time': 14.174, 'Inference time': 0.712, 'Precision': [0.85, 0.5], 'CLL': -0.310151}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true,false': 'professor(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [1.99e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.15e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [6.32e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.108, 4, 212], 'false': [7.88e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.11, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,true': [0.078, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;false', '9;false,false;publication(D, A), publication(D, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8278459047964812;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.25684174555702877;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.6952456160804393;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.2226161840028547;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5384851037174285;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.1879646892376534;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.40467314821908484;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.15500704242844202;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3090340570310782;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.12531866297455643;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.24352554624576053;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.09973207989896588;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.19784301583110508;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.07842026893389029;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1648838891063144;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.06111326896179184;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1402749868888344;  // std dev = 0,985, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else return 0.04731447145580279;  // std dev = 6,056, 153,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15163800799503757;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.37270357669196885;  // std dev = 4,021, 83,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=61 */
%   else if ( student(B) )
%   | then return -0.3622361823441755;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( publication(D, A), publication(D, B) )
%   | | then return -0.8483619920049625;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.3622361823441753;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 0.962963
   AUC PR    = 0.954365
   CLL	      = -0.470053
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total learning time: 4.251 seconds
Total inference time: 0.511 seconds
AUC ROC: 0.962963


Results in test set
   AUC ROC   = 0.962963
   AUC PR    = 0.954365
   CLL	      = -0.470053
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total inference time: 0.511 seconds
AUC ROC: 0.962963
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.056, 92, 61], 'true': [0.985, 1, 32]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,false': [4.021, 22, 61], 'false,false,true': [0.0, 1, 0], 'true,true': [0.0, 0, 32], 'false,true': [0.0, 64, 0], 'false,false,false': [0.0, 6, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;true', '9;false,false;publication(D, A), publication(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #2: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #3: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #4: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #5: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #6: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #7: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #8: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #9: [('false', 0.6013071895424836), ('true', 0.9696969696969697)]
Tree #10: [('true,false', 0.7349397590361446)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995116;  // std dev = 2,15e-07, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.8581489350995121;  // std dev = 4,21e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(J, B), publication(J, K), tempadvisedby(K, L) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( projectmember(M, B) )
%   | | | | then return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | | else if ( publication(N, B), publication(N, P), student(P) )
%   | | | | | then return 0.6460277229782995;  // std dev = 0,409, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | | | else return 0.5423594614153018;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   else return -0.14185106490048768;  // std dev = 6,32e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(J, B), publication(J, K), tempadvisedby(K, L) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( projectmember(M, B), publication(N, A) )
%   | | | | then return 0.7413433124639606;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(P, B), publication(P, Q), student(Q) )
%   | | | | | then return 0.5591561552246823;  // std dev = 0,399, 35,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | | | else return 0.4677890009810201;  // std dev = 0,460, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   else return -0.12544463852839158;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | then return 0.12219367649131824;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | then return 0.4960248681504177;  // std dev = 0,338, 37,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=32 */
%   | | | | else if ( projectmember(N, B), publication(P, A) )
%   | | | | | then return 0.5772803580979211;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.37553117910552186;  // std dev = 0,460, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415831014;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.2547692136578487;  // std dev = 0,379, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( projectmember(H, B) )
%   | | | then return 0.3899650692528726;  // std dev = 0,300, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else if ( tempadvisedby(I, B), inphase(I, J), inphase(A, J) )
%   | | | | then return 0.06802752264175406;  // std dev = 1,119, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, M) )
%   | | | | | then return 0.44751411858532614;  // std dev = 0,085, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | | else if ( publication(N, B) )
%   | | | | | | then return 0.3297679378965602;  // std dev = 0,409, 37,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=29 */
%   | | | | | | else return 0.379901143702308;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1015963294878362;  // std dev = 4,71e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.34172272651232616;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( tempadvisedby(H, E), publication(I, B) )
%   | | | | | then return 0.08315494592188569;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return -0.04987904849070381;  // std dev = 0,721, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(J, E), publication(K, J), publication(L, B) )
%   | | | | | then return -0.05439296765174265;  // std dev = 0,504, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.30418278491174966;  // std dev = 1,030, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.3571494389220476;  // std dev = 1,29e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2493417035982297;  // std dev = 0,393, 61,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=48 */
%   else return -0.09269127618926105;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return -0.023505029536669275;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(F, B), publication(F, G), inphase(G, H) )
%   | | | then return 0.2112861303792344;  // std dev = 0,368, 46,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=36 */
%   | | | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | | | then return 0.041629198339938785;  // std dev = 0,315, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | else if ( tempadvisedby(K, B), publication(L, B) )
%   | | | | | then return 0.3827190261700855;  // std dev = 0,093, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( publication(M, B) )
%   | | | | | | then if ( hasposition(B, N), hasposition(P, N), tempadvisedby(Q, P) )
%   | | | | | | | then return 0.4230985496878549;  // std dev = 0,160, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | | | | else return -0.291104345373307;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | else return 0.18440508334312591;  // std dev = 0,422, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253545;  // std dev = 4,47e-08, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(E, G), inphase(G, H) )
%   | | | then return 0.27187574805765613;  // std dev = 0,708, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03173347677902553;  // std dev = 0,349, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | | then return -0.017771337094539374;  // std dev = 0,879, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then return 0.18531945128898603;  // std dev = 0,339, 37,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=32 */
%   | | | | else if ( publication(M, A) )
%   | | | | | then return 0.1989571359622402;  // std dev = 0,786, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else if ( tempadvisedby(N, B) )
%   | | | | | | then return 0.13150830219701998;  // std dev = 0,416, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | | | else return 0.09671012779318018;  // std dev = 0,426, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   else return -0.0787767547310917;  // std dev = 2,89e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1770964977452775;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B), publication(E, A) )
%   | | then return 0.22479552454836138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | then if ( tempadvisedby(H, G) )
%   | | | | then if ( publication(I, H), publication(J, B) )
%   | | | | | then return -0.09368243615921427;  // std dev = 0,501, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(K, B) )
%   | | | | | | then return 0.0034872753001060444;  // std dev = 1,091, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.30204794873170626;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.10163981398640236;  // std dev = 0,447, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | then return 0.13487602191269585;  // std dev = 0,346, 43,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=36 */
%   | | | | else return 0.09009699221620382;  // std dev = 0,413, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.13194413852892403;  // std dev = 0,297, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | | then if ( tempadvisedby(G, F) )
%   | | | | then if ( publication(H, G), publication(I, B) )
%   | | | | | then return -0.0740141005894986;  // std dev = 0,502, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(J, B) )
%   | | | | | | then return 0.0027952850665687867;  // std dev = 1,091, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.2310691336504162;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.08275561387229698;  // std dev = 0,445, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then return 0.08766531754030672;  // std dev = 0,379, 28,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | | else return 0.10127736886006712;  // std dev = 0,363, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   else return -0.06842697784420268;  // std dev = 2,36e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return -0.06742154058689184;  // std dev = 0,882, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(F, A), publication(G, B), tempadvisedby(H, B) )
%   | | | then return 0.018319227674715832;  // std dev = 0,855, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( publication(I, B), publication(I, J), student(J) )
%   | | | | then return 0.09208498917974788;  // std dev = 0,346, 46,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=37 */
%   | | | | else if ( publication(K, A), projectmember(L, B) )
%   | | | | | then return 0.1687271330907818;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(M, A) )
%   | | | | | | then return 0.0805130134566937;  // std dev = 0,749, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | else if ( tempadvisedby(N, B) )
%   | | | | | | | then return 0.05766884607280802;  // std dev = 0,417, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | | | | else return 0.02942257892876037;  // std dev = 0,428, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   else return -0.06419184008202625;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.196441
   Precision = 0.9 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.947368


Total learning time: 10.145 seconds
Total inference time: 0.602 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), student(A).;true;false', '0;true,false;publication(D, A), publication(E, B).;true;true', '0;true,false,false,false;projectmember(M, B).;false;true', '0;true,false,true;tempadvisedby(F, B), publication(D, G), publication(E, G).;false;true', '0;true,false,true,false;publication(D, H), hasposition(H, I), hasposition(B, I).;true;false', '0;true,false,false,false,false;publication(N, B), publication(N, P), student(P).;false;false', '0;true;publication(C, A), publication(C, B).;false;true', '0;true,false,false;publication(J, B), publication(J, K), tempadvisedby(K, L).;false;true', '1;;advisedby(A, B) :- professor(B), student(A).;true;false', '1;true,false;publication(D, A), publication(E, B).;true;true', '1;true,false,false,false;projectmember(M, B), publication(N, A).;false;true', '1;true,false,true;tempadvisedby(F, B), publication(D, G), publication(E, G).;false;true', '1;true,false,true,false;publication(D, H), hasposition(H, I), hasposition(B, I).;true;false', '1;true,false,false,false,false;publication(P, B), publication(P, Q), student(Q).;false;false', '1;true;publication(C, A), publication(C, B).;false;true', '1;true,false,false;publication(J, B), publication(J, K), tempadvisedby(K, L).;false;true', '2;;advisedby(A, B) :- professor(B), student(A).;true;false', '2;true,false;publication(D, A), publication(E, B).;true;true', '2;true,false,false,false;publication(L, B), publication(L, M), student(M).;false;true', '2;true,false,true;tempadvisedby(F, B), publication(D, G), publication(E, G).;false;true', '2;true,false,true,false;publication(D, H), hasposition(H, I), hasposition(B, I).;false;false', '2;true,false,false,false,false;projectmember(N, B), publication(P, A).;false;false', '2;true;publication(C, A), publication(C, B).;false;true', '2;true,false,false;tempadvisedby(J, B), publication(K, J).;true;true', '3;;advisedby(A, B) :- professor(B), student(A).;true;false', '3;true,false;publication(D, A), publication(E, B).;true;true', '3;true,false,false,false;tempadvisedby(I, B), inphase(I, J), inphase(A, J).;true;true', '3;true,false,true;tempadvisedby(F, B), publication(D, G), publication(E, G).;false;false', '3;true,false,false,false,false;publication(K, B), publication(K, L), tempadvisedby(L, M).;false;true', '3;true,false,false,false,false,false;publication(N, B).;false;false', '3;true;publication(C, A), publication(C, B).;false;true', '3;true,false,false;projectmember(H, B).;false;true', '4;;advisedby(A, B) :- professor(B), student(A).;true;false', '4;true,false;publication(D, A), publication(D, E), professor(E).;true;true', '4;true,false,true;projectmember(F, B).;false;true', '4;true,false,true,false,true;tempadvisedby(H, E), publication(I, B).;false;false', '4;true,false,true,false;tempadvisedby(G, B).;true;false', '4;true;publication(C, B), publication(C, A).;false;true', '4;true,false,false;publication(M, A).;false;false', '5;;advisedby(A, B) :- professor(B), student(A).;true;false', '5;true,false;tempadvisedby(D, B), publication(E, D).;true;true', '5;true,false,false,false,false,false,true;hasposition(B, N), hasposition(P, N), tempadvisedby(Q, P).;false;false', '5;true,false,false,false;publication(I, A), tempadvisedby(J, B).;false;true', '5;true,false,false,false,false;tempadvisedby(K, B), publication(L, B).;false;true', '5;true,false,false,false,false,false;publication(M, B).;true;false', '5;true;publication(C, A), publication(C, B).;false;true', '5;true,false,false;publication(F, B), publication(F, G), inphase(G, H).;false;true', '6;;advisedby(A, B) :- professor(B), student(A).;true;false', '6;true,false;publication(D, A), publication(E, B).;true;true', '6;true,false,false,false;publication(K, B), publication(K, L), student(L).;false;true', '6;true,false,true;tempadvisedby(F, B), publication(E, G), inphase(G, H).;false;false', '6;true,false,false,false,false;publication(M, A).;false;true', '6;true,false,false,false,false,false;tempadvisedby(N, B).;false;false', '6;true;publication(C, A), publication(C, B).;false;true', '6;true,false,false;tempadvisedby(I, B), publication(J, I).;true;true', '7;;advisedby(A, B) :- professor(B), student(A).;true;false', '7;true,false;projectmember(D, B), publication(E, A).;false;true', '7;true,false,false,true;tempadvisedby(H, G).;true;true', '7;true,false,false,false;publication(L, B), publication(L, M), student(M).;false;false', '7;true,false,false,true,true,false;tempadvisedby(K, B).;false;false', '7;true,false,false,true,true;publication(I, H), publication(J, B).;false;true', '7;true;publication(C, A), publication(C, B).;false;true', '7;true,false,false;publication(F, A), publication(F, G), professor(G).;true;true', '8;;advisedby(A, B) :- professor(B), student(A).;true;false', '8;true,false;projectmember(D, B).;false;true', '8;true,false,false,true;tempadvisedby(G, F).;true;true', '8;true,false,false,false;tempadvisedby(K, B).;false;false', '8;true,false,false,true,true,false;tempadvisedby(J, B).;false;false', '8;true,false,false,true,true;publication(H, G), publication(I, B).;false;true', '8;true;publication(C, A), publication(C, B).;false;true', '8;true,false,false;publication(E, A), publication(E, F), professor(F).;true;true', '9;;advisedby(A, B) :- professor(B), student(A).;true;false', '9;true,false;tempadvisedby(D, B), publication(E, D).;true;true', '9;true,false,false,false,false,false,false;tempadvisedby(N, B).;false;false', '9;true,false,false,false;publication(I, B), publication(I, J), student(J).;false;true', '9;true,false,false,false,false;publication(K, A), projectmember(L, B).;false;true', '9;true,false,false,false,false,false;publication(M, A).;false;true', '9;true;publication(C, A), publication(C, B).;false;true', '9;true,false,false;publication(F, A), publication(G, B), tempadvisedby(H, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false,true', 0.6666666666666666), ('true,false,false,false,false,false', 0.6842105263157895), ('true,false,false,false,false,true', 0.7878787878787878), ('true,false,true,true', 0.8), ('true,false,false,false,true', 0.8888888888888888)]
Tree #2: [('true,false,true,false,true', 0.6666666666666666), ('true,false,false,false,false,false', 0.6956521739130435), ('true,false,true,true', 0.8), ('true,false,false,false,false,true', 0.8)]
Tree #3: [('true,false,false,true', 0.5), ('true,false,true,false,true', 0.6666666666666666), ('true,false,false,false,false,false', 0.6956521739130435), ('true,false,true,true', 0.8), ('true,false,false,false,true', 0.8648648648648649)]
Tree #4: [('true,false,false,false,true', 0.5), ('true,false,true,false', 0.6363636363636364), ('true,false,false,false,false,false,false', 0.7777777777777778), ('true,false,false,false,false,false,true', 0.7837837837837838), ('true,false,true,true', 0.8), ('true,false,false,true', 0.8888888888888888)]
Tree #5: [('true,false,true,false,false,false', 0.6666666666666666), ('true,false,true,false,true,false', 0.6666666666666666), ('true,false,true,false,false,true', 0.6666666666666666), ('true,false,true,false,true,true', 0.75), ('true,false,false,false', 0.7868852459016393)]
Tree #6: [('true,false,true', 0.5), ('true,false,false,false,true', 0.5), ('true,false,false,false,false,false,true,false', 0.75), ('true,false,false,false,false,false,false', 0.75), ('true,false,false,true', 0.782608695652174)]
Tree #7: [('true,false,false,true', 0.5), ('true,false,true,false', 0.5384615384615384), ('true,false,false,false,false,false,false', 0.6666666666666666), ('true,false,true,true', 0.6666666666666666), ('true,false,false,false,false,false,true', 0.75), ('true,false,false,false,false,true', 0.8333333333333334), ('true,false,false,false,true', 0.8648648648648649)]
Tree #8: [('true,false,false,true,false', 0.6666666666666666), ('true,false,false,true,true,false,true', 0.6666666666666666), ('true,false,false,true,true,true', 0.6666666666666666), ('true,false,false,false,false', 0.7142857142857143), ('true,false,false,true,true,false,false', 0.75), ('true,false,false,false,true', 0.8372093023255814)]
Tree #9: [('true,false,false,true,false', 0.6666666666666666), ('true,false,false,true,true,false,true', 0.6666666666666666), ('true,false,false,true,true,true', 0.6666666666666666), ('true,false,false,true,true,false,false', 0.75), ('true,false,false,false,true', 0.7857142857142857), ('true,false,false,false,false', 0.8), ('true,false,true', 0.8888888888888888)]
Tree #10: [('true,false,true', 0.5), ('true,false,false,false,false,false,false,false', 0.6666666666666666), ('true,false,false,true', 0.6666666666666666), ('true,false,false,false,false,false,false,true', 0.75), ('true,false,false,false,false,false,true', 0.75), ('true,false,false,false,true', 0.8043478260869565)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995116;  // std dev = 2,15e-07, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.8581489350995121;  // std dev = 4,21e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(J, B), publication(J, K), tempadvisedby(K, L) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( projectmember(M, B) )
%   | | | | then return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | | else if ( publication(N, B), publication(N, P), student(P) )
%   | | | | | then return 0.6460277229782995;  // std dev = 2,348, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | | | else return 0.5423594614153018;  // std dev = 2,026, 19,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   else return -0.14185106490048768;  // std dev = 6,32e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(J, B), publication(J, K), tempadvisedby(K, L) )
%   | | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( projectmember(M, B), publication(N, A) )
%   | | | | then return 0.7413433124639606;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(P, B), publication(P, Q), student(Q) )
%   | | | | | then return 0.5591561552246823;  // std dev = 2,363, 35,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | | | else return 0.4677890009810201;  // std dev = 2,204, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   else return -0.12544463852839158;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | then return 0.12219367649131824;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | then return 0.4960248681504177;  // std dev = 2,056, 37,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=32 */
%   | | | | else if ( projectmember(N, B), publication(P, A) )
%   | | | | | then return 0.5772803580979211;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.37553117910552186;  // std dev = 2,204, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415831014;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.2547692136578487;  // std dev = 1,255, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( projectmember(H, B) )
%   | | | then return 0.3899650692528726;  // std dev = 0,900, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else if ( tempadvisedby(I, B), inphase(I, J), inphase(A, J) )
%   | | | | then return 0.06802752264175406;  // std dev = 1,119, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, M) )
%   | | | | | then return 0.44751411858532614;  // std dev = 0,085, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | | else if ( publication(N, B) )
%   | | | | | | then return 0.3297679378965602;  // std dev = 2,488, 37,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=29 */
%   | | | | | | else return 0.379901143702308;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1015963294878362;  // std dev = 4,71e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.34172272651232616;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( tempadvisedby(H, E), publication(I, B) )
%   | | | | | then return 0.08315494592188569;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return -0.04987904849070381;  // std dev = 0,721, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.18465753405725222;  // std dev = 1,254, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( publication(J, A) )
%   | | | then return 0.3571494389220476;  // std dev = 1,29e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2493417035982297;  // std dev = 3,070, 61,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=48 */
%   else return -0.09269127618926105;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return -0.023505029536669275;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(F, B), publication(F, G), inphase(G, H) )
%   | | | then return 0.21082688247015707;  // std dev = 2,512, 46,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=36 */
%   | | | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | | | then return 0.041629198339938785;  // std dev = 0,891, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | else if ( tempadvisedby(K, B), publication(L, B) )
%   | | | | | then return 0.3827190261700855;  // std dev = 0,093, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( publication(M, B) )
%   | | | | | | then if ( hasposition(B, N), hasposition(P, N), tempadvisedby(Q, P) )
%   | | | | | | | then return 0.4230985496878549;  // std dev = 0,160, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | | | | else return -0.291104345373307;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | else return 0.18686723085199977;  // std dev = 1,469, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253545;  // std dev = 4,47e-08, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(E, G), inphase(G, H) )
%   | | | then return 0.2719547390054772;  // std dev = 0,708, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.030223676161730297;  // std dev = 1,290, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | | then return -0.017771337094539374;  // std dev = 0,879, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then return 0.18541124980772236;  // std dev = 2,063, 37,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=32 */
%   | | | | else if ( publication(M, A) )
%   | | | | | then return 0.2036475784191354;  // std dev = 0,794, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else if ( tempadvisedby(N, B) )
%   | | | | | | then return 0.13100325554084802;  // std dev = 1,176, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | | | else return 0.09651296377215896;  // std dev = 1,477, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   else return -0.0787767547310917;  // std dev = 2,89e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1770964977452775;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B), publication(E, A) )
%   | | then return 0.22397921155374578;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | then if ( tempadvisedby(H, G) )
%   | | | | then if ( publication(I, H), publication(J, B) )
%   | | | | | then return -0.14451014062578785;  // std dev = 0,503, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(K, B) )
%   | | | | | | then return 0.003200625703924783;  // std dev = 1,091, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.32956591272055935;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.08451205320444947;  // std dev = 0,448, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | then return 0.13494329677714847;  // std dev = 2,267, 43,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=36 */
%   | | | | else return 0.08988227859464837;  // std dev = 1,893, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.13157808257724035;  // std dev = 0,892, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | | then if ( tempadvisedby(G, F) )
%   | | | | then if ( publication(H, G), publication(I, B) )
%   | | | | | then return -0.11337369535401542;  // std dev = 0,501, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(J, B) )
%   | | | | | | then return 0.0025658323217897885;  // std dev = 1,091, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.25276496684392363;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.06871291693358225;  // std dev = 0,448, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then return 0.08766310867536221;  // std dev = 2,008, 28,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | | else return 0.10128924846330832;  // std dev = 1,988, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   else return -0.06842697784420268;  // std dev = 2,36e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return -0.06743716447674794;  // std dev = 0,882, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(F, A), publication(G, B), tempadvisedby(H, B) )
%   | | | then return 0.01786658939140753;  // std dev = 0,856, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( publication(I, B), publication(I, J), student(J) )
%   | | | | then return 0.0921483856939927;  // std dev = 2,350, 46,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=37 */
%   | | | | else if ( publication(K, A), projectmember(L, B) )
%   | | | | | then return 0.16823566835695647;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(M, A) )
%   | | | | | | then return 0.08293199846800345;  // std dev = 0,752, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | else if ( tempadvisedby(N, B) )
%   | | | | | | | then return 0.057402024753243255;  // std dev = 1,179, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | | | | else return 0.029330382812374278;  // std dev = 1,484, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   else return -0.06419184008202625;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.194331
   Precision = 0.9 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.947368


Total learning time: 15.166 seconds
Total inference time: 0.631 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 31.306
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.9825
   AUC PR    = 0.982702
   CLL	      = -0.222873
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total inference time: 0.564 seconds
AUC ROC: 0.9825
Dataset: 0, Run: 1, Fold: 2, Type: transfer, Time: 00:02:32
{'Parameter Learning results': {'AUC ROC': 0.93125, 'AUC PR': 0.927081, 'F1': 0.62069, 'Recall': 0.45, 'Learning time': 4.251, 'Inference time': 0.469, 'Precision': [1.0, 0.5], 'CLL': -0.450676}, 'AUC ROC': 0.9825, 'AUC PR': 0.982702, 'Mapping results': {'Generating mappings time': 0.12110304832458496, 'Generating paths time': 2.705031156539917, 'Knowledge compiling time': 0.049506187438964844, 'Total time': 2.983858823776245, 'Possible mappings': 864, 'Finding best mapping': 0.10820889472961426}, 'F1': 0.952381, 'Recall': 1.0, 'Learning time': 31.306, 'Inference time': 0.564, 'Precision': [0.909091, 0.5], 'CLL': -0.222873}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995116;  // std dev = 2,15e-07, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.8581489350995121;  // std dev = 4,21e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(J, B), publication(J, K), student(K) )
%   | | | then return 0.6874172277824382;  // std dev = 0,376, 41,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=34 */
%   | | | else if ( projectmember(L, B), publication(M, A) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( projectmember(N, B) )
%   | | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.5423594614153018;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   else return -0.14185106490048768;  // std dev = 6,32e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.61665325972476;  // std dev = 0,318, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | then return 0.752610306399589;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( publication(L, A) )
%   | | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(M, B), publication(M, N), student(N) )
%   | | | | | then return 0.5526103063995891;  // std dev = 0,400, 35,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | | | else return 0.4763101302455599;  // std dev = 0,458, 20,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   else return -0.12544463852839158;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( publication(D, H), hasposition(H, I), hasposition(B, I) )
%   | | | | then return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else return 0.5654560509167457;  // std dev = 0,028, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( projectmember(J, B) )
%   | | | then return 0.5223512375986195;  // std dev = 0,303, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then if ( publication(L, K) )
%   | | | | | then return 0.12459306923272391;  // std dev = 0,977, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | else return 0.4420589091059936;  // std dev = 0,397, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | | | else return 0.4457751527243308;  // std dev = 0,398, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.41751358415831014;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.4508706748242326;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( tempadvisedby(H, E), publication(I, B) )
%   | | | | | then return 0.0884286622369046;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return -0.020811287970178127;  // std dev = 0,728, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( hasposition(B, J), hasposition(E, J) )
%   | | | | | then return 0.11914890490746428;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.47636468694821277;  // std dev = 0,089, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, M) )
%   | | | then return 0.4922069845786125;  // std dev = 0,073, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.318667729586742;  // std dev = 0,408, 58,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=45 */
%   else return -0.1015963294878362;  // std dev = 4,71e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.3434349382771049;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B) )
%   | | | | then if ( tempadvisedby(H, E), publication(I, B) )
%   | | | | | then return 0.0760883148198381;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return -0.0164473576388523;  // std dev = 0,728, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(J, E), publication(K, J), publication(L, B) )
%   | | | | | then return -0.04723426396534686;  // std dev = 0,460, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.30310476335108166;  // std dev = 1,011, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(M, B), publication(M, N), tempadvisedby(N, P) )
%   | | | then return 0.37246821117691203;  // std dev = 0,070, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2396939255168301;  // std dev = 0,408, 58,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.2440069801875889;  // std dev = 0,301, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | | then if ( tempadvisedby(G, F) )
%   | | | | then if ( publication(H, G), publication(I, B) )
%   | | | | | then return -0.03814669720789985;  // std dev = 0,461, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else if ( tempadvisedby(J, B) )
%   | | | | | | then return 0.06284752773983417;  // std dev = 1,118, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | else return 0.3692366918406905;  // std dev = 0,817, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.06172532210217815;  // std dev = 0,412, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then return 0.20648825436302454;  // std dev = 0,363, 41,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=34 */
%   | | | | else return 0.14146288257842013;  // std dev = 0,451, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253545;  // std dev = 4,47e-08, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then return 0.09944695305884914;  // std dev = 0,372, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else if ( publication(F, B), publication(F, G), student(G) )
%   | | | then return 0.16712197681982793;  // std dev = 0,356, 43,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=36 */
%   | | | else if ( tempadvisedby(H, B), inphase(H, I), inphase(A, I) )
%   | | | | then return 0.03843957647493842;  // std dev = 0,769, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( tempadvisedby(J, B) )
%   | | | | | then return 0.18739402489432655;  // std dev = 0,935, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else if ( publication(K, B) )
%   | | | | | | then if ( hasposition(B, L), hasposition(M, L), tempadvisedby(N, M) )
%   | | | | | | | then return 0.38005924173300204;  // std dev = 0,134, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | | | | else return -0.3400735125757901;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | else return 0.1599264874242099;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.0787767547310917;  // std dev = 2,89e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1770964977452775;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.1665228614179809;  // std dev = 0,307, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tempadvisedby(E, B), inphase(E, F), inphase(A, F) )
%   | | | then return -0.15344715761965716;  // std dev = 1,128, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | | then if ( tempadvisedby(I, H) )
%   | | | | | then if ( publication(J, I), publication(K, B) )
%   | | | | | | then return -0.04995712263633043;  // std dev = 0,459, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | | then return 0.03225067789353175;  // std dev = 1,118, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | | | else return 0.26529177341579024;  // std dev = 0,817, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return -0.06846358207613434;  // std dev = 0,412, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.1434541502776794;  // std dev = 0,357, 52,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=43 */
%   else return -0.07324622576333704;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(E, F) )
%   | | then return 0.22068310112406972;  // std dev = 0,133, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | then if ( tempadvisedby(I, H), publication(J, I) )
%   | | | | then return -0.04502616208490255;  // std dev = 0,799, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else if ( tempadvisedby(K, H), publication(L, B), publication(L, H) )
%   | | | | | then return 0.13415223513027286;  // std dev = 0,976, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return -0.019417220555673666;  // std dev = 0,825, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else if ( publication(M, B), publication(M, N), tempadvisedby(N, P) )
%   | | | | then return 0.19647826995476936;  // std dev = 0,049, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else if ( publication(Q, B), publication(Q, R), student(R) )
%   | | | | | then return 0.09639188009702127;  // std dev = 0,379, 37,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=30 */
%   | | | | | else return 0.05402154972723985;  // std dev = 0,415, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else return -0.06842697784420268;  // std dev = 2,36e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.11578400504168224;  // std dev = 0,306, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tempadvisedby(E, B), inphase(E, F), inphase(A, F) )
%   | | | then return -0.13879038346369668;  // std dev = 1,122, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( publication(G, B), publication(G, H), tempadvisedby(I, H) )
%   | | | | then if ( publication(J, I), publication(G, K), publication(J, K) )
%   | | | | | then return 0.12209499385311125;  // std dev = 0,326, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | | | else if ( publication(L, I), publication(L, M), tempadvisedby(N, M) )
%   | | | | | | then return -0.3051920489007077;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | | else return 0.08490414110584982;  // std dev = 0,348, 35,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   | | | | else if ( tempadvisedby(P, B) )
%   | | | | | then return 0.17173646359219769;  // std dev = 0,768, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.13592812242305485;  // std dev = 0,891, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06419184008202625;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
Results
   AUC ROC   = 0.9825
   AUC PR    = 0.982702
   CLL	      = -0.21438
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total learning time: 12.736 seconds
Total inference time: 0.619 seconds
AUC ROC: 0.9825


Dataset: 0, Run: 1, Fold: 2, Type: scratch, Time: 00:02:46
{'AUC ROC': 0.9825, 'AUC PR': 0.982702, 'F1': 0.952381, 'Recall': 1.0, 'Learning time': 12.736, 'Inference time': 0.619, 'Precision': [0.909091, 0.5], 'CLL': -0.21438}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true,false': 'professor(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [1.99e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.15e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [6.32e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.108, 4, 212], 'false': [7.88e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.11, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,true': [0.078, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;false', '9;false,false;publication(D, A), publication(D, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7277141524908164;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.25321066349457416;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.6145965951068211;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.21951125682419367;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.48203107702359915;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.1854517692140533;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.363480061699977;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.1530765223806625;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2738069643969872;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.12390263976883854;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20993902519493937;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.09873409512618572;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.16449338179098796;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.07774119832225605;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13147590894712877;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.06066636833916909;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1068656588370264;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return 0.04703073475132914;  // std dev = 6,222, 162,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=64 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.14873705078148006;  // std dev = 1,671, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | else return 0.3684953791999559;  // std dev = 4,178, 88,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=64 */
%   else if ( student(B) )
%   | then return -0.3587773480727715;  // std dev = 4,21e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( publication(D, A), publication(D, B) )
%   | | then return -0.7814955073580547;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.3587773480727718;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
Results
   AUC ROC   = 0.9
   AUC PR    = 0.914961
   CLL	      = -0.456381
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.75


Total learning time: 4.958 seconds
Total inference time: 0.51 seconds
AUC ROC: 0.9


Results in test set
   AUC ROC   = 0.9
   AUC PR    = 0.914961
   CLL	      = -0.456381
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.75


Total inference time: 0.51 seconds
AUC ROC: 0.9
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.222, 98, 64], 'true': [2.284, 6, 40]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,false': [4.178, 24, 64], 'false,false,true': [0.0, 3, 0], 'true,true': [1.671, 3, 40], 'false,true': [4.21e-08, 65, 0], 'false,false,false': [0.0, 9, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['9;;advisedby(A, B) :- professor(B), student(A).;false;true', '9;false;student(B).;false;true', '9;false,false;publication(D, A), publication(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #2: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #3: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #4: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #5: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #6: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #7: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #8: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #9: [('false', 0.6049382716049383), ('true', 0.8695652173913043)]
Tree #10: [('true,false', 0.7272727272727273), ('true,true', 0.9302325581395349)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.7883814932390467;  // std dev = 0,255, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else if ( tempadvisedby(L, I), publication(H, L) )
%   | | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.24276431971489687;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.7308762078267849;  // std dev = 0,333, 55,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=48 */
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, B), tempadvisedby(H, B) )
%   | | then return 0.6988540155146454;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( publication(I, A) )
%   | | | then if ( tempadvisedby(J, B), publication(I, K), professor(K) )
%   | | | | then if ( tempadvisedby(L, K), publication(M, L) )
%   | | | | | then return 0.3891921416630447;  // std dev = 1,006, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return -0.030828114102492584;  // std dev = 0,335, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.5538076004581057;  // std dev = 0,389, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.601573106761044;  // std dev = 0,350, 49,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=42 */
%   else return -0.12544463852839155;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.519166588957013;  // std dev = 0,252, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.01572465931317743;  // std dev = 0,925, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else if ( projectmember(L, B) )
%   | | | | | then return 0.3440985721779746;  // std dev = 0,712, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.20796074849246413;  // std dev = 0,472, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.48875820144120263;  // std dev = 0,334, 55,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=48 */
%   else return -0.11231637819360628;  // std dev = 5,05e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then return 0.41409912959320466;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.25902087670789603;  // std dev = 0,403, 55,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=37 */
%   | else if ( publication(E, B), publication(E, F), student(F) )
%   | | then if ( tempadvisedby(F, G) )
%   | | | then return 0.49578738530108013;  // std dev = 0,056, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else if ( publication(H, A), publication(H, I), tempadvisedby(J, I) )
%   | | | | then if ( publication(K, J) )
%   | | | | | then return -0.19273120496445223;  // std dev = 0,778, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return 0.38791952141988223;  // std dev = 0,824, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(L, A), publication(L, B) )
%   | | | | | then return 0.3179992228315432;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else return 0.37511475525387916;  // std dev = 0,349, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.5290727419215229;  // std dev = 0,176, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783621;  // std dev = 4,71e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( projectmember(C, B) )
%   | then return 0.3302312428140175;  // std dev = 0,250, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.1994869833867807;  // std dev = 0,341, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else if ( publication(F, B), publication(F, A), tempadvisedby(G, B) )
%   | | | then return 0.3496674636861655;  // std dev = 3,65e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B), publication(I, J), student(J) )
%   | | | | | then if ( tempadvisedby(J, K) )
%   | | | | | | then return 0.18852958290406374;  // std dev = 0,592, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else if ( inphase(A, L), inphase(J, L) )
%   | | | | | | | then return 0.2798145904070663;  // std dev = 0,410, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | | | | | else return 0.24184322934009364;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | | | else return 0.09403184529625483;  // std dev = 0,388, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | | else return 0.2692448798104416;  // std dev = 0,329, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.09269127618926107;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2367991121241429;  // std dev = 0,240, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.3654738794645651;  // std dev = 0,099, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( tempadvisedby(I, E), publication(J, E), publication(J, B) )
%   | | | | | then return 0.12557073979529898;  // std dev = 0,799, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.1607954066906883;  // std dev = 0,313, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else if ( hasposition(B, K), hasposition(E, K) )
%   | | | | | then return -0.06321802247736737;  // std dev = 1,042, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.46492904446872085;  // std dev = 0,134, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(L, A) )
%   | | | then return 0.36709422338679215;  // std dev = 0,101, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20031801002281943;  // std dev = 0,364, 59,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=48 */
%   else return -0.0851847513883968;  // std dev = 1,49e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.2357712461556244;  // std dev = 0,024, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.11824380574937247;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.016900038363931835;  // std dev = 1,075, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, B), tempadvisedby(H, B) )
%   | | then return 0.20721146930876236;  // std dev = 0,180, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( publication(I, A), publication(I, J), professor(J) )
%   | | | then if ( tempadvisedby(K, B) )
%   | | | | then if ( tempadvisedby(L, J) )
%   | | | | | then return 0.057964638499011234;  // std dev = 0,402, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | | | else return -0.2210562185232191;  // std dev = 0,031, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.12626769278335573;  // std dev = 0,360, 23,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return 0.1814790542253445;  // std dev = 0,330, 55,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=48 */
%   else return -0.07877675473109172;  // std dev = 2,89e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(D, A) )
%   | | then return 0.22028629054445903;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(E, A), publication(D, F), tempadvisedby(G, F) )
%   | | | then return -0.0769874561619484;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.11113554992955754;  // std dev = 0,312, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else if ( publication(H, B), publication(H, A), tempadvisedby(I, B) )
%   | | then return 0.19557571213237918;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then if ( projectmember(K, B) )
%   | | | | then return 0.17791626466811564;  // std dev = 0,215, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | | else if ( publication(L, B), publication(L, M), student(M) )
%   | | | | | then return 0.11778647830589854;  // std dev = 0,427, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | | | else return 0.032637065403247345;  // std dev = 0,361, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.1320020153254418;  // std dev = 0,320, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.07324622576333704;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A), tempadvisedby(D, B) )
%   | then return 0.14934694403017743;  // std dev = 0,174, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( tempadvisedby(E, B) )
%   | | then if ( publication(F, E), publication(F, G), tempadvisedby(H, G) )
%   | | | then return 0.21773157454094588;  // std dev = 0,538, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else if ( publication(I, B), inphase(E, J), inphase(A, J) )
%   | | | | then return -0.057626067991318766;  // std dev = 1,161, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else if ( publication(K, B), publication(K, L), inphase(L, M) )
%   | | | | | then if ( inphase(A, M) )
%   | | | | | | then if ( publication(N, A), publication(N, P), professor(P) )
%   | | | | | | | then return 0.09310356892181164;  // std dev = 0,771, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.13407798365474244;  // std dev = 0,332, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | | | | else return -0.03529488005751365;  // std dev = 0,458, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | | | else return 0.08061659870636324;  // std dev = 0,314, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | else return 0.10667848866584026;  // std dev = 0,321, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.0684269778442027;  // std dev = 2,47e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.08275961090826432;  // std dev = 3,694, 131,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=104 */
%   else if ( student(B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( publication(C, A), publication(C, B) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06419184008202622;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
Results
   AUC ROC   = 0.9
   AUC PR    = 0.896672
   CLL	      = -0.398317
   Precision = 0.818182 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.857143


Total learning time: 16.419 seconds
Total inference time: 0.64 seconds
AUC ROC: 0.9


Best model AUC ROC so far: 0.9


******************************************
Best model found
******************************************
Total revision time: 22.527
Best validation AUC ROC: 0.9


Results
   AUC ROC   = 0.851852
   AUC PR    = 0.768378
   CLL	      = -0.584801
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.111111
   F1        = 0.181818


Total inference time: 0.409 seconds
AUC ROC: 0.851852
Dataset: 0, Run: 1, Fold: 3, Type: transfer, Time: 00:03:13
{'Parameter Learning results': {'AUC ROC': 0.851852, 'AUC PR': 0.768378, 'F1': 0.181818, 'Recall': 0.111111, 'Learning time': 4.958, 'Inference time': 0.405, 'Precision': [0.5, 0.5], 'CLL': -0.584801}, 'AUC ROC': 0.851852, 'AUC PR': 0.768378, 'Mapping results': {'Generating mappings time': 0.12139463424682617, 'Generating paths time': 2.7908027172088623, 'Knowledge compiling time': 0.022019624710083008, 'Total time': 3.0411667823791504, 'Possible mappings': 864, 'Finding best mapping': 0.10694336891174316}, 'F1': 0.181818, 'Recall': 0.111111, 'Learning time': 22.527, 'Inference time': 0.409, 'Precision': [0.5, 0.5], 'CLL': -0.584801}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.7883814932390467;  // std dev = 0,255, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | | else if ( tempadvisedby(L, I), publication(H, L) )
%   | | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.24276431971489687;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.7308762078267849;  // std dev = 0,333, 55,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=48 */
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then return 0.6988540155146454;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | | then if ( projectmember(G, B), tempadvisedby(H, F), publication(E, H) )
%   | | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 0.023671724643034055;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else if ( projectmember(I, B) )
%   | | | | then return 0.734447514655294;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else if ( publication(J, C), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.7630295945967411;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( publication(M, A) )
%   | | | | | | then return 0.7444302496181866;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.44904113631772824;  // std dev = 0,453, 29,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | else return 0.5842588277960094;  // std dev = 0,364, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.12544463852839155;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(E, A), publication(E, B) )
%   | | then return 0.4942265649304103;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( publication(D, B) )
%   | | | then return 0.41967451403207884;  // std dev = 0,657, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.03186889685697594;  // std dev = 0,711, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(F, A), publication(F, B), tempadvisedby(G, B) )
%   | | then return 0.5775598982637435;  // std dev = 5,96e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then if ( publication(H, B) )
%   | | | | then return 0.46238586536261417;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | | else if ( tempadvisedby(J, I), publication(H, J) )
%   | | | | | then return 0.5636391920237909;  // std dev = 0,029, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.13687702326591417;  // std dev = 0,465, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.48132254137637026;  // std dev = 0,348, 59,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=50 */
%   else return -0.11231637819360628;  // std dev = 5,05e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.42646451726230206;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.2494841289751922;  // std dev = 0,670, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06959512816679268;  // std dev = 1,060, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | then if ( publication(G, B), tempadvisedby(I, H) )
%   | | | then return 0.4224490908325894;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else if ( tempadvisedby(J, H), publication(K, B), publication(L, J) )
%   | | | | then return -0.09782393741668151;  // std dev = 0,369, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | | else if ( tempadvisedby(M, B) )
%   | | | | | then return 0.08596867992756026;  // std dev = 0,393, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | | | else return 0.4032438081459205;  // std dev = 0,395, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.3844756052011104;  // std dev = 0,329, 55,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=48 */
%   else return -0.10159632948783621;  // std dev = 4,71e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.3268085400585626;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.18975463129173306;  // std dev = 0,664, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05415197902563886;  // std dev = 1,059, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( tempadvisedby(G, B) )
%   | | then return 0.24345950649607492;  // std dev = 0,322, 73,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=58 */
%   | | else if ( publication(H, B), publication(H, I), tempadvisedby(I, J) )
%   | | | then return 0.4153194400665079;  // std dev = 0,130, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then if ( publication(M, A), publication(M, N), tempadvisedby(P, N) )
%   | | | | | then return 0.029349162301599938;  // std dev = 0,429, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | | | else return 0.268671471898738;  // std dev = 0,357, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | | else return 0.43934411270996754;  // std dev = 0,183, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926107;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then return 0.2554175508583287;  // std dev = 0,181, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( publication(E, A) )
%   | | | then return 0.07634379604803485;  // std dev = 0,355, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else if ( projectmember(F, B) )
%   | | | | then return 0.2947448766744656;  // std dev = 0,057, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else if ( publication(G, B), publication(G, H), tempadvisedby(H, I) )
%   | | | | | then return 0.2551266810272151;  // std dev = 0,700, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else if ( publication(J, B), publication(J, K), student(K) )
%   | | | | | | then if ( publication(L, C) )
%   | | | | | | | then return -0.07918595283010743;  // std dev = 0,628, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | | else return 0.18447527195488395;  // std dev = 0,436, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | | | | else return 0.08666893969335943;  // std dev = 1,030, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.21434328492001856;  // std dev = 0,323, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.0851847513883968;  // std dev = 1,49e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( projectmember(D, B) )
%   | | then return 0.19960967132686883;  // std dev = 0,171, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( publication(E, B), publication(E, A) )
%   | | | then return 0.20578690459470314;  // std dev = 0,181, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else if ( publication(F, A), publication(F, G), professor(G) )
%   | | | | then if ( tempadvisedby(H, G) )
%   | | | | | then return 0.04564861260982093;  // std dev = 0,446, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | | | else return -0.25712165506067464;  // std dev = 0,033, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | | | then return 0.1965746949726652;  // std dev = 0,703, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else if ( publication(L, C) )
%   | | | | | | then return -0.061335454859730056;  // std dev = 0,629, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.14234080967774027;  // std dev = 0,412, 27,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=21 */
%   | else return 0.16784468920256454;  // std dev = 0,323, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.07877675473109172;  // std dev = 2,89e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), inphase(C, D), inphase(A, D) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.18700292667058405;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(F, C) )
%   | | | then return 0.0856664980912349;  // std dev = 0,550, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.01768636104764052;  // std dev = 1,035, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(G, B), publication(G, H), tempadvisedby(H, B) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.21272537470258013;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14959271246840178;  // std dev = 0,834, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | then return 0.2423805540284403;  // std dev = 0,132, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else if ( publication(L, B), publication(L, A), tempadvisedby(M, B) )
%   | | | | then return 0.2034375671016754;  // std dev = 0,030, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | | else return 0.0947267912505002;  // std dev = 0,374, 76,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=55 */
%   else return -0.07324622576333704;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A), tempadvisedby(D, B) )
%   | then return 0.14262010854888096;  // std dev = 0,171, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( tempadvisedby(E, B), publication(F, A) )
%   | | then return 0.03598356962709482;  // std dev = 0,340, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( publication(G, B), publication(G, H), tempadvisedby(H, I) )
%   | | | then return 0.1791591280131433;  // std dev = 0,171, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else if ( publication(J, B), publication(J, K), inphase(K, L) )
%   | | | | then if ( publication(M, A), publication(M, N), tempadvisedby(P, N) )
%   | | | | | then if ( publication(Q, P) )
%   | | | | | | then return -0.30340206157120625;  // std dev = 0,674, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | | else return 0.18027473721559414;  // std dev = 0,824, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else if ( tempadvisedby(R, B), publication(S, R) )
%   | | | | | | then return -0.06110811929212622;  // std dev = 0,621, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.09599275758030867;  // std dev = 0,400, 38,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=31 */
%   | | | | else return 0.1535640111130621;  // std dev = 0,263, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else return -0.0684269778442027;  // std dev = 2,47e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C), publication(E, A) )
%   | then return 0.04015638072883201;  // std dev = 0,268, 14,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else if ( publication(F, A), tempadvisedby(G, B), publication(F, B) )
%   | | then return 0.1489966053293968;  // std dev = 0,006, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then if ( publication(I, H), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return 0.2987928239550419;  // std dev = 0,181, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( projectmember(L, B) )
%   | | | | | then return 0.1272031681798345;  // std dev = 0,170, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | | | else if ( publication(M, A), publication(N, B) )
%   | | | | | | then return 0.1048870062578771;  // std dev = 0,343, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | | | else if ( publication(P, B), publication(P, Q), student(Q) )
%   | | | | | | | then return 0.025704839128792577;  // std dev = 0,421, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | | | | | else return -0.019826370490986556;  // std dev = 0,417, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.09547281326444006;  // std dev = 0,310, 47,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=39 */
%   else return -0.06419184008202625;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
Results
   AUC ROC   = 0.975309
   AUC PR    = 0.974691
   CLL	      = -0.237439
   Precision = 0.888889 at threshold = 0.5
   Recall    = 0.888889
   F1        = 0.888889


Total learning time: 15.623 seconds
Total inference time: 0.535 seconds
AUC ROC: 0.975309


Dataset: 0, Run: 1, Fold: 3, Type: scratch, Time: 00:03:29
{'AUC ROC': 0.975309, 'AUC PR': 0.974691, 'F1': 0.888889, 'Recall': 0.888889, 'Learning time': 15.623, 'Inference time': 0.535, 'Precision': [0.888889, 0.5], 'CLL': -0.237439}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true,false': 'professor(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [1.99e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.15e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [6.32e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.108, 4, 212], 'false': [7.88e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.11, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,true': [0.078, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;false', '9;false,false;publication(D, A), publication(D, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7066337835843601;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.26759775399715013;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.597499920445468;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.23180633852930244;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.4699722532790539;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.19538407510956038;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.35495799747368917;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.16068419063439943;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2669532432783732;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.12946213093461476;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20374027228338165;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.10263670113373584;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15856224919245118;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.08038643456809147;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.12569958959722802;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.062401239097054716;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1012310020544361;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return 0.04812918392759328;  // std dev = 5,542, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.19962673121651883;  // std dev = 0,983, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.39220712560756243;  // std dev = 3,498, 68,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=52 */
%   else if ( student(B) )
%   | then return -0.37249875674537836;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( publication(D, A), publication(D, B) )
%   | | then return -0.7658905101627914;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.3724987567453783;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.450802
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.375
   F1        = 0.545455


Total learning time: 3.866 seconds
Total inference time: 0.488 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.450802
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.375
   F1        = 0.545455


Total inference time: 0.488 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [5.542, 75, 52], 'true': [2.06, 5, 28]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,false': [3.498, 16, 52], 'false,false,true': [0.0, 4, 0], 'true,true': [0.983, 1, 28], 'false,true': [0.0, 55, 0], 'false,false,false': [0.0, 4, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['9;;advisedby(A, B) :- professor(B), student(A).;false;true', '9;false;student(B).;false;true', '9;false,false;publication(D, A), publication(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #2: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #3: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #4: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #5: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #6: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #7: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #8: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #9: [('false', 0.5905511811023622), ('true', 0.8484848484848485)]
Tree #10: [('true,false', 0.7647058823529411), ('true,true', 0.9655172413793104)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8236661764788221;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B), inphase(I, J), inphase(A, J) )
%   | | | then if ( publication(K, I) )
%   | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else if ( tempadvisedby(L, B), yearsinprogram(L, M), yearsinprogram(A, M) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.7277141524908165;  // std dev = 0,337, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   else return -0.14185106490048768;  // std dev = 5,58e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.691897402794752;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then if ( publication(J, I) )
%   | | | | then return 0.280190503715801;  // std dev = 1,200, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else return 0.679412861221347;  // std dev = 0,253, 27,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else if ( publication(K, B), publication(K, L), tempadvisedby(M, L) )
%   | | | | then return 0.6825313777155169;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return 0.24503137771551708;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return -0.12544463852839155;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5361507757067951;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(D, F) )
%   | | | then return 0.4498959223402406;  // std dev = 0,640, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.00964535891041883;  // std dev = 0,792, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tempadvisedby(G, B), publication(H, G) )
%   | | | then return 0.228678647861289;  // std dev = 1,196, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.5342449456060387;  // std dev = 0,250, 27,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | | else if ( publication(J, A) )
%   | | | | | then return 0.62111121590924;  // std dev = 0,086, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( publication(K, B), publication(K, L), tempadvisedby(M, L) )
%   | | | | | | then return 0.5193005145780557;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | | | else return 0.12434551770499117;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.1123163781936063;  // std dev = 3,80e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4029188243794005;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(D, F) )
%   | | | then return 0.3515354849582002;  // std dev = 0,593, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.008327286051850685;  // std dev = 0,792, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tempadvisedby(G, B), publication(H, G) )
%   | | | then return 0.18146201407249737;  // std dev = 1,193, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.40304293113151596;  // std dev = 0,249, 27,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | | else if ( publication(J, A) )
%   | | | | | then return 0.46965159463493433;  // std dev = 0,094, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, M) )
%   | | | | | | then return 0.09656547808370343;  // std dev = 0,433, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | | | else return 0.391187053057641;  // std dev = 0,319, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.10159632948783624;  // std dev = 3,49e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3074634631599114;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.35915035376857385;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then return -0.1324227490608316;  // std dev = 0,098, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return 0.30178006875455937;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then return 0.27535565766597886;  // std dev = 0,312, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | | else if ( publication(J, A) )
%   | | | | then return 0.35731689691019003;  // std dev = 0,089, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( publication(K, B), publication(K, L), tempadvisedby(M, L) )
%   | | | | | then return 0.3230773293531997;  // std dev = 0,256, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | | else return 0.025820000595188946;  // std dev = 0,478, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.09269127618926105;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), projectmember(D, B) )
%   | then return -0.027520965004332393;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( publication(E, B), tempadvisedby(F, B), publication(G, F) )
%   | | then if ( publication(E, A) )
%   | | | then if ( publication(G, A) )
%   | | | | then return 0.02645860855192561;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.2764586085519256;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.03687785192259585;  // std dev = 0,460, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( projectmember(H, B) )
%   | | | then return 0.29852587220972077;  // std dev = 0,044, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( publication(I, B), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return 0.24658106970026147;  // std dev = 0,187, 57,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=52 */
%   | | | | else if ( publication(L, A), hasposition(B, M) )
%   | | | | | then return 0.3288263083112815;  // std dev = 0,534, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.0381492140500573;  // std dev = 0,437, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else return -0.0851847513883968;  // std dev = 1,97e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then if ( publication(C, E) )
%   | | then if ( publication(C, A), tempadvisedby(F, B) )
%   | | | then return 0.021197537045425707;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( publication(G, A) )
%   | | | | then return 0.22681478679753964;  // std dev = 0,015, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else if ( tempadvisedby(H, B) )
%   | | | | | then return 0.17352962254364718;  // std dev = 1,036, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return 0.11093109997127522;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12736810442434102;  // std dev = 0,589, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tempadvisedby(I, B), inphase(I, J), inphase(A, J) )
%   | | then if ( publication(K, B) )
%   | | | then return -0.032524628180905915;  // std dev = 0,632, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2479811103332615;  // std dev = 0,028, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18722451179155142;  // std dev = 0,237, 66,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=57 */
%   else return -0.07877675473109176;  // std dev = 1,29e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17118302939424251;  // std dev = 0,172, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, B), tempadvisedby(E, B), publication(F, A) )
%   | | then return -0.03101485251736941;  // std dev = 0,441, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( publication(G, A), hasposition(B, H) )
%   | | | then return 0.20959246455708797;  // std dev = 0,160, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else if ( tempadvisedby(I, B), yearsinprogram(I, J), yearsinprogram(A, J) )
%   | | | | then if ( inphase(A, K), inphase(I, K) )
%   | | | | | then return 0.07862599193615348;  // std dev = 1,015, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return -0.24586388487577274;  // std dev = 0,730, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(L, B) )
%   | | | | | then return 0.20083216526846775;  // std dev = 0,205, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | | | else if ( publication(M, B), publication(M, N), tempadvisedby(P, N) )
%   | | | | | | then return 0.16784825850380242;  // std dev = 0,256, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | | | else return -0.06533830676074992;  // std dev = 0,453, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.14471065367834007;  // std dev = 0,173, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, B), publication(D, E), student(E) )
%   | | then if ( inphase(E, F), publication(D, G), tempadvisedby(H, G) )
%   | | | then if ( publication(I, H), publication(I, G) )
%   | | | | then if ( publication(I, B), inphase(A, F) )
%   | | | | | then return 0.07704290880374624;  // std dev = 1,327, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | | | else return -0.13868954876856424;  // std dev = 0,521, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.17152930979893252;  // std dev = 0,111, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else if ( projectmember(J, B) )
%   | | | | then return -0.09833619902263908;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return -0.14799079784361763;  // std dev = 0,792, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( publication(K, A), publication(K, L), professor(L) )
%   | | | then return 0.02961896137134506;  // std dev = 0,266, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1799353519098115;  // std dev = 0,254, 19,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.0684269778442027;  // std dev = 1,29e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.09394973982178566;  // std dev = 2,605, 97,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=80 */
%   else if ( student(B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( publication(C, A), publication(C, B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.255 seconds
Total inference time: 0.576 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 20.185000000000002
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.89899
   AUC PR    = 0.886553
   CLL	      = -0.493864
   Precision = 0.866667 at threshold = 0.5
   Recall    = 0.393939
   F1        = 0.541667


Total inference time: 0.512 seconds
AUC ROC: 0.89899
Dataset: 0, Run: 1, Fold: 4, Type: transfer, Time: 00:03:54
{'Parameter Learning results': {'AUC ROC': 0.89899, 'AUC PR': 0.886553, 'F1': 0.541667, 'Recall': 0.393939, 'Learning time': 3.866, 'Inference time': 0.485, 'Precision': [0.866667, 0.5], 'CLL': -0.493864}, 'AUC ROC': 0.89899, 'AUC PR': 0.886553, 'Mapping results': {'Generating mappings time': 0.12117624282836914, 'Generating paths time': 2.615093469619751, 'Knowledge compiling time': 0.01898980140686035, 'Total time': 2.8608810901641846, 'Possible mappings': 864, 'Finding best mapping': 0.10561513900756836}, 'F1': 0.541667, 'Recall': 0.393939, 'Learning time': 20.185000000000002, 'Inference time': 0.512, 'Precision': [0.866667, 0.5], 'CLL': -0.493864}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8236661764788221;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B), yearsinprogram(I, J), yearsinprogram(A, J) )
%   | | | then if ( inphase(A, K), inphase(I, K) )
%   | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.8181489350995119;  // std dev = 0,196, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | | else return 0.6498156017661788;  // std dev = 0,406, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   else return -0.14185106490048768;  // std dev = 5,58e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.691897402794752;  // std dev = 0,182, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | | then return 0.2886429298619014;  // std dev = 1,183, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then return 0.6636523575259294;  // std dev = 0,251, 27,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | | else if ( publication(L, A) )
%   | | | | | then return 0.7595445964278266;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.5095445964278263;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else return -0.12544463852839155;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(E, D) )
%   | then if ( tempadvisedby(F, B) )
%   | | then if ( publication(G, E) )
%   | | | then return 0.3893087544256563;  // std dev = 0,365, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.476166108771305;  // std dev = 0,283, 30,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | else return 0.578148688439335;  // std dev = 0,200, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( projectmember(H, B) )
%   | | then return 0.5671258187315992;  // std dev = 0,029, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( publication(I, B) )
%   | | | then return 0.0018309427889490193;  // std dev = 0,850, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( publication(J, A), publication(J, K), professor(K) )
%   | | | | then return 0.09302566037276873;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( hasposition(B, L), hasposition(M, L), tempadvisedby(N, M) )
%   | | | | | then return 0.5847357034992222;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.2548980743554453;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.1123163781936063;  // std dev = 3,80e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.422091754201854;  // std dev = 0,180, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), tempadvisedby(E, B), publication(F, B) )
%   | | then return 0.044667607756662786;  // std dev = 0,720, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( publication(G, B), publication(G, H), tempadvisedby(I, H) )
%   | | | then if ( projectmember(J, B) )
%   | | | | then return 0.12725673422325626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( publication(K, I), publication(K, H) )
%   | | | | | then return 0.24703973782501853;  // std dev = 0,436, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | | | else return 0.4556848281084225;  // std dev = 0,169, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else if ( projectmember(L, B) )
%   | | | | then return 0.4263720724902423;  // std dev = 0,029, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | else if ( publication(M, A), hasposition(B, N) )
%   | | | | | then return 0.4251645429282218;  // std dev = 0,660, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.0828421589123495;  // std dev = 0,452, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else return -0.10159632948783624;  // std dev = 3,49e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32085795207437573;  // std dev = 0,180, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(D, F) )
%   | | | then return 0.2767992703097154;  // std dev = 0,550, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.07599654857604826;  // std dev = 0,731, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( publication(G, A) )
%   | | | then return 0.3885113373038302;  // std dev = 0,113, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( tempadvisedby(H, B), publication(I, H) )
%   | | | | then return 0.09827709092188648;  // std dev = 1,167, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else if ( projectmember(J, B), publication(K, B) )
%   | | | | | then return 0.09584014434880188;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | then return 0.32907634086204673;  // std dev = 0,184, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | | else return 0.2320174993711142;  // std dev = 0,385, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else return -0.09269127618926105;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2512700620780974;  // std dev = 0,180, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(F, E) )
%   | | then if ( publication(D, F) )
%   | | | then return 0.22096053671720156;  // std dev = 0,531, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.0630552701287835;  // std dev = 0,736, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( publication(G, A) )
%   | | | then return 0.30179695746492863;  // std dev = 0,101, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, H) )
%   | | | | | then return 0.07463942572843929;  // std dev = 1,166, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | | else return 0.23428980223756127;  // std dev = 0,246, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | | else if ( publication(J, B), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.2904208510995202;  // std dev = 0,259, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | | else return -0.03583738455683437;  // std dev = 0,480, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.0851847513883968;  // std dev = 1,97e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2028977643311405;  // std dev = 0,181, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( tempadvisedby(D, B), publication(E, A), publication(F, B) )
%   | | then return -0.0200186858242823;  // std dev = 0,544, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( publication(G, A), hasposition(B, H) )
%   | | | then return 0.2462817759214718;  // std dev = 0,188, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else if ( tempadvisedby(I, B), yearsinprogram(I, J), yearsinprogram(A, J) )
%   | | | | then if ( inphase(A, K), inphase(I, K) )
%   | | | | | then return 0.1098275011550954;  // std dev = 1,024, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return -0.2144949859997032;  // std dev = 0,734, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(L, B) )
%   | | | | | then return 0.22176771114669613;  // std dev = 0,194, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | | | else if ( publication(M, B), publication(M, N), tempadvisedby(P, N) )
%   | | | | | | then return 0.22600881246386623;  // std dev = 0,259, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | | | else return -0.06261283043322491;  // std dev = 0,459, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   else return -0.07877675473109176;  // std dev = 1,29e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then if ( publication(D, A) )
%   | | then return -0.036169683817290466;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(E, A), publication(E, B) )
%   | | | then return 0.21383031618270953;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( inphase(A, F), inphase(C, F) )
%   | | | | then return 0.09024113612308579;  // std dev = 0,901, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return -0.12548437348978772;  // std dev = 0,671, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( projectmember(G, B), publication(H, B) )
%   | | then return -0.03119201970409487;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(I, B), publication(J, A) )
%   | | | then return 0.14001668373879422;  // std dev = 0,149, 21,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else if ( tempadvisedby(K, B) )
%   | | | | then return 0.18043152853383287;  // std dev = 0,174, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | else return 0.14523698081406541;  // std dev = 0,303, 34,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, D), tempadvisedby(D, B) )
%   | then return -0.030026392528232027;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( publication(E, A), publication(E, B) )
%   | | then return 0.17646771436556055;  // std dev = 0,047, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( publication(F, B), publication(F, G), student(G) )
%   | | | then if ( inphase(G, H), publication(F, I), tempadvisedby(J, I) )
%   | | | | then if ( publication(K, A), publication(K, L), professor(L) )
%   | | | | | then return -0.10967758058799151;  // std dev = 0,310, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else if ( inphase(A, H) )
%   | | | | | | then return 0.09158763097554455;  // std dev = 0,351, 17,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | | | | | else return 0.20779052346998586;  // std dev = 0,056, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | | else if ( projectmember(M, B) )
%   | | | | | then return -0.02457481954166359;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return -0.18752677474477267;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.13821869079867477;  // std dev = 0,267, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else return -0.0684269778442027;  // std dev = 1,29e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.12785086122655842;  // std dev = 0,172, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( tempadvisedby(D, B), yearsinprogram(D, E), yearsinprogram(A, E) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return 0.04355330546258118;  // std dev = 0,992, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.19127521238212566;  // std dev = 0,661, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tempadvisedby(G, B), publication(H, A) )
%   | | | then return -0.006321838002571661;  // std dev = 0,193, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else if ( projectmember(I, B), publication(J, B) )
%   | | | | then return -0.01930539740794886;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( tempadvisedby(K, B) )
%   | | | | | then return 0.16955074305463186;  // std dev = 0,061, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | | | else if ( publication(L, A), hasposition(B, M) )
%   | | | | | | then return 0.2514661496974651;  // std dev = 0,351, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | | | | else return 0.044420236571052506;  // std dev = 0,359, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
Results
   AUC ROC   = 0.906336
   AUC PR    = 0.886339
   CLL	      = -0.3506
   Precision = 0.815789 at threshold = 0.5
   Recall    = 0.939394
   F1        = 0.873239


Total learning time: 15.168 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.906336


Dataset: 0, Run: 1, Fold: 4, Type: scratch, Time: 00:04:10
{'AUC ROC': 0.906336, 'AUC PR': 0.886339, 'F1': 0.873239, 'Recall': 0.939394, 'Learning time': 15.168, 'Inference time': 0.731, 'Precision': [0.815789, 0.5], 'CLL': -0.3506}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true,false': 'professor(A)'}, {'false': [6.32e-08, 378, 0], 'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 4, 0], 'true,false,false': [0.0, 0, 212]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.102, 4, 212], 'false': [1.99e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.104, 4, 212], 'false': [1.15e-07, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.106, 4, 212], 'false': [6.32e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.108, 4, 212], 'false': [7.88e-08, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.11, 4, 212], 'false': [0.0, 378, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,true': [0.078, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;true;publication(C, A), publication(C, B).;false;false', '9;false,false;publication(D, A), publication(D, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7186140513785811;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.2554999284769959;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.6072212879136036;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.22146894462006997;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.4768341171388334;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.18703655838593108;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3597977525676181;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.15429447151903755;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.27082757197129037;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.12479641584532149;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20722894833954292;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.09936433230247933;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.16188960829716958;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.0781702549320253;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1289323113460137;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.06094886453799426;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.10437796793880517;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   else return 0.047210162577850906;  // std dev = 6,013, 151,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=60 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.19886543970587658;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else return 0.389042344838198;  // std dev = 3,873, 80,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=60 */
%   else if ( student(B) )
%   | then return -0.36095765516180217;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( publication(D, A), publication(D, B) )
%   | | then return -0.774818770820439;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.3609576551618023;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
Results
   AUC ROC   = 0.882716
   AUC PR    = 0.806293
   CLL	      = -0.520819
   Precision = 0.8 at threshold = 0.5
   Recall    = 0.444444
   F1        = 0.571429


Total learning time: 5.23 seconds
Total inference time: 0.507 seconds
AUC ROC: 0.882716


Results in test set
   AUC ROC   = 0.882716
   AUC PR    = 0.806293
   CLL	      = -0.520819
   Precision = 0.8 at threshold = 0.5
   Recall    = 0.444444
   F1        = 0.571429


Total inference time: 0.507 seconds
AUC ROC: 0.882716
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'false': [6.013, 91, 60], 'true': [2.272, 6, 37]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'false': 'student(B)', 'true': 'publication(C, A), publication(C, B)', 'false,false': 'publication(D, A), publication(D, B)'}, {'true,false': [3.873, 20, 60], 'false,false,true': [0.0, 5, 0], 'true,true': [0.987, 1, 37], 'false,true': [0.0, 64, 0], 'false,false,false': [0.0, 7, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['9;;advisedby(A, B) :- professor(B), student(A).;false;true', '9;false;student(B).;false;true', '9;false,false;publication(D, A), publication(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #2: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #3: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #4: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #5: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #6: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #7: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #8: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #9: [('false', 0.6026490066225165), ('true', 0.8604651162790697)]
Tree #10: [('true,false', 0.75), ('true,true', 0.9736842105263158)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8318331456258272;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(G, B) )
%   | | | then return 0.661720363670941;  // std dev = 0,397, 56,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=45 */
%   | | | else if ( projectmember(H, B), publication(I, A) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.14185106490048768;  // std dev = 6,50e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then return 0.6566104134460262;  // std dev = 0,262, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( publication(E, B), publication(E, F), student(F) )
%   | | then return 0.5593714816125674;  // std dev = 0,400, 39,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=31 */
%   | | else if ( projectmember(G, B), publication(H, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(I, B) )
%   | | | | then if ( tempadvisedby(J, B) )
%   | | | | | then return 0.42403030482359555;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.47164935244264317;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | | else if ( publication(K, A) )
%   | | | | | then return 0.39247381805943127;  // std dev = 1,091, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else if ( tempadvisedby(L, B) )
%   | | | | | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839158;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5509493356996078;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D), publication(F, B) )
%   | | | then return 0.37400245470086374;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20656086564091433;  // std dev = 0,486, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tempadvisedby(G, B), publication(H, A), publication(I, B) )
%   | | | then if ( publication(H, J), professor(J) )
%   | | | | then return -0.13185804010209695;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.618141959897903;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.5133043188183487;  // std dev = 0,334, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | | else if ( publication(L, A), publication(L, M), tempadvisedby(N, M) )
%   | | | | | then return 0.44657673760342187;  // std dev = 0,840, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else return 0.23906619449038238;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else return -0.11231637819360628;  // std dev = 5,05e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4141201782184458;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return 0.13404385494919596;  // std dev = 0,981, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.21712150557049617;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, A) )
%   | | | then if ( projectmember(I, B) )
%   | | | | then return 0.46410726089018856;  // std dev = 0,049, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(H, J), professor(J) )
%   | | | | | then return -0.03172419527646139;  // std dev = 1,144, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.46593467102562797;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B), publication(K, L), student(L) )
%   | | | | then return 0.39093022823979007;  // std dev = 0,330, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   | | | | else return 0.2684352500295078;  // std dev = 0,462, 23,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.1015963294878362;  // std dev = 4,21e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.315882522128611;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, B), publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return -0.09406040675167093;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.3537931100845668;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(H, B), inphase(H, I), inphase(A, I) )
%   | | | then if ( publication(J, H), publication(J, B) )
%   | | | | then return 0.25919644438365846;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.07496242052777287;  // std dev = 0,478, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.30170129431026016;  // std dev = 0,331, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | | else if ( publication(L, A), publication(L, M), tempadvisedby(N, M) )
%   | | | | | then return 0.28807997345637537;  // std dev = 0,793, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | | else return 0.1304987864209216;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else return -0.09269127618926105;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.24868519984004392;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D), publication(F, B) )
%   | | | then return 0.19544403520651002;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.056594410415479884;  // std dev = 0,478, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tempadvisedby(G, B), publication(H, A), publication(I, B) )
%   | | | then if ( publication(H, J), professor(J) )
%   | | | | then return -0.07315463826041561;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.277639558975037;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B), publication(L, A) )
%   | | | | then return 0.33038047125798353;  // std dev = 0,025, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else if ( publication(M, B), tempadvisedby(N, B) )
%   | | | | | then return 0.250612544264492;  // std dev = 0,318, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | | | else return 0.16505911482668437;  // std dev = 0,416, 37,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=27 */
%   else return -0.0851847513883968;  // std dev = 1,49e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.1892680666927603;  // std dev = 0,231, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | else if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( publication(F, D) )
%   | | | then return 0.018125678682391098;  // std dev = 0,472, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.15316157019876514;  // std dev = 0,365, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else if ( publication(G, B), publication(G, H), student(H) )
%   | | | then return 0.17838743506550472;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.14610747714131206;  // std dev = 1,114, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then if ( hasposition(B, K), hasposition(L, K), tempadvisedby(M, L) )
%   | | | | | | then return 0.35850249064390627;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | | else return -0.3081641760227604;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.08177168449854609;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 2,79e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17033675778229615;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D), publication(F, B) )
%   | | | then return 0.14210323503317704;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.008312402863699029;  // std dev = 0,475, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( projectmember(G, B) )
%   | | | then return -0.027314916259241095;  // std dev = 0,579, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else if ( publication(H, A), tempadvisedby(I, B) )
%   | | | | then if ( publication(H, J), professor(J) )
%   | | | | | then return -0.08054518559672218;  // std dev = 1,120, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.19417478708140212;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(K, A), publication(K, L), tempadvisedby(M, L) )
%   | | | | | then return 0.26369202286062987;  // std dev = 0,138, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.13641684129331663;  // std dev = 0,363, 52,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=42 */
%   else return -0.07324622576333704;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.13370636970725322;  // std dev = 0,228, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | else if ( publication(D, B), publication(D, E), student(E) )
%   | | then if ( tempadvisedby(E, F) )
%   | | | then return 0.008797497976816452;  // std dev = 0,440, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.13349430853977517;  // std dev = 0,333, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | else if ( publication(G, B) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return 0.0202704247458985;  // std dev = 0,654, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( hasposition(B, I), hasposition(J, I), tempadvisedby(K, J) )
%   | | | | | then return 0.25411414447699576;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return -0.2677838846334049;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.09028947539935425;  // std dev = 1,105, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.027936389513037993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0684269778442027;  // std dev = 2,36e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.08799002397424215;  // std dev = 3,515, 118,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=97 */
%   else if ( student(B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( publication(C, A), publication(C, B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
Results
   AUC ROC   = 0.91358
   AUC PR    = 0.833818
   CLL	      = -0.30413
   Precision = 0.818182 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9


Total learning time: 12.938 seconds
Total inference time: 0.59 seconds
AUC ROC: 0.91358


Best model AUC ROC so far: 0.91358


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), student(A).;true;false', '0;true,false;tempadvisedby(D, B), publication(E, D).;true;true', '0;true,false,false,false;projectmember(H, B), publication(I, A).;false;true', '0;true,false,true;inphase(A, F), inphase(D, F).;false;false', '0;true,false,false,false,false;publication(J, A), publication(J, K), tempadvisedby(L, K).;false;false', '0;true;publication(C, A), publication(C, B).;false;true', '0;true,false,false;publication(G, B).;false;true', '1;;advisedby(A, B) :- professor(B), student(A).;true;false', '1;true,false;publication(E, B), publication(E, F), student(F).;false;true', '1;true,false,false,false;publication(I, B).;true;true', '1;true,false,false,false,false;publication(K, A).;false;false', '1;true;publication(C, A), publication(D, B).;false;true', '1;true,false,false;projectmember(G, B), publication(H, A).;false;true', '1;true,false,false,false,true;tempadvisedby(J, B).;false;false', '2;;advisedby(A, B) :- professor(B), student(A).;true;false', '2;true,false,false,false;publication(K, B).;false;false', '2;true,false;tempadvisedby(D, B), inphase(D, E), inphase(A, E).;true;true', '2;true,false,false,true;publication(H, J), professor(J).;false;false', '2;true,false,true;publication(F, D), publication(F, B).;false;false', '2;true;publication(C, A), publication(C, B).;false;true', '2;true,false,false;tempadvisedby(G, B), publication(H, A), publication(I, B).;true;true', '3;;advisedby(A, B) :- professor(B), student(A).;true;false', '3;true,false,false,true,false;publication(H, J), professor(J).;false;false', '3;true,false,false,false;publication(K, B), publication(K, L), student(L).;false;false', '3;true,false;tempadvisedby(D, B), publication(E, D).;false;true', '3;true,false,false,true;projectmember(I, B).;false;true', '3;true;publication(C, A), publication(C, B).;false;true', '3;true,false,false;tempadvisedby(G, B), publication(H, A).;true;true', '4;;advisedby(A, B) :- professor(B), student(A).;true;false', '4;true,false,false,false;publication(K, B).;false;false', '4;true,false;tempadvisedby(D, B), publication(E, B), publication(F, A).;true;true', '4;true,false,false,true;publication(J, H), publication(J, B).;false;false', '4;true,false,true;publication(F, G), professor(G).;false;false', '4;true;publication(C, A), publication(C, B).;false;true', '4;true,false,false;tempadvisedby(H, B), inphase(H, I), inphase(A, I).;true;true', '5;;advisedby(A, B) :- professor(B), student(A).;true;false', '5;true,false,false,false;publication(K, B), publication(L, A).;false;true', '5;true,false;tempadvisedby(D, B), inphase(D, E), inphase(A, E).;false;true', '5;true,false,false,true;publication(H, J), professor(J).;false;false', '5;true,false,false,false,false;publication(M, B), tempadvisedby(N, B).;false;false', '5;true;publication(C, A), publication(C, B).;false;true', '5;true,false,false;tempadvisedby(G, B), publication(H, A), publication(I, B).;true;true', '6;;advisedby(A, B) :- professor(B), student(A).;true;false', '6;true,false;tempadvisedby(D, B), publication(E, B).;true;true', '6;true,false,false,false;tempadvisedby(I, B).;false;true', '6;true,false,true;publication(F, D).;false;false', '6;true,false,false,false,false;publication(J, B).;true;true', '6;true;publication(C, A).;false;true', '6;true,false,false;publication(G, B), publication(G, H), student(H).;false;true', '6;true,false,false,false,false,true;hasposition(B, K), hasposition(L, K), tempadvisedby(M, L).;false;false', '7;;advisedby(A, B) :- professor(B), student(A).;true;false', '7;true,false;tempadvisedby(D, B), inphase(D, E), inphase(A, E).;false;true', '7;true,false,false,false;publication(H, A), tempadvisedby(I, B).;true;true', '7;true,false,false,false,false;publication(K, A), publication(K, L), tempadvisedby(M, L).;false;false', '7;true;publication(C, A), publication(C, B).;false;true', '7;true,false,false;projectmember(G, B).;false;true', '7;true,false,false,false,true;publication(H, J), professor(J).;false;false', '8;;advisedby(A, B) :- professor(B), student(A).;true;false', '8;true,false,false,true,false;hasposition(B, I), hasposition(J, I), tempadvisedby(K, J).;false;false', '8;true,false;publication(D, B), publication(D, E), student(E).;true;true', '8;true,false,false,true;tempadvisedby(H, B).;false;true', '8;true,false,true;tempadvisedby(E, F).;false;false', '8;true;publication(C, A).;false;true', '8;true,false,false;publication(G, B).;true;false', '9;;advisedby(A, B) :- professor(B), student(A).;true;true', '9;false;student(B).;false;true', '9;false,false;publication(C, A), publication(C, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false,false,false,false,false', 0.5), ('true,false,true,true', 0.5), ('true,false,false,false,false,false,true', 0.6), ('true,false,true,false', 0.6666666666666666), ('true,false,false,false,false,true', 0.6666666666666666), ('true,false,false,true', 0.8035714285714286), ('true,true', 0.9736842105263158)]
Tree #2: [('true,false,false,false,false,false,false', 0.5), ('true,false,false,false,false,false,true', 0.6), ('true,false,false,false,false,true', 0.6), ('true,false,false,false,true,true', 0.6666666666666666), ('true,false,false,false,true,false', 0.7142857142857143), ('true,false,true', 0.7948717948717948), ('true,true', 0.9230769230769231)]
Tree #3: [('true,false,false,false,false,false', 0.5), ('true,false,true,false', 0.5555555555555556), ('true,false,true,true', 0.6666666666666666), ('true,false,false,true,true', 0.75), ('true,false,false,false,false,true', 0.8), ('true,false,false,false,true', 0.8695652173913043), ('true,true', 0.9736842105263158)]
Tree #4: [('true,false,true,true', 0.5), ('true,false,false,false,false', 0.6521739130434783), ('true,false,true,false', 0.6666666666666666), ('true,false,false,true,false,true', 0.6666666666666666), ('true,false,false,false,true', 0.868421052631579), ('true,true', 0.9736842105263158)]
Tree #5: [('true,false,false,false,false,false', 0.5), ('true,false,false,true,false', 0.5555555555555556), ('true,false,false,true,true', 0.6666666666666666), ('true,false,true,true', 0.75), ('true,false,false,false,false,true', 0.8), ('true,false,false,false,true', 0.8695652173913043), ('true,true', 0.9736842105263158)]
Tree #6: [('true,false,true,false', 0.5555555555555556), ('true,false,true,true', 0.6666666666666666), ('true,false,false,false,false,false', 0.7297297297297297), ('true,false,false,true,true', 0.75), ('true,false,false,false,false,true', 0.8823529411764706), ('true,true', 0.9736842105263158)]
Tree #7: [('true,false,false,false,false,false', 0.5), ('true,false,true,true', 0.5714285714285714), ('true,false,false,false,true', 0.6), ('true,false,false,false,false,true,false', 0.6666666666666666), ('true,false,true,false', 0.8), ('true,false,false,true', 0.8666666666666667), ('true,true', 0.9)]
Tree #8: [('true,false,true,false', 0.5555555555555556), ('true,false,true,true', 0.6666666666666666), ('true,false,false,false,true,true', 0.6666666666666666), ('true,false,false,true', 0.6666666666666666), ('true,false,false,false,false,false', 0.8076923076923077), ('true,true', 0.9736842105263158)]
Tree #9: [('true,false,false,false,false', 0.5), ('true,false,false,false,true', 0.6), ('true,false,false,true,false,false', 0.6666666666666666), ('true,false,false,true,true', 0.6666666666666666), ('true,false,true,true', 0.6923076923076923), ('true,false,true,false', 0.8461538461538461), ('true,true', 0.9)]
Tree #10: [('true', 0.8220338983050848)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8318331456258272;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(G, B) )
%   | | | then return 0.661720363670941;  // std dev = 2,973, 56,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=45 */
%   | | | else if ( projectmember(H, B), publication(I, A) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.4036034805540577;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   else return -0.14185106490048768;  // std dev = 6,50e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then return 0.6566104134460262;  // std dev = 1,891, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( publication(E, B), publication(E, F), student(F) )
%   | | then return 0.5593714816125674;  // std dev = 2,496, 39,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=31 */
%   | | else if ( projectmember(G, B), publication(H, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(I, B) )
%   | | | | then if ( tempadvisedby(J, B) )
%   | | | | | then return 0.42403030482359555;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.47164935244264317;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | | else if ( publication(K, A) )
%   | | | | | then return 0.3896219429040368;  // std dev = 1,092, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return 0.3571670034527046;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else return -0.12544463852839158;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5509493356996078;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D), publication(F, B) )
%   | | | then return 0.37400245470086374;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20853595937731967;  // std dev = 1,465, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tempadvisedby(G, B), publication(H, A), publication(I, B) )
%   | | | then if ( publication(H, J), professor(J) )
%   | | | | then return -0.13185804010209695;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.618141959897903;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.5133043188183487;  // std dev = 2,263, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | | else return 0.30726940012410703;  // std dev = 1,831, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return -0.11231637819360628;  // std dev = 5,05e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4141201782184458;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.16958548375297525;  // std dev = 1,281, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( tempadvisedby(F, B), publication(G, A) )
%   | | | then if ( projectmember(H, B) )
%   | | | | then return 0.4870133223020625;  // std dev = 0,020, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(G, I), professor(I) )
%   | | | | | then return -0.020611820068728488;  // std dev = 1,152, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.46593467102562797;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(J, B), publication(J, K), student(K) )
%   | | | | then return 0.39086744753674607;  // std dev = 2,033, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   | | | | else return 0.2634364791150842;  // std dev = 2,228, 23,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.1015963294878362;  // std dev = 4,21e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.315882522128611;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, B), publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return -0.09657260662122291;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.3537931100845668;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(H, B), inphase(H, I), inphase(A, I) )
%   | | | then if ( publication(J, H), publication(J, B) )
%   | | | | then return 0.2505879317832557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.07557059193761921;  // std dev = 1,443, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.3027576374157433;  // std dev = 2,245, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | | else return 0.18169295060157434;  // std dev = 1,808, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return -0.09269127618926105;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.24868519984004392;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then return 0.09000159106729481;  // std dev = 1,670, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( tempadvisedby(F, B), publication(G, A), publication(H, B) )
%   | | | then if ( publication(G, I), professor(I) )
%   | | | | then return -0.07503857145078281;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.277639558975037;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(J, B), publication(K, A) )
%   | | | | then return 0.33032210636046416;  // std dev = 0,026, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else if ( publication(L, B), tempadvisedby(M, B) )
%   | | | | | then return 0.2525726088471374;  // std dev = 1,306, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | | | else return 0.16438320273835347;  // std dev = 2,550, 37,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=27 */
%   else return -0.0851847513883968;  // std dev = 1,49e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.19211954412094054;  // std dev = 1,800, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | else if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( publication(F, D) )
%   | | | then return 0.028498684796185995;  // std dev = 1,260, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.15022310226327493;  // std dev = 1,638, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else if ( publication(G, B), publication(G, H), student(H) )
%   | | | then return 0.17831928697120022;  // std dev = 1,317, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.14427742546203354;  // std dev = 1,122, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then if ( hasposition(B, K), hasposition(L, K), tempadvisedby(M, L) )
%   | | | | | | then return 0.35956530195812686;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | | else return -0.3071013647085398;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return 0.030573680146489646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 2,79e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.16988667008302535;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then return 0.04057949487105473;  // std dev = 1,668, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( projectmember(F, B) )
%   | | | then return -0.003251020986338745;  // std dev = 0,615, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else if ( publication(G, A), tempadvisedby(H, B) )
%   | | | | then if ( publication(G, I), professor(I) )
%   | | | | | then return -0.06243007364057047;  // std dev = 1,126, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.19372900278016747;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.2784227012633596;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.132141928910834;  // std dev = 2,628, 52,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=42 */
%   else return -0.07324622576333704;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.1351982842460865;  // std dev = 1,778, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | else if ( publication(D, B), publication(D, E), student(E) )
%   | | then if ( tempadvisedby(E, F) )
%   | | | then return 0.019020136641502046;  // std dev = 1,600, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.13090248638070137;  // std dev = 1,708, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | else if ( publication(G, B) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return 0.0165102263311937;  // std dev = 0,667, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else if ( hasposition(B, I), hasposition(J, I), tempadvisedby(K, J) )
%   | | | | | then return 0.2556011829389665;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return -0.26590486004105857;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.043759669823358646;  // std dev = 1,504, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else return -0.0684269778442027;  // std dev = 2,36e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.11427881855127406;  // std dev = 0,231, 60,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=54 */
%   | else if ( publication(D, B), publication(D, E), student(E) )
%   | | then if ( tempadvisedby(E, F) )
%   | | | then if ( publication(D, F) )
%   | | | | then return 0.032371416279071516;  // std dev = 0,457, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | | else return -0.04276891076679893;  // std dev = 0,680, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10583784108942555;  // std dev = 0,335, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | else if ( tempadvisedby(G, B) )
%   | | | then if ( publication(H, B) )
%   | | | | then return 0.01288569435311615;  // std dev = 0,668, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.07595248809513262;  // std dev = 1,114, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else if ( publication(I, B) )
%   | | | | then return 0.03401580612553835;  // std dev = 0,370, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | | else return -0.020994597325726172;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202623;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
Results
   AUC ROC   = 0.91358
   AUC PR    = 0.833818
   CLL	      = -0.305581
   Precision = 0.818182 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9


Total learning time: 14.354 seconds
Total inference time: 0.645 seconds
AUC ROC: 0.91358


Best model AUC ROC so far: 0.91358


******************************************
Best model found
******************************************
Total revision time: 34.263999999999996
Best validation AUC ROC: 0.91358


Results
   AUC ROC   = 0.904297
   AUC PR    = 0.880078
   CLL	      = -0.367504
   Precision = 0.789474 at threshold = 0.5
   Recall    = 0.9375
   F1        = 0.857143


Total inference time: 0.572 seconds
AUC ROC: 0.904297
Dataset: 0, Run: 1, Fold: 5, Type: transfer, Time: 00:04:49
{'Parameter Learning results': {'AUC ROC': 0.882813, 'AUC PR': 0.865995, 'F1': 0.4, 'Recall': 0.25, 'Learning time': 5.23, 'Inference time': 0.462, 'Precision': [1.0, 0.5], 'CLL': -0.53118}, 'AUC ROC': 0.904297, 'AUC PR': 0.880078, 'Mapping results': {'Generating mappings time': 0.12154960632324219, 'Generating paths time': 2.7289881706237793, 'Knowledge compiling time': 0.020826101303100586, 'Total time': 2.9784650802612305, 'Possible mappings': 864, 'Finding best mapping': 0.10709524154663086}, 'F1': 0.857143, 'Recall': 0.9375, 'Learning time': 34.263999999999996, 'Inference time': 0.572, 'Precision': [0.789474, 0.5], 'CLL': -0.367504}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8318331456258272;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(G, B) )
%   | | | then return 0.661720363670941;  // std dev = 0,397, 56,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=45 */
%   | | | else if ( projectmember(H, B), publication(I, A) )
%   | | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.14185106490048768;  // std dev = 6,50e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.6984381727630617;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B) )
%   | | then if ( publication(E, D), inphase(A, F), inphase(D, F) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | | then if ( projectmember(I, B) )
%   | | | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.09878540529638435;  // std dev = 1,162, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else if ( publication(J, B), publication(J, K), tempadvisedby(K, L) )
%   | | | | | then return 0.36706975872427544;  // std dev = 1,091, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else if ( publication(M, B), inphase(D, N), inphase(A, N) )
%   | | | | | | then return 0.35736363815692884;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.6240978299911653;  // std dev = 0,344, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.5721561461344451;  // std dev = 0,390, 36,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=29 */
%   else return -0.12544463852839158;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5407105060107323;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( publication(D, B) )
%   | | then if ( tempadvisedby(E, B), inphase(E, F), inphase(A, F) )
%   | | | then if ( publication(D, E) )
%   | | | | then return 0.4230790354252531;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.12422605997717866;  // std dev = 0,487, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else if ( tempadvisedby(G, B), publication(H, A) )
%   | | | | then return 0.26176692105802796;  // std dev = 0,454, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.5099491782228669;  // std dev = 0,334, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | else if ( publication(I, A), publication(I, J), tempadvisedby(K, J) )
%   | | | then return 0.4772595955923986;  // std dev = 0,804, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.27211207234208257;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.20468221297421252;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.11231637819360628;  // std dev = 5,05e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then return 0.393628130515387;  // std dev = 0,230, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( publication(E, B), publication(E, F), student(F) )
%   | | then return 0.3491593214923555;  // std dev = 0,383, 39,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=31 */
%   | | else if ( publication(G, A), publication(G, H), tempadvisedby(I, H) )
%   | | | then return 0.3670107118836321;  // std dev = 0,793, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else if ( publication(J, B) )
%   | | | | then if ( tempadvisedby(K, B) )
%   | | | | | then return 0.2202109161255437;  // std dev = 0,688, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( hasposition(B, L), hasposition(M, L), tempadvisedby(N, M) )
%   | | | | | | then return 0.5140398862196214;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | | else return -0.15262678044704528;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( tempadvisedby(P, B) )
%   | | | | | then return 0.20960238290626046;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return 0.16038552269534256;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.1015963294878362;  // std dev = 4,21e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3133890212155001;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D), publication(F, B) )
%   | | | then return 0.25591806739145156;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11708297839234544;  // std dev = 0,464, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( publication(G, B) )
%   | | | then if ( tempadvisedby(H, B), publication(I, A) )
%   | | | | then return 0.1105301838897302;  // std dev = 0,449, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.30429170025678154;  // std dev = 0,321, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | then return 0.2656009532433131;  // std dev = 0,788, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | else if ( tempadvisedby(M, B) )
%   | | | | | then return 0.05873723910241502;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | else return 0.1235461186483442;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.09269127618926105;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then return 0.2381347248868942;  // std dev = 0,225, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( publication(E, B), publication(E, F), student(F) )
%   | | then return 0.19887809645084714;  // std dev = 0,379, 39,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=31 */
%   | | else if ( publication(G, A), projectmember(H, B) )
%   | | | then return 0.3021609480103841;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(I, B) )
%   | | | | then if ( tempadvisedby(J, B) )
%   | | | | | then return 0.1082517544841274;  // std dev = 0,648, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.10016410609186403;  // std dev = 0,398, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | | else if ( tempadvisedby(K, B) )
%   | | | | | then return 0.10568486598354523;  // std dev = 0,494, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | | else if ( publication(L, A) )
%   | | | | | | then return 0.19597899386365972;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else return 0.09413381605057335;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0851847513883968;  // std dev = 1,49e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20230177350364612;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), inphase(D, E), inphase(A, E) )
%   | | then if ( publication(F, D) )
%   | | | then return 0.0036781805290615616;  // std dev = 0,949, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10048435498425358;  // std dev = 0,460, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( publication(G, B) )
%   | | | then if ( tempadvisedby(H, B), publication(I, A) )
%   | | | | then return 0.02502819703039033;  // std dev = 0,449, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.19063399488048305;  // std dev = 0,320, 46,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=40 */
%   | | | else if ( publication(J, A), publication(J, K), tempadvisedby(L, K) )
%   | | | | then return 0.16015274236349802;  // std dev = 0,778, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | else if ( tempadvisedby(M, B) )
%   | | | | | then return 0.01789652010401556;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | else return 0.06288035054525191;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.07877675473109172;  // std dev = 2,79e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then return 0.16011807932433073;  // std dev = 0,223, 52,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( projectmember(E, B), publication(F, A) )
%   | | then return 0.2179422117867478;  // std dev = 0,029, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(G, B), publication(G, H), student(H) )
%   | | | then return 0.11960767169528015;  // std dev = 0,378, 39,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=31 */
%   | | | else if ( publication(I, B) )
%   | | | | then if ( tempadvisedby(J, B) )
%   | | | | | then return 0.046507530774261285;  // std dev = 0,635, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else return 0.035495010966915555;  // std dev = 0,402, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | | else if ( publication(K, A), publication(K, L), professor(L) )
%   | | | | | then return -0.06270203328282671;  // std dev = 0,900, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | else if ( tempadvisedby(M, B) )
%   | | | | | | then return 0.10638353874858233;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | | else return 0.1507303145049929;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.14468464215274485;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return -0.02684328302949633;  // std dev = 0,949, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.03329017920464017;  // std dev = 0,796, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, A), publication(I, B) )
%   | | | then if ( publication(H, J), professor(J) )
%   | | | | then return -0.28735824946862243;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.337372701342008;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(K, A), publication(L, B) )
%   | | | | then return 0.22607077447241736;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else if ( tempadvisedby(M, B) )
%   | | | | | then return 0.10563607796136613;  // std dev = 0,381, 30,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | | | else return 0.08165823665424457;  // std dev = 0,391, 29,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else return -0.0684269778442027;  // std dev = 2,36e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1251387441297329;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( tempadvisedby(D, B) )
%   | | then if ( publication(E, D) )
%   | | | then if ( inphase(A, F), inphase(D, F) )
%   | | | | then return -0.020207193870619797;  // std dev = 0,949, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return -0.026273629297726402;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else if ( publication(G, A), publication(G, H), professor(H) )
%   | | | | then if ( projectmember(I, B) )
%   | | | | | then return 0.16787334422100672;  // std dev = 0,024, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return -0.16385062987213272;  // std dev = 1,132, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | else if ( publication(J, A) )
%   | | | | | then return 0.26651099034677717;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.08513989761227926;  // std dev = 0,390, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else return 0.0891197162351108;  // std dev = 0,355, 36,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=29 */
%   else return -0.06419184008202623;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
Results
   AUC ROC   = 0.882813
   AUC PR    = 0.857333
   CLL	      = -0.37305
   Precision = 0.761905 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.864865


Total learning time: 11.744 seconds
Total inference time: 0.612 seconds
AUC ROC: 0.882813


Dataset: 0, Run: 1, Fold: 5, Type: scratch, Time: 00:05:02
{'AUC ROC': 0.882813, 'AUC PR': 0.857333, 'F1': 0.864865, 'Recall': 1.0, 'Learning time': 11.744, 'Inference time': 0.612, 'Precision': [0.761905, 0.5], 'CLL': -0.37305}


Start learning from source dataset


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.33796956290219954;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.37233333226262916;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.36561162166667527;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.2916636562286573;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.320721892370015;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.315046841762795;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.24303193449685057;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.26574348163593675;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.26132924438542776;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.19635489872620826;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.21290255917354506;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.2097078845617246;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.1548409063029179;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.16628800257419135;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.164090949713896;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.11999914456696263;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.12767546628885396;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.1262050132209306;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.09191868164445316;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.0969982355262952;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.09602093589865422;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.0698825135727583;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.0732416953947796;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.07258748913619488;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.052878613354709315;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.05511642304449537;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.05467165100666466;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.039894061422871316;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.041402192966160566;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.04109392201114319;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */


Predicates from source: ['movie(movie,person).', 'female(person).', 'actor(person).'] 

Source structured tree: [['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 



Best mapping found: ['female(A) -> professor(A)', 'actor(A) -> student(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 

Transferred target predicate: publication 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;publication(A, B) :- professor(B).;false;true', '0;false;student(B).;false;false', '1;;publication(A, B) :- professor(B).;false;true', '1;false;student(B).;false;false', '2;;publication(A, B) :- professor(B).;false;true', '2;false;student(B).;false;false', '3;;publication(A, B) :- professor(B).;false;true', '3;false;student(B).;false;false', '4;;publication(A, B) :- professor(B).;false;true', '4;false;student(B).;false;false', '5;;publication(A, B) :- professor(B).;false;true', '5;false;student(B).;false;false', '6;;publication(A, B) :- professor(B).;false;true', '6;false;student(B).;false;false', '7;;publication(A, B) :- professor(B).;false;true', '7;false;student(B).;false;false', '8;;publication(A, B) :- professor(B).;false;true', '8;false;student(B).;false;false', '9;;publication(A, B) :- professor(B).;false;true', '9;false;student(B).;false;false']
WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.512576580887845;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.18831520588335607;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4381384026358501;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.16381143733556577;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3548447826465804;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.13983719652396778;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2755795244962724;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.11735061966184847;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.20892545943909205;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.09702992098151435;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1569114378308674;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.07923574416316996;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.11774960163658311;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.06405050541905659;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.08863000713652358;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.05135572603652828;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.0669965321451028;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.04091303477901954;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.050860089797868054;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else if ( student(B) )
%   | then return 0.03242993526414749;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.613636
   AUC PR    = 0.584736
   CLL	      = -0.673403
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.636364
   F1        = 0.622222


Total learning time: 23.593 seconds
Total inference time: 1.075 seconds
AUC ROC: 0.613636


Results in test set
   AUC ROC   = 0.613636
   AUC PR    = 0.584736
   CLL	      = -0.673403
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.636364
   F1        = 0.622222


Total inference time: 1.075 seconds
AUC ROC: 0.613636
Structure after Parameter Learning
[['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [10.233, 160, 303], 'false,true': [9.649, 282, 139]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;publication(A, B) :- professor(B).;false;false', '1;;publication(A, B) :- professor(B).;false;false', '2;;publication(A, B) :- professor(B).;false;false', '3;;publication(A, B) :- professor(B).;false;false', '4;;publication(A, B) :- professor(B).;false;false', '5;;publication(A, B) :- professor(B).;false;false', '6;;publication(A, B) :- professor(B).;false;false', '7;;publication(A, B) :- professor(B).;false;false', '8;;publication(A, B) :- professor(B).;false;false', '9;;publication(A, B) :- professor(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #2: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #3: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #4: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #5: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #6: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #7: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #8: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #9: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]
Tree #10: [('false,false', 0), ('true', 0.6544276457883369), ('false,true', 0.669833729216152)]


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.512576580887845;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.18831520588335607;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4381384026358501;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.16381143733556577;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3548447826465804;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.13983719652396778;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2755795244962724;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.11735061966184847;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.20892545943909205;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.09702992098151435;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1569114378308674;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.07923574416316996;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.11774960163658311;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.06405050541905659;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.08863000713652358;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.05135572603652828;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.0669965321451028;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.04091303477901954;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.050860089797868054;  // std dev = 10,233, 463,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=303 */
%   else return 0.03242993526414749;  // std dev = 9,649, 421,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=139 */
Results
   AUC ROC   = 0.613636
   AUC PR    = 0.584736
   CLL	      = -0.673403
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.636364
   F1        = 0.622222


Total learning time: 27.242 seconds
Total inference time: 0.891 seconds
AUC ROC: 0.613636


Best model AUC ROC so far: 0.613636


******************************************
Best model found
******************************************
Total revision time: 52.801
Best validation AUC ROC: 0.613636


Results
   AUC ROC   = 0.710616
   AUC PR    = 0.681523
   CLL	      = -0.613958
   Precision = 0.728625 at threshold = 0.5
   Recall    = 0.671233
   F1        = 0.698752


Total inference time: 0.69 seconds
AUC ROC: 0.710616
Dataset: 1, Run: 1, Fold: 1, Type: transfer, Time: 00:06:16
{'Parameter Learning results': {'AUC ROC': 0.710616, 'AUC PR': 0.681523, 'F1': 0.698752, 'Recall': 0.671233, 'Learning time': 23.593, 'Inference time': 0.701, 'Precision': [0.728625, 0.5], 'CLL': -0.613958}, 'AUC ROC': 0.710616, 'AUC PR': 0.681523, 'Mapping results': {'Generating mappings time': 0.0514984130859375, 'Generating paths time': 2.8536646366119385, 'Knowledge compiling time': 0.07723546028137207, 'Total time': 2.985532283782959, 'Possible mappings': 88, 'Finding best mapping': 0.003118276596069336}, 'F1': 0.698752, 'Recall': 0.671233, 'Learning time': 52.801, 'Inference time': 0.69, 'Precision': [0.728625, 0.5], 'CLL': -0.613958}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then if ( tempadvisedby(C, B) )
%   | then return 0.5363496271410311;  // std dev = 0,467, 289,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=196 */
%   | else if ( advisedby(D, B) )
%   | | then if ( advisedby(D, E), tempadvisedby(F, E) )
%   | | | then if ( hasposition(B, G), hasposition(E, G) )
%   | | | | then return 0.5039822684328447;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | else return 0.4370963035205641;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.3819584589090352;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0.5538011090125547;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   else if ( yearsinprogram(B, H), yearsinprogram(I, H), tempadvisedby(I, J) )
%   | then return 0.0813632208137974;  // std dev = 0,416, 112,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | else if ( inphase(B, K) )
%   | | then if ( advisedby(B, L), tempadvisedby(M, L) )
%   | | | then return 0.24971520015975454;  // std dev = 0,488, 166,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=65 */
%   | | | else return 0.12988806553429438;  // std dev = 0,445, 92,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | else return 0.3287371703936289;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then if ( advisedby(C, B) )
%   | then if ( tempadvisedby(D, B), inphase(C, E), inphase(D, E) )
%   | | then return 0.5177490971417325;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | else if ( tempadvisedby(F, B) )
%   | | | then if ( projectmember(G, B) )
%   | | | | then return 0.19141856492884787;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | | else return 0.455046529203561;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | | else if ( advisedby(C, H), tempadvisedby(I, H) )
%   | | | | then if ( hasposition(B, J), hasposition(H, J) )
%   | | | | | then return 0.4309973442579218;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | | else return 0.37517858762297;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | | else return 0.32884073203744923;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.4956705255135815;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   else if ( yearsinprogram(B, K), yearsinprogram(L, K), tempadvisedby(L, M) )
%   | then return 0.07116744726646212;  // std dev = 0,416, 112,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | else return 0.19690798551454428;  // std dev = 0,481, 309,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=114 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D) )
%   | then if ( tempadvisedby(E, D) )
%   | | then return 0.16046131227215266;  // std dev = 0,476, 229,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=81 */
%   | | else return 0.09369203408312855;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
%   | else return -0.015940065447688716;  // std dev = 0,361, 39,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   else if ( hasposition(B, F), hasposition(G, F), tempadvisedby(H, G) )
%   | then if ( advisedby(I, B) )
%   | | then if ( tempadvisedby(J, B) )
%   | | | then return 0.361157608488547;  // std dev = 0,469, 250,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=167 */
%   | | | else if ( advisedby(I, G) )
%   | | | | then return 0.34954182216286817;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | else return 0.2720407226789254;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0.39867977781406067;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   | else if ( professor(B) )
%   | | then return 0.30758572307646687;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | else return 0.25207554922484665;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.10355455209075574;  // std dev = 0,459, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( tempadvisedby(D, B) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.08240318103799776;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( advisedby(F, B) )
%   | | | then return 0.29402056295910234;  // std dev = 0,464, 233,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=160 */
%   | | | else return 0.3348795833245623;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( professor(B) )
%   | | then if ( advisedby(G, B) )
%   | | | then if ( advisedby(G, H), tempadvisedby(I, H) )
%   | | | | then if ( hasposition(B, J), hasposition(H, J) )
%   | | | | | then return 0.2719232305995038;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | | else return 0.24271717457728081;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | | else return 0.21744269676868916;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.2827179586279133;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | else return 0.20600457592259172;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.08609666002867111;  // std dev = 0,459, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( projectmember(D, B) )
%   | then return 0.06395276449621402;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( tempadvisedby(E, B) )
%   | | then if ( advisedby(F, B), inphase(E, G), inphase(F, G) )
%   | | | then return 0.26076047043544387;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | else return 0.22020567491910756;  // std dev = 0,463, 230,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=158 */
%   | | else if ( professor(B) )
%   | | | then if ( advisedby(H, B) )
%   | | | | then if ( advisedby(H, I), tempadvisedby(J, I) )
%   | | | | | then if ( hasposition(B, K), hasposition(I, K) )
%   | | | | | | then return 0.2064229520172892;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | | | else return 0.1865919925771221;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | | | else return 0.1694011705697492;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | | else return 0.2129279515773494;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0.16403322994176694;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.07080882404395913;  // std dev = 0,459, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( tempadvisedby(D, B) )
%   | then if ( advisedby(E, B) )
%   | | then if ( inphase(D, F), inphase(E, F) )
%   | | | then return 0.19568802296299076;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | else return 0.1497628832061488;  // std dev = 0,471, 208,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=136 */
%   | | else return 0.1972765824568538;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( professor(B) )
%   | | then if ( advisedby(G, B) )
%   | | | then if ( advisedby(G, H), tempadvisedby(I, H) )
%   | | | | then if ( hasposition(B, J), hasposition(H, J) )
%   | | | | | then return 0.15511536247438654;  // std dev = 0,478, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | | | | else return 0.1413282038472298;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | | else return 0.12975869989868563;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.15976466115440555;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | else return 0.128103634474318;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 0.005622291338391293;  // std dev = 0,415, 112,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   else if ( professor(B) )
%   | then if ( advisedby(F, B) )
%   | | then if ( tempadvisedby(G, B), inphase(F, H), inphase(G, H) )
%   | | | then return 0.14766955874794035;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | else if ( projectmember(I, B) )
%   | | | | then return 0.014040192329829108;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | | else if ( tempadvisedby(J, B) )
%   | | | | | then return 0.12146750047556103;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | | | | else if ( advisedby(F, K), tempadvisedby(L, K) )
%   | | | | | | then return 0.11191947909312583;  // std dev = 0,485, 86,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=53 */
%   | | | | | | else return 0.09838832514849864;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0.13347949827611866;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   | else if ( advisedby(B, M), tempadvisedby(N, M) )
%   | | then return 0.10913944571016065;  // std dev = 0,488, 166,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=65 */
%   | | else return 0.053438558655321676;  // std dev = 0,466, 143,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=49 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.044791336287558076;  // std dev = 0,458, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( tempadvisedby(D, B) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.010672227560259196;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( advisedby(F, B) )
%   | | | then if ( inphase(D, G), inphase(F, G) )
%   | | | | then return 0.11249324642690003;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | | else return 0.09168552896448436;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | | else return 0.11725109918009571;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( advisedby(H, B) )
%   | | then if ( advisedby(H, I), tempadvisedby(J, I) )
%   | | | then return 0.08407316550199126;  // std dev = 0,485, 86,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=53 */
%   | | | else return 0.07418037433956703;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else if ( professor(B) )
%   | | | then return 0.08809832413425099;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0.08613749227945662;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.036022124712324494;  // std dev = 0,458, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( tempadvisedby(D, B) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.008105889272536656;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( advisedby(F, B) )
%   | | | then if ( inphase(D, G), inphase(F, G) )
%   | | | | then return 0.08653869899530198;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | | else return 0.0695916166673549;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | | else return 0.09024087134873783;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( advisedby(H, B) )
%   | | then if ( advisedby(H, I), tempadvisedby(J, I) )
%   | | | then return 0.06327666480325615;  // std dev = 0,485, 86,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=53 */
%   | | | else return 0.05576312093600912;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else if ( professor(B) )
%   | | | then return 0.06730333658965691;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0.06556111691981846;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then return 0.02884199344324603;  // std dev = 0,458, 370,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=115 */
%   else if ( tempadvisedby(D, B) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.006153138496347704;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( advisedby(F, B) )
%   | | | then if ( inphase(D, G), inphase(F, G) )
%   | | | | then return 0.06715804552001511;  // std dev = 0,440, 42,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | | | else return 0.053100786176599524;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | | else return 0.0700951986518427;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( advisedby(H, B) )
%   | | then if ( advisedby(H, I), tempadvisedby(J, I) )
%   | | | then return 0.04774155518536092;  // std dev = 0,485, 86,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=53 */
%   | | | else return 0.041858103224516385;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else if ( professor(B) )
%   | | | then return 0.05172665439207397;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0.04966892784084273;  // std dev = 0,499, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
Results
   AUC ROC   = 0.722532
   AUC PR    = 0.635859
   CLL	      = -0.606276
   Precision = 0.745968 at threshold = 0.5
   Recall    = 0.633562
   F1        = 0.685185


Total learning time: 697.173 seconds
Total inference time: 0.931 seconds
AUC ROC: 0.722532


Dataset: 1, Run: 1, Fold: 1, Type: scratch, Time: 00:17:54
{'AUC ROC': 0.722532, 'AUC PR': 0.635859, 'F1': 0.685185, 'Recall': 0.633562, 'Learning time': 697.173, 'Inference time': 0.931, 'Precision': [0.745968, 0.5], 'CLL': -0.606276}


Best mapping found: ['female(A) -> professor(A)', 'actor(A) -> student(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 

Transferred target predicate: publication 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;publication(A, B) :- professor(B).;false;true', '0;false;student(B).;false;false', '1;;publication(A, B) :- professor(B).;false;true', '1;false;student(B).;false;false', '2;;publication(A, B) :- professor(B).;false;true', '2;false;student(B).;false;false', '3;;publication(A, B) :- professor(B).;false;true', '3;false;student(B).;false;false', '4;;publication(A, B) :- professor(B).;false;true', '4;false;student(B).;false;false', '5;;publication(A, B) :- professor(B).;false;true', '5;false;student(B).;false;false', '6;;publication(A, B) :- professor(B).;false;true', '6;false;student(B).;false;false', '7;;publication(A, B) :- professor(B).;false;true', '7;false;student(B).;false;false', '8;;publication(A, B) :- professor(B).;false;true', '8;false;student(B).;false;false', '9;;publication(A, B) :- professor(B).;false;true', '9;false;student(B).;false;false']
WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.544335121285694;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.16912454485560527;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4644651243629982;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.14726514181774672;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3742750692222725;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.12609288775205557;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.28893330652446414;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.10633152781542707;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21814042043863865;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.0884806880002484;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1636641764112394;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.07279952775172513;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1230713459355947;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.059339570254052044;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09306470769847058;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.04800124343992572;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.07081443653110375;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.038592455476833876;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.054196128300532845;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else if ( student(B) )
%   | then return 0.030876977228424692;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.712121
   AUC PR    = 0.663608
   CLL	      = -0.601935
   Precision = 0.689189 at threshold = 0.5
   Recall    = 0.772727
   F1        = 0.728571


Total learning time: 22.277 seconds
Total inference time: 0.51 seconds
AUC ROC: 0.712121


Results in test set
   AUC ROC   = 0.712121
   AUC PR    = 0.663608
   CLL	      = -0.601935
   Precision = 0.689189 at threshold = 0.5
   Recall    = 0.772727
   F1        = 0.728571


Total inference time: 0.51 seconds
AUC ROC: 0.712121
Structure after Parameter Learning
[['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.976, 209, 457], 'false,true': [11.856, 452, 204]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;publication(A, B) :- professor(B).;false;false', '1;;publication(A, B) :- professor(B).;false;false', '2;;publication(A, B) :- professor(B).;false;false', '3;;publication(A, B) :- professor(B).;false;false', '4;;publication(A, B) :- professor(B).;false;false', '5;;publication(A, B) :- professor(B).;false;false', '6;;publication(A, B) :- professor(B).;false;false', '7;;publication(A, B) :- professor(B).;false;false', '8;;publication(A, B) :- professor(B).;false;false', '9;;publication(A, B) :- professor(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #2: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #3: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #4: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #5: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #6: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #7: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #8: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #9: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]
Tree #10: [('false,false', 0), ('true', 0.6861861861861862), ('false,true', 0.6890243902439024)]


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.544335121285694;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.16912454485560527;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4644651243629982;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.14726514181774672;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3742750692222725;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.12609288775205557;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.28893330652446414;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.10633152781542707;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21814042043863865;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.0884806880002484;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1636641764112394;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.07279952775172513;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.1230713459355947;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.059339570254052044;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09306470769847058;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.04800124343992572;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.07081443653110375;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.038592455476833876;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.054196128300532845;  // std dev = 11,976, 666,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=457 */
%   else return 0.030876977228424692;  // std dev = 11,856, 656,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=204 */
Results
   AUC ROC   = 0.712121
   AUC PR    = 0.663608
   CLL	      = -0.601935
   Precision = 0.689189 at threshold = 0.5
   Recall    = 0.772727
   F1        = 0.728571


Total learning time: 23.732 seconds
Total inference time: 0.525 seconds
AUC ROC: 0.712121


Best model AUC ROC so far: 0.712121


******************************************
Best model found
******************************************
Total revision time: 47.044
Best validation AUC ROC: 0.712121


Results
   AUC ROC   = 0.630137
   AUC PR    = 0.606939
   CLL	      = -0.670351
   Precision = 0.646154 at threshold = 0.5
   Recall    = 0.575342
   F1        = 0.608696


Total inference time: 0.506 seconds
AUC ROC: 0.630137
Dataset: 1, Run: 1, Fold: 2, Type: transfer, Time: 00:18:45
{'Parameter Learning results': {'AUC ROC': 0.630137, 'AUC PR': 0.606939, 'F1': 0.608696, 'Recall': 0.575342, 'Learning time': 22.277, 'Inference time': 0.512, 'Precision': [0.646154, 0.5], 'CLL': -0.670351}, 'AUC ROC': 0.630137, 'AUC PR': 0.606939, 'Mapping results': {'Generating mappings time': 0.058531999588012695, 'Generating paths time': 2.667647361755371, 'Knowledge compiling time': 0.019198179244995117, 'Total time': 2.7483255863189697, 'Possible mappings': 88, 'Finding best mapping': 0.0029430389404296875}, 'F1': 0.608696, 'Recall': 0.575342, 'Learning time': 47.044, 'Inference time': 0.506, 'Precision': [0.646154, 0.5], 'CLL': -0.670351}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( projectmember(F, B) )
%   | then return 0.35814893509951234;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.5773270172912887;  // std dev = 0,449, 584,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=420 */
%   else if ( yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I) )
%   | then return 0.03230623847029805;  // std dev = 0,379, 178,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=31 */
%   | else if ( advisedby(J, B) )
%   | | then if ( tempadvisedby(K, B) )
%   | | | then return 0.17393840878372288;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.4634120929942483;  // std dev = 0,489, 38,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | else if ( professor(B) )
%   | | | then return -0.050941973991396876;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else if ( inphase(B, L) )
%   | | | | then if ( advisedby(B, M), tempadvisedby(N, M) )
%   | | | | | then return 0.2629108398614133;  // std dev = 0,491, 294,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=119 */
%   | | | | | else return 0.09172557743527868;  // std dev = 0,423, 137,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=32 */
%   | | | | else return 0.3262340414824902;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then return 0.48742809336356036;  // std dev = 0,451, 598,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=427 */
%   else if ( tempadvisedby(B, F) )
%   | then return -0.03219300307774609;  // std dev = 0,317, 44,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I) )
%   | | then return 0.04820048403215819;  // std dev = 0,395, 134,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=26 */
%   | | else if ( advisedby(J, B) )
%   | | | then if ( tempadvisedby(K, B) )
%   | | | | then return 0.15141887538285842;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | | else if ( advisedby(J, L), projectmember(M, L) )
%   | | | | | then return -0.12473840268169316;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | | | else return 0.6380821101388198;  // std dev = 0,361, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | else if ( professor(B) )
%   | | | | then return -0.04485324549538032;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | | else if ( inphase(B, N) )
%   | | | | | then return 0.18088166058180669;  // std dev = 0,475, 431,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=151 */
%   | | | | | else return 0.28171422482890246;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then return 0.40148249996689656;  // std dev = 0,446, 464,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=336 */
%   | else return 0.35505964815684327;  // std dev = 0,467, 134,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=91 */
%   else if ( yearsinprogram(B, I), yearsinprogram(J, I), tempadvisedby(J, K) )
%   | then return 0.024710466820798593;  // std dev = 0,379, 178,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=31 */
%   | else if ( advisedby(L, B), advisedby(L, M), projectmember(N, M) )
%   | | then return -0.10493122008485056;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( inphase(B, P) )
%   | | | then if ( advisedby(B, Q), tempadvisedby(R, Q) )
%   | | | | then return 0.19990453037680483;  // std dev = 0,491, 294,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=119 */
%   | | | | else return 0.05520116619915945;  // std dev = 0,423, 137,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=32 */
%   | | | else if ( advisedby(S, B) )
%   | | | | then return 0.3516832246070896;  // std dev = 0,450, 45,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | | else if ( professor(B) )
%   | | | | | then return -0.03967602222259858;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | | | else return 0.23519292070564615;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B) )
%   | then return 0.2922188130379798;  // std dev = 0,454, 522,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=369 */
%   | else return 0.3570756748161468;  // std dev = 0,425, 76,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=58 */
%   else if ( tempadvisedby(B, G) )
%   | then return -0.03126342251150537;  // std dev = 0,317, 44,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( yearsinprogram(B, H), yearsinprogram(I, H), tempadvisedby(I, J) )
%   | | then return 0.038881961722552455;  // std dev = 0,395, 134,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=26 */
%   | | else if ( advisedby(K, B) )
%   | | | then return 0.20167051273143802;  // std dev = 0,442, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else if ( inphase(B, L) )
%   | | | | then if ( advisedby(B, M), tempadvisedby(N, M) )
%   | | | | | then return 0.16542220094049018;  // std dev = 0,491, 294,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=119 */
%   | | | | | else return 0.04696691160612319;  // std dev = 0,423, 137,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=32 */
%   | | | | else if ( professor(B) )
%   | | | | | then return -0.03523714120212422;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | | | else return 0.19057755295478856;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.1162346329174378;  // std dev = 0,475, 378,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=137 */
%   | else return 0.01827147229229731;  // std dev = 0,394, 231,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=45 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( advisedby(I, B), advisedby(I, J), tempadvisedby(K, J) )
%   | | then return 0.23616459448882948;  // std dev = 0,446, 464,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=336 */
%   | | else if ( advisedby(L, B) )
%   | | | then return 0.09094295415307856;  // std dev = 0,495, 58,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.26893502922462476;  // std dev = 0,425, 76,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=58 */
%   | else if ( tempadvisedby(M, B) )
%   | | then return 0.031094144822711462;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else if ( advisedby(N, B) )
%   | | | then return 0.22368120243505835;  // std dev = 0,410, 38,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else if ( student(B) )
%   | | | | then return 0.15080101353659994;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
%   | | | | else return -0.03140372896424817;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), projectmember(E, D) )
%   | then return -0.1063880795500219;  // std dev = 0,296, 31,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | else if ( advisedby(B, F), tempadvisedby(G, F) )
%   | | then return 0.11223107865804292;  // std dev = 0,484, 347,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=134 */
%   | | else return 0.015608461054814544;  // std dev = 0,394, 231,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=45 */
%   else if ( hasposition(B, H), hasposition(I, H), projectmember(J, I) )
%   | then if ( projectmember(K, B) )
%   | | then return 0.006138957506022229;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then if ( advisedby(M, B) )
%   | | | | then return 0.1641414217713686;  // std dev = 0,453, 348,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=248 */
%   | | | | else return 0.16385126025706187;  // std dev = 0,447, 40,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=29 */
%   | | | else return 0.1928992633793141;  // std dev = 0,439, 196,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=143 */
%   | else if ( tempadvisedby(N, B) )
%   | | then return 0.024719851444357305;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return 0.12278233731416131;  // std dev = 0,447, 96,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=46 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( tempadvisedby(B, D) )
%   | then return -0.03158791955924756;  // std dev = 0,317, 44,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( advisedby(B, E), projectmember(F, E) )
%   | | then return -0.08994312304382708;  // std dev = 0,295, 31,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else if ( advisedby(B, G), tempadvisedby(H, G) )
%   | | | then return 0.0895937225465627;  // std dev = 0,484, 347,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=134 */
%   | | | else return 0.023872830709983417;  // std dev = 0,409, 187,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   else if ( hasposition(B, I), hasposition(J, I), projectmember(K, J) )
%   | then if ( tempadvisedby(L, B) )
%   | | then if ( advisedby(M, B) )
%   | | | then return 0.11928910291849819;  // std dev = 0,455, 362,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=255 */
%   | | | else return 0.12398963941810752;  // std dev = 0,447, 40,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=29 */
%   | | else return 0.14552311373011892;  // std dev = 0,439, 196,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=143 */
%   | else if ( tempadvisedby(N, B) )
%   | | then return 0.019592738072277256;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return 0.09613436347107324;  // std dev = 0,446, 96,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=46 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then if ( tempadvisedby(I, B) )
%   | | then return 0.09069376121755762;  // std dev = 0,455, 362,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=255 */
%   | | else return 0.1639249916215574;  // std dev = 0,404, 102,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=81 */
%   | else if ( advisedby(J, B) )
%   | | then return -0.01556477591341272;  // std dev = 0,495, 58,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | else return 0.12727492168988347;  // std dev = 0,425, 76,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=58 */
%   else if ( yearsinprogram(B, K), yearsinprogram(L, K), tempadvisedby(L, M) )
%   | then return 0.0016913512825116222;  // std dev = 0,375, 178,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=31 */
%   | else if ( advisedby(B, N), tempadvisedby(P, N) )
%   | | then return 0.06886433208786832;  // std dev = 0,490, 294,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=119 */
%   | | else if ( advisedby(B, Q) )
%   | | | then return 0.007497712935020926;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
%   | | | else if ( tempadvisedby(R, B) )
%   | | | | then return 0.015492110134687721;  // std dev = 0,465, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | | else return 0.07721303976725612;  // std dev = 0,447, 138,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=58 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then return 0.08201765321153341;  // std dev = 0,445, 464,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=336 */
%   | else if ( advisedby(I, B) )
%   | | then return -0.011779894686371518;  // std dev = 0,495, 58,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | else return 0.09834968653073847;  // std dev = 0,425, 76,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=58 */
%   else if ( tempadvisedby(B, J) )
%   | then return -0.02791595373340228;  // std dev = 0,317, 44,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( yearsinprogram(B, K), yearsinprogram(L, K), tempadvisedby(L, M) )
%   | | then return 0.01109397623464247;  // std dev = 0,392, 134,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=26 */
%   | | else if ( advisedby(N, B) )
%   | | | then return 0.07401337460910956;  // std dev = 0,426, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else if ( inphase(B, P) )
%   | | | | then if ( advisedby(B, Q), tempadvisedby(R, Q) )
%   | | | | | then return 0.053344719808597625;  // std dev = 0,490, 294,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=119 */
%   | | | | | else return 0.02578682637279016;  // std dev = 0,423, 137,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=32 */
%   | | | | else return 0.026383775446154382;  // std dev = 0,468, 58,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=23 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then if ( projectmember(F, D) )
%   | | then return -0.08351346787585377;  // std dev = 0,296, 31,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else return 0.04737458639405946;  // std dev = 0,484, 347,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=134 */
%   | else return 0.005907236140018967;  // std dev = 0,393, 231,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=45 */
%   else if ( tempadvisedby(G, B) )
%   | then if ( advisedby(H, B) )
%   | | then return 0.04797818581056537;  // std dev = 0,456, 381,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=261 */
%   | | else return 0.043800223925741434;  // std dev = 0,447, 40,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=29 */
%   | else if ( advisedby(I, B), advisedby(I, J), projectmember(K, J) )
%   | | then return -0.23298080882260916;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( advisedby(L, B), advisedby(L, M), tempadvisedby(N, M) )
%   | | | then return 0.13448837236371528;  // std dev = 0,399, 128,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=103 */
%   | | | else if ( advisedby(P, B) )
%   | | | | then return -0.008909026333245591;  // std dev = 0,495, 58,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | | else return 0.05611009263671062;  // std dev = 0,444, 94,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=52 */
Results
   AUC ROC   = 0.633702
   AUC PR    = 0.605773
   CLL	      = -0.72351
   Precision = 0.722222 at threshold = 0.5
   Recall    = 0.178082
   F1        = 0.285714


Total learning time: 138.627 seconds
Total inference time: 0.686 seconds
AUC ROC: 0.633702


Dataset: 1, Run: 1, Fold: 2, Type: scratch, Time: 00:21:05
{'AUC ROC': 0.633702, 'AUC PR': 0.605773, 'F1': 0.285714, 'Recall': 0.178082, 'Learning time': 138.627, 'Inference time': 0.686, 'Precision': [0.722222, 0.5], 'CLL': -0.72351}


Best mapping found: ['female(A) -> professor(A)', 'actor(A) -> student(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 

Transferred target predicate: publication 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;publication(A, B) :- professor(B).;false;true', '0;false;student(B).;false;false', '1;;publication(A, B) :- professor(B).;false;true', '1;false;student(B).;false;false', '2;;publication(A, B) :- professor(B).;false;true', '2;false;student(B).;false;false', '3;;publication(A, B) :- professor(B).;false;true', '3;false;student(B).;false;false', '4;;publication(A, B) :- professor(B).;false;true', '4;false;student(B).;false;false', '5;;publication(A, B) :- professor(B).;false;true', '5;false;student(B).;false;false', '6;;publication(A, B) :- professor(B).;false;true', '6;false;student(B).;false;false', '7;;publication(A, B) :- professor(B).;false;true', '7;false;student(B).;false;false', '8;;publication(A, B) :- professor(B).;false;true', '8;false;student(B).;false;false', '9;;publication(A, B) :- professor(B).;false;true', '9;false;student(B).;false;false']
WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5357895386660372;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.1780376694527761;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.45739066722404204;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.15495431575913965;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.369072011560479;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.13249092735143114;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2853628453243423;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.11147556677792458;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21566328873289758;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.09248709196091648;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16182629224338357;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.07582993678652235;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12160088056118175;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.06156983313684299;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09182215373771507;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.04959931037324262;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.06973245353237338;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.039705995827231465;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.053242083353613315;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else if ( student(B) )
%   | then return 0.03162863731921171;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.708333
   AUC PR    = 0.66587
   CLL	      = -0.607885
   Precision = 0.697368 at threshold = 0.5
   Recall    = 0.736111
   F1        = 0.716216


Total learning time: 70.096 seconds
Total inference time: 0.524 seconds
AUC ROC: 0.708333


Results in test set
   AUC ROC   = 0.708333
   AUC PR    = 0.66587
   CLL	      = -0.607885
   Precision = 0.697368 at threshold = 0.5
   Recall    = 0.736111
   F1        = 0.716216


Total inference time: 0.524 seconds
AUC ROC: 0.708333
Structure after Parameter Learning
[['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [12.619, 235, 494], 'false,true': [12.507, 489, 230]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;publication(A, B) :- professor(B).;false;false', '1;;publication(A, B) :- professor(B).;false;false', '2;;publication(A, B) :- professor(B).;false;false', '3;;publication(A, B) :- professor(B).;false;false', '4;;publication(A, B) :- professor(B).;false;false', '5;;publication(A, B) :- professor(B).;false;false', '6;;publication(A, B) :- professor(B).;false;false', '7;;publication(A, B) :- professor(B).;false;false', '8;;publication(A, B) :- professor(B).;false;false', '9;;publication(A, B) :- professor(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #2: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #3: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #4: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #5: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #6: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #7: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #8: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #9: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]
Tree #10: [('false,false', 0), ('true', 0.6776406035665294), ('false,true', 0.6801112656467315)]


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5357895386660372;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.1780376694527761;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.45739066722404204;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.15495431575913965;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.369072011560479;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.13249092735143114;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2853628453243423;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.11147556677792458;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21566328873289758;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.09248709196091648;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16182629224338357;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.07582993678652235;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12160088056118175;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.06156983313684299;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09182215373771507;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.04959931037324262;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.06973245353237338;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.039705995827231465;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.053242083353613315;  // std dev = 12,619, 729,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=494 */
%   else return 0.03162863731921171;  // std dev = 12,507, 719,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=230 */
Results
   AUC ROC   = 0.708333
   AUC PR    = 0.66587
   CLL	      = -0.607885
   Precision = 0.697368 at threshold = 0.5
   Recall    = 0.736111
   F1        = 0.716216


Total learning time: 18.583 seconds
Total inference time: 0.531 seconds
AUC ROC: 0.708333


Best model AUC ROC so far: 0.708333


******************************************
Best model found
******************************************
Total revision time: 89.73400000000001
Best validation AUC ROC: 0.708333


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.758712
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.5
   F1        = 0.5


Total inference time: 0.408 seconds
AUC ROC: 0.5
Dataset: 1, Run: 1, Fold: 3, Type: transfer, Time: 00:22:39
{'Parameter Learning results': {'AUC ROC': 0.5, 'AUC PR': 0.5, 'F1': 0.5, 'Recall': 0.5, 'Learning time': 70.096, 'Inference time': 0.395, 'Precision': [0.5, 0.5], 'CLL': -0.758712}, 'AUC ROC': 0.5, 'AUC PR': 0.5, 'Mapping results': {'Generating mappings time': 0.04799795150756836, 'Generating paths time': 2.725466728210449, 'Knowledge compiling time': 0.020672082901000977, 'Total time': 2.797084093093872, 'Possible mappings': 88, 'Finding best mapping': 0.0029418468475341797}, 'F1': 0.5, 'Recall': 0.5, 'Learning time': 89.73400000000001, 'Inference time': 0.408, 'Precision': [0.5, 0.5], 'CLL': -0.758712}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.22842601318515046;  // std dev = 0,483, 397,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=147 */
%   | else return 0.05511863206920867;  // std dev = 0,398, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( tempadvisedby(I, B) )
%   | | then return 0.5671558635059747;  // std dev = 0,454, 433,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=307 */
%   | | else if ( advisedby(J, B), advisedby(J, K), tempadvisedby(L, K) )
%   | | | then return 0.644473721424297;  // std dev = 0,410, 117,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=92 */
%   | | | else return 0.45447921032886907;  // std dev = 0,491, 109,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=65 */
%   | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | then return 0.13814893509951237;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( professor(B) )
%   | | | then if ( advisedby(Q, B), advisedby(Q, R), projectmember(S, R) )
%   | | | | then return -0.05851773156715445;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | | else return 0.5248156017661783;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.39263169372020085;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then if ( projectmember(F, D) )
%   | | then return -0.05199212322174081;  // std dev = 0,325, 25,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else return 0.2151046509718068;  // std dev = 0,487, 372,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=144 */
%   | else return 0.048275726081012875;  // std dev = 0,398, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( hasposition(B, G), hasposition(H, G), projectmember(I, H) )
%   | then if ( advisedby(J, B), advisedby(J, K), tempadvisedby(L, K) )
%   | | then return 0.4952274017101839;  // std dev = 0,447, 511,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=370 */
%   | | else return 0.4235035617453105;  // std dev = 0,480, 148,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=94 */
%   | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | then return 0.12048633002602743;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( professor(B) )
%   | | | then if ( advisedby(Q, B), advisedby(Q, R), projectmember(S, R) )
%   | | | | then return -0.05154258263854086;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | | else return 0.44829560624196213;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.33783328321527484;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.1679876080563536;  // std dev = 0,482, 397,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=147 */
%   | else return 0.042060589061300765;  // std dev = 0,398, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( advisedby(I, B), advisedby(I, J), tempadvisedby(K, J) )
%   | | then return 0.3966189162823128;  // std dev = 0,446, 511,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=370 */
%   | | else if ( advisedby(L, B) )
%   | | | then return 0.2392624752450442;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | else return 0.4223250056262891;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | then return 0.10366302993845594;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( advisedby(Q, B), advisedby(Q, R), projectmember(S, R) )
%   | | | then return -0.0456407429776432;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else if ( professor(B) )
%   | | | | then return 0.362363346322623;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | | else return 0.27899123863584213;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.1395415833960378;  // std dev = 0,482, 397,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=147 */
%   | else return 0.03647407850182373;  // std dev = 0,398, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( advisedby(I, B), advisedby(I, J), tempadvisedby(K, J) )
%   | | then return 0.3041777249231021;  // std dev = 0,446, 511,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=370 */
%   | | else if ( advisedby(L, B) )
%   | | | then return 0.18816277588072863;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | else return 0.32772705908371563;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | then return 0.08809849495361277;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( advisedby(Q, B), advisedby(Q, R), projectmember(S, R) )
%   | | | then return -0.04059971203405114;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else if ( professor(B) )
%   | | | | then return 0.28075385369658523;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | | else return 0.22243083833742386;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.11386794247811108;  // std dev = 0,481, 397,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=147 */
%   | else return 0.03149861871629999;  // std dev = 0,398, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( advisedby(I, B), advisedby(I, J), tempadvisedby(K, J) )
%   | | then return 0.22884925987266366;  // std dev = 0,446, 511,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=370 */
%   | | else if ( advisedby(L, B) )
%   | | | then return 0.14499711035393478;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | else return 0.24765451742170203;  // std dev = 0,450, 85,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=61 */
%   | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | then return 0.0740647503162657;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( advisedby(Q, B), advisedby(Q, R), projectmember(S, R) )
%   | | | then return -0.036258531635272304;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else if ( professor(B) )
%   | | | | then return 0.2124807012182714;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | | else return 0.17281039200927534;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D) )
%   | then return 0.08161507009344697;  // std dev = 0,466, 536,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=178 */
%   | else return -0.0018666891297481236;  // std dev = 0,374, 125,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=21 */
%   else if ( advisedby(E, B), advisedby(E, F), projectmember(G, F) )
%   | then return 0.025374687604002313;  // std dev = 0,393, 23,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else if ( hasposition(B, H), hasposition(I, H), projectmember(J, I) )
%   | | then if ( tempadvisedby(K, B), advisedby(L, B) )
%   | | | then return 0.1597114912298919;  // std dev = 0,455, 383,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=271 */
%   | | | else return 0.18271107481832852;  // std dev = 0,447, 265,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=186 */
%   | | else if ( advisedby(M, B) )
%   | | | then if ( tempadvisedby(N, B) )
%   | | | | then return 0.15668936657453045;  // std dev = 0,484, 16,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | | else return 0.159489882281712;  // std dev = 0,471, 33,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else if ( professor(B) )
%   | | | | then return -0.1071995223143585;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | | else return 0.1320412855065648;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D) )
%   | then return 0.06619088921107759;  // std dev = 0,466, 536,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=178 */
%   | else return -0.0016036257585214132;  // std dev = 0,374, 125,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=21 */
%   else if ( advisedby(E, B), advisedby(E, F), projectmember(G, F) )
%   | then return 0.02100327735457368;  // std dev = 0,392, 23,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else if ( advisedby(H, B), advisedby(H, I), tempadvisedby(J, I) )
%   | | then return 0.13237545363155415;  // std dev = 0,448, 549,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=391 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.15187052978494975;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | | | else if ( professor(B) )
%   | | | | then if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | | | then if ( advisedby(P, B) )
%   | | | | | | then return 0.06543391256509289;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | | | | else return 0.13140913266046905;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | | | else return -0.0894585166945479;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | | else return 0.09992057280757799;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), projectmember(E, D) )
%   | then return -0.13838816237181423;  // std dev = 0,325, 25,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else return 0.050049023388518715;  // std dev = 0,453, 636,000 (wgt'ed) examples reached here.  /* #neg=440 #pos=196 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then if ( tempadvisedby(I, B), advisedby(J, B) )
%   | | then if ( projectmember(K, B) )
%   | | | then return 0.07704256181657117;  // std dev = 0,481, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.08885243930276197;  // std dev = 0,455, 383,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=271 */
%   | | else return 0.10965949893904536;  // std dev = 0,447, 265,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=186 */
%   | else if ( tempadvisedby(L, B) )
%   | | then return 0.10339083770057295;  // std dev = 0,484, 16,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( hasposition(B, M), hasposition(N, M), tempadvisedby(P, N) )
%   | | | then return -0.07549787542677709;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else if ( professor(B) )
%   | | | | then return 0.05399428136401399;  // std dev = 0,432, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | | else return 0.07522738331625095;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then return 0.05238487991104456;  // std dev = 0,480, 397,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=147 */
%   | else return 0.008283423574376237;  // std dev = 0,397, 264,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=52 */
%   else if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then if ( tempadvisedby(I, B) )
%   | | then return 0.06841578554804566;  // std dev = 0,457, 410,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=284 */
%   | | else return 0.098165092088841;  // std dev = 0,417, 162,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=115 */
%   | else if ( advisedby(J, B) )
%   | | then return 0.02175713036766605;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.09050936216883011;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | | | else if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | | then return 0.07331762354569549;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | | else if ( professor(B) )
%   | | | | | then return -0.06430841056360663;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | | | else return 0.056496845543073805;  // std dev = 0,499, 58,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return -0.04850044286403288;  // std dev = 0,388, 188,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=37 */
%   else if ( advisedby(B, F), tempadvisedby(G, F) )
%   | then return 0.062705258518499;  // std dev = 0,488, 311,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=123 */
%   | else if ( advisedby(H, B), advisedby(H, I), projectmember(J, I) )
%   | | then return -0.008520602071603526;  // std dev = 0,391, 23,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else if ( advisedby(K, B), advisedby(K, L), tempadvisedby(M, L) )
%   | | | then if ( tempadvisedby(N, B) )
%   | | | | then return 0.05313094656401184;  // std dev = 0,456, 399,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=277 */
%   | | | | else return 0.08758679197152769;  // std dev = 0,425, 150,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=114 */
%   | | | else if ( advisedby(P, B) )
%   | | | | then return 0.016318396829952023;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | | else if ( tempadvisedby(Q, B) )
%   | | | | | then return 0.07029682741710712;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | | | | | else if ( advisedby(B, R) )
%   | | | | | | then return 0.05139713396459407;  // std dev = 0,434, 107,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=27 */
%   | | | | | | else return 0.04031567190880351;  // std dev = 0,453, 168,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=76 */
Results
   AUC ROC   = 0.6
   AUC PR    = 0.575762
   CLL	      = -0.77696
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 192.849 seconds
Total inference time: 0.469 seconds
AUC ROC: 0.6


Dataset: 1, Run: 1, Fold: 3, Type: scratch, Time: 00:25:53
{'AUC ROC': 0.6, 'AUC PR': 0.575762, 'F1': nan, 'Recall': 0.0, 'Learning time': 192.849, 'Inference time': 0.469, 'Precision': [nan, 0.5], 'CLL': -0.77696}


Best mapping found: ['female(A) -> professor(A)', 'actor(A) -> student(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 

Transferred target predicate: publication 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;publication(A, B) :- professor(B).;false;true', '0;false;student(B).;false;false', '1;;publication(A, B) :- professor(B).;false;true', '1;false;student(B).;false;false', '2;;publication(A, B) :- professor(B).;false;true', '2;false;student(B).;false;false', '3;;publication(A, B) :- professor(B).;false;true', '3;false;student(B).;false;false', '4;;publication(A, B) :- professor(B).;false;true', '4;false;student(B).;false;false', '5;;publication(A, B) :- professor(B).;false;true', '5;false;student(B).;false;false', '6;;publication(A, B) :- professor(B).;false;true', '6;false;student(B).;false;false', '7;;publication(A, B) :- professor(B).;false;true', '7;false;student(B).;false;false', '8;;publication(A, B) :- professor(B).;false;true', '8;false;student(B).;false;false', '9;;publication(A, B) :- professor(B).;false;true', '9;false;student(B).;false;false']
WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5600927795919487;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.17517437541261946;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.47749170871774405;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.15248500797506834;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3838217821243944;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.13043832788293688;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.29547772737249445;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.10982803838255281;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.22271089105366057;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.09120685069712882;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16710168389995242;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.07486429933909221;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12586511659138877;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.060861513529695946;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09545863449125626;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.04909371450954766;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.07292257879515422;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.039355266282450306;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.05607184664179279;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else if ( student(B) )
%   | then return 0.031393162660984845;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.635417
   AUC PR    = 0.601808
   CLL	      = -0.661381
   Precision = 0.627451 at threshold = 0.5
   Recall    = 0.666667
   F1        = 0.646465


Total learning time: 18.008 seconds
Total inference time: 0.541 seconds
AUC ROC: 0.635417


Results in test set
   AUC ROC   = 0.635417
   AUC PR    = 0.601808
   CLL	      = -0.661381
   Precision = 0.627451 at threshold = 0.5
   Recall    = 0.666667
   F1        = 0.646465


Total inference time: 0.541 seconds
AUC ROC: 0.635417
Structure after Parameter Learning
[['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [9.842, 138, 325], 'false,true': [10.519, 349, 162]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;publication(A, B) :- professor(B).;false;false', '1;;publication(A, B) :- professor(B).;false;false', '2;;publication(A, B) :- professor(B).;false;false', '3;;publication(A, B) :- professor(B).;false;false', '4;;publication(A, B) :- professor(B).;false;false', '5;;publication(A, B) :- professor(B).;false;false', '6;;publication(A, B) :- professor(B).;false;false', '7;;publication(A, B) :- professor(B).;false;false', '8;;publication(A, B) :- professor(B).;false;false', '9;;publication(A, B) :- professor(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #2: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #3: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #4: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #5: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #6: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #7: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #8: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #9: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]
Tree #10: [('false,false', 0), ('false,true', 0.6829745596868885), ('true', 0.7019438444924406)]


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5600927795919487;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.17517437541261946;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.47749170871774405;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.15248500797506834;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3838217821243944;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.13043832788293688;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.29547772737249445;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.10982803838255281;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.22271089105366057;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.09120685069712882;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16710168389995242;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.07486429933909221;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12586511659138877;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.060861513529695946;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.09545863449125626;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.04909371450954766;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.07292257879515422;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.039355266282450306;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.05607184664179279;  // std dev = 9,842, 463,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=325 */
%   else return 0.031393162660984845;  // std dev = 10,519, 511,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=162 */
Results
   AUC ROC   = 0.635417
   AUC PR    = 0.601808
   CLL	      = -0.661381
   Precision = 0.627451 at threshold = 0.5
   Recall    = 0.666667
   F1        = 0.646465


Total learning time: 15.124 seconds
Total inference time: 0.51 seconds
AUC ROC: 0.635417


Best model AUC ROC so far: 0.635417


******************************************
Best model found
******************************************
Total revision time: 34.183
Best validation AUC ROC: 0.635417


Results
   AUC ROC   = 0.657895
   AUC PR    = 0.618854
   CLL	      = -0.643406
   Precision = 0.644444 at threshold = 0.5
   Recall    = 0.704453
   F1        = 0.673114


Total inference time: 0.698 seconds
AUC ROC: 0.657895
Dataset: 1, Run: 1, Fold: 4, Type: transfer, Time: 00:26:31
{'Parameter Learning results': {'AUC ROC': 0.657895, 'AUC PR': 0.618854, 'F1': 0.673114, 'Recall': 0.704453, 'Learning time': 18.008, 'Inference time': 0.651, 'Precision': [0.644444, 0.5], 'CLL': -0.643406}, 'AUC ROC': 0.657895, 'AUC PR': 0.618854, 'Mapping results': {'Generating mappings time': 0.04783272743225098, 'Generating paths time': 2.543792724609375, 'Knowledge compiling time': 0.018676280975341797, 'Total time': 2.613215446472168, 'Possible mappings': 88, 'Finding best mapping': 0.002907991409301758}, 'F1': 0.673114, 'Recall': 0.704453, 'Learning time': 34.183, 'Inference time': 0.698, 'Precision': [0.644444, 0.5], 'CLL': -0.643406}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.606278610909982;  // std dev = 0,434, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( inphase(B, F), inphase(G, F), tempadvisedby(G, H) )
%   | then return -0.009775593202374616;  // std dev = 0,339, 159,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | else if ( inphase(B, I) )
%   | | then if ( advisedby(B, J) )
%   | | | then return 0.26137474155112167;  // std dev = 0,491, 248,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=100 */
%   | | | else return 0.11455919150976876;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( hasposition(B, K), hasposition(L, K), projectmember(M, L) )
%   | | | then if ( tempadvisedby(N, B) )
%   | | | | then return 0.5724346493852266;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | | else if ( advisedby(P, B) )
%   | | | | | then return 0.31648226843284566;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | | | else return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else if ( student(B) )
%   | | | | then return 0.335072012022588;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
%   | | | | else return -0.08302753548872309;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.5155356467328123;  // std dev = 0,434, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( inphase(B, F), inphase(G, F), tempadvisedby(G, H) )
%   | then return -0.008589777814132905;  // std dev = 0,339, 159,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | else if ( inphase(B, I) )
%   | | then if ( advisedby(B, J) )
%   | | | then if ( tempadvisedby(K, J) )
%   | | | | then return 0.21733258598998953;  // std dev = 0,489, 236,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=93 */
%   | | | | else return 0.40659812271315254;  // std dev = 0,493, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.10003389684695556;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | then if ( advisedby(P, B) )
%   | | | | then return 0.2734366587491455;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | | else return 0.40782464556064674;  // std dev = 0,480, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else if ( student(B) )
%   | | | | then return 0.28920831773646843;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
%   | | | | else return -0.07321798203220185;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.4114633294936432;  // std dev = 0,434, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( advisedby(F, B) )
%   | then return 0.22864662696661894;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else if ( tempadvisedby(B, G) )
%   | | then return -0.05267360936396192;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( inphase(B, H), inphase(I, H), tempadvisedby(I, J) )
%   | | | then return 0.01081234677301345;  // std dev = 0,358, 113,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | | | else if ( inphase(B, K) )
%   | | | | then if ( advisedby(B, L) )
%   | | | | | then if ( tempadvisedby(M, L) )
%   | | | | | | then return 0.183464489747692;  // std dev = 0,489, 236,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=93 */
%   | | | | | | else return 0.3395461391038696;  // std dev = 0,493, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | | | else return 0.0863791624684476;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | | else if ( hasposition(B, N), hasposition(P, N), projectmember(Q, P) )
%   | | | | | then return 0.3322620867232638;  // std dev = 0,479, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | | | else return 0.17763010405753046;  // std dev = 0,474, 82,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=32 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.314417761650787;  // std dev = 0,434, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( inphase(B, F) )
%   | then if ( tempadvisedby(B, G) )
%   | | then return -0.046465027874248596;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( advisedby(B, H), tempadvisedby(I, H) )
%   | | | then if ( projectmember(J, H) )
%   | | | | then return -0.06950555359374858;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | | else return 0.1557272207594574;  // std dev = 0,489, 246,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=97 */
%   | | | else return 0.06734938838748719;  // std dev = 0,416, 112,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=27 */
%   | else if ( tempadvisedby(K, B) )
%   | | then return 0.33379799392672976;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( professor(B) )
%   | | | then if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | | then return 0.16925497489544564;  // std dev = 0,498, 31,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | | | else return -0.08565065727862001;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.2076058757038258;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.23620809850764996;  // std dev = 0,434, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( yearsinprogram(B, F), yearsinprogram(G, F), tempadvisedby(G, H) )
%   | then return 0.01642038070408646;  // std dev = 0,372, 131,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=24 */
%   | else if ( inphase(B, I) )
%   | | then if ( advisedby(B, J), tempadvisedby(K, J) )
%   | | | then return 0.11266323813817851;  // std dev = 0,479, 232,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=86 */
%   | | | else return 0.05767458994219378;  // std dev = 0,419, 83,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=21 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.25263043212987524;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else if ( professor(B) )
%   | | | | then if ( hasposition(B, M), hasposition(N, M), projectmember(P, N) )
%   | | | | | then if ( advisedby(Q, B) )
%   | | | | | | then return 0.15090707512600984;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | | | | else return 0.07512815329728625;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | | | else return -0.0753830517150063;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | | else return 0.16485825579437627;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then if ( tempadvisedby(F, B) )
%   | then return 0.15999350878844684;  // std dev = 0,444, 282,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=206 */
%   | else return 0.2194130212742947;  // std dev = 0,407, 119,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=94 */
%   else if ( tempadvisedby(G, B) )
%   | then return 0.18956842644389912;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( advisedby(B, H) )
%   | | then if ( tempadvisedby(I, H) )
%   | | | then if ( projectmember(J, H) )
%   | | | | then return -0.06762373993815575;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | | else return 0.1061571961355474;  // std dev = 0,489, 246,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=97 */
%   | | | else return 0.06543915931562626;  // std dev = 0,416, 58,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | else if ( tempadvisedby(B, K) )
%   | | | then return -0.043029356528276955;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | | else if ( inphase(B, L) )
%   | | | | then return 0.03430104426242193;  // std dev = 0,413, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | | else return 0.09242632235923248;  // std dev = 0,474, 113,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), projectmember(E, D) )
%   then if ( projectmember(F, B) )
%   | then return 0.3908127953803336;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.5706068175618061;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( advisedby(G, B), advisedby(G, H), tempadvisedby(I, H) )
%   | then return 0.16573247754312853;  // std dev = 0,414, 375,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=292 */
%   | else if ( tempadvisedby(B, J) )
%   | | then return -0.038240175688870955;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( inphase(B, K), inphase(L, K), tempadvisedby(L, M) )
%   | | | then return -0.0027579419732688473;  // std dev = 0,354, 113,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | | | else if ( professor(B) )
%   | | | | then return 0.052539494886287744;  // std dev = 0,438, 62,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   | | | | else if ( inphase(B, N) )
%   | | | | | then if ( advisedby(B, P) )
%   | | | | | | then return 0.08603124482411761;  // std dev = 0,490, 248,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=100 */
%   | | | | | | else return 0.048851307095239875;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | | | else return 0.1071520214674084;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( advisedby(C, B) )
%   then if ( tempadvisedby(D, B) )
%   | then return 0.08141162326734003;  // std dev = 0,443, 282,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=206 */
%   | else return 0.14490420159970668;  // std dev = 0,386, 143,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=105 */
%   else if ( advisedby(B, E) )
%   | then if ( projectmember(F, E) )
%   | | then return -0.059412000346700446;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | else if ( tempadvisedby(G, E) )
%   | | | then return 0.06589388989937772;  // std dev = 0,490, 246,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=97 */
%   | | | else return 0.051597945104744504;  // std dev = 0,414, 58,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | else if ( tempadvisedby(B, H) )
%   | | then return -0.034111691409171356;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( inphase(B, I), inphase(J, I), tempadvisedby(J, K) )
%   | | | then return -0.022148132017127026;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.12983827921874788;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | | else return 0.04413183813454497;  // std dev = 0,457, 128,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( advisedby(C, B) )
%   then if ( tempadvisedby(D, B) )
%   | then return 0.06310518198176765;  // std dev = 0,443, 282,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=206 */
%   | else return 0.11216462061012988;  // std dev = 0,387, 143,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=105 */
%   else if ( tempadvisedby(B, E) )
%   | then return -0.030528506129902818;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | else if ( inphase(B, F), inphase(G, F), tempadvisedby(G, H) )
%   | | then return -0.0034091141071687318;  // std dev = 0,353, 113,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | | else if ( professor(B) )
%   | | | then return -0.0011872975100761824;  // std dev = 0,390, 38,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | | | else if ( inphase(B, I) )
%   | | | | then if ( advisedby(B, J), tempadvisedby(K, J) )
%   | | | | | then return 0.0450660659302641;  // std dev = 0,489, 236,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=93 */
%   | | | | | else if ( advisedby(B, L) )
%   | | | | | | then return 0.19738810597342327;  // std dev = 0,493, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | | | | else return 0.03314174489780593;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | | else return 0.0712580323478558;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( advisedby(C, B), advisedby(C, D), tempadvisedby(E, D) )
%   then return 0.06449241921964853;  // std dev = 0,421, 401,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=300 */
%   else if ( tempadvisedby(B, F) )
%   | then return -0.027400016771578054;  // std dev = 0,282, 46,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | else if ( inphase(B, G), inphase(H, G), tempadvisedby(H, I) )
%   | | then return -0.0029680943439358135;  // std dev = 0,353, 113,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | | else if ( professor(B) )
%   | | | then if ( tempadvisedby(J, B) )
%   | | | | then return 0.09897090446681157;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | | else return -0.018238328014368716;  // std dev = 0,427, 48,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else if ( inphase(B, K) )
%   | | | | then if ( advisedby(B, L), tempadvisedby(M, L) )
%   | | | | | then return 0.03476106690921321;  // std dev = 0,489, 236,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=93 */
%   | | | | | else if ( advisedby(B, N) )
%   | | | | | | then return 0.14968973324604867;  // std dev = 0,493, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | | | | else return 0.027341650091629328;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | | else return 0.053968749982367524;  // std dev = 0,499, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
Results
   AUC ROC   = 0.52911
   AUC PR    = 0.530358
   CLL	      = -0.799722
   Precision = 0.615385 at threshold = 0.5
   Recall    = 0.421053
   F1        = 0.5


Total learning time: 47.486 seconds
Total inference time: 0.886 seconds
AUC ROC: 0.52911


Dataset: 1, Run: 1, Fold: 4, Type: scratch, Time: 00:27:20
{'AUC ROC': 0.52911, 'AUC PR': 0.530358, 'F1': 0.5, 'Recall': 0.421053, 'Learning time': 47.486, 'Inference time': 0.886, 'Precision': [0.615385, 0.5], 'CLL': -0.799722}


Best mapping found: ['female(A) -> professor(A)', 'actor(A) -> student(A)', 'movie(A,B) -> publication(A,B)'] 

Tranferred structured tree: [['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.5, 33, 34], 'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145]}]] 

Transferred target predicate: publication 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;publication(A, B) :- professor(B).;false;true', '0;false;student(B).;false;false', '1;;publication(A, B) :- professor(B).;false;true', '1;false;student(B).;false;false', '2;;publication(A, B) :- professor(B).;false;true', '2;false;student(B).;false;false', '3;;publication(A, B) :- professor(B).;false;true', '3;false;student(B).;false;false', '4;;publication(A, B) :- professor(B).;false;true', '4;false;student(B).;false;false', '5;;publication(A, B) :- professor(B).;false;true', '5;false;student(B).;false;false', '6;;publication(A, B) :- professor(B).;false;true', '6;false;student(B).;false;false', '7;;publication(A, B) :- professor(B).;false;true', '7;false;student(B).;false;false', '8;;publication(A, B) :- professor(B).;false;true', '8;false;student(B).;false;false', '9;;publication(A, B) :- professor(B).;false;true', '9;false;student(B).;false;false']
WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5373020295620485;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.18354576049633314;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4586432931776074;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.15970237082651137;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3699942416050254;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.1364322041904303;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2859959394620733;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.11463171084303193;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21610174077197977;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.09493191840103475;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16215034171818726;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.07766685830660612;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12185895856663267;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.06291118413824222;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.0920393218788344;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.05055179950516289;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.06992091526963755;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.04036275928250466;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.053407807486613036;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else if ( student(B) )
%   | then return 0.03206638867199294;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.685484
   AUC PR    = 0.64837
   CLL	      = -0.625007
   Precision = 0.68254 at threshold = 0.5
   Recall    = 0.693548
   F1        = 0.688


Total learning time: 114.33500000000001 seconds
Total inference time: 0.529 seconds
AUC ROC: 0.685484


Results in test set
   AUC ROC   = 0.685484
   AUC PR    = 0.64837
   CLL	      = -0.625007
   Precision = 0.68254 at threshold = 0.5
   Recall    = 0.693548
   F1        = 0.688


Total inference time: 0.529 seconds
AUC ROC: 0.685484
Structure after Parameter Learning
[['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}], ['publication(A, B)', {'': 'professor(B)', 'false': 'student(B)'}, {'false,false': [0.0, 0, 0], 'true': [11.567, 197, 417], 'false,true': [11.76, 425, 205]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;publication(A, B) :- professor(B).;false;false', '1;;publication(A, B) :- professor(B).;false;false', '2;;publication(A, B) :- professor(B).;false;false', '3;;publication(A, B) :- professor(B).;false;false', '4;;publication(A, B) :- professor(B).;false;false', '5;;publication(A, B) :- professor(B).;false;false', '6;;publication(A, B) :- professor(B).;false;false', '7;;publication(A, B) :- professor(B).;false;false', '8;;publication(A, B) :- professor(B).;false;false', '9;;publication(A, B) :- professor(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #2: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #3: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #4: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #5: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #6: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #7: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #8: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #9: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]
Tree #10: [('false,false', 0), ('false,true', 0.6746031746031746), ('true', 0.6791530944625407)]


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.5373020295620485;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.18354576049633314;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.4586432931776074;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.15970237082651137;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.3699942416050254;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.1364322041904303;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.2859959394620733;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.11463171084303193;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.21610174077197977;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.09493191840103475;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.16215034171818726;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.07766685830660612;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.12185895856663267;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.06291118413824222;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.0920393218788344;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.05055179950516289;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.06992091526963755;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.04036275928250466;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( professor(B) )
%   then return 0.053407807486613036;  // std dev = 11,567, 614,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=417 */
%   else return 0.03206638867199294;  // std dev = 11,760, 630,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=205 */
Results
   AUC ROC   = 0.685484
   AUC PR    = 0.64837
   CLL	      = -0.625007
   Precision = 0.68254 at threshold = 0.5
   Recall    = 0.693548
   F1        = 0.688


Total learning time: 117.787 seconds
Total inference time: 0.518 seconds
AUC ROC: 0.685484


Best model AUC ROC so far: 0.685484


******************************************
Best model found
******************************************
Total revision time: 233.169
Best validation AUC ROC: 0.685484


Results
   AUC ROC   = 0.625
   AUC PR    = 0.586883
   CLL	      = -0.663088
   Precision = 0.602941 at threshold = 0.5
   Recall    = 0.732143
   F1        = 0.66129


Total inference time: 0.568 seconds
AUC ROC: 0.625
Dataset: 1, Run: 1, Fold: 5, Type: transfer, Time: 00:31:18
{'Parameter Learning results': {'AUC ROC': 0.625, 'AUC PR': 0.586883, 'F1': 0.66129, 'Recall': 0.732143, 'Learning time': 114.33500000000001, 'Inference time': 0.557, 'Precision': [0.602941, 0.5], 'CLL': -0.663088}, 'AUC ROC': 0.625, 'AUC PR': 0.586883, 'Mapping results': {'Generating mappings time': 0.0476689338684082, 'Generating paths time': 2.607250928878784, 'Knowledge compiling time': 0.01921701431274414, 'Total time': 2.677053928375244, 'Possible mappings': 88, 'Finding best mapping': 0.002911806106567383}, 'F1': 0.66129, 'Recall': 0.732143, 'Learning time': 233.169, 'Inference time': 0.568, 'Precision': [0.602941, 0.5], 'CLL': -0.663088}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( tempadvisedby(F, B), advisedby(G, B) )
%   | then return 0.5807295802607988;  // std dev = 0,448, 310,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=224 */
%   | else if ( advisedby(H, B), advisedby(H, I), tempadvisedby(J, I) )
%   | | then return 0.641482268432844;  // std dev = 0,412, 120,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=94 */
%   | | else if ( advisedby(K, B) )
%   | | | then return 0.3991325416568882;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.5618526388032159;  // std dev = 0,457, 27,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   | | | | else return 0.6023349816111393;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   else if ( advisedby(B, M), tempadvisedby(N, M) )
%   | then if ( projectmember(P, M) )
%   | | then return 0.04564893509951222;  // std dev = 0,390, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.26430278125335455;  // std dev = 0,491, 325,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=132 */
%   | else if ( tempadvisedby(B, Q) )
%   | | then return -0.01940208530865097;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | | else return 0.12777350847835267;  // std dev = 0,444, 293,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=79 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( tempadvisedby(F, B), advisedby(G, B) )
%   | then return 0.4945157765297913;  // std dev = 0,448, 310,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=224 */
%   | else if ( advisedby(H, B), advisedby(H, I), tempadvisedby(J, I) )
%   | | then return 0.544396607953745;  // std dev = 0,412, 120,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=94 */
%   | | else if ( advisedby(K, B) )
%   | | | then return 0.3433051115719201;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.4789450747501856;  // std dev = 0,457, 27,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   | | | | else return 0.5122951893449782;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   else if ( tempadvisedby(B, M) )
%   | then return -0.017056653858682304;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | else if ( advisedby(B, N), tempadvisedby(P, N) )
%   | | then return 0.22012456903925498;  // std dev = 0,488, 341,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=135 */
%   | | else if ( tempadvisedby(Q, B) )
%   | | | then return 0.34187244456175675;  // std dev = 0,500, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.10165892143008574;  // std dev = 0,439, 281,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=73 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( tempadvisedby(F, B), advisedby(G, B) )
%   | then return 0.39623380655376056;  // std dev = 0,448, 310,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=224 */
%   | else if ( advisedby(H, B), advisedby(H, I), tempadvisedby(J, I) )
%   | | then return 0.432213645291734;  // std dev = 0,412, 120,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=94 */
%   | | else if ( advisedby(K, B) )
%   | | | then return 0.28320803764077385;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.384884220196568;  // std dev = 0,457, 27,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   | | | | else return 0.409122178401438;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   else if ( tempadvisedby(B, M) )
%   | then return -0.015021670214677738;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | else if ( advisedby(B, N), tempadvisedby(P, N) )
%   | | then if ( projectmember(Q, N) )
%   | | | then return 0.010123859622725488;  // std dev = 0,390, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.19459801388884054;  // std dev = 0,491, 325,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=132 */
%   | | else return 0.09597514048156625;  // std dev = 0,443, 293,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=79 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( tempadvisedby(F, B), advisedby(G, B) )
%   | then return 0.30398007531127647;  // std dev = 0,448, 310,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=224 */
%   | else if ( advisedby(H, B), advisedby(H, I), tempadvisedby(J, I) )
%   | | then return 0.3286852127729554;  // std dev = 0,412, 120,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=94 */
%   | | else if ( advisedby(K, B) )
%   | | | then return 0.22544567121688758;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.29620566565522705;  // std dev = 0,457, 27,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   | | | | else return 0.3128120929628695;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   else if ( advisedby(B, M), tempadvisedby(N, M) )
%   | then return 0.15320628308044346;  // std dev = 0,488, 341,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=135 */
%   | else if ( yearsinprogram(B, P), yearsinprogram(Q, P), tempadvisedby(Q, R) )
%   | | then return -0.019800119856279955;  // std dev = 0,349, 105,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=15 */
%   | | else if ( inphase(B, S) )
%   | | | then return 0.08840229669862433;  // std dev = 0,446, 142,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=39 */
%   | | | else return 0.13512236603271632;  // std dev = 0,467, 95,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=31 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), tempadvisedby(E, D) )
%   | then if ( projectmember(F, D) )
%   | | then return -0.01497506569557709;  // std dev = 0,390, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.1308283059105454;  // std dev = 0,491, 325,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=132 */
%   | else return 0.03562185004468702;  // std dev = 0,410, 247,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=54 */
%   else if ( tempadvisedby(G, B) )
%   | then return 0.22902651480629227;  // std dev = 0,450, 349,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=249 */
%   | else if ( advisedby(H, B), advisedby(H, I), projectmember(J, I) )
%   | | then return -0.1306741429954656;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( advisedby(K, B), advisedby(K, L), tempadvisedby(M, L) )
%   | | | then return 0.23180437081446043;  // std dev = 0,423, 140,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=101 */
%   | | | else if ( hasposition(B, N), hasposition(P, N), projectmember(Q, P) )
%   | | | | then if ( advisedby(R, B) )
%   | | | | | then return 0.17486595617559328;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | | | else return 0.23504595423579247;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   | | | | else return 0.13240278008145778;  // std dev = 0,474, 50,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D) )
%   | then if ( tempadvisedby(E, D) )
%   | | then return 0.09850596841823471;  // std dev = 0,487, 341,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=135 */
%   | | else return 0.058379260624052014;  // std dev = 0,438, 127,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=33 */
%   | else return 5.001407260857381E-4;  // std dev = 0,377, 120,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=21 */
%   else if ( tempadvisedby(F, B) )
%   | then if ( advisedby(G, B), inphase(F, H), inphase(G, H) )
%   | | then return 0.0806349017379426;  // std dev = 0,482, 57,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   | | else return 0.19024636253494048;  // std dev = 0,442, 292,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=213 */
%   | else if ( advisedby(I, B), advisedby(I, J), tempadvisedby(K, J) )
%   | | then return 0.15281160062347957;  // std dev = 0,420, 153,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=102 */
%   | | else if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | then if ( advisedby(P, B) )
%   | | | | then return 0.13341907704620704;  // std dev = 0,498, 61,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=33 */
%   | | | | else return 0.1766978343362812;  // std dev = 0,436, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   | | | else return 0.10977962735214156;  // std dev = 0,474, 50,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 9.094305830693578E-4;  // std dev = 0,404, 174,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=39 */
%   else if ( inphase(B, F) )
%   | then if ( advisedby(B, G), tempadvisedby(H, G) )
%   | | then return 0.08710291669742513;  // std dev = 0,491, 272,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=111 */
%   | | else if ( advisedby(B, I) )
%   | | | then return 0.06872799975234566;  // std dev = 0,451, 95,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | | | else return 0.04945991731799183;  // std dev = 0,436, 47,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( tempadvisedby(J, B), advisedby(K, B) )
%   | | then if ( inphase(J, L), inphase(K, L) )
%   | | | then return 0.060777776242579115;  // std dev = 0,482, 57,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   | | | else return 0.14648008246745686;  // std dev = 0,440, 265,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=194 */
%   | | else if ( hasposition(B, M), hasposition(N, M), projectmember(P, N) )
%   | | | then return 0.13368123794343567;  // std dev = 0,444, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | | | else if ( professor(B) )
%   | | | | then return -0.03186811080645421;  // std dev = 0,406, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | | else return 0.1307039301138634;  // std dev = 0,486, 42,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 7.569297275132851E-4;  // std dev = 0,404, 174,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=39 */
%   else if ( inphase(B, F) )
%   | then if ( advisedby(B, G), tempadvisedby(H, G) )
%   | | then return 0.06785289866529631;  // std dev = 0,491, 272,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=111 */
%   | | else return 0.05171055868072283;  // std dev = 0,446, 142,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=39 */
%   | else if ( tempadvisedby(I, B), advisedby(J, B) )
%   | | then if ( inphase(I, K), inphase(J, K) )
%   | | | then return 0.04595634022852114;  // std dev = 0,482, 57,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   | | | else return 0.11186311483684303;  // std dev = 0,440, 265,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=194 */
%   | | else if ( advisedby(L, B), advisedby(L, M), projectmember(N, M) )
%   | | | then return -0.12907799862709746;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else if ( advisedby(P, B), advisedby(P, Q), tempadvisedby(R, Q) )
%   | | | | then return 0.11657758908695587;  // std dev = 0,422, 140,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=101 */
%   | | | | else if ( professor(B) )
%   | | | | | then return 0.07153180207246823;  // std dev = 0,466, 139,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=85 */
%   | | | | | else return 0.10539041944787095;  // std dev = 0,486, 42,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 6.299467774310126E-4;  // std dev = 0,404, 174,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=39 */
%   else if ( inphase(B, F) )
%   | then if ( advisedby(B, G) )
%   | | then if ( tempadvisedby(H, G) )
%   | | | then return 0.05247947791145009;  // std dev = 0,491, 272,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=111 */
%   | | | else return 0.04767180084689745;  // std dev = 0,451, 95,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | | else return 0.032428132515590395;  // std dev = 0,436, 47,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( tempadvisedby(I, B), advisedby(J, B) )
%   | | then if ( inphase(I, K), inphase(J, K) )
%   | | | then return 0.03484982940213926;  // std dev = 0,482, 57,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   | | | else return 0.08621741032944451;  // std dev = 0,440, 265,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=194 */
%   | | else if ( hasposition(B, L), hasposition(M, L), projectmember(N, M) )
%   | | | then return 0.0810005189621633;  // std dev = 0,444, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | | | else if ( professor(B) )
%   | | | | then return -0.03367152740106675;  // std dev = 0,403, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | | else return 0.08386229093263266;  // std dev = 0,486, 42,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 5.242286715925148E-4;  // std dev = 0,404, 174,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=39 */
%   else if ( inphase(B, F) )
%   | then if ( advisedby(B, G) )
%   | | then if ( tempadvisedby(H, G) )
%   | | | then return 0.040379960543810135;  // std dev = 0,491, 272,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=111 */
%   | | | else return 0.03895500889244092;  // std dev = 0,451, 95,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | | else return 0.026760805169900096;  // std dev = 0,436, 47,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( tempadvisedby(I, B), advisedby(J, B) )
%   | | then if ( inphase(I, K), inphase(J, K) )
%   | | | then return 0.02649246370500372;  // std dev = 0,482, 57,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   | | | else return 0.06700423525581979;  // std dev = 0,440, 265,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=194 */
%   | | else if ( advisedby(L, B), advisedby(L, M), projectmember(N, M) )
%   | | | then return -0.10372687017833758;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else if ( advisedby(P, B), advisedby(P, Q), tempadvisedby(R, Q) )
%   | | | | then return 0.07749216581988062;  // std dev = 0,422, 140,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=101 */
%   | | | | else return 0.04368993565822058;  // std dev = 0,470, 181,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=101 */
Results
   AUC ROC   = 0.558634
   AUC PR    = 0.558272
   CLL	      = -0.703916
   Precision = 0.582609 at threshold = 0.5
   Recall    = 0.598214
   F1        = 0.590308


Total learning time: 270.598 seconds
Total inference time: 0.758 seconds
AUC ROC: 0.558634


Dataset: 1, Run: 1, Fold: 5, Type: scratch, Time: 00:35:49
{'AUC ROC': 0.558634, 'AUC PR': 0.558272, 'F1': 0.590308, 'Recall': 0.598214, 'Learning time': 270.598, 'Inference time': 0.758, 'Precision': [0.582609, 0.5], 'CLL': -0.703916}


Start learning from source dataset


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(F, I), student(I) )
%   | | | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(K, B), tempadvisedby(L, B), publication(M, L) )
%   | | | then return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.7504566274072042;  // std dev = 0,310, 65,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=58 */
%   else return -0.14185106490048766;  // std dev = 7,74e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.7327320324206608;  // std dev = 0,029, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tempadvisedby(E, B), publication(F, E) )
%   | | | then if ( publication(F, B), inphase(A, G), inphase(E, G) )
%   | | | | then return 0.4641150718358009;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.2081431306380183;  // std dev = 1,077, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | | then if ( publication(J, B), hasposition(B, K), hasposition(I, K) )
%   | | | | | then if ( tempadvisedby(L, B) )
%   | | | | | | then return 0.0039077449241489625;  // std dev = 0,346, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | | | | else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.44724072168269985;  // std dev = 1,135, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else return 0.624020537879818;  // std dev = 0,321, 60,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=53 */
%   else return -0.12544463852839144;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A), publication(D, E), professor(E) )
%   | then if ( publication(D, B) )
%   | | then return 0.5553664367462842;  // std dev = 1,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( publication(F, B), hasposition(E, C) )
%   | | | then if ( tempadvisedby(G, B) )
%   | | | | then return -0.019171398969606332;  // std dev = 0,329, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( hasposition(E, C) )
%   | | | | then return 0.569365528175868;  // std dev = 0,060, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3098406685000664;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(H, B), hasposition(I, C), projectmember(J, I) )
%   | | then return 0.5136893398625016;  // std dev = 0,294, 56,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   | | else if ( publication(K, B) )
%   | | | then return 0.1048040574780964;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.594957644185533;  // std dev = 0,036, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1075963687224823;  // std dev = 0,080, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583102;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then if ( tempadvisedby(I, E), publication(F, E) )
%   | | | | | then return 0.05669315768581042;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.13936125968714733;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.11914890490746428;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.428504898739327;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.24216416839390886;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( projectmember(K, B) )
%   | | | then return 0.4389205233240669;  // std dev = 0,022, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3568410740260006;  // std dev = 0,333, 67,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=57 */
%   else return -0.10202795692535484;  // std dev = 6,23e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A), publication(D, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | then if ( publication(G, B), hasposition(F, C) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then if ( tempadvisedby(I, F), publication(G, F) )
%   | | | | | then return 0.04961260007726423;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.12348516596867566;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.09841340278401867;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( hasposition(F, C) )
%   | | | | then return 0.32852133493642327;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.18482329241088583;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(J, B), hasposition(K, C), projectmember(L, K) )
%   | | | then return 0.3011552873013875;  // std dev = 0,292, 56,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   | | | else return 0.1990621124348106;  // std dev = 0,374, 14,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.09007411604848731;  // std dev = 0,076, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), publication(E, G) )
%   | | | then return -0.08005698667414793;  // std dev = 0,419, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else if ( tempadvisedby(H, B), publication(E, I), student(I) )
%   | | | | then return 0.02913731662844421;  // std dev = 0,358, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( publication(D, J), professor(J) )
%   | | | | | then if ( publication(E, J) )
%   | | | | | | then return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.1431485694842951;  // std dev = 1,165, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | | else return 0.3216579672185379;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(K, B), publication(L, K) )
%   | | | then return 0.04181713467882634;  // std dev = 0,491, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.23156983628943112;  // std dev = 0,284, 64,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=57 */
%   else return -0.08572443240105442;  // std dev = 1,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.20975771563253545;  // std dev = 5,96e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), tempadvisedby(F, B), publication(G, B) )
%   | | then if ( publication(E, H), publication(G, H) )
%   | | | then return -0.06921464966856314;  // std dev = 0,417, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.11732593319532177;  // std dev = 0,436, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(I, B), hasposition(J, C), projectmember(K, J) )
%   | | | then if ( tempadvisedby(L, B), publication(I, M), inphase(M, N) )
%   | | | | then if ( inphase(L, N) )
%   | | | | | then return 0.03495911840265695;  // std dev = 0,446, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | | | else return 0.22966717626269745;  // std dev = 0,237, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | | else return 0.207173369342456;  // std dev = 0,276, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | | else if ( publication(P, B) )
%   | | | | then return -0.08504684556540731;  // std dev = 0,503, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | else return 0.21058493327942138;  // std dev = 0,213, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.07732834816407759;  // std dev = 0,075, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | then if ( publication(G, B), hasposition(F, C) )
%   | | | then if ( publication(G, F), publication(G, H), inphase(H, I) )
%   | | | | then return 0.3091582771727986;  // std dev = 0,937, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return -0.11867233367638934;  // std dev = 0,281, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else if ( hasposition(F, C) )
%   | | | | then return 0.1849426559626245;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.07211529335249407;  // std dev = 1,091, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(J, B) )
%   | | | then if ( tempadvisedby(K, B), publication(L, K) )
%   | | | | then return 0.01592815719627681;  // std dev = 0,484, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.14490963243641056;  // std dev = 0,286, 55,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=49 */
%   | | | else return 0.22501256831608435;  // std dev = 0,045, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07156590051941947;  // std dev = 0,075, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), publication(E, G) )
%   | | | then return -0.07895080670578992;  // std dev = 0,412, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.08797418423999312;  // std dev = 0,382, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(H, B), inphase(H, I), inphase(A, I) )
%   | | | then if ( publication(J, B), publication(J, K), inphase(K, I) )
%   | | | | then return -0.0728085535871672;  // std dev = 0,969, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else return 0.18431602642726594;  // std dev = 0,055, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else if ( tempadvisedby(L, B) )
%   | | | | then return 0.1336308254136006;  // std dev = 0,267, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | | | else if ( publication(M, B), publication(M, N), student(N) )
%   | | | | | then return 0.15791123239572366;  // std dev = 0,310, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | | | | else return 0.01307442456225346;  // std dev = 0,402, 16,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   else return -0.06903469369425688;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.13400703000801106;  // std dev = 1,83e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(D, G), publication(E, G) )
%   | | | then return -0.06841583105535423;  // std dev = 0,411, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.07513261968195081;  // std dev = 0,376, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(H, B), publication(H, I), student(I) )
%   | | | then if ( tempadvisedby(J, B), inphase(I, K), inphase(A, K) )
%   | | | | then if ( tempadvisedby(I, B) )
%   | | | | | then return 0.09582789505903781;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | else if ( publication(L, J), publication(L, M), tempadvisedby(N, M) )
%   | | | | | | then return 0.09223034837873763;  // std dev = 0,798, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | | | else return -0.06281614169826333;  // std dev = 0,398, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | | else return 0.14629832912184804;  // std dev = 0,251, 40,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=35 */
%   | | | else return 0.07061758071566675;  // std dev = 0,318, 27,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   else return -0.06472775794802503;  // std dev = 1,29e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Predicates from source: ['advisedby(person,person).', 'publication(title,person).', 'professor(person).', 'hasposition(person,faculty).', 'projectmember(project,person).', 'student(person).', 'inphase(person,prequals).', 'tempadvisedby(person,person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(F, B), hasposition(B, G), hasposition(E, G)', 'true,false,true,false': 'tempadvisedby(J, B)', 'true,false,true,true,true': 'publication(F, I), student(I)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false': 'publication(K, B), tempadvisedby(L, B), publication(M, L)'}, {'true,false,false,false': [0.31, 7, 58], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'false': [7.74e-08, 90, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'projectmember(D, B)', 'true,false,false,true': 'publication(F, B), inphase(A, G), inphase(E, G)', 'true,false,false,false': 'publication(H, A), publication(H, I), professor(I)', 'true,false,false,false,true,true': 'tempadvisedby(L, B)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false': 'tempadvisedby(E, B), publication(F, E)', 'true,false,false,false,true': 'publication(J, B), hasposition(B, K), hasposition(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,true,false,true': 'tempadvisedby(G, B)', 'true,false': 'publication(H, B), hasposition(I, C), projectmember(J, I)', 'true,true,false,false': 'hasposition(E, C)', 'true,true,false': 'publication(F, B), hasposition(E, C)', 'true,true': 'publication(D, B)', 'true': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'publication(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'false': [0.08, 91, 1], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(F, B), hasposition(B, G), hasposition(E, G)', 'true,false,true,false': 'tempadvisedby(J, B)', 'true,false,true,true,true': 'tempadvisedby(I, E), publication(F, E)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false': 'projectmember(K, B)'}, {'true,false,false,false': [0.333, 10, 57], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'false': [6.23e-08, 90, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(E, A), publication(E, F), professor(F)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(G, B), hasposition(F, C)', 'true,false,true,false': 'hasposition(F, C)', 'true,false,true,true,true': 'tempadvisedby(I, F), publication(G, F)', 'true': 'publication(D, A), publication(D, B)', 'true,false,false': 'publication(J, B), hasposition(K, C), projectmember(L, K)'}, {'true,false,false,false': [0.374, 3, 11], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'false': [0.076, 91, 1], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B)', 'true,false,true,false,false,true': 'publication(E, J)', 'true,false,true': 'tempadvisedby(F, B), publication(D, G), publication(E, G)', 'true,false,true,false': 'tempadvisedby(H, B), publication(E, I), student(I)', 'true,false,true,false,false': 'publication(D, J), professor(J)', 'true': 'publication(C, B), publication(C, A)', 'true,false,false': 'tempadvisedby(K, B), publication(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,false,true': [0.491, 3, 4], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,true,false,false,true,false': [1.165, 3, 3], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,true': [0.419, 6, 1]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false,false,false': 'publication(P, B)', 'true,false': 'publication(E, A), tempadvisedby(F, B), publication(G, B)', 'true,false,false,true': 'tempadvisedby(L, B), publication(I, M), inphase(M, N)', 'true,false,true': 'publication(E, H), publication(G, H)', 'true,false,false,true,true': 'inphase(L, N)', 'true': 'publication(D, B), publication(D, A)', 'true,false,false': 'publication(I, B), hasposition(J, C), projectmember(K, J)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['advisedby(A, B)', {'': 'professor(B), student(A), hasposition(B, C)', 'true,false': 'publication(E, A), publication(E, F), professor(F)', 'true,false,true,true': 'publication(G, F), publication(G, H), inphase(H, I)', 'true,false,true': 'publication(G, B), hasposition(F, C)', 'true,false,true,false': 'hasposition(F, C)', 'true': 'publication(D, B), publication(D, A)', 'true,false,false': 'publication(J, B)', 'true,false,false,true': 'tempadvisedby(K, B), publication(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,false,false,false': [0.045, 0, 8], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,true,false,false': [1.091, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false,false,false': 'tempadvisedby(L, B)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false,true': 'publication(J, B), publication(J, K), inphase(K, I)', 'true,false,true': 'publication(D, G), publication(E, G)', 'true,false,false,false,false': 'publication(M, B), publication(M, N), student(N)', 'true': 'publication(C, B), publication(C, A)', 'true,false,false': 'tempadvisedby(H, B), inphase(H, I), inphase(A, I)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(E, B), tempadvisedby(F, B)', 'true,false,false,true': 'tempadvisedby(J, B), inphase(I, K), inphase(A, K)', 'true,false,true': 'publication(D, G), publication(E, G)', 'true,false,false,true,true,false': 'publication(L, J), publication(L, M), tempadvisedby(N, M)', 'true,false,false,true,true': 'tempadvisedby(I, B)', 'true': 'publication(C, B), publication(C, A)', 'true,false,false': 'publication(H, B), publication(H, I), student(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,false,false,false': [0.318, 5, 22], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 



Best mapping found: ['projectmember(A,B) -> genre(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'movie(K, B), movie(M, L)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [7.74e-08, 90, 0], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,false,false': [0.31, 7, 58], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(F, E)', 'true,false,false,false,true': 'movie(J, B), genre(B, K), genre(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true': 'movie(D, B)', 'true,true,false,false': 'genre(E, C)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,false': 'movie(H, B), genre(I, C), genre(I, J)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'false': [0.08, 91, 1], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'genre(B, K)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [6.23e-08, 90, 0], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,false,false': [0.333, 10, 57], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, A), movie(D, B)', 'true,false,false': 'movie(J, B), genre(K, C), genre(K, L)'}, {'false': [0.076, 91, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,false,false': [0.374, 3, 11], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,true,false,false,true': 'movie(E, J)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,true,false': 'movie(E, I), actor(I)', 'true,false,true,false,false': 'movie(D, J), director(J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,true,true': [0.419, 6, 1], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,false,true': [0.491, 3, 4], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,true,false': [1.165, 3, 3]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true,true': 'movie(N, L)', 'true,false,false,true': 'movie(I, M), movie(N, M)', 'true,false,true': 'movie(E, H), movie(G, H)', 'true,false': 'movie(E, A), movie(G, B)', 'true,false,false,false': 'movie(P, B)', 'true,false,false': 'movie(I, B), genre(J, C), genre(J, K)', 'true': 'movie(D, B), movie(D, A)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)', 'true,false,false': 'movie(J, B)', 'true,false,false,true': 'movie(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,false,false': [0.045, 0, 8], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1], 'true,false,true,false,false': [1.091, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)', 'true,false,false,true': 'movie(J, B), movie(J, K), movie(I, K)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(I, H), movie(I, A)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,false,true': 'movie(K, I), movie(K, A)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,false,true,true,false': 'movie(L, J), movie(L, M)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(H, B), movie(H, I), actor(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,false': [0.318, 5, 22], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,false;movie(K, B), movie(M, L).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '1;true,false,false,false;movie(H, A), movie(H, I), director(I).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(F, E).;true;true', '1;true,false,false,false,true;movie(J, B), genre(B, K), genre(I, K).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,true;movie(D, B).;false;true', '2;true,true,false,false;genre(E, C).;false;false', '2;true,true,false;movie(F, B), genre(E, C).;false;true', '2;true,false;movie(H, B), genre(I, C), genre(I, J).;false;true', '2;true;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(K, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false;genre(B, K).;false;false', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true,false;movie(E, A), movie(E, F), director(F).;true;true', '4;true,false,true;movie(G, B), genre(F, C).;false;true', '4;true,false,true,false;genre(F, C).;false;false', '4;true;movie(D, A), movie(D, B).;false;true', '4;true,false,false;movie(J, B), genre(K, C), genre(K, L).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;true', '5;true,false,true,false,false,true;movie(E, J).;false;false', '5;true,false,true;movie(D, G), movie(E, G).;false;true', '5;true,false,true,false;movie(E, I), actor(I).;false;true', '5;true,false,true,false,false;movie(D, J), director(J).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,false;movie(L, K).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false,false,true,true;movie(N, L).;false;false', '6;true,false,false,true;movie(I, M), movie(N, M).;true;false', '6;true,false,true;movie(E, H), movie(G, H).;false;false', '6;true,false;movie(E, A), movie(G, B).;true;true', '6;true,false,false,false;movie(P, B).;false;false', '6;true,false,false;movie(I, B), genre(J, C), genre(J, K).;true;true', '6;true;movie(D, B), movie(D, A).;false;true', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;true', '7;true,false,true,true;movie(G, F), movie(G, H), movie(I, H).;false;false', '7;true,false,true;movie(G, B), genre(F, C).;true;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '7;true,false,false;movie(J, B).;true;false', '7;true,false,false,true;movie(L, K).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '8;true,false,false,true;movie(J, B), movie(J, K), movie(I, K).;false;false', '8;true,false,true;movie(D, G), movie(E, G).;false;false', '8;true,false;movie(D, A), movie(E, B).;true;true', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,false;movie(I, H), movie(I, A).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), movie(E, B).;true;true', '9;true,false,false,true;movie(K, I), movie(K, A).;false;false', '9;true,false,true;movie(D, G), movie(E, G).;false;false', '9;true,false,false,true,true,false;movie(L, J), movie(L, M).;false;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false;movie(H, B), movie(H, I), actor(I).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048793;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(E, F) )
%   | | | then if ( movie(E, B), movie(G, A), movie(G, F) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, E), director(E) )
%   | then if ( movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 3,77e-07, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, B), genre(E, C) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else if ( genre(E, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.006135014092653918;  // std dev = 4,703, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44273649687194544;  // std dev = 0,969, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.10798148681434316;  // std dev = 0,021, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11170616192147184;  // std dev = 1,75e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3152419163318843;  // std dev = 0,000, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09215568174614606;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.013997056103577682;  // std dev = 3,858, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.28739247218175457;  // std dev = 1,381, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.08664694900041697;  // std dev = 0,014, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else if ( movie(E, G), actor(G) )
%   | | | | then return -0.094796632470981;  // std dev = 0,030, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09982828895639072;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.2012725732345965;  // std dev = 0,000, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then if ( movie(E, G), movie(F, G) )
%   | | | then return -0.07845923583191337;  // std dev = 0,000598, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07787200712887965;  // std dev = 0,000514, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.016225862149608455;  // std dev = 3,323, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.1708475717329867;  // std dev = 9,42e-08, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then if ( movie(G, F), movie(G, H), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07294947805438377;  // std dev = 0,000669, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07255487193017952;  // std dev = 0,000666, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.01449254314136312;  // std dev = 3,340, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19137423956235003;  // std dev = 1,666, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.0706297159472067;  // std dev = 0,021, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0817515429951755;  // std dev = 0,043, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08869447384376003;  // std dev = 1,07e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16488636053535885;  // std dev = 1,515, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.0661348261492237;  // std dev = 0,019, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07582860860425003;  // std dev = 0,040, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08178219231990243;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119687
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.783 seconds
Total inference time: 0.573 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119687
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.573 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.0, 19, 0], 'false': [0.0, 300, 0], 'true,true': [1.05e-06, 0, 326], 'true,false,true,true': [0.0, 7, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(E, F)', 'true,false,false,true': 'movie(E, B), movie(G, A), movie(G, F)'}, {'true,false,false,true,false': [5.27e-09, 11, 0], 'true,false,false,true,true': [0.0, 1, 0], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 300, 0], 'true,true': [0.0, 0, 326]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,true': 'movie(D, B)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,true,false,false': 'genre(E, C)'}, {'true,true,true': [3.77e-07, 0, 267], 'true,false': [0.0, 0, 0], 'false': [4.703, 312, 59], 'true,true,false,false,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.021, 19, 0], 'false': [1.75e-07, 300, 0], 'true,true': [0.969, 0, 326], 'true,false,true,true': [0.0, 7, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false': 'genre(F, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(D, A), movie(D, B)', 'true,false,true': 'movie(G, B), genre(F, C)'}, {'false': [3.858, 312, 59], 'true,true': [0.0, 0, 267], 'true,false,true,true': [0.0, 7, 0], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,false,false': [2.63e-09, 7, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false': 'movie(E, G), actor(G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'false': [0.0, 300, 0], 'true,true': [1.381, 0, 326], 'true,false,true,true': [0.014, 9, 0], 'true,false,true,false,true': [0.03, 17, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true': 'movie(D, B), movie(D, A)', 'true,false,true': 'movie(E, G), movie(F, G)'}, {'true,false,true,false': [0.000514, 6, 0], 'false': [3.323, 312, 59], 'true,true': [0.0, 0, 267], 'true,false,true,true': [0.000598, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)'}, {'false': [3.34, 312, 59], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,false,false': [0.000666, 7, 0], 'true,true': [9.42e-08, 0, 267], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,true,false': [0.000669, 7, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.043, 17, 0], 'false': [1.07e-07, 300, 0], 'true,true': [1.666, 0, 326], 'true,false,true,true': [0.021, 9, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.04, 17, 0], 'false': [0.0, 300, 0], 'true,true': [1.515, 0, 326], 'true,false,true,true': [0.019, 9, 0], 'true,false,false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '2;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true;movie(D, A), movie(D, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,true;movie(D, F), movie(E, F).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;false', '7;true,false,true;movie(G, B), genre(F, C).;false;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false,false', 0)]
Tree #3: [('true,false', 0), ('true,true,false,false,true', 0), ('false', 0.8409703504043127)]
Tree #4: [('true,false,false', 0)]
Tree #5: [('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8409703504043127)]
Tree #6: [('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false,false', 0), ('false', 0.8409703504043127)]
Tree #8: [('true,false,true,true,true', 0), ('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8409703504043127)]
Tree #9: [('true,false,false', 0)]
Tree #10: [('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048793;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.12544463852839194;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.5221011007706301;  // std dev = 2,435, 281,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=267 */
%   else return -0.006135014092653918;  // std dev = 4,703, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44937996944365893;  // std dev = 0,912, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14620821364107445;  // std dev = 0,163, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11170616192147184;  // std dev = 1,75e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32101669303383007;  // std dev = 2,67e-07, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else return -0.15559144520558826;  // std dev = 1,05e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.014147093119822743;  // std dev = 3,846, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.29033194438461335;  // std dev = 1,342, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.13184075411931007;  // std dev = 0,037, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11068746775008813;  // std dev = 0,078, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09981480704924897;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20416684133439084;  // std dev = 0,000, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else return -0.12241811327450249;  // std dev = 0,004, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.01642021476608092;  // std dev = 3,306, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.1729848642196506;  // std dev = 3,48e-07, 267,000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.1098626663664621;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.1098626663664621;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.014669719228005973;  // std dev = 3,323, 371,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19232103679688448;  // std dev = 1,640, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09280835204758663;  // std dev = 0,037, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.08865341514645045;  // std dev = 1,23e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1655552871766148;  // std dev = 1,490, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08528856771427099;  // std dev = 0,035, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.08174712844806364;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.121073
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.432 seconds
Total inference time: 0.529 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 15.317
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096667
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.583 seconds
AUC ROC: 1.0
Dataset: 2, Run: 1, Fold: 1, Type: transfer, Time: 00:36:35
{'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 7.783, 'Inference time': 0.662, 'Precision': [1.0, 0.5], 'CLL': -0.096667}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Mapping results': {'Generating mappings time': 0.5430712699890137, 'Generating paths time': 2.643554449081421, 'Knowledge compiling time': 0.01966691017150879, 'Total time': 3.937080144882202, 'Possible mappings': 2592, 'Finding best mapping': 0.7307806015014648}, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 15.317, 'Inference time': 0.583, 'Precision': [1.0, 0.5], 'CLL': -0.096667}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995101;  // std dev = 8,68e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.8473381242886986;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.1418510649004879;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.719473412210956;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.7108393767079625;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.12544463852839188;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5519741001747521;  // std dev = 0,078, 328,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=326 */
%   else return -0.1123163781936069;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41833881693994535;  // std dev = 3,32e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.4122669243622543;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.10159632948783658;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32127136271329754;  // std dev = 2,92e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.3160498188030004;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.09269127618926047;  // std dev = 1,44e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2555539910296006;  // std dev = 8,43e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.25063482519713787;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21002734105847687;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.20519383655523002;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.07877675473109147;  // std dev = 3,65e-08, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17729422993823277;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.1724668352942577;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.07324622576333693;  // std dev = 1,03e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1528938412642659;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.14804530907112382;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.0684269778442029;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13412410865834812;  // std dev = 4,71e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | else return 0.12924708947878993;  // std dev = 0,103, 185,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   else return -0.06419184008202604;  // std dev = 1,00e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.053 seconds
Total inference time: 0.546 seconds
AUC ROC: 1.0


Dataset: 2, Run: 1, Fold: 1, Type: scratch, Time: 00:36:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 9.053, 'Inference time': 0.546, 'Precision': [1.0, 0.5], 'CLL': -0.096433}


Best mapping found: ['projectmember(A,B) -> genre(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'movie(K, B), movie(M, L)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [7.74e-08, 90, 0], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,false,false': [0.31, 7, 58], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(F, E)', 'true,false,false,false,true': 'movie(J, B), genre(B, K), genre(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true': 'movie(D, B)', 'true,true,false,false': 'genre(E, C)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,false': 'movie(H, B), genre(I, C), genre(I, J)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'false': [0.08, 91, 1], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'genre(B, K)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [6.23e-08, 90, 0], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,false,false': [0.333, 10, 57], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, A), movie(D, B)', 'true,false,false': 'movie(J, B), genre(K, C), genre(K, L)'}, {'false': [0.076, 91, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,false,false': [0.374, 3, 11], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,true,false,false,true': 'movie(E, J)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,true,false': 'movie(E, I), actor(I)', 'true,false,true,false,false': 'movie(D, J), director(J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,true,true': [0.419, 6, 1], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,false,true': [0.491, 3, 4], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,true,false': [1.165, 3, 3]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true,true': 'movie(N, L)', 'true,false,false,true': 'movie(I, M), movie(N, M)', 'true,false,true': 'movie(E, H), movie(G, H)', 'true,false': 'movie(E, A), movie(G, B)', 'true,false,false,false': 'movie(P, B)', 'true,false,false': 'movie(I, B), genre(J, C), genre(J, K)', 'true': 'movie(D, B), movie(D, A)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)', 'true,false,false': 'movie(J, B)', 'true,false,false,true': 'movie(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,false,false': [0.045, 0, 8], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1], 'true,false,true,false,false': [1.091, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)', 'true,false,false,true': 'movie(J, B), movie(J, K), movie(I, K)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(I, H), movie(I, A)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,false,true': 'movie(K, I), movie(K, A)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,false,true,true,false': 'movie(L, J), movie(L, M)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(H, B), movie(H, I), actor(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,false': [0.318, 5, 22], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,false;movie(K, B), movie(M, L).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '1;true,false,false,false;movie(H, A), movie(H, I), director(I).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(F, E).;true;true', '1;true,false,false,false,true;movie(J, B), genre(B, K), genre(I, K).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,true;movie(D, B).;false;true', '2;true,true,false,false;genre(E, C).;false;false', '2;true,true,false;movie(F, B), genre(E, C).;false;true', '2;true,false;movie(H, B), genre(I, C), genre(I, J).;false;true', '2;true;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(K, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false;genre(B, K).;false;false', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true,false;movie(E, A), movie(E, F), director(F).;true;true', '4;true,false,true;movie(G, B), genre(F, C).;false;true', '4;true,false,true,false;genre(F, C).;false;false', '4;true;movie(D, A), movie(D, B).;false;true', '4;true,false,false;movie(J, B), genre(K, C), genre(K, L).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;true', '5;true,false,true,false,false,true;movie(E, J).;false;false', '5;true,false,true;movie(D, G), movie(E, G).;false;true', '5;true,false,true,false;movie(E, I), actor(I).;false;true', '5;true,false,true,false,false;movie(D, J), director(J).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,false;movie(L, K).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false,false,true,true;movie(N, L).;false;false', '6;true,false,false,true;movie(I, M), movie(N, M).;true;false', '6;true,false,true;movie(E, H), movie(G, H).;false;false', '6;true,false;movie(E, A), movie(G, B).;true;true', '6;true,false,false,false;movie(P, B).;false;false', '6;true,false,false;movie(I, B), genre(J, C), genre(J, K).;true;true', '6;true;movie(D, B), movie(D, A).;false;true', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;true', '7;true,false,true,true;movie(G, F), movie(G, H), movie(I, H).;false;false', '7;true,false,true;movie(G, B), genre(F, C).;true;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '7;true,false,false;movie(J, B).;true;false', '7;true,false,false,true;movie(L, K).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '8;true,false,false,true;movie(J, B), movie(J, K), movie(I, K).;false;false', '8;true,false,true;movie(D, G), movie(E, G).;false;false', '8;true,false;movie(D, A), movie(E, B).;true;true', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,false;movie(I, H), movie(I, A).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), movie(E, B).;true;true', '9;true,false,false,true;movie(K, I), movie(K, A).;false;false', '9;true,false,true;movie(D, G), movie(E, G).;false;false', '9;true,false,false,true,true,false;movie(L, J), movie(L, M).;false;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false;movie(H, B), movie(H, I), actor(I).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004879;  // std dev = 5,16e-08, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(E, F) )
%   | | | then if ( movie(E, B), movie(G, A), movie(G, F) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, E), director(E) )
%   | then if ( movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 3,77e-07, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, B), genre(E, C) )
%   | | | then return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else if ( genre(E, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.005559505344139268;  // std dev = 4,701, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44286633223149385;  // std dev = 0,967, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.10972989086235926;  // std dev = 0,013, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11176328120599072;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3152138901656707;  // std dev = 2,98e-07, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09200950926659657;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.013585434241144273;  // std dev = 3,855, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2875484117401637;  // std dev = 1,378, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.08684143500254465;  // std dev = 0,014, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else if ( movie(E, G), actor(G) )
%   | | | | then return -0.09312423142996226;  // std dev = 0,027, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09991189330229563;  // std dev = 9,66e-08, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20123114023965788;  // std dev = 2,27e-07, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then if ( movie(E, G), movie(F, G) )
%   | | | then return -0.07865661144906798;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07802400540738051;  // std dev = 0,000618, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.015918185018983694;  // std dev = 3,319, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17081693091041159;  // std dev = 0,000, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then if ( movie(G, F), movie(G, H), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07301461975548543;  // std dev = 0,000624, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07225873142803897;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.014215027029972321;  // std dev = 3,336, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1915426101177423;  // std dev = 1,662, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.07075453937681433;  // std dev = 0,020, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07951925792098054;  // std dev = 0,039, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08881025504400976;  // std dev = 1,44e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16501488973439674;  // std dev = 1,511, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.06624450051833418;  // std dev = 0,019, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0738983606658089;  // std dev = 0,036, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08188105664704301;  // std dev = 1,86e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.724 seconds
Total inference time: 0.651 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.651 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.0, 10, 0], 'false': [5.16e-08, 302, 0], 'true,true': [1.04e-06, 0, 324], 'true,false,true,true': [0.0, 12, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(E, F)', 'true,false,false,true': 'movie(E, B), movie(G, A), movie(G, F)'}, {'true,false,false,true,false': [0.0, 7, 0], 'true,false,false,true,true': [0.0, 1, 0], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 302, 0], 'true,true': [0.0, 0, 324]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,true': 'movie(D, B)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,true,false,false': 'genre(E, C)'}, {'true,true,true': [3.77e-07, 0, 265], 'true,false': [0.0, 0, 0], 'false': [4.701, 310, 59], 'true,true,false,false,true': [0.0, 0, 0], 'true,true,false,true': [9.13e-09, 12, 0], 'true,true,false,false,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.013, 10, 0], 'false': [0.0, 302, 0], 'true,true': [0.967, 0, 324], 'true,false,true,true': [0.0, 12, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false': 'genre(F, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(D, A), movie(D, B)', 'true,false,true': 'movie(G, B), genre(F, C)'}, {'false': [3.855, 310, 59], 'true,true': [2.98e-07, 0, 265], 'true,false,true,true': [5.27e-09, 12, 0], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false': 'movie(E, G), actor(G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'false': [9.66e-08, 302, 0], 'true,true': [1.378, 0, 324], 'true,false,true,true': [0.014, 9, 0], 'true,false,true,false,true': [0.027, 13, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true': 'movie(D, B), movie(D, A)', 'true,false,true': 'movie(E, G), movie(F, G)'}, {'true,false,true,false': [0.000618, 6, 0], 'false': [3.319, 310, 59], 'true,true': [2.27e-07, 0, 265], 'true,false,true,true': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)'}, {'false': [3.336, 310, 59], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 265], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,true,false': [0.000624, 12, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.039, 13, 0], 'false': [1.44e-07, 302, 0], 'true,true': [1.662, 0, 324], 'true,false,true,true': [0.02, 9, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.036, 13, 0], 'false': [1.86e-07, 302, 0], 'true,true': [1.511, 0, 324], 'true,false,true,true': [0.019, 9, 0], 'true,false,false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '2;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true;movie(D, A), movie(D, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,true;movie(D, F), movie(E, F).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;false', '7;true,false,true;movie(G, B), genre(F, C).;false;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false,false', 0)]
Tree #3: [('true,false', 0), ('true,true,false,false,true', 0), ('false', 0.8401084010840109)]
Tree #4: [('true,false,false', 0)]
Tree #5: [('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8401084010840109)]
Tree #6: [('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false,false', 0), ('false', 0.8401084010840109)]
Tree #8: [('true,false,true,true,true', 0), ('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8401084010840109)]
Tree #9: [('true,false,false', 0)]
Tree #10: [('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.1418510649004879;  // std dev = 5,16e-08, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839197;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.5218626395808404;  // std dev = 2,435, 279,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=265 */
%   else return -0.005559505344139268;  // std dev = 4,701, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44954842426442343;  // std dev = 0,910, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1524801006988227;  // std dev = 0,144, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.11176328120599072;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3210319521615518;  // std dev = 2,86e-07, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else return -0.15473801436015358;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.013766411015713428;  // std dev = 3,843, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.29050555764283065;  // std dev = 1,340, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.13119878131037443;  // std dev = 0,037, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1144174839197348;  // std dev = 0,071, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09989561932859123;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20414752833715916;  // std dev = 0,000, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else return -0.12167834020690756;  // std dev = 0,003, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.016144623622266256;  // std dev = 3,302, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17297062251870501;  // std dev = 2,81e-07, 265,000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.10910556435286976;  // std dev = 0,003, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11019537366952309;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.014420404145481416;  // std dev = 3,320, 369,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19249712545479283;  // std dev = 1,636, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09367659303788017;  // std dev = 0,034, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.0887619948184455;  // std dev = 1,56e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16568930757968683;  // std dev = 1,486, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0860246343941296;  // std dev = 0,031, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.08183984992756256;  // std dev = 9,42e-08, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105174
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.394 seconds
Total inference time: 0.585 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 18.354
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096253
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.83 seconds
AUC ROC: 1.0
Dataset: 2, Run: 1, Fold: 2, Type: transfer, Time: 00:37:10
{'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 7.724, 'Inference time': 0.666, 'Precision': [1.0, 0.5], 'CLL': -0.096253}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Mapping results': {'Generating mappings time': 0.535064697265625, 'Generating paths time': 2.749084711074829, 'Knowledge compiling time': 0.02206587791442871, 'Total time': 4.038349390029907, 'Possible mappings': 2592, 'Finding best mapping': 0.7321264743804932}, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 18.354, 'Inference time': 0.83, 'Precision': [1.0, 0.5], 'CLL': -0.096253}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.85814893509951;  // std dev = 9,23e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.8356770249871499;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.14185106490048788;  // std dev = 5,16e-08, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109562;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.7015145912413361;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.12544463852839194;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,26e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.5428546188788582;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.11231637819360689;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830886;  // std dev = 4,54e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.4079705308323158;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.10159632948783659;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601498;  // std dev = 2,80e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.31200248854567314;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.09269127618926046;  // std dev = 1,48e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694904;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.24646572561289223;  // std dev = 0,148, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21703536390842745;  // std dev = 0,122, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(B) )
%   | then return -0.07877675473109143;  // std dev = 3,65e-08, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.7766908013709755;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0787767547310917;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.18242435153785855;  // std dev = 0,107, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.073246225763337;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(B) )
%   | then return -0.07324622576333695;  // std dev = 1,01e-07, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.615335040099477;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333699;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420296;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
%   else if ( actor(A), movie(C, B), movie(C, A) )
%   | then return 0.1567790308048308;  // std dev = 0,095, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420265;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return -0.463678875303485;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06842697784420267;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1320876280722242;  // std dev = 1,38e-07, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | else return 0.13042416703972431;  // std dev = 0,073, 178,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   else return -0.06419184008202601;  // std dev = 1,07e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097025
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.466 seconds
Total inference time: 0.591 seconds
AUC ROC: 1.0


Dataset: 2, Run: 1, Fold: 2, Type: scratch, Time: 00:37:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 8.466, 'Inference time': 0.591, 'Precision': [1.0, 0.5], 'CLL': -0.097025}


Best mapping found: ['projectmember(A,B) -> genre(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'movie(K, B), movie(M, L)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [7.74e-08, 90, 0], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,false,false': [0.31, 7, 58], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(F, E)', 'true,false,false,false,true': 'movie(J, B), genre(B, K), genre(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true': 'movie(D, B)', 'true,true,false,false': 'genre(E, C)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,false': 'movie(H, B), genre(I, C), genre(I, J)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'false': [0.08, 91, 1], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'genre(B, K)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [6.23e-08, 90, 0], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,false,false': [0.333, 10, 57], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, A), movie(D, B)', 'true,false,false': 'movie(J, B), genre(K, C), genre(K, L)'}, {'false': [0.076, 91, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,false,false': [0.374, 3, 11], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,true,false,false,true': 'movie(E, J)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,true,false': 'movie(E, I), actor(I)', 'true,false,true,false,false': 'movie(D, J), director(J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,true,true': [0.419, 6, 1], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,false,true': [0.491, 3, 4], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,true,false': [1.165, 3, 3]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true,true': 'movie(N, L)', 'true,false,false,true': 'movie(I, M), movie(N, M)', 'true,false,true': 'movie(E, H), movie(G, H)', 'true,false': 'movie(E, A), movie(G, B)', 'true,false,false,false': 'movie(P, B)', 'true,false,false': 'movie(I, B), genre(J, C), genre(J, K)', 'true': 'movie(D, B), movie(D, A)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)', 'true,false,false': 'movie(J, B)', 'true,false,false,true': 'movie(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,false,false': [0.045, 0, 8], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1], 'true,false,true,false,false': [1.091, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)', 'true,false,false,true': 'movie(J, B), movie(J, K), movie(I, K)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(I, H), movie(I, A)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,false,true': 'movie(K, I), movie(K, A)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,false,true,true,false': 'movie(L, J), movie(L, M)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(H, B), movie(H, I), actor(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,false': [0.318, 5, 22], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,false;movie(K, B), movie(M, L).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '1;true,false,false,false;movie(H, A), movie(H, I), director(I).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(F, E).;true;true', '1;true,false,false,false,true;movie(J, B), genre(B, K), genre(I, K).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,true;movie(D, B).;false;true', '2;true,true,false,false;genre(E, C).;false;false', '2;true,true,false;movie(F, B), genre(E, C).;false;true', '2;true,false;movie(H, B), genre(I, C), genre(I, J).;false;true', '2;true;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(K, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false;genre(B, K).;false;false', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true,false;movie(E, A), movie(E, F), director(F).;true;true', '4;true,false,true;movie(G, B), genre(F, C).;false;true', '4;true,false,true,false;genre(F, C).;false;false', '4;true;movie(D, A), movie(D, B).;false;true', '4;true,false,false;movie(J, B), genre(K, C), genre(K, L).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;true', '5;true,false,true,false,false,true;movie(E, J).;false;false', '5;true,false,true;movie(D, G), movie(E, G).;false;true', '5;true,false,true,false;movie(E, I), actor(I).;false;true', '5;true,false,true,false,false;movie(D, J), director(J).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,false;movie(L, K).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false,false,true,true;movie(N, L).;false;false', '6;true,false,false,true;movie(I, M), movie(N, M).;true;false', '6;true,false,true;movie(E, H), movie(G, H).;false;false', '6;true,false;movie(E, A), movie(G, B).;true;true', '6;true,false,false,false;movie(P, B).;false;false', '6;true,false,false;movie(I, B), genre(J, C), genre(J, K).;true;true', '6;true;movie(D, B), movie(D, A).;false;true', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;true', '7;true,false,true,true;movie(G, F), movie(G, H), movie(I, H).;false;false', '7;true,false,true;movie(G, B), genre(F, C).;true;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '7;true,false,false;movie(J, B).;true;false', '7;true,false,false,true;movie(L, K).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '8;true,false,false,true;movie(J, B), movie(J, K), movie(I, K).;false;false', '8;true,false,true;movie(D, G), movie(E, G).;false;false', '8;true,false;movie(D, A), movie(E, B).;true;true', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,false;movie(I, H), movie(I, A).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), movie(E, B).;true;true', '9;true,false,false,true;movie(K, I), movie(K, A).;false;false', '9;true,false,true;movie(D, G), movie(E, G).;false;false', '9;true,false,false,true,true,false;movie(L, J), movie(L, M).;false;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false;movie(H, B), movie(H, I), actor(I).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(E, F) )
%   | | | then if ( movie(E, B), movie(G, A), movie(G, F) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, E), director(E) )
%   | then if ( movie(D, B) )
%   | | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, B), genre(E, C) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( genre(E, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07958682844165071;  // std dev = 2,059, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.42522971631615697;  // std dev = 0,485, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.10260518574829076;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10462289826919964;  // std dev = 5,58e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.31903317396206715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09260646663455296;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06755179932258168;  // std dev = 1,741, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.26540140415795;  // std dev = 0,716, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.08567284452382849;  // std dev = 0,004, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else if ( movie(E, G), actor(G) )
%   | | | | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08955689976780536;  // std dev = 3,33e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20707409933163273;  // std dev = 1,46e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then if ( movie(E, G), movie(F, G) )
%   | | | then return -0.07872458928784046;  // std dev = 8,21e-05, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.057867324096630667;  // std dev = 1,551, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17512567565488335;  // std dev = 1,03e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then if ( movie(G, F), movie(G, H), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07322403641522482;  // std dev = 3,62e-05, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07315396260861481;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.05310610069981796;  // std dev = 1,581, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16577704207134744;  // std dev = 0,914, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.06911115390572757;  // std dev = 0,006, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06842839231167575;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07449637695101648;  // std dev = 9,66e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.14469908865891154;  // std dev = 0,851, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.06479541179952668;  // std dev = 0,006, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06419308806632705;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06952014037706901;  // std dev = 9,31e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094949
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.838 seconds
Total inference time: 1.102 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094949
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 1.102 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.0, 3, 0], 'false': [0.0, 193, 0], 'true,true': [1.08e-06, 0, 204], 'true,false,true,true': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(E, F)', 'true,false,false,true': 'movie(E, B), movie(G, A), movie(G, F)'}, {'true,false,false,true,false': [0.0, 0, 0], 'true,false,false,true,true': [0.0, 1, 0], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 193, 0], 'true,true': [0.0, 0, 204]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,true': 'movie(D, B)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,true,false,false': 'genre(E, C)'}, {'true,true,true': [6.19e-07, 0, 194], 'true,false': [0.0, 0, 0], 'false': [2.059, 194, 10], 'true,true,false,false,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.002, 3, 0], 'false': [5.58e-08, 193, 0], 'true,true': [0.485, 0, 204], 'true,false,true,true': [3.73e-09, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false': 'genre(F, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(D, A), movie(D, B)', 'true,false,true': 'movie(G, B), genre(F, C)'}, {'false': [1.741, 194, 10], 'true,true': [0.0, 0, 194], 'true,false,true,true': [0.0, 8, 0], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false': 'movie(E, G), actor(G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'false': [3.33e-08, 193, 0], 'true,true': [0.716, 0, 204], 'true,false,true,true': [0.004, 9, 0], 'true,false,true,false,true': [0.0, 2, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true': 'movie(D, B), movie(D, A)', 'true,false,true': 'movie(E, G), movie(F, G)'}, {'true,false,true,false': [0.0, 2, 0], 'false': [1.551, 194, 10], 'true,true': [1.46e-07, 0, 194], 'true,false,true,true': [8.21e-05, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)'}, {'false': [1.581, 194, 10], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 2, 0], 'true,true': [1.03e-07, 0, 194], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,true,false': [3.62e-05, 8, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.0, 2, 0], 'false': [9.66e-08, 193, 0], 'true,true': [0.914, 0, 204], 'true,false,true,true': [0.006, 9, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.0, 2, 0], 'false': [9.31e-08, 193, 0], 'true,true': [0.851, 0, 204], 'true,false,true,true': [0.006, 9, 0], 'true,false,false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(E, F).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true;movie(D, A), movie(D, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,true;movie(D, F), movie(E, F).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;false', '7;true,false,true;movie(G, B), genre(F, C).;false;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false,true,false', 0), ('true,false,false,false', 0)]
Tree #3: [('true,false', 0), ('true,true,false,false,true', 0), ('false', 0.9509803921568627)]
Tree #4: [('true,false,false', 0)]
Tree #5: [('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.9509803921568627)]
Tree #6: [('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false,false', 0), ('false', 0.9509803921568627)]
Tree #8: [('true,false,true,true,true', 0), ('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.9509803921568627)]
Tree #9: [('true,false,false', 0)]
Tree #10: [('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.14185106490048838;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(E, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.5226368869943276;  // std dev = 2,059, 204,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=194 */
%   else return -0.07958682844165071;  // std dev = 2,059, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4328190422226788;  // std dev = 0,461, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.16938302734693475;  // std dev = 0,068, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.10462289826919964;  // std dev = 5,58e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3245195846492539;  // std dev = 3,63e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.15264020466768677;  // std dev = 9,13e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0676169367822502;  // std dev = 1,735, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2688681410693679;  // std dev = 0,698, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.12842431733833773;  // std dev = 0,047, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1339261041825696;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08955158883182592;  // std dev = 4,21e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20974453071997068;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1196019612879364;  // std dev = 0,000732, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.05795515238205142;  // std dev = 1,543, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17708682717790536;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.10754357760851584;  // std dev = 0,000646, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10767544754472137;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.05319004745830133;  // std dev = 1,573, 204,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16706235511883857;  // std dev = 0,901, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09494111962154012;  // std dev = 0,029, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07448041036844669;  // std dev = 9,88e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.14567333447716832;  // std dev = 0,838, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08709716326177257;  // std dev = 0,026, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06950619287203925;  // std dev = 5,16e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096089
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.395 seconds
Total inference time: 0.551 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 12.886
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.14229
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 1.066 seconds
AUC ROC: 1.0
Dataset: 2, Run: 1, Fold: 3, Type: transfer, Time: 00:37:40
{'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 4.838, 'Inference time': 0.779, 'Precision': [1.0, 0.5], 'CLL': -0.14229}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Mapping results': {'Generating mappings time': 0.6146342754364014, 'Generating paths time': 3.257256031036377, 'Knowledge compiling time': 0.049108266830444336, 'Total time': 5.053671836853027, 'Possible mappings': 2592, 'Finding best mapping': 1.1326661109924316}, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 12.886, 'Inference time': 1.066, 'Precision': [1.0, 0.5], 'CLL': -0.14229}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048832;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839158;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360654;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783652;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0926912761892606;  // std dev = 9,19e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109148;  // std dev = 7,60e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0732462257633367;  // std dev = 1,13e-07, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420264;  // std dev = 7,96e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202626;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
Results
   AUC ROC   = 0.991573
   AUC PR    = 0.983425
   CLL	      = -0.112035
   Precision = 0.983425 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.991643


Total learning time: 2.904 seconds
Total inference time: 0.622 seconds
AUC ROC: 0.991573


Dataset: 2, Run: 1, Fold: 3, Type: scratch, Time: 00:37:43
{'AUC ROC': 0.991573, 'AUC PR': 0.983425, 'F1': 0.991643, 'Recall': 1.0, 'Learning time': 2.904, 'Inference time': 0.622, 'Precision': [0.983425, 0.5], 'CLL': -0.112035}


Best mapping found: ['projectmember(A,B) -> genre(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'movie(K, B), movie(M, L)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [7.74e-08, 90, 0], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,false,false': [0.31, 7, 58], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(F, E)', 'true,false,false,false,true': 'movie(J, B), genre(B, K), genre(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true': 'movie(D, B)', 'true,true,false,false': 'genre(E, C)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,false': 'movie(H, B), genre(I, C), genre(I, J)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'false': [0.08, 91, 1], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'genre(B, K)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [6.23e-08, 90, 0], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,false,false': [0.333, 10, 57], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, A), movie(D, B)', 'true,false,false': 'movie(J, B), genre(K, C), genre(K, L)'}, {'false': [0.076, 91, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,false,false': [0.374, 3, 11], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,true,false,false,true': 'movie(E, J)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,true,false': 'movie(E, I), actor(I)', 'true,false,true,false,false': 'movie(D, J), director(J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,true,true': [0.419, 6, 1], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,false,true': [0.491, 3, 4], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,true,false': [1.165, 3, 3]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true,true': 'movie(N, L)', 'true,false,false,true': 'movie(I, M), movie(N, M)', 'true,false,true': 'movie(E, H), movie(G, H)', 'true,false': 'movie(E, A), movie(G, B)', 'true,false,false,false': 'movie(P, B)', 'true,false,false': 'movie(I, B), genre(J, C), genre(J, K)', 'true': 'movie(D, B), movie(D, A)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)', 'true,false,false': 'movie(J, B)', 'true,false,false,true': 'movie(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,false,false': [0.045, 0, 8], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1], 'true,false,true,false,false': [1.091, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)', 'true,false,false,true': 'movie(J, B), movie(J, K), movie(I, K)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(I, H), movie(I, A)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,false,true': 'movie(K, I), movie(K, A)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,false,true,true,false': 'movie(L, J), movie(L, M)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(H, B), movie(H, I), actor(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,false': [0.318, 5, 22], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,false;movie(K, B), movie(M, L).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '1;true,false,false,false;movie(H, A), movie(H, I), director(I).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(F, E).;true;true', '1;true,false,false,false,true;movie(J, B), genre(B, K), genre(I, K).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,true;movie(D, B).;false;true', '2;true,true,false,false;genre(E, C).;false;false', '2;true,true,false;movie(F, B), genre(E, C).;false;true', '2;true,false;movie(H, B), genre(I, C), genre(I, J).;false;true', '2;true;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(K, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false;genre(B, K).;false;false', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true,false;movie(E, A), movie(E, F), director(F).;true;true', '4;true,false,true;movie(G, B), genre(F, C).;false;true', '4;true,false,true,false;genre(F, C).;false;false', '4;true;movie(D, A), movie(D, B).;false;true', '4;true,false,false;movie(J, B), genre(K, C), genre(K, L).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;true', '5;true,false,true,false,false,true;movie(E, J).;false;false', '5;true,false,true;movie(D, G), movie(E, G).;false;true', '5;true,false,true,false;movie(E, I), actor(I).;false;true', '5;true,false,true,false,false;movie(D, J), director(J).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,false;movie(L, K).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false,false,true,true;movie(N, L).;false;false', '6;true,false,false,true;movie(I, M), movie(N, M).;true;false', '6;true,false,true;movie(E, H), movie(G, H).;false;false', '6;true,false;movie(E, A), movie(G, B).;true;true', '6;true,false,false,false;movie(P, B).;false;false', '6;true,false,false;movie(I, B), genre(J, C), genre(J, K).;true;true', '6;true;movie(D, B), movie(D, A).;false;true', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;true', '7;true,false,true,true;movie(G, F), movie(G, H), movie(I, H).;false;false', '7;true,false,true;movie(G, B), genre(F, C).;true;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '7;true,false,false;movie(J, B).;true;false', '7;true,false,false,true;movie(L, K).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '8;true,false,false,true;movie(J, B), movie(J, K), movie(I, K).;false;false', '8;true,false,true;movie(D, G), movie(E, G).;false;false', '8;true,false;movie(D, A), movie(E, B).;true;true', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,false;movie(I, H), movie(I, A).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), movie(E, B).;true;true', '9;true,false,false,true;movie(K, I), movie(K, A).;false;false', '9;true,false,true;movie(D, G), movie(E, G).;false;false', '9;true,false,false,true,true,false;movie(L, J), movie(L, M).;false;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false;movie(H, B), movie(H, I), actor(I).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048788;  // std dev = 7,88e-08, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(E, F) )
%   | | | then if ( movie(E, B), movie(G, A), movie(G, F) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, E), director(E) )
%   | then if ( movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 2,92e-07, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, B), genre(E, C) )
%   | | | then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else if ( genre(E, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.008101335650078962;  // std dev = 4,711, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44199813675376126;  // std dev = 0,976, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10804099330086717;  // std dev = 0,021, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11151119689249983;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.31540132377188107;  // std dev = 4,50e-07, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09215070337506936;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.015369929373620663;  // std dev = 3,869, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.28648545617745996;  // std dev = 1,392, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.0865602407266726;  // std dev = 0,014, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else if ( movie(E, G), actor(G) )
%   | | | | then return -0.09345994942461067;  // std dev = 0,034, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09954609558358103;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20151156646475904;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then if ( movie(E, G), movie(F, G) )
%   | | | then return -0.07858212389615435;  // std dev = 0,000532, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07794251125307988;  // std dev = 0,000633, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.017234853115485768;  // std dev = 3,335, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17102428913814077;  // std dev = 1,74e-07, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then if ( movie(G, F), movie(G, H), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07301215088913766;  // std dev = 0,000675, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.0724658485299539;  // std dev = 0,000503, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.01540399019371907;  // std dev = 3,354, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1903565943402848;  // std dev = 1,683, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.07042614880803458;  // std dev = 0,020, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07995242974929584;  // std dev = 0,048, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08830867674799675;  // std dev = 8,69e-08, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1641011648019888;  // std dev = 1,531, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.0659554336817558;  // std dev = 0,019, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07427318330736105;  // std dev = 0,045, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08145263533315397;  // std dev = 1,59e-07, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116124
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.183 seconds
Total inference time: 0.569 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116124
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.569 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.0, 20, 0], 'false': [7.88e-08, 306, 0], 'true,true': [1.04e-06, 0, 337], 'true,false,true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(E, F)', 'true,false,false,true': 'movie(E, B), movie(G, A), movie(G, F)'}, {'true,false,false,true,false': [5.27e-09, 12, 0], 'true,false,false,true,true': [0.0, 1, 0], 'true,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 306, 0], 'true,true': [0.0, 0, 337]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,true': 'movie(D, B)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,true,false,false': 'genre(E, C)'}, {'true,true,true': [2.92e-07, 0, 278], 'true,false': [0.0, 0, 0], 'false': [4.711, 319, 59], 'true,true,false,false,true': [0.0, 0, 0], 'true,true,false,true': [7.45e-09, 11, 0], 'true,true,false,false,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.021, 20, 0], 'false': [0.0, 306, 0], 'true,true': [0.976, 0, 337], 'true,false,true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false': 'genre(F, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(D, A), movie(D, B)', 'true,false,true': 'movie(G, B), genre(F, C)'}, {'false': [3.869, 319, 59], 'true,true': [4.5e-07, 0, 278], 'true,false,true,true': [0.0, 11, 0], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 7, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false': 'movie(E, G), actor(G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'false': [0.0, 306, 0], 'true,true': [1.392, 0, 337], 'true,false,true,true': [0.014, 10, 0], 'true,false,true,false,true': [0.034, 21, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true': 'movie(D, B), movie(D, A)', 'true,false,true': 'movie(E, G), movie(F, G)'}, {'true,false,true,false': [0.000633, 9, 0], 'false': [3.335, 319, 59], 'true,true': [0.0, 0, 278], 'true,false,true,true': [0.000532, 9, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)'}, {'false': [3.354, 319, 59], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,false,false': [0.000503, 7, 0], 'true,true': [1.74e-07, 0, 278], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,true,false': [0.000675, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.048, 21, 0], 'false': [8.69e-08, 306, 0], 'true,true': [1.683, 0, 337], 'true,false,true,true': [0.02, 10, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.045, 21, 0], 'false': [1.59e-07, 306, 0], 'true,true': [1.531, 0, 337], 'true,false,true,true': [0.019, 10, 0], 'true,false,false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;false', '1;true;movie(C, A), movie(C, B).;false;true', '2;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true;movie(D, A), movie(D, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,true;movie(D, F), movie(E, F).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;false', '7;true,false,true;movie(G, B), genre(F, C).;false;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false,false', 0)]
Tree #3: [('true,false', 0), ('true,true,false,false,true', 0), ('false', 0.843915343915344)]
Tree #4: [('true,false,false', 0)]
Tree #5: [('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.843915343915344)]
Tree #6: [('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false,false', 0), ('false', 0.843915343915344)]
Tree #8: [('true,false,true,true,true', 0), ('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.843915343915344)]
Tree #9: [('true,false,false', 0)]
Tree #10: [('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.14185106490048788;  // std dev = 7,88e-08, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839197;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.5147641034053436;  // std dev = 2,745, 296,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=278 */
%   else return -0.008101335650078962;  // std dev = 4,711, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4501699681231094;  // std dev = 0,907, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14821362092965104;  // std dev = 0,174, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.11151119689249983;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3224453784795381;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else return -0.15436796000482303;  // std dev = 1,83e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.015561403921063777;  // std dev = 3,853, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.29010719680109454;  // std dev = 1,345, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.13137505733856206;  // std dev = 0,037, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11299589287279008;  // std dev = 0,088, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09952893375864044;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20503636886296467;  // std dev = 2,31e-07, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else return -0.12161051076902837;  // std dev = 0,004, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.017477046502534878;  // std dev = 3,314, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17362578936698944;  // std dev = 2,80e-07, 278,000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.10896229656214945;  // std dev = 0,003, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10958921967002;  // std dev = 0,002, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.01562495083632114;  // std dev = 3,333, 378,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19153028869359676;  // std dev = 1,651, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09280697083363386;  // std dev = 0,041, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08825736760492095;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16493310283828386;  // std dev = 1,501, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.085287402923802;  // std dev = 0,038, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08140879089029311;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11643
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.163 seconds
Total inference time: 0.532 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 15.447
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095869
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.583 seconds
AUC ROC: 1.0
Dataset: 2, Run: 1, Fold: 4, Type: transfer, Time: 00:38:05
{'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 8.183, 'Inference time': 0.614, 'Precision': [1.0, 0.5], 'CLL': -0.095869}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Mapping results': {'Generating mappings time': 0.5605037212371826, 'Generating paths time': 2.68398380279541, 'Knowledge compiling time': 0.02102041244506836, 'Total time': 4.002590179443359, 'Possible mappings': 2592, 'Finding best mapping': 0.7370753288269043}, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 15.447, 'Inference time': 0.583, 'Precision': [1.0, 0.5], 'CLL': -0.095869}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995097;  // std dev = 9,90e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.8470378239883983;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.14185106490048785;  // std dev = 9,42e-08, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.7105993940723562;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.1254446385283919;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,46e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.5491847262103365;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.11231637819360682;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.417513584158309;  // std dev = 4,54e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.41277954404908035;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.10159632948783659;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 3,10e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.31636963284550357;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.0926912761892605;  // std dev = 1,67e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256949056;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.2508170054266839;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253517;  // std dev = 2,60e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.20528583874633344;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.07877675473109147;  // std dev = 2,11e-08, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.17249952950467928;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.07324622576333698;  // std dev = 9,66e-08, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.14803790348464016;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.06842697784420294;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1340070300080108;  // std dev = 9,19e-08, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else return 0.12921169960183068;  // std dev = 0,105, 180,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=178 */
%   else return -0.064191840082026;  // std dev = 1,12e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.537 seconds
Total inference time: 0.53 seconds
AUC ROC: 1.0


Dataset: 2, Run: 1, Fold: 4, Type: scratch, Time: 00:38:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 8.537, 'Inference time': 0.53, 'Precision': [1.0, 0.5], 'CLL': -0.097325}


Best mapping found: ['projectmember(A,B) -> genre(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> movie(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'movie(K, B), movie(M, L)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [7.74e-08, 90, 0], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [0.495, 3, 4], 'true,false,false,false': [0.31, 7, 58], 'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true,false,false,true': 'movie(F, B), movie(G, A), movie(G, E)', 'true,false,false,false': 'movie(H, A), movie(H, I), director(I)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(F, E)', 'true,false,false,false,true': 'movie(J, B), genre(B, K), genre(I, K)'}, {'true,false,false,true,false': [1.077, 3, 2], 'true,false,false,true,true': [0.816, 1, 2], 'false': [0.0, 90, 0], 'true,false,true': [0.029, 0, 8], 'true,false,false,false,true,false': [1.135, 2, 4], 'true,true': [0.0, 0, 41], 'true,false,false,false,false': [0.321, 7, 53], 'true,false,false,false,true,true,true': [0.346, 6, 1], 'true,false,false,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true': 'movie(D, B)', 'true,true,false,false': 'genre(E, C)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,false': 'movie(H, B), genre(I, C), genre(I, J)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,false,false': 'movie(K, B)'}, {'true,true,true': [1.46e-07, 0, 41], 'true,true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.225, 3, 3], 'true,false,true': [0.294, 6, 50], 'true,true,false,false,true': [0.06, 0, 4], 'true,true,false,true,true': [0.329, 7, 1], 'false': [0.08, 91, 1], 'true,false,false,false': [0.036, 0, 8], 'true,true,false,false,false': [1.095, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false': 'genre(B, K)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'false': [6.23e-08, 90, 0], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.022, 0, 5], 'true,false,false,false': [0.333, 10, 57], 'true,false,true,false,true': [0.061, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.019, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, A), movie(D, B)', 'true,false,false': 'movie(J, B), genre(K, C), genre(K, L)'}, {'false': [0.076, 91, 1], 'true,true': [2.98e-08, 0, 41], 'true,false,false,true': [0.292, 6, 50], 'true,false,false,false': [0.374, 3, 11], 'true,false,true,false,true': [0.056, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.017, 3, 0], 'true,false,true,true,true,true': [0.891, 4, 1], 'true,false,true,true,false': [1.155, 4, 2]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,true,false,false,true': 'movie(E, J)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,true,false': 'movie(E, I), actor(I)', 'true,false,true,false,false': 'movie(D, J), director(J)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(L, K)'}, {'true,false,true,false,false,false': [0.0, 0, 5], 'false': [1.05e-08, 90, 0], 'true,false,true,true': [0.419, 6, 1], 'true,false,true,false,false,true,true': [0.816, 2, 1], 'true,false,false,true': [0.491, 3, 4], 'true,false,false,false': [0.284, 7, 57], 'true,false,true,false,true': [0.358, 2, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,true,false': [1.165, 3, 3]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,false,true,true': 'movie(N, L)', 'true,false,false,true': 'movie(I, M), movie(N, M)', 'true,false,true': 'movie(E, H), movie(G, H)', 'true,false': 'movie(E, A), movie(G, B)', 'true,false,false,false': 'movie(P, B)', 'true,false,false': 'movie(I, B), genre(J, C), genre(J, K)', 'true': 'movie(D, B), movie(D, A)'}, {'true,false,false,true,false': [0.276, 5, 28], 'true,true': [5.96e-08, 0, 41], 'true,false,true,true': [0.417, 6, 1], 'true,false,false,true,true,false': [0.237, 1, 17], 'true,false,true,false': [0.436, 2, 3], 'true,false,false,false,false': [0.213, 1, 13], 'false': [0.075, 91, 1], 'true,false,false,true,true,true': [0.446, 3, 5], 'true,false,false,false,true': [0.503, 4, 4]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)', 'true,false,false': 'movie(J, B)', 'true,false,false,true': 'movie(L, K)'}, {'true,false,false,true,false': [0.286, 6, 49], 'true,false,false,true,true': [0.484, 3, 4], 'true,false,false,false': [0.045, 0, 8], 'false': [0.075, 91, 1], 'true,false,true,true,true': [0.937, 2, 2], 'true,true': [0.0, 0, 41], 'true,false,true,false,true': [0.039, 0, 4], 'true,false,true,true,false': [0.281, 9, 1], 'true,false,true,false,false': [1.091, 2, 3]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,false,false,false': 'movie(M, B), movie(M, N), actor(N)', 'true,false,false,true': 'movie(J, B), movie(J, K), movie(I, K)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(I, H), movie(I, A)'}, {'true,false,false,true,false': [0.055, 0, 6], 'true,false,false,true,true': [0.969, 2, 2], 'true,false,true,true': [0.412, 6, 1], 'false': [0.0, 90, 0], 'true,false,true,false': [0.382, 2, 3], 'true,true': [0.0, 0, 41], 'true,false,false,false,false,false': [0.402, 5, 11], 'true,false,false,false,true': [0.267, 3, 28], 'true,false,false,false,false,true': [0.31, 5, 21]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true,false,false,true': 'movie(K, I), movie(K, A)', 'true,false,true': 'movie(D, G), movie(E, G)', 'true,false,false,true,true,false': 'movie(L, J), movie(L, M)', 'true': 'movie(C, B), movie(C, A)', 'true,false,false': 'movie(H, B), movie(H, I), actor(I)'}, {'true,false,false,true,false': [0.251, 5, 35], 'true,true': [1.83e-08, 0, 41], 'true,false,true,true': [0.411, 6, 1], 'true,false,false,true,true,false,false': [0.398, 3, 7], 'false': [1.29e-08, 90, 0], 'true,false,true,false': [0.376, 2, 3], 'true,false,false,true,true,false,true': [0.798, 1, 2], 'true,false,false,false': [0.318, 5, 22], 'true,false,false,true,true,true': [0.816, 1, 2]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true,false,false;movie(K, B), movie(M, L).;false;false', '0;true,false;movie(D, A), movie(D, E), director(E).;true;true', '0;true;movie(C, A), movie(C, B).;false;true', '0;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true,false,false,true;movie(F, B), movie(G, A), movie(G, E).;false;false', '1;true,false,false,false;movie(H, A), movie(H, I), director(I).;true;false', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(F, E).;true;true', '1;true,false,false,false,true;movie(J, B), genre(B, K), genre(I, K).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '2;true,true;movie(D, B).;false;true', '2;true,true,false,false;genre(E, C).;false;false', '2;true,true,false;movie(F, B), genre(E, C).;false;true', '2;true,false;movie(H, B), genre(I, C), genre(I, J).;false;true', '2;true;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,false;movie(K, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true,false,false;genre(B, K).;false;false', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true;movie(C, A), movie(C, B).;false;true', '3;true,false,true;movie(F, B), genre(B, G), genre(E, G).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true,false;movie(E, A), movie(E, F), director(F).;true;true', '4;true,false,true;movie(G, B), genre(F, C).;false;true', '4;true,false,true,false;genre(F, C).;false;false', '4;true;movie(D, A), movie(D, B).;false;true', '4;true,false,false;movie(J, B), genre(K, C), genre(K, L).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;true', '5;true,false,true,false,false,true;movie(E, J).;false;false', '5;true,false,true;movie(D, G), movie(E, G).;false;true', '5;true,false,true,false;movie(E, I), actor(I).;false;true', '5;true,false,true,false,false;movie(D, J), director(J).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,false;movie(L, K).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true,false,false,true,true;movie(N, L).;false;false', '6;true,false,false,true;movie(I, M), movie(N, M).;true;false', '6;true,false,true;movie(E, H), movie(G, H).;false;false', '6;true,false;movie(E, A), movie(G, B).;true;true', '6;true,false,false,false;movie(P, B).;false;false', '6;true,false,false;movie(I, B), genre(J, C), genre(J, K).;true;true', '6;true;movie(D, B), movie(D, A).;false;true', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;true', '7;true,false,true,true;movie(G, F), movie(G, H), movie(I, H).;false;false', '7;true,false,true;movie(G, B), genre(F, C).;true;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '7;true,false,false;movie(J, B).;true;false', '7;true,false,false,true;movie(L, K).;false;false', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true,false,false,false,false;movie(M, B), movie(M, N), actor(N).;false;false', '8;true,false,false,true;movie(J, B), movie(J, K), movie(I, K).;false;false', '8;true,false,true;movie(D, G), movie(E, G).;false;false', '8;true,false;movie(D, A), movie(E, B).;true;true', '8;true;movie(C, B), movie(C, A).;false;true', '8;true,false,false;movie(I, H), movie(I, A).;true;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true,false;movie(D, A), movie(E, B).;true;true', '9;true,false,false,true;movie(K, I), movie(K, A).;false;false', '9;true,false,true;movie(D, G), movie(E, G).;false;false', '9;true,false,false,true,true,false;movie(L, J), movie(L, M).;false;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false,false;movie(H, B), movie(H, I), actor(I).;true;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 1,19e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(E, F) )
%   | | | then if ( movie(E, B), movie(G, A), movie(G, F) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, E), director(E) )
%   | then if ( movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 1,69e-07, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, B), genre(E, C) )
%   | | | then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( genre(E, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.023653890572862414;  // std dev = 4,352, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.43840559994295614;  // std dev = 0,930, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B), genre(B, G), genre(E, G) )
%   | | | then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.10638676395007371;  // std dev = 0,011, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10997958979675126;  // std dev = 1,26e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3161775502197668;  // std dev = 4,81e-07, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.09228918786829378;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.026406769923378762;  // std dev = 3,597, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2821049788262289;  // std dev = 1,336, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.08515371916448917;  // std dev = 0,000325, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else if ( movie(E, G), actor(G) )
%   | | | | then return -0.09009798716862774;  // std dev = 0,019, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0973224285783016;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20267205100454633;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, A), movie(F, B) )
%   | | then if ( movie(E, G), movie(F, G) )
%   | | | then return -0.07875010800088376;  // std dev = 0,000303, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07831541205322638;  // std dev = 0,000366, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.02551432726605232;  // std dev = 3,122, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.1718817861213323;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then if ( movie(G, F), movie(G, H), movie(I, H) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07316284352432553;  // std dev = 0,000516, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.07274986507361501;  // std dev = 0,000249, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.022928922877406416;  // std dev = 3,148, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18550819118748718;  // std dev = 1,635, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.06841296982730055;  // std dev = 0,000241, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.0752767296875411;  // std dev = 0,028, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08524696304580105;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.16036292993978848;  // std dev = 1,495, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.06417948098506784;  // std dev = 0,000227, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07020670603879117;  // std dev = 0,026, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07883017214594894;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11262
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.237 seconds
Total inference time: 0.577 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11262
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.577 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.0, 7, 0], 'false': [1.19e-07, 316, 0], 'true,true': [1.04e-06, 0, 337], 'true,false,true,true': [0.0, 14, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'genre(B, D)', 'true': 'movie(C, A), movie(C, B)', 'true,false,false': 'movie(E, F)', 'true,false,false,true': 'movie(E, B), movie(G, A), movie(G, F)'}, {'true,false,false,true,false': [0.0, 4, 0], 'true,false,false,true,true': [0.0, 0, 0], 'true,false,true': [0.0, 17, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [0.0, 316, 0], 'true,true': [0.0, 0, 337]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,true,false': 'movie(F, B), genre(E, C)', 'true,true': 'movie(D, B)', 'true': 'movie(D, A), movie(D, E), director(E)', 'true,true,false,false': 'genre(E, C)'}, {'true,true,true': [1.69e-07, 0, 288], 'true,false': [0.0, 0, 0], 'false': [4.352, 320, 49], 'true,true,false,false,true': [0.0, 0, 0], 'true,true,false,true': [1.18e-08, 14, 0], 'true,true,false,false,false': [2.63e-09, 3, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true': 'movie(C, A), movie(C, B)', 'true,false,true': 'movie(F, B), genre(B, G), genre(E, G)'}, {'true,false,true,false': [0.011, 7, 0], 'false': [1.26e-07, 316, 0], 'true,true': [0.93, 0, 337], 'true,false,true,true': [0.0, 14, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false,true,false': 'genre(F, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true': 'movie(D, A), movie(D, B)', 'true,false,true': 'movie(G, B), genre(F, C)'}, {'false': [3.597, 320, 49], 'true,true': [4.81e-07, 0, 288], 'true,false,true,true': [7.45e-09, 14, 0], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,false,false': [0.0, 3, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false,true,false': 'movie(E, G), actor(G)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'false': [0.0, 316, 0], 'true,true': [1.336, 0, 337], 'true,false,true,true': [0.000325, 11, 0], 'true,false,true,false,true': [0.019, 10, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'genre(B, C), actor(A)', 'true,false': 'movie(E, A), movie(F, B)', 'true': 'movie(D, B), movie(D, A)', 'true,false,true': 'movie(E, G), movie(F, G)'}, {'true,false,true,false': [0.000366, 6, 0], 'false': [3.122, 320, 49], 'true,true': [0.0, 0, 288], 'true,false,true,true': [0.000303, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true,false': 'movie(E, A), movie(E, F), director(F)', 'true,false,true,true': 'movie(G, F), movie(G, H), movie(I, H)', 'true,false,true': 'movie(G, B), genre(F, C)', 'true,false,true,false': 'genre(F, C)', 'true': 'movie(D, B), movie(D, A)'}, {'false': [3.148, 320, 49], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,false,false': [0.000249, 3, 0], 'true,true': [0.0, 0, 288], 'true,false,true,false,true': [0.0, 0, 0], 'true,false,true,true,false': [0.000516, 14, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.028, 10, 0], 'false': [0.0, 316, 0], 'true,true': [1.635, 0, 337], 'true,false,true,true': [0.000241, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true,false': 'movie(D, A), movie(E, B)', 'true': 'movie(C, B), movie(C, A)', 'true,false,true': 'movie(D, F), movie(E, F)'}, {'true,false,true,false': [0.026, 10, 0], 'false': [0.0, 316, 0], 'true,true': [1.495, 0, 337], 'true,false,true,true': [0.000227, 11, 0], 'true,false,false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true,false;genre(B, D).;false;true', '1;true;movie(C, A), movie(C, B).;false;true', '1;true,false,false;movie(E, F).;false;false', '2;;workedunder(A, B) :- genre(B, C), actor(A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, A), movie(C, B).;false;false', '4;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '4;true;movie(D, A), movie(D, B).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true,false;movie(D, A), movie(E, B).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false,true;movie(D, F), movie(E, F).;false;false', '6;;workedunder(A, B) :- genre(B, C), actor(A).;true;false', '6;true;movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '7;true,false;movie(E, A), movie(E, F), director(F).;true;false', '7;true,false,true;movie(G, B), genre(F, C).;false;true', '7;true,false,true,false;genre(F, C).;false;false', '7;true;movie(D, B), movie(D, A).;false;true', '8;;workedunder(A, B) :- director(B), actor(A).;true;false', '8;true;movie(C, B), movie(C, A).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false,true,true', 0), ('true,false,false,false', 0)]
Tree #3: [('true,false', 0), ('true,true,false,false,true', 0), ('false', 0.8672086720867209)]
Tree #4: [('true,false,false', 0)]
Tree #5: [('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8672086720867209)]
Tree #6: [('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false,false', 0), ('false', 0.8672086720867209)]
Tree #8: [('true,false,true,true,true', 0), ('true,false,false', 0), ('true,false,true,false,true', 0), ('false', 0.8672086720867209)]
Tree #9: [('true,false,false', 0)]
Tree #10: [('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.1418510649004878;  // std dev = 1,19e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( genre(B, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(E, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then return 0.5181513290283218;  // std dev = 2,675, 305,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=288 */
%   else return -0.023653890572862414;  // std dev = 4,352, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.44616312571830335;  // std dev = 0,871, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.16278506398390857;  // std dev = 0,117, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.10997958979675126;  // std dev = 1,26e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32258076374733846;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else return -0.15291362618410148;  // std dev = 1,29e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.02660804869252373;  // std dev = 3,584, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2855680000969284;  // std dev = 1,296, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( movie(D, A), movie(E, B) )
%   | | then if ( movie(D, F), movie(E, F) )
%   | | | then return -0.1341395513774837;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11758937373253076;  // std dev = 0,064, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09730474751586468;  // std dev = 2,17e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(B, C), actor(A) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.20585638317531438;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else return -0.11992742754326201;  // std dev = 0,003, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.025777078987079278;  // std dev = 3,104, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, B), movie(D, A) )
%   | then return 0.17422972230508763;  // std dev = 3,32e-07, 288,000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, A), movie(E, F), director(F) )
%   | | then if ( movie(G, B), genre(F, C) )
%   | | | then return -0.10772819430817104;  // std dev = 0,003, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( genre(F, C) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.1083359126656832;  // std dev = 0,001, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.023168961434918183;  // std dev = 3,131, 369,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18667027825776764;  // std dev = 1,607, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09441987893518015;  // std dev = 0,033, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.08519345380195638;  // std dev = 8,69e-08, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.161199488325608;  // std dev = 1,468, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08665418851287701;  // std dev = 0,030, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07878422728649516;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113303
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.31 seconds
Total inference time: 0.54 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 15.664000000000001
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126398
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.554 seconds
AUC ROC: 1.0
Dataset: 2, Run: 1, Fold: 5, Type: transfer, Time: 00:38:35
{'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 6.237, 'Inference time': 0.569, 'Precision': [1.0, 0.5], 'CLL': -0.126398}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Mapping results': {'Generating mappings time': 0.5490810871124268, 'Generating paths time': 2.6855649948120117, 'Knowledge compiling time': 0.02092909812927246, 'Total time': 3.983889102935791, 'Possible mappings': 2592, 'Finding best mapping': 0.7283060550689697}, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 15.664000000000001, 'Inference time': 0.554, 'Precision': [1.0, 0.5], 'CLL': -0.126398}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.85814893509951;  // std dev = 9,00e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.8477322684328427;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.1418510649004878;  // std dev = 1,23e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109561;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.7111543417308827;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.12544463852839197;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,20e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.5495713417542955;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.11231637819360678;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583089;  // std dev = 4,42e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.41307451320260163;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.10159632948783659;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014983;  // std dev = 2,63e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.31663894630336864;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.09269127618926049;  // std dev = 1,76e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256949034;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.251086308717642;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325352;  // std dev = 2,42e-07, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.20556180922203773;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.07877675473109146;  // std dev = 2,11e-08, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.17278277746663348;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.073246225763337;  // std dev = 9,19e-08, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.14832744879098875;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.068426977844203;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.134007030008011;  // std dev = 6,32e-08, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | else return 0.12950632048031221;  // std dev = 0,102, 192,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=190 */
%   else return -0.06419184008202594;  // std dev = 1,23e-07, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096266
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.827 seconds
Total inference time: 0.564 seconds
AUC ROC: 1.0


Dataset: 2, Run: 1, Fold: 5, Type: scratch, Time: 00:38:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 8.827, 'Inference time': 0.564, 'Precision': [1.0, 0.5], 'CLL': -0.096266}


Start learning from source dataset


WILL Produced-Tree #1
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then return 0.5539946324288846;  // std dev = 0,460, 674,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=469 */
%   else if ( yearsinprogram(B, F), yearsinprogram(G, F), tempadvisedby(G, H) )
%   | then return 0.04839283753853575;  // std dev = 0,392, 205,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=39 */
%   | else if ( inphase(B, I) )
%   | | then if ( advisedby(B, J), tempadvisedby(K, J) )
%   | | | then return 0.2594228204498269;  // std dev = 0,490, 314,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=126 */
%   | | | else return 0.13474467978036272;  // std dev = 0,447, 141,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=39 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.21109011157010057;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else if ( advisedby(M, B) )
%   | | | | then if ( advisedby(M, N), projectmember(P, N) )
%   | | | | | then return -0.04185106490048778;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | | else return 0.5456489350995116;  // std dev = 0,464, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | | else if ( student(B) )
%   | | | | | then return 0.3140312880406876;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
%   | | | | | else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then return 0.4724533026094124;  // std dev = 0,460, 674,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=469 */
%   else if ( yearsinprogram(B, F), yearsinprogram(G, F), tempadvisedby(G, H) )
%   | then return 0.04239929992253221;  // std dev = 0,392, 205,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=39 */
%   | else if ( inphase(B, I) )
%   | | then if ( advisedby(B, J), tempadvisedby(K, J) )
%   | | | then return 0.22482249982807492;  // std dev = 0,490, 314,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=126 */
%   | | | else return 0.11753795116657569;  // std dev = 0,447, 141,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=39 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.18340385319677519;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else if ( advisedby(M, B) )
%   | | | | then if ( advisedby(M, N), projectmember(P, N) )
%   | | | | | then return -0.03683251744007497;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | | else return 0.46555214248586185;  // std dev = 0,464, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | | else if ( professor(B) )
%   | | | | | then return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | | | else return 0.2713547801063383;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
WILL Produced-Tree #3
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then return 0.3985744896316582;  // std dev = 0,452, 525,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=375 */
%   | else if ( advisedby(I, B) )
%   | | then return 0.14907750774030593;  // std dev = 0,499, 71,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=33 */
%   | | else return 0.4663400573972223;  // std dev = 0,413, 78,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=61 */
%   else if ( inphase(B, J) )
%   | then return 0.12337528551834223;  // std dev = 0,458, 660,000 (wgt'ed) examples reached here.  /* #neg=456 #pos=204 */
%   | else if ( advisedby(K, B) )
%   | | then if ( tempadvisedby(L, B) )
%   | | | then return 0.15599733614673358;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else if ( advisedby(K, M), projectmember(N, M) )
%   | | | | then return -0.03254015317273094;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | else return 0.37507337777171845;  // std dev = 0,464, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | else if ( professor(B) )
%   | | | then return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.22699666574810606;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
WILL Produced-Tree #4
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then return 0.2927727065776799;  // std dev = 0,457, 674,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=469 */
%   else if ( tempadvisedby(B, F) )
%   | then return -0.05676348508911555;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I) )
%   | | then return 0.04713423089896727;  // std dev = 0,412, 152,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=33 */
%   | | else if ( inphase(B, J) )
%   | | | then if ( advisedby(B, K), tempadvisedby(L, K) )
%   | | | | then if ( inphase(L, J) )
%   | | | | | then return -0.1495003197971662;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | | | else return 0.1810736316377134;  // std dev = 0,493, 302,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=125 */
%   | | | | else return 0.08261396045175029;  // std dev = 0,447, 141,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=39 */
%   | | | else if ( tempadvisedby(M, B) )
%   | | | | then return 0.13015597951886929;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | | else if ( advisedby(N, B), advisedby(N, P), projectmember(Q, P) )
%   | | | | | then return -0.028843434243526523;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | | else return 0.20387022984523712;  // std dev = 0,485, 107,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=54 */
WILL Produced-Tree #5
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( advisedby(F, B), advisedby(F, G), tempadvisedby(H, G) )
%   | then return 0.23482536614446178;  // std dev = 0,452, 525,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=375 */
%   | else if ( advisedby(I, B) )
%   | | then return 0.046962138004811325;  // std dev = 0,499, 71,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=33 */
%   | | else return 0.28566104458055813;  // std dev = 0,413, 78,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=61 */
%   else if ( yearsinprogram(B, J), yearsinprogram(K, J), tempadvisedby(K, L) )
%   | then return 0.017297179047377664;  // std dev = 0,392, 205,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=39 */
%   | else if ( advisedby(M, B) )
%   | | then return 0.1564757672602859;  // std dev = 0,456, 59,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=29 */
%   | | else if ( inphase(B, N) )
%   | | | then if ( advisedby(B, P), tempadvisedby(Q, P) )
%   | | | | then return 0.13682427163321462;  // std dev = 0,489, 314,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=126 */
%   | | | | else return 0.06936973168601741;  // std dev = 0,447, 141,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=39 */
%   | | | else if ( student(B) )
%   | | | | then return 0.1423694765615516;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
%   | | | | else return -0.026039919225946232;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then return 0.16583229852883455;  // std dev = 0,455, 674,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=469 */
%   else if ( tempadvisedby(B, F) )
%   | then return -0.05126783813099512;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I) )
%   | | then return 0.03784998006338851;  // std dev = 0,412, 152,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=33 */
%   | | else if ( inphase(B, J) )
%   | | | then if ( advisedby(B, K), tempadvisedby(L, K) )
%   | | | | then return 0.10938736768542102;  // std dev = 0,489, 314,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=126 */
%   | | | | else return 0.057741942997042446;  // std dev = 0,447, 141,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=39 */
%   | | | else if ( tempadvisedby(M, B) )
%   | | | | then return 0.07663862546807866;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | | else if ( advisedby(N, B), advisedby(N, P), projectmember(Q, P) )
%   | | | | | then return -0.04386023490339871;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | | else if ( advisedby(R, B) )
%   | | | | | | then return 0.20084171907016574;  // std dev = 0,464, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | | | | else return 0.09849990794826155;  // std dev = 0,488, 75,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=32 */
WILL Produced-Tree #7
% FOR publication(A, B):
%   if ( inphase(B, C) )
%   then if ( advisedby(B, D), projectmember(E, D) )
%   | then return -0.12168962586777456;  // std dev = 0,282, 35,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | else if ( advisedby(B, F), tempadvisedby(G, F) )
%   | | then return 0.1057056511264374;  // std dev = 0,489, 368,000 (wgt'ed) examples reached here.  /* #neg=221 #pos=147 */
%   | | else return 0.006726944163878506;  // std dev = 0,403, 257,000 (wgt'ed) examples reached here.  /* #neg=203 #pos=54 */
%   else if ( tempadvisedby(H, B), advisedby(I, B) )
%   | then return 0.10301554002881612;  // std dev = 0,466, 428,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=287 */
%   | else if ( advisedby(J, B), advisedby(J, K), tempadvisedby(L, K) )
%   | | then return 0.20792974577415682;  // std dev = 0,401, 156,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=117 */
%   | | else if ( advisedby(M, B) )
%   | | | then return -0.005519390224874181;  // std dev = 0,499, 71,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=33 */
%   | | | else if ( hasposition(B, N), hasposition(P, N), projectmember(Q, P) )
%   | | | | then return 0.17449443753353067;  // std dev = 0,413, 78,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=61 */
%   | | | | else if ( student(B) )
%   | | | | | then return 0.08836393153431307;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
%   | | | | | else return -0.03645654447599595;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR publication(A, B):
%   if ( hasposition(B, C), hasposition(D, C), projectmember(E, D) )
%   then if ( tempadvisedby(F, B) )
%   | then if ( advisedby(G, B) )
%   | | then return 0.07986374051937484;  // std dev = 0,465, 411,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=281 */
%   | | else return 0.09529579333643291;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else return 0.1283813409257201;  // std dev = 0,432, 224,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=159 */
%   else if ( tempadvisedby(B, H) )
%   | then return -0.04523799472536939;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( advisedby(B, I), projectmember(J, I) )
%   | | then return -0.10250231039695626;  // std dev = 0,282, 35,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( advisedby(B, K), tempadvisedby(L, K) )
%   | | | then return 0.0836024493960745;  // std dev = 0,489, 368,000 (wgt'ed) examples reached here.  /* #neg=221 #pos=147 */
%   | | | else if ( yearsinprogram(B, M), yearsinprogram(N, M), tempadvisedby(N, P) )
%   | | | | then return -0.0430504350676011;  // std dev = 0,350, 63,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | | | else if ( advisedby(B, Q) )
%   | | | | | then return 0.03725204080096396;  // std dev = 0,443, 101,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=27 */
%   | | | | | else return 0.05964029587283435;  // std dev = 0,468, 174,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=73 */
WILL Produced-Tree #9
% FOR publication(A, B):
%   if ( yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E) )
%   then return 0.009177969533369754;  // std dev = 0,387, 205,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=39 */
%   else if ( hasposition(B, F), hasposition(G, F), projectmember(H, G) )
%   | then return 0.07407748226605256;  // std dev = 0,453, 674,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=469 */
%   | else if ( hasposition(B, I), hasposition(J, I), tempadvisedby(K, J) )
%   | | then return 0.007019433119729829;  // std dev = 0,445, 24,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else if ( advisedby(B, L) )
%   | | | then if ( tempadvisedby(M, L) )
%   | | | | then return 0.04706768739744657;  // std dev = 0,487, 314,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=126 */
%   | | | | else return 0.03058695358350169;  // std dev = 0,443, 101,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=27 */
%   | | | else if ( advisedby(N, B), advisedby(N, P), projectmember(Q, P) )
%   | | | | then return -0.07366363791406348;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | else if ( professor(B) )
%   | | | | | then return 0.08520610687102068;  // std dev = 0,464, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | | | else if ( inphase(B, R) )
%   | | | | | | then return 0.059190982426062654;  // std dev = 0,458, 40,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | | | | else return 0.05333767738681142;  // std dev = 0,498, 68,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
WILL Produced-Tree #10
% FOR publication(A, B):
%   if ( tempadvisedby(B, C) )
%   then return -0.0404887396968516;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   else if ( hasposition(B, D), hasposition(E, D), projectmember(F, E) )
%   | then if ( tempadvisedby(G, B) )
%   | | then if ( advisedby(H, B) )
%   | | | then return 0.04368783355670638;  // std dev = 0,465, 411,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=281 */
%   | | | else return 0.057711004298522064;  // std dev = 0,437, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | | else return 0.0812110513410339;  // std dev = 0,432, 224,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=159 */
%   | else if ( advisedby(B, I), tempadvisedby(J, I) )
%   | | then return 0.04349813489248156;  // std dev = 0,477, 403,000 (wgt'ed) examples reached here.  /* #neg=253 #pos=150 */
%   | | else if ( yearsinprogram(B, K), yearsinprogram(L, K), tempadvisedby(L, M) )
%   | | | then return -0.037978421101591074;  // std dev = 0,350, 63,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | | else if ( advisedby(B, N) )
%   | | | | then return 0.025015645225814988;  // std dev = 0,443, 101,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=27 */
%   | | | | else if ( hasposition(B, P), hasposition(Q, P), tempadvisedby(R, Q) )
%   | | | | | then return 0.0056181146969016575;  // std dev = 0,445, 24,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | | | else return 0.0408303317028692;  // std dev = 0,470, 150,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=66 */


Predicates from source: ['publication(title,person).', 'professor(person).', 'hasposition(person,faculty).', 'projectmember(project,person).', 'yearsinprogram(person,year).', 'student(person).', 'inphase(person,prequals).', 'advisedby(person,person).', 'tempadvisedby(person,person).'] 

Source structured tree: [['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'yearsinprogram(B, F), yearsinprogram(G, F), tempadvisedby(G, H)', 'false,false,true': 'advisedby(B, J), tempadvisedby(K, J)', 'false,false,false': 'tempadvisedby(L, B)', 'false,false': 'inphase(B, I)', 'false,false,false,false,false': 'student(B)', 'false,false,false,false,true': 'advisedby(M, N), projectmember(P, N)', 'false,false,false,false': 'advisedby(M, B)'}, {'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'yearsinprogram(B, F), yearsinprogram(G, F), tempadvisedby(G, H)', 'false,false,true': 'advisedby(B, J), tempadvisedby(K, J)', 'false,false,false': 'tempadvisedby(L, B)', 'false,false': 'inphase(B, I)', 'false,false,false,false,false': 'professor(B)', 'false,false,false,false,true': 'advisedby(M, N), projectmember(P, N)', 'false,false,false,false': 'advisedby(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'inphase(B, J)', 'false,false,true': 'tempadvisedby(L, B)', 'true,false': 'advisedby(I, B)', 'false,false,false': 'professor(B)', 'false,false': 'advisedby(K, B)', 'false,false,true,false': 'advisedby(K, M), projectmember(N, M)', 'true': 'advisedby(F, B), advisedby(F, G), tempadvisedby(H, G)'}, {'false,false,true,false,false': [0.464, 10, 22], 'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'tempadvisedby(B, F)', 'false,false,false': 'inphase(B, J)', 'false,false': 'yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I)', 'false,false,false,false,false': 'advisedby(N, B), advisedby(N, P), projectmember(Q, P)', 'false,false,false,true': 'advisedby(B, K), tempadvisedby(L, K)', 'false,false,false,true,true': 'inphase(L, J)', 'false,false,false,false': 'tempadvisedby(M, B)'}, {'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.457, 205, 469], 'false,false,false,true,true,false': [0.493, 177, 125]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'yearsinprogram(B, J), yearsinprogram(K, J), tempadvisedby(K, L)', 'true,false': 'advisedby(I, B)', 'false,false,false': 'inphase(B, N)', 'false,false': 'advisedby(M, B)', 'false,false,false,true': 'advisedby(B, P), tempadvisedby(Q, P)', 'true': 'advisedby(F, B), advisedby(F, G), tempadvisedby(H, G)', 'false,false,false,false': 'student(B)'}, {'false,false,false,false,false': [0.35, 6, 1], 'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,true,true': [0.489, 188, 126], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'tempadvisedby(B, F)', 'false,false,false': 'inphase(B, J)', 'false,false': 'yearsinprogram(B, G), yearsinprogram(H, G), tempadvisedby(H, I)', 'false,false,false,false,false': 'advisedby(N, B), advisedby(N, P), projectmember(Q, P)', 'false,false,false,true': 'advisedby(B, K), tempadvisedby(L, K)', 'false,false,false,false,false,false': 'advisedby(R, B)', 'false,false,false,false': 'tempadvisedby(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['publication(A, B)', {'': 'inphase(B, C)', 'false': 'tempadvisedby(H, B), advisedby(I, B)', 'true,false': 'advisedby(B, F), tempadvisedby(G, F)', 'false,false,false': 'advisedby(M, B)', 'false,false': 'advisedby(J, B), advisedby(J, K), tempadvisedby(L, K)', 'false,false,false,false,false': 'student(B)', 'true': 'advisedby(B, D), projectmember(E, D)', 'false,false,false,false': 'hasposition(B, N), hasposition(P, N), projectmember(Q, P)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['publication(A, B)', {'': 'hasposition(B, C), hasposition(D, C), projectmember(E, D)', 'false': 'tempadvisedby(B, H)', 'true,true': 'advisedby(G, B)', 'false,false,false': 'advisedby(B, K), tempadvisedby(L, K)', 'false,false': 'advisedby(B, I), projectmember(J, I)', 'false,false,false,false,false': 'advisedby(B, Q)', 'true': 'tempadvisedby(F, B)', 'false,false,false,false': 'yearsinprogram(B, M), yearsinprogram(N, M), tempadvisedby(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['publication(A, B)', {'': 'yearsinprogram(B, C), yearsinprogram(D, C), tempadvisedby(D, E)', 'false': 'hasposition(B, F), hasposition(G, F), projectmember(H, G)', 'false,false,false': 'advisedby(B, L)', 'false,false': 'hasposition(B, I), hasposition(J, I), tempadvisedby(K, J)', 'false,false,false,false,false': 'professor(B)', 'false,false,false,true': 'tempadvisedby(M, L)', 'false,false,false,false,false,false': 'inphase(B, R)', 'false,false,false,false': 'advisedby(N, B), advisedby(N, P), projectmember(Q, P)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['publication(A, B)', {'': 'tempadvisedby(B, C)', 'false': 'hasposition(B, D), hasposition(E, D), projectmember(F, E)', 'false,true': 'tempadvisedby(G, B)', 'false,false,false': 'yearsinprogram(B, K), yearsinprogram(L, K), tempadvisedby(L, M)', 'false,false': 'advisedby(B, I), tempadvisedby(J, I)', 'false,true,true': 'advisedby(H, B)', 'false,false,false,false,false': 'hasposition(B, P), hasposition(Q, P), tempadvisedby(R, Q)', 'false,false,false,false': 'advisedby(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,true': [0.35, 54, 9], 'false,false,false,false,true': [0.443, 74, 27], 'true': [0.317, 47, 6]}]] 



Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> workedunder(A,B)', 'yearsinprogram(A,B) -> workedunder(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'hasposition(A,B) -> genre(A,B)', 'projectmember(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'actor(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,true': [0.392, 166, 39], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,true,false': [0.447, 102, 39], 'false,false,false,true': [0.478, 11, 6], 'false,false,false,false,true,false': [0.464, 10, 22], 'true': [0.46, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J)', 'false,false,true': 'workedunder(L, B)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'director(B)', 'false,false': 'workedunder(K, B)', 'false,false,true,false': 'workedunder(K, M), genre(M, N)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)'}, {'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,true,false,false': [0.464, 10, 22], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,true,true': 'workedunder(L, J)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,false,false,true': [0.478, 11, 6], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,true,true,false': [0.493, 177, 125], 'true': [0.457, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J), workedunder(K, J), workedunder(K, L)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'workedunder(B, N)', 'false,false': 'workedunder(M, B)', 'false,false,false,true': 'workedunder(B, P), workedunder(Q, P)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false,false,false': 'actor(B)'}, {'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,false,false': [0.35, 6, 1], 'false,false,false,true,false': [0.447, 102, 39], 'true,false,false': [0.413, 17, 61], 'false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,false,false,false': 'workedunder(R, B)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'false,false,false': 'workedunder(M, B)', 'false,false': 'workedunder(J, B), workedunder(J, K), workedunder(L, K)', 'false,false,false,false,false': 'actor(B)', 'true': 'workedunder(B, D), genre(D, E)', 'false,false,false,false': 'genre(B, N), genre(P, N), genre(P, Q)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,true': 'workedunder(M, L)', 'false,false,false,false,false,false': 'workedunder(B, R)', 'false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,false,false,true': [0.443, 74, 27], 'false,false,false,true': [0.35, 54, 9], 'true': [0.317, 47, 6]}]] 

Transferred target predicate: movie 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '0;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '0;false,false,false;workedunder(L, B).;false;true', '0;false,false;workedunder(B, I).;true;true', '0;false,false,false,false,false;actor(B).;false;false', '0;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '0;false,false,false,false;workedunder(M, B).;true;true', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '1;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '1;false,false,false;workedunder(L, B).;false;true', '1;false,false;workedunder(B, I).;true;true', '1;false,false,false,false,false;director(B).;false;false', '1;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '1;false,false,false,false;workedunder(M, B).;true;true', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, J).;false;true', '2;false,false,true;workedunder(L, B).;false;true', '2;true,false;workedunder(I, B).;false;false', '2;false,false,false;director(B).;false;false', '2;false,false;workedunder(K, B).;true;true', '2;false,false,true,false;workedunder(K, M), genre(M, N).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;true', '3;false,false,false;workedunder(B, J).;true;true', '3;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '3;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;false', '3;false,false,false,true;workedunder(B, K), workedunder(L, K).;true;false', '3;false,false,false,true,true;workedunder(L, J).;false;false', '3;false,false,false,false;workedunder(M, B).;false;true', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '4;false;workedunder(B, J), workedunder(K, J), workedunder(K, L).;false;true', '4;true,false;workedunder(I, B).;false;false', '4;false,false,false;workedunder(B, N).;true;true', '4;false,false;workedunder(M, B).;false;true', '4;false,false,false,true;workedunder(B, P), workedunder(Q, P).;false;false', '4;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '4;false,false,false,false;actor(B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;true', '5;false,false,false;workedunder(B, J).;true;true', '5;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '5;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '5;false,false,false,true;workedunder(B, K), workedunder(L, K).;false;false', '5;false,false,false,false,false,false;workedunder(R, B).;false;false', '5;false,false,false,false;workedunder(M, B).;false;true', '6;;movie(A, B) :- workedunder(B, C).;true;true', '6;false;workedunder(H, B), workedunder(I, B).;false;true', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;false,false,false;workedunder(M, B).;false;true', '6;false,false;workedunder(J, B), workedunder(J, K), workedunder(L, K).;false;true', '6;false,false,false,false,false;actor(B).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '6;false,false,false,false;genre(B, N), genre(P, N), genre(P, Q).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;true', '7;true,true;workedunder(G, B).;false;false', '7;false,false,false;workedunder(B, K), workedunder(L, K).;false;true', '7;false,false;workedunder(B, I), genre(I, J).;false;true', '7;false,false,false,false,false;workedunder(B, Q).;false;false', '7;true;workedunder(F, B).;true;false', '7;false,false,false,false;workedunder(B, M), workedunder(N, M), workedunder(N, P).;false;true', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;true', '8;false,false,false;workedunder(B, L).;true;true', '8;false,false;genre(B, I), genre(J, I), workedunder(K, J).;false;true', '8;false,false,false,false,false;director(B).;false;true', '8;false,false,false,true;workedunder(M, L).;false;false', '8;false,false,false,false,false,false;workedunder(B, R).;false;false', '8;false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;true;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,true,true;workedunder(H, B).;false;false', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3697768420762556;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3620859429735239;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.25814893509951237;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.31856399095141696;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.31206843124098754;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.26406620901387173;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.2590084173005518;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(J, B) )
%   | | then if ( workedunder(K, B) )
%   | | | then return 0.1888683221574971;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.2116898738090047;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20802416884805605;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.15570029437174387;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.16545466791447316;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I), workedunder(J, I), workedunder(J, K) )
%   | then return 0.1629307117629385;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(L, B) )
%   | | then return 0.12582628229372106;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12711779198406117;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12542818401891373;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.10008916917880542;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09731583747621034;  // std dev = 9,327, 348,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=176 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07641719588791296;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, B), workedunder(I, B) )
%   | then return 0.090924249860728;  // std dev = 3,943, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0743966097248192;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07224374775057577;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(B, I), genre(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M), workedunder(N, M), workedunder(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(B, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.058520744754866884;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054439923273799595;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05601320515478297;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else if ( genre(B, I), genre(J, I), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(M, B), workedunder(M, N), genre(N, P) )
%   | | | | then return -0.021424947200812228;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( director(B) )
%   | | | | | then return 0.057006425348207344;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04093511485794195;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then if ( workedunder(H, B) )
%   | | | then return 0.04208927610197073;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, I), workedunder(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, N) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, P), genre(Q, P), workedunder(R, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.03479381115500022;  // std dev = 2,189, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
Results
   AUC ROC   = 0.541322
   AUC PR    = 0.518372
   CLL	      = -0.694064
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.596 seconds
Total inference time: 0.533 seconds
AUC ROC: 0.541322


Results in test set
   AUC ROC   = 0.541322
   AUC PR    = 0.518372
   CLL	      = -0.694064
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.533 seconds
AUC ROC: 0.541322
Structure after Parameter Learning
[['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [2.191, 12, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.278, 21, 22], 'false,true': [9.759, 189, 192]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [2.191, 12, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.278, 21, 22], 'false,true': [9.759, 189, 192]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I)', 'false,false,true': 'workedunder(K, B)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(J, B)'}, {'true,false': [0.0, 0, 0], 'false,true': [9.759, 189, 192], 'false,false,false': [0.0, 0, 0], 'true,true': [3.278, 21, 22], 'false,false,true,false': [0.0, 0, 0], 'false,false,true,true': [2.191, 12, 8]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [9.759, 189, 192], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [2.191, 12, 8], 'true': [3.278, 21, 22]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I), workedunder(J, I), workedunder(J, K)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(L, B)'}, {'true,false': [0.0, 0, 0], 'false,false,true': [2.191, 12, 8], 'true,true': [3.278, 21, 22], 'false,true': [9.759, 189, 192], 'false,false,false': [0.0, 0, 0]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [9.759, 189, 192], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [2.191, 12, 8], 'true': [3.278, 21, 22]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'true': 'workedunder(B, D), genre(D, E)'}, {'false,false': [0.0, 0, 0], 'true,true': [9.327, 172, 176], 'true,false,false': [0.0, 0, 0], 'true,false,true': [2.871, 17, 16], 'false,true': [3.943, 33, 30]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [3.278, 21, 22], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [9.759, 189, 192], 'false,false,false,false,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'false,false,false,false,false,false': [2.191, 12, 8]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false': 'workedunder(M, B), workedunder(M, N), genre(N, P)'}, {'false,false,false,false,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [3.278, 21, 22], 'false,false,false,false,false,true': [2.029, 10, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.816, 2, 1], 'true': [9.759, 189, 192]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [3.278, 21, 22], 'false,false,false,false,false,false': [2.189, 12, 8], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [9.759, 189, 192]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, I).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, I), workedunder(J, I), workedunder(J, K).;false;true', '4;false,false;workedunder(L, B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true,true;workedunder(G, B).;false;false', '7;true;workedunder(F, B).;true;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;false;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5039370078740157), ('true', 0.5116279069767442), ('false,false,false,true', 0.6)]
Tree #2: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5039370078740157), ('true', 0.5116279069767442), ('false,false,false,true', 0.6)]
Tree #3: [('false,false,false', 0), ('true,false', 0), ('false,false,true,false', 0), ('false,true', 0.5039370078740157), ('true,true', 0.5116279069767442), ('false,false,true,true', 0.6)]
Tree #4: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5039370078740157), ('true', 0.5116279069767442), ('false,false,false,false,true', 0.6)]
Tree #5: [('true,false', 0), ('false,false,false', 0), ('false,true', 0.5039370078740157), ('true,true', 0.5116279069767442), ('false,false,true', 0.6)]
Tree #6: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5039370078740157), ('true', 0.5116279069767442), ('false,false,false,false,true', 0.6)]
Tree #7: [('false,false', 0), ('true,false,false', 0), ('true,true', 0.5057471264367817), ('true,false,true', 0.5151515151515151), ('false,true', 0.5238095238095238)]
Tree #8: [('false,false,true', 0), ('true,false', 0), ('false,false,false,false,false,true', 0), ('true,true,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,true', 0.5039370078740157), ('true,true,true', 0.5116279069767442), ('false,false,false,false,false,false', 0.6)]
Tree #9: [('false,false,true', 0), ('false,false,false,false,false,false', 0), ('false,false,false,true', 0), ('true', 0.5039370078740157), ('false,true', 0.5116279069767442), ('false,false,false,false,false,true', 0.5882352941176471), ('false,false,false,false,true', 0.6666666666666666)]
Tree #10: [('false,true,true,false', 0), ('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('true', 0.5039370078740157), ('false,true,true,true', 0.5116279069767442), ('false,false,false,false,false,false', 0.6)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3697768420762556;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3620859429735239;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.25814893509951237;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.31856399095141696;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.31206843124098754;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.22373365448410584;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.26406620901387173;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.2590084173005518;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.1888683221574971;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.2116898738090047;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20802416884805605;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.15570029437174387;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.16545466791447316;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.1629307117629385;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else if ( workedunder(I, B) )
%   | | then return 0.12582628229372106;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12711779198406117;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12542818401891373;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.10008916917880542;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09731583747621034;  // std dev = 9,327, 348,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=176 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07641719588791296;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.090924249860728;  // std dev = 3,943, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0743966097248192;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07224374775057577;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   | else return 0.058520744754866884;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054439923273799595;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05601320515478297;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0.0452417194658544;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04093511485794195;  // std dev = 9,759, 381,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=192 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.04208927610197073;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, H), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J), workedunder(K, J), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, N), genre(P, N), workedunder(Q, P) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.034818960711058014;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
Results
   AUC ROC   = 0.541322
   AUC PR    = 0.518372
   CLL	      = -0.694064
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.944 seconds
Total inference time: 0.52 seconds
AUC ROC: 0.541322


Best model AUC ROC so far: 0.541322


******************************************
Best model found
******************************************
Total revision time: 11.593
Best validation AUC ROC: 0.541322


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.694501
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.585 seconds
AUC ROC: 0.5
Dataset: 3, Run: 1, Fold: 1, Type: transfer, Time: 00:41:31
{'Parameter Learning results': {'AUC ROC': 0.5, 'AUC PR': 0.5, 'F1': nan, 'Recall': 0.0, 'Learning time': 5.596, 'Inference time': 0.58, 'Precision': [nan, 0.5], 'CLL': -0.694501}, 'AUC ROC': 0.5, 'AUC PR': 0.5, 'Mapping results': {'Generating mappings time': 7.137836694717407, 'Generating paths time': 2.7188446521759033, 'Knowledge compiling time': 0.024985313415527344, 'Total time': 42.31651782989502, 'Possible mappings': 76322, 'Finding best mapping': 32.43484330177307}, 'F1': nan, 'Recall': 0.0, 'Learning time': 11.593, 'Inference time': 0.585, 'Precision': [nan, 0.5], 'CLL': -0.694501}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.37166244861302655;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.3560030123527278;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.33433941128998734;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.3201556683650789;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.3069269221365216;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.288587396890732;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.26530351639422434;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.2549953707006937;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.24061162403417188;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.2125846002707095;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.2051060415303852;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.1945748329838448;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.16606958335154803;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.16091587401700413;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.15359877152831744;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.12752930362465256;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.12407838907654856;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.11916270481716094;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.09690096040223553;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.09461198030189426;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.09136717210389933;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.07317637672775362;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.07165168698535944;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.06952274321783666;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.05507180049358814;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   | else return 0.05404341159784174;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   else return 0.052644946262454355;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.04137107024709763;  // std dev = 0,500, 148,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=76 */
%   else if ( actor(B) )
%   | then return 0.040665819370690796;  // std dev = 0,500, 233,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   | else return 0.03974248258629853;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
Results
   AUC ROC   = 0.55127
   AUC PR    = 0.541572
   CLL	      = -0.6932
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 11.274 seconds
Total inference time: 0.507 seconds
AUC ROC: 0.55127


Dataset: 3, Run: 1, Fold: 1, Type: scratch, Time: 00:41:43
{'AUC ROC': 0.55127, 'AUC PR': 0.541572, 'F1': nan, 'Recall': 0.0, 'Learning time': 11.274, 'Inference time': 0.507, 'Precision': [nan, 0.5], 'CLL': -0.6932}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> workedunder(A,B)', 'yearsinprogram(A,B) -> workedunder(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'hasposition(A,B) -> genre(A,B)', 'projectmember(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'actor(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,true': [0.392, 166, 39], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,true,false': [0.447, 102, 39], 'false,false,false,true': [0.478, 11, 6], 'false,false,false,false,true,false': [0.464, 10, 22], 'true': [0.46, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J)', 'false,false,true': 'workedunder(L, B)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'director(B)', 'false,false': 'workedunder(K, B)', 'false,false,true,false': 'workedunder(K, M), genre(M, N)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)'}, {'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,true,false,false': [0.464, 10, 22], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,true,true': 'workedunder(L, J)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,false,false,true': [0.478, 11, 6], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,true,true,false': [0.493, 177, 125], 'true': [0.457, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J), workedunder(K, J), workedunder(K, L)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'workedunder(B, N)', 'false,false': 'workedunder(M, B)', 'false,false,false,true': 'workedunder(B, P), workedunder(Q, P)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false,false,false': 'actor(B)'}, {'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,false,false': [0.35, 6, 1], 'false,false,false,true,false': [0.447, 102, 39], 'true,false,false': [0.413, 17, 61], 'false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,false,false,false': 'workedunder(R, B)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'false,false,false': 'workedunder(M, B)', 'false,false': 'workedunder(J, B), workedunder(J, K), workedunder(L, K)', 'false,false,false,false,false': 'actor(B)', 'true': 'workedunder(B, D), genre(D, E)', 'false,false,false,false': 'genre(B, N), genre(P, N), genre(P, Q)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,true': 'workedunder(M, L)', 'false,false,false,false,false,false': 'workedunder(B, R)', 'false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,false,false,true': [0.443, 74, 27], 'false,false,false,true': [0.35, 54, 9], 'true': [0.317, 47, 6]}]] 

Transferred target predicate: movie 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '0;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '0;false,false,false;workedunder(L, B).;false;true', '0;false,false;workedunder(B, I).;true;true', '0;false,false,false,false,false;actor(B).;false;false', '0;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '0;false,false,false,false;workedunder(M, B).;true;true', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '1;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '1;false,false,false;workedunder(L, B).;false;true', '1;false,false;workedunder(B, I).;true;true', '1;false,false,false,false,false;director(B).;false;false', '1;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '1;false,false,false,false;workedunder(M, B).;true;true', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, J).;false;true', '2;false,false,true;workedunder(L, B).;false;true', '2;true,false;workedunder(I, B).;false;false', '2;false,false,false;director(B).;false;false', '2;false,false;workedunder(K, B).;true;true', '2;false,false,true,false;workedunder(K, M), genre(M, N).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;true', '3;false,false,false;workedunder(B, J).;true;true', '3;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '3;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;false', '3;false,false,false,true;workedunder(B, K), workedunder(L, K).;true;false', '3;false,false,false,true,true;workedunder(L, J).;false;false', '3;false,false,false,false;workedunder(M, B).;false;true', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '4;false;workedunder(B, J), workedunder(K, J), workedunder(K, L).;false;true', '4;true,false;workedunder(I, B).;false;false', '4;false,false,false;workedunder(B, N).;true;true', '4;false,false;workedunder(M, B).;false;true', '4;false,false,false,true;workedunder(B, P), workedunder(Q, P).;false;false', '4;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '4;false,false,false,false;actor(B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;true', '5;false,false,false;workedunder(B, J).;true;true', '5;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '5;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '5;false,false,false,true;workedunder(B, K), workedunder(L, K).;false;false', '5;false,false,false,false,false,false;workedunder(R, B).;false;false', '5;false,false,false,false;workedunder(M, B).;false;true', '6;;movie(A, B) :- workedunder(B, C).;true;true', '6;false;workedunder(H, B), workedunder(I, B).;false;true', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;false,false,false;workedunder(M, B).;false;true', '6;false,false;workedunder(J, B), workedunder(J, K), workedunder(L, K).;false;true', '6;false,false,false,false,false;actor(B).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '6;false,false,false,false;genre(B, N), genre(P, N), genre(P, Q).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;true', '7;true,true;workedunder(G, B).;false;false', '7;false,false,false;workedunder(B, K), workedunder(L, K).;false;true', '7;false,false;workedunder(B, I), genre(I, J).;false;true', '7;false,false,false,false,false;workedunder(B, Q).;false;false', '7;true;workedunder(F, B).;true;false', '7;false,false,false,false;workedunder(B, M), workedunder(N, M), workedunder(N, P).;false;true', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;true', '8;false,false,false;workedunder(B, L).;true;true', '8;false,false;genre(B, I), genre(J, I), workedunder(K, J).;false;true', '8;false,false,false,false,false;director(B).;false;true', '8;false,false,false,true;workedunder(M, L).;false;false', '8;false,false,false,false,false,false;workedunder(B, R).;false;false', '8;false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;true;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,true,true;workedunder(H, B).;false;false', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3697768420762556;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.35944092476359085;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.3025933795439568;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.31856399095141696;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.30983320217569776;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.2616318086752123;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.26406620901387173;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.257264821182968;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(J, B) )
%   | | then if ( workedunder(K, B) )
%   | | | then return 0.2192721473492705;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.2116898738090047;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20675734986854255;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.1787352457468729;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.16545466791447316;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I), workedunder(J, I), workedunder(J, K) )
%   | then return 0.16205666012618494;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(L, B) )
%   | | then return 0.1424392447767627;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12711779198406117;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12484276988018714;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.11159559999632984;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09665075361099985;  // std dev = 9,407, 354,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=178 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07867437970242407;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, B), workedunder(I, B) )
%   | then return 0.09360059867339655;  // std dev = 3,897, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.07373795684065508;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.0719863237228421;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(B, I), genre(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M), workedunder(N, M), workedunder(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(B, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.06458196628816795;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054267095261363855;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05551271149156061;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else if ( genre(B, I), genre(J, I), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(M, B), workedunder(M, N), genre(N, P) )
%   | | | | then return 0.10481055254001828;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | | else if ( director(B) )
%   | | | | | then return 0.04231055254001828;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.040817333530640605;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then if ( workedunder(H, B) )
%   | | | then return 0.04171136594703466;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, I), workedunder(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, N) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, P), genre(Q, P), workedunder(R, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.03741532339391994;  // std dev = 2,107, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
Results
   AUC ROC   = 0.481405
   AUC PR    = 0.488879
   CLL	      = -0.694215
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.174 seconds
Total inference time: 0.509 seconds
AUC ROC: 0.481405


Results in test set
   AUC ROC   = 0.481405
   AUC PR    = 0.488879
   CLL	      = -0.694215
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.509 seconds
AUC ROC: 0.481405
Structure after Parameter Learning
[['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [2.108, 10, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.278, 21, 22], 'false,true': [9.836, 193, 194]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [2.108, 10, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.278, 21, 22], 'false,true': [9.836, 193, 194]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I)', 'false,false,true': 'workedunder(K, B)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(J, B)'}, {'true,false': [0.0, 0, 0], 'false,true': [9.836, 193, 194], 'false,false,false': [0.0, 0, 0], 'true,true': [3.278, 21, 22], 'false,false,true,false': [0.0, 0, 0], 'false,false,true,true': [2.108, 10, 8]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [9.836, 193, 194], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [2.108, 10, 8], 'true': [3.278, 21, 22]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I), workedunder(J, I), workedunder(J, K)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(L, B)'}, {'true,false': [0.0, 0, 0], 'false,false,true': [2.108, 10, 8], 'true,true': [3.278, 21, 22], 'false,true': [9.836, 193, 194], 'false,false,false': [0.0, 0, 0]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [9.836, 193, 194], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [2.108, 10, 8], 'true': [3.278, 21, 22]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'true': 'workedunder(B, D), genre(D, E)'}, {'false,false': [0.0, 0, 0], 'true,true': [9.407, 176, 178], 'true,false,false': [0.0, 0, 0], 'true,false,true': [2.871, 17, 16], 'false,true': [3.897, 31, 30]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [3.278, 21, 22], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [9.836, 193, 194], 'false,false,false,false,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'false,false,false,false,false,false': [2.108, 10, 8]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false': 'workedunder(M, B), workedunder(M, N), genre(N, P)'}, {'false,false,false,false,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [3.278, 21, 22], 'false,false,false,false,false,true': [1.984, 9, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.707, 1, 1], 'true': [9.836, 193, 194]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [3.278, 21, 22], 'false,false,false,false,false,false': [2.107, 10, 8], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [9.836, 193, 194]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, I).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, I), workedunder(J, I), workedunder(J, K).;false;true', '4;false,false;workedunder(L, B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true,true;workedunder(G, B).;false;false', '7;true;workedunder(F, B).;true;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;false;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5012919896640827), ('true', 0.5116279069767442), ('false,false,false,true', 0.5555555555555556)]
Tree #2: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5012919896640827), ('true', 0.5116279069767442), ('false,false,false,true', 0.5555555555555556)]
Tree #3: [('false,false,false', 0), ('true,false', 0), ('false,false,true,false', 0), ('false,true', 0.5012919896640827), ('true,true', 0.5116279069767442), ('false,false,true,true', 0.5555555555555556)]
Tree #4: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5012919896640827), ('true', 0.5116279069767442), ('false,false,false,false,true', 0.5555555555555556)]
Tree #5: [('true,false', 0), ('false,false,false', 0), ('false,true', 0.5012919896640827), ('true,true', 0.5116279069767442), ('false,false,true', 0.5555555555555556)]
Tree #6: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5012919896640827), ('true', 0.5116279069767442), ('false,false,false,false,true', 0.5555555555555556)]
Tree #7: [('false,false', 0), ('true,false,false', 0), ('true,true', 0.5028248587570622), ('false,true', 0.5081967213114754), ('true,false,true', 0.5151515151515151)]
Tree #8: [('false,false,true', 0), ('true,false', 0), ('false,false,false,false,false,true', 0), ('true,true,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,true', 0.5012919896640827), ('true,true,true', 0.5116279069767442), ('false,false,false,false,false,false', 0.5555555555555556)]
Tree #9: [('false,false,true', 0), ('false,false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0.5), ('true', 0.5012919896640827), ('false,true', 0.5116279069767442), ('false,false,false,false,false,true', 0.5625)]
Tree #10: [('false,true,true,false', 0), ('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('true', 0.5012919896640827), ('false,true,true,true', 0.5116279069767442), ('false,false,false,false,false,false', 0.5555555555555556)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3697768420762556;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.35944092476359085;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.3025933795439568;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.31856399095141696;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.30983320217569776;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.2616318086752123;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.26406620901387173;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.257264821182968;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.2192721473492705;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.2116898738090047;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20675734986854255;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.1787352457468729;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.16545466791447316;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.16205666012618494;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else if ( workedunder(I, B) )
%   | | then return 0.1424392447767627;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12711779198406117;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12484276988018714;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.11159559999632984;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09665075361099985;  // std dev = 9,407, 354,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=178 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07867437970242407;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09360059867339655;  // std dev = 3,897, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.07373795684065508;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.0719863237228421;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   | else return 0.06458196628816795;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054267095261363855;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05551271149156061;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | else return 0.04925499698446275;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.040817333530640605;  // std dev = 9,836, 387,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=194 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.04171136594703466;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, H), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J), workedunder(K, J), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, N), genre(P, N), workedunder(Q, P) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.037423639437826374;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
Results
   AUC ROC   = 0.481405
   AUC PR    = 0.488879
   CLL	      = -0.694281
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.036 seconds
Total inference time: 0.538 seconds
AUC ROC: 0.481405


Best model AUC ROC so far: 0.481405


******************************************
Best model found
******************************************
Total revision time: 11.257000000000001
Best validation AUC ROC: 0.481405


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.694772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.569 seconds
AUC ROC: 0.5
Dataset: 3, Run: 1, Fold: 2, Type: transfer, Time: 00:42:38
{'Parameter Learning results': {'AUC ROC': 0.5, 'AUC PR': 0.5, 'F1': nan, 'Recall': 0.0, 'Learning time': 5.174, 'Inference time': 0.582, 'Precision': [nan, 0.5], 'CLL': -0.694772}, 'AUC ROC': 0.5, 'AUC PR': 0.5, 'Mapping results': {'Generating mappings time': 7.108933448791504, 'Generating paths time': 2.6838722229003906, 'Knowledge compiling time': 0.021255970001220703, 'Total time': 42.012502908706665, 'Possible mappings': 76322, 'Finding best mapping': 32.19843316078186}, 'F1': nan, 'Recall': 0.0, 'Learning time': 11.257000000000001, 'Inference time': 0.569, 'Precision': [nan, 0.5], 'CLL': -0.694772}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.36692086492407133;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.3535193054698794;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.34995221378803576;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.3161525571762434;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.3048265888400475;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.30180906690868475;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.2621901131146798;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.25335357571162803;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.2509923434990771;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.21033170903974946;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.2039097075195277;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.20218658216144808;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.16452041161973321;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.16008834822951648;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.15889483491362605;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.12649249377133875;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.1235236474411371;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.12272311797327644;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.09621178125013986;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.09424513759715235;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.09371615852810553;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.07271489423925935;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.07140931965198039;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.07106067603972865;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.054757898849947036;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.053882149621363756;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.05365116486901162;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.041153362844707754;  // std dev = 0,500, 171,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=87 */
%   else if ( actor(B) )
%   | then return 0.04055729853720723;  // std dev = 0,500, 216,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=107 */
%   | else return 0.04040281491169826;  // std dev = 0,500, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
Results
   AUC ROC   = 0.537721
   AUC PR    = 0.536594
   CLL	      = -0.69418
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.159 seconds
Total inference time: 0.5 seconds
AUC ROC: 0.537721


Dataset: 3, Run: 1, Fold: 2, Type: scratch, Time: 00:42:49
{'AUC ROC': 0.537721, 'AUC PR': 0.536594, 'F1': nan, 'Recall': 0.0, 'Learning time': 10.159, 'Inference time': 0.5, 'Precision': [nan, 0.5], 'CLL': -0.69418}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> workedunder(A,B)', 'yearsinprogram(A,B) -> workedunder(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'hasposition(A,B) -> genre(A,B)', 'projectmember(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'actor(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,true': [0.392, 166, 39], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,true,false': [0.447, 102, 39], 'false,false,false,true': [0.478, 11, 6], 'false,false,false,false,true,false': [0.464, 10, 22], 'true': [0.46, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J)', 'false,false,true': 'workedunder(L, B)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'director(B)', 'false,false': 'workedunder(K, B)', 'false,false,true,false': 'workedunder(K, M), genre(M, N)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)'}, {'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,true,false,false': [0.464, 10, 22], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,true,true': 'workedunder(L, J)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,false,false,true': [0.478, 11, 6], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,true,true,false': [0.493, 177, 125], 'true': [0.457, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J), workedunder(K, J), workedunder(K, L)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'workedunder(B, N)', 'false,false': 'workedunder(M, B)', 'false,false,false,true': 'workedunder(B, P), workedunder(Q, P)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false,false,false': 'actor(B)'}, {'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,false,false': [0.35, 6, 1], 'false,false,false,true,false': [0.447, 102, 39], 'true,false,false': [0.413, 17, 61], 'false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,false,false,false': 'workedunder(R, B)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'false,false,false': 'workedunder(M, B)', 'false,false': 'workedunder(J, B), workedunder(J, K), workedunder(L, K)', 'false,false,false,false,false': 'actor(B)', 'true': 'workedunder(B, D), genre(D, E)', 'false,false,false,false': 'genre(B, N), genre(P, N), genre(P, Q)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,true': 'workedunder(M, L)', 'false,false,false,false,false,false': 'workedunder(B, R)', 'false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,false,false,true': [0.443, 74, 27], 'false,false,false,true': [0.35, 54, 9], 'true': [0.317, 47, 6]}]] 

Transferred target predicate: movie 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '0;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '0;false,false,false;workedunder(L, B).;false;true', '0;false,false;workedunder(B, I).;true;true', '0;false,false,false,false,false;actor(B).;false;false', '0;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '0;false,false,false,false;workedunder(M, B).;true;true', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '1;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '1;false,false,false;workedunder(L, B).;false;true', '1;false,false;workedunder(B, I).;true;true', '1;false,false,false,false,false;director(B).;false;false', '1;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '1;false,false,false,false;workedunder(M, B).;true;true', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, J).;false;true', '2;false,false,true;workedunder(L, B).;false;true', '2;true,false;workedunder(I, B).;false;false', '2;false,false,false;director(B).;false;false', '2;false,false;workedunder(K, B).;true;true', '2;false,false,true,false;workedunder(K, M), genre(M, N).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;true', '3;false,false,false;workedunder(B, J).;true;true', '3;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '3;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;false', '3;false,false,false,true;workedunder(B, K), workedunder(L, K).;true;false', '3;false,false,false,true,true;workedunder(L, J).;false;false', '3;false,false,false,false;workedunder(M, B).;false;true', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '4;false;workedunder(B, J), workedunder(K, J), workedunder(K, L).;false;true', '4;true,false;workedunder(I, B).;false;false', '4;false,false,false;workedunder(B, N).;true;true', '4;false,false;workedunder(M, B).;false;true', '4;false,false,false,true;workedunder(B, P), workedunder(Q, P).;false;false', '4;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '4;false,false,false,false;actor(B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;true', '5;false,false,false;workedunder(B, J).;true;true', '5;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '5;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '5;false,false,false,true;workedunder(B, K), workedunder(L, K).;false;false', '5;false,false,false,false,false,false;workedunder(R, B).;false;false', '5;false,false,false,false;workedunder(M, B).;false;true', '6;;movie(A, B) :- workedunder(B, C).;true;true', '6;false;workedunder(H, B), workedunder(I, B).;false;true', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;false,false,false;workedunder(M, B).;false;true', '6;false,false;workedunder(J, B), workedunder(J, K), workedunder(L, K).;false;true', '6;false,false,false,false,false;actor(B).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '6;false,false,false,false;genre(B, N), genre(P, N), genre(P, Q).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;true', '7;true,true;workedunder(G, B).;false;false', '7;false,false,false;workedunder(B, K), workedunder(L, K).;false;true', '7;false,false;workedunder(B, I), genre(I, J).;false;true', '7;false,false,false,false,false;workedunder(B, Q).;false;false', '7;true;workedunder(F, B).;true;false', '7;false,false,false,false;workedunder(B, M), workedunder(N, M), workedunder(N, P).;false;true', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;true', '8;false,false,false;workedunder(B, L).;true;true', '8;false,false;genre(B, I), genre(J, I), workedunder(K, J).;false;true', '8;false,false,false,false,false;director(B).;false;true', '8;false,false,false,true;workedunder(M, L).;false;false', '8;false,false,false,false,false,false;workedunder(B, R).;false;false', '8;false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;true;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,true,true;workedunder(H, B).;false;false', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.41370449065506787;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.35575659060190046;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3555557392714985;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3067185632343026;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.29261484610968785;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.25483256348876177;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(J, B) )
%   | | then if ( workedunder(K, B) )
%   | | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.23214124828648158;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F) )
%   | then return 0.20498747289280683;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.17942003892665268;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I), workedunder(J, I), workedunder(J, K) )
%   | then return 0.16083389786915395;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(L, B) )
%   | | then return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.13647857812921962;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F) )
%   | then return 0.12402344574263913;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09571484763510398;  // std dev = 9,987, 399,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=199 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07065219099350027;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, B), workedunder(I, B) )
%   | then return 0.09912041436527;  // std dev = 2,709, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0782810484800296;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07162714753384461;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(B, I), genre(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M), workedunder(N, M), workedunder(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(B, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.044885686328120435;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054027127168431645;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.058726411990767974;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | else if ( genre(B, I), genre(J, I), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(M, B), workedunder(M, N), genre(N, P) )
%   | | | | then return 0.035586354455786874;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04065490375051833;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then if ( workedunder(H, B) )
%   | | | then return 0.044046884571939025;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, I), workedunder(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, N) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, P), genre(Q, P), workedunder(R, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.02809232433978211;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Results
   AUC ROC   = 0.477273
   AUC PR    = 0.535787
   CLL	      = -0.693359
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.045455
   F1        = 0.086957


Total learning time: 5.176 seconds
Total inference time: 0.497 seconds
AUC ROC: 0.477273


Results in test set
   AUC ROC   = 0.477273
   AUC PR    = 0.535787
   CLL	      = -0.693359
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.045455
   F1        = 0.086957


Total inference time: 0.497 seconds
AUC ROC: 0.477273
Structure after Parameter Learning
[['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.816, 2, 1], 'false,false,true': [0.0, 0, 0], 'true': [2.582, 12, 15], 'false,true': [10.222, 210, 208]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.816, 2, 1], 'false,false,true': [0.0, 0, 0], 'true': [2.582, 12, 15], 'false,true': [10.222, 210, 208]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I)', 'false,false,true': 'workedunder(K, B)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(J, B)'}, {'true,false': [0.0, 0, 0], 'false,true': [10.222, 210, 208], 'false,false,false': [0.0, 0, 0], 'true,true': [2.582, 12, 15], 'false,false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.816, 2, 1]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.222, 210, 208], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.816, 2, 1], 'true': [2.582, 12, 15]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I), workedunder(J, I), workedunder(J, K)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(L, B)'}, {'true,false': [0.0, 0, 0], 'false,false,true': [0.816, 2, 1], 'true,true': [2.582, 12, 15], 'false,true': [10.222, 210, 208], 'false,false,false': [0.0, 0, 0]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.222, 210, 208], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.816, 2, 1], 'true': [2.582, 12, 15]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'true': 'workedunder(B, D), genre(D, E)'}, {'false,false': [0.0, 0, 0], 'true,true': [9.987, 200, 199], 'true,false,false': [0.0, 0, 0], 'true,false,true': [2.176, 10, 9], 'false,true': [2.709, 14, 16]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [2.582, 12, 15], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [10.222, 210, 208], 'false,false,false,false,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'false,false,false,false,false,false': [0.816, 2, 1]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false,false': 'workedunder(M, B), workedunder(M, N), genre(N, P)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [2.582, 12, 15], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.816, 2, 1], 'true': [10.222, 210, 208]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [2.582, 12, 15], 'false,false,false,false,false,false': [0.816, 2, 1], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [10.222, 210, 208]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, I).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, I), workedunder(J, I), workedunder(J, K).;false;true', '4;false,false;workedunder(L, B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true,true;workedunder(G, B).;false;false', '7;true;workedunder(F, B).;true;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;false;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5023923444976076), ('true', 0.5555555555555556), ('false,false,false,true', 0.6666666666666666)]
Tree #2: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5023923444976076), ('true', 0.5555555555555556), ('false,false,false,true', 0.6666666666666666)]
Tree #3: [('false,false,false', 0), ('true,false', 0), ('false,false,true,false', 0), ('false,true', 0.5023923444976076), ('true,true', 0.5555555555555556), ('false,false,true,true', 0.6666666666666666)]
Tree #4: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5023923444976076), ('true', 0.5555555555555556), ('false,false,false,false,true', 0.6666666666666666)]
Tree #5: [('true,false', 0), ('false,false,false', 0), ('false,true', 0.5023923444976076), ('true,true', 0.5555555555555556), ('false,false,true', 0.6666666666666666)]
Tree #6: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5023923444976076), ('true', 0.5555555555555556), ('false,false,false,false,true', 0.6666666666666666)]
Tree #7: [('false,false', 0), ('true,false,false', 0), ('true,true', 0.5012531328320802), ('true,false,true', 0.5263157894736842), ('false,true', 0.5333333333333333)]
Tree #8: [('false,false,true', 0), ('true,false', 0), ('false,false,false,false,false,true', 0), ('true,true,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,true', 0.5023923444976076), ('true,true,true', 0.5555555555555556), ('false,false,false,false,false,false', 0.6666666666666666)]
Tree #9: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('true', 0.5023923444976076), ('false,true', 0.5555555555555556), ('false,false,false,false,true', 0.6666666666666666)]
Tree #10: [('false,true,true,false', 0), ('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('true', 0.5023923444976076), ('false,true,true,true', 0.5555555555555556), ('false,false,false,false,false,false', 0.6666666666666666)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.41370449065506787;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.35575659060190046;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3555557392714985;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3067185632343026;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.29261484610968785;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.25483256348876177;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.23214124828648158;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F) )
%   | then return 0.20498747289280683;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.17942003892665268;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.16083389786915395;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else if ( workedunder(I, B) )
%   | | then return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.13647857812921962;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else if ( workedunder(B, F) )
%   | then return 0.12402344574263913;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09571484763510398;  // std dev = 9,987, 399,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=199 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.07065219099350027;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09912041436527;  // std dev = 2,709, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0782810484800296;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07162714753384461;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   | else return 0.044885686328120435;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.054027127168431645;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.058726411990767974;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | else return 0.035586354455786874;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04065490375051833;  // std dev = 10,222, 418,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=208 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.044046884571939025;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, H), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J), workedunder(K, J), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, N), genre(P, N), workedunder(Q, P) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.02809232433978211;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Results
   AUC ROC   = 0.477273
   AUC PR    = 0.535787
   CLL	      = -0.693359
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.045455
   F1        = 0.086957


Total learning time: 4.479 seconds
Total inference time: 0.531 seconds
AUC ROC: 0.477273


Best model AUC ROC so far: 0.477273


******************************************
Best model found
******************************************
Total revision time: 10.683
Best validation AUC ROC: 0.477273


Results
   AUC ROC   = 0.468783
   AUC PR    = 0.478707
   CLL	      = -0.71462
   Precision = 0.458333 at threshold = 0.5
   Recall    = 0.177419
   F1        = 0.255814


Total inference time: 0.595 seconds
AUC ROC: 0.468783
Dataset: 3, Run: 1, Fold: 3, Type: transfer, Time: 00:43:43
{'Parameter Learning results': {'AUC ROC': 0.468783, 'AUC PR': 0.478707, 'F1': 0.255814, 'Recall': 0.177419, 'Learning time': 5.176, 'Inference time': 0.623, 'Precision': [0.458333, 0.5], 'CLL': -0.71462}, 'AUC ROC': 0.468783, 'AUC PR': 0.478707, 'Mapping results': {'Generating mappings time': 7.018143653869629, 'Generating paths time': 2.7273783683776855, 'Knowledge compiling time': 0.02051997184753418, 'Total time': 41.61441254615784, 'Possible mappings': 76322, 'Finding best mapping': 31.848362922668457}, 'F1': 0.255814, 'Recall': 0.177419, 'Learning time': 10.683, 'Inference time': 0.595, 'Precision': [0.458333, 0.5], 'CLL': -0.71462}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.37962132773754714;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.34050187627597933;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.39148226843284567;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.32687016604690156;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.2938088432930037;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.336865379051268;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.27051421292291417;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.24471789042176859;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.27824435389960733;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.21634396817512944;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.19759293293549018;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.22189595847385674;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.16864871046536736;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   | else return 0.15570348323464875;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   else return 0.17244533059929595;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.12925514527825563;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.12057945577250759;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.13179673974618217;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.09805165171171704;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.0923013870232334;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.09975589749696741;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.07395209927442215;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.07013259959695915;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.0751141961288415;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.05560490303837656;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.05304162920772421;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.05641688127395642;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.04174572550002923;  // std dev = 0,500, 163,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=85 */
%   else if ( actor(B) )
%   | then return 0.04000042525438774;  // std dev = 0,500, 255,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=123 */
%   | else return 0.04232811156004835;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
Results
   AUC ROC   = 0.516129
   AUC PR    = 0.514714
   CLL	      = -0.693899
   Precision = 0.529412 at threshold = 0.5
   Recall    = 0.290323
   F1        = 0.375


Total learning time: 7.587 seconds
Total inference time: 0.498 seconds
AUC ROC: 0.516129


Dataset: 3, Run: 1, Fold: 3, Type: scratch, Time: 00:43:52
{'AUC ROC': 0.516129, 'AUC PR': 0.514714, 'F1': 0.375, 'Recall': 0.290323, 'Learning time': 7.587, 'Inference time': 0.498, 'Precision': [0.529412, 0.5], 'CLL': -0.693899}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> workedunder(A,B)', 'yearsinprogram(A,B) -> workedunder(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'hasposition(A,B) -> genre(A,B)', 'projectmember(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'actor(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,true': [0.392, 166, 39], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,true,false': [0.447, 102, 39], 'false,false,false,true': [0.478, 11, 6], 'false,false,false,false,true,false': [0.464, 10, 22], 'true': [0.46, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J)', 'false,false,true': 'workedunder(L, B)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'director(B)', 'false,false': 'workedunder(K, B)', 'false,false,true,false': 'workedunder(K, M), genre(M, N)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)'}, {'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,true,false,false': [0.464, 10, 22], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,true,true': 'workedunder(L, J)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,false,false,true': [0.478, 11, 6], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,true,true,false': [0.493, 177, 125], 'true': [0.457, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J), workedunder(K, J), workedunder(K, L)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'workedunder(B, N)', 'false,false': 'workedunder(M, B)', 'false,false,false,true': 'workedunder(B, P), workedunder(Q, P)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false,false,false': 'actor(B)'}, {'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,false,false': [0.35, 6, 1], 'false,false,false,true,false': [0.447, 102, 39], 'true,false,false': [0.413, 17, 61], 'false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,false,false,false': 'workedunder(R, B)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'false,false,false': 'workedunder(M, B)', 'false,false': 'workedunder(J, B), workedunder(J, K), workedunder(L, K)', 'false,false,false,false,false': 'actor(B)', 'true': 'workedunder(B, D), genre(D, E)', 'false,false,false,false': 'genre(B, N), genre(P, N), genre(P, Q)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,true': 'workedunder(M, L)', 'false,false,false,false,false,false': 'workedunder(B, R)', 'false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,false,false,true': [0.443, 74, 27], 'false,false,false,true': [0.35, 54, 9], 'true': [0.317, 47, 6]}]] 

Transferred target predicate: movie 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '0;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '0;false,false,false;workedunder(L, B).;false;true', '0;false,false;workedunder(B, I).;true;true', '0;false,false,false,false,false;actor(B).;false;false', '0;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '0;false,false,false,false;workedunder(M, B).;true;true', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '1;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '1;false,false,false;workedunder(L, B).;false;true', '1;false,false;workedunder(B, I).;true;true', '1;false,false,false,false,false;director(B).;false;false', '1;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '1;false,false,false,false;workedunder(M, B).;true;true', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, J).;false;true', '2;false,false,true;workedunder(L, B).;false;true', '2;true,false;workedunder(I, B).;false;false', '2;false,false,false;director(B).;false;false', '2;false,false;workedunder(K, B).;true;true', '2;false,false,true,false;workedunder(K, M), genre(M, N).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;true', '3;false,false,false;workedunder(B, J).;true;true', '3;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '3;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;false', '3;false,false,false,true;workedunder(B, K), workedunder(L, K).;true;false', '3;false,false,false,true,true;workedunder(L, J).;false;false', '3;false,false,false,false;workedunder(M, B).;false;true', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '4;false;workedunder(B, J), workedunder(K, J), workedunder(K, L).;false;true', '4;true,false;workedunder(I, B).;false;false', '4;false,false,false;workedunder(B, N).;true;true', '4;false,false;workedunder(M, B).;false;true', '4;false,false,false,true;workedunder(B, P), workedunder(Q, P).;false;false', '4;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '4;false,false,false,false;actor(B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;true', '5;false,false,false;workedunder(B, J).;true;true', '5;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '5;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '5;false,false,false,true;workedunder(B, K), workedunder(L, K).;false;false', '5;false,false,false,false,false,false;workedunder(R, B).;false;false', '5;false,false,false,false;workedunder(M, B).;false;true', '6;;movie(A, B) :- workedunder(B, C).;true;true', '6;false;workedunder(H, B), workedunder(I, B).;false;true', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;false,false,false;workedunder(M, B).;false;true', '6;false,false;workedunder(J, B), workedunder(J, K), workedunder(L, K).;false;true', '6;false,false,false,false,false;actor(B).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '6;false,false,false,false;genre(B, N), genre(P, N), genre(P, Q).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;true', '7;true,true;workedunder(G, B).;false;false', '7;false,false,false;workedunder(B, K), workedunder(L, K).;false;true', '7;false,false;workedunder(B, I), genre(I, J).;false;true', '7;false,false,false,false,false;workedunder(B, Q).;false;false', '7;true;workedunder(F, B).;true;false', '7;false,false,false,false;workedunder(B, M), workedunder(N, M), workedunder(N, P).;false;true', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;true', '8;false,false,false;workedunder(B, L).;true;true', '8;false,false;genre(B, I), genre(J, I), workedunder(K, J).;false;true', '8;false,false,false,false,false;director(B).;false;true', '8;false,false,false,true;workedunder(M, L).;false;false', '8;false,false,false,false,false,false;workedunder(B, R).;false;false', '8;false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;true;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,true,true;workedunder(H, B).;false;false', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3819584589090352;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3545518127973498;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.39148226843284567;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.32884073203744923;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3056997946057058;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.3368653790512674;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.2720407226789254;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.25403631828450846;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(J, B) )
%   | | then if ( workedunder(K, B) )
%   | | | then return 0.2782443538996074;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.21744269676868916;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20440738098436342;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.2218959584738568;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.1694011705697492;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I), workedunder(J, I), workedunder(J, K) )
%   | then return 0.16043270689962336;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(L, B) )
%   | | then return 0.17244533059929623;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12975869989868563;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12375452098505707;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.13179673974618217;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09153495530067185;  // std dev = 9,835, 387,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=191 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.13132823695441703;  // std dev = 2,733, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, B), workedunder(I, B) )
%   | then return 0.09874821260862203;  // std dev = 3,770, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0740913139756165;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07150823728563523;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(B, I), genre(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M), workedunder(N, M), workedunder(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(B, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.07536434774234296;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.05394817345935733;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.055695690102069886;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else if ( genre(B, I), genre(J, I), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(M, B), workedunder(M, N), genre(N, P) )
%   | | | | then return 0.02327252429400528;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | | else if ( director(B) )
%   | | | | | then return 0.06173406275554364;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04060193135433895;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then if ( workedunder(H, B) )
%   | | | then return 0.04180732022928801;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, I), workedunder(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, N) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, P), genre(Q, P), workedunder(R, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.042469713488803684;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 0.565217
   AUC PR    = 0.580542
   CLL	      = -0.691176
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.086957
   F1        = 0.153846


Total learning time: 5.727 seconds
Total inference time: 0.532 seconds
AUC ROC: 0.565217


Results in test set
   AUC ROC   = 0.565217
   AUC PR    = 0.580542
   CLL	      = -0.691176
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.086957
   F1        = 0.153846


Total inference time: 0.532 seconds
AUC ROC: 0.565217
Structure after Parameter Learning
[['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.932, 7, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.237, 20, 22], 'false,true': [10.21, 210, 207]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.932, 7, 8], 'false,false,true': [0.0, 0, 0], 'true': [3.237, 20, 22], 'false,true': [10.21, 210, 207]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I)', 'false,false,true': 'workedunder(K, B)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(J, B)'}, {'true,false': [0.0, 0, 0], 'false,true': [10.21, 210, 207], 'false,false,false': [0.0, 0, 0], 'true,true': [3.237, 20, 22], 'false,false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.932, 7, 8]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.21, 210, 207], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [1.932, 7, 8], 'true': [3.237, 20, 22]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I), workedunder(J, I), workedunder(J, K)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(L, B)'}, {'true,false': [0.0, 0, 0], 'false,false,true': [1.932, 7, 8], 'true,true': [3.237, 20, 22], 'false,true': [10.21, 210, 207], 'false,false,false': [0.0, 0, 0]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.21, 210, 207], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [1.932, 7, 8], 'true': [3.237, 20, 22]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'true': 'workedunder(B, D), genre(D, E)'}, {'false,false': [0.0, 0, 0], 'true,true': [9.835, 196, 191], 'true,false,false': [0.0, 0, 0], 'true,false,true': [2.733, 14, 16], 'false,true': [3.77, 27, 30]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [3.237, 20, 22], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [10.209, 210, 207], 'false,false,false,false,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'false,false,false,false,false,false': [1.932, 7, 8]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false': 'workedunder(M, B), workedunder(M, N), genre(N, P)'}, {'false,false,false,false,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [3.237, 20, 22], 'false,false,false,false,false,true': [1.797, 6, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.707, 1, 1], 'true': [10.209, 210, 207]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [3.237, 20, 22], 'false,false,false,false,false,false': [1.932, 7, 8], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [10.209, 210, 207]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, I).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, I), workedunder(J, I), workedunder(J, K).;false;true', '4;false,false;workedunder(L, B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true,true;workedunder(G, B).;false;false', '7;true;workedunder(F, B).;true;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;false;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false,false,true', 0.5333333333333333)]
Tree #2: [('false,false,true', 0), ('false,false,false,false', 0), ('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false,false,true', 0.5333333333333333)]
Tree #3: [('false,false,false', 0), ('true,false', 0), ('false,false,true,false', 0), ('false,true', 0.5035971223021583), ('true,true', 0.5238095238095238), ('false,false,true,true', 0.5333333333333333)]
Tree #4: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false,false,false,true', 0.5333333333333333)]
Tree #5: [('true,false', 0), ('false,false,false', 0), ('false,true', 0.5035971223021583), ('true,true', 0.5238095238095238), ('false,false,true', 0.5333333333333333)]
Tree #6: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false,false,false,true', 0.5333333333333333)]
Tree #7: [('false,false', 0), ('true,false,false', 0), ('true,true', 0.5064599483204134), ('false,true', 0.5263157894736842), ('true,false,true', 0.5333333333333333)]
Tree #8: [('false,false,true', 0), ('true,false', 0), ('false,false,false,false,false,true', 0), ('true,true,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,true', 0.5035971223021583), ('true,true,true', 0.5238095238095238), ('false,false,false,false,false,false', 0.5333333333333333)]
Tree #9: [('false,false,true', 0), ('false,false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0.5), ('true', 0.5035971223021583), ('false,true', 0.5238095238095238), ('false,false,false,false,false,true', 0.5384615384615384)]
Tree #10: [('false,true,true,false', 0), ('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('true', 0.5035971223021583), ('false,true,true,true', 0.5238095238095238), ('false,false,false,false,false,false', 0.5333333333333333)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3819584589090352;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3545518127973498;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.39148226843284567;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.32884073203744923;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.3056997946057058;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.3368653790512674;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.2720407226789254;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.25403631828450846;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.2782443538996074;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.21744269676868916;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.20440738098436342;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.2218959584738568;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.1694011705697492;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.16043270689962336;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else if ( workedunder(I, B) )
%   | | then return 0.17244533059929623;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12975869989868563;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.12375452098505707;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.13179673974618217;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09153495530067185;  // std dev = 9,835, 387,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=191 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.13132823695441703;  // std dev = 2,733, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09874821260862203;  // std dev = 3,770, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.0740913139756165;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07150823728563523;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.07536434774234296;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.05394817345935733;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.055695690102069886;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.056605857627338496;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04060193135433895;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.04180732022928801;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, H), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J), workedunder(K, J), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, N), genre(P, N), workedunder(Q, P) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.042470204060232615;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 0.566163
   AUC PR    = 0.5896
   CLL	      = -0.690866
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.130435
   F1        = 0.222222


Total learning time: 5.756 seconds
Total inference time: 0.519 seconds
AUC ROC: 0.566163


Best model AUC ROC so far: 0.566163


Refining iteration 2
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '2;false;workedunder(B, I).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true;workedunder(B, D), genre(D, E).;false;false', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true;workedunder(F, B).;false;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;true;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;false', '9;false,true;workedunder(G, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #2: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #3: [('true,false', 0), ('false,true', 0.5035971223021583), ('true,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #4: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #5: [('false,false,false', 0), ('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false,true', 0.5333333333333333)]
Tree #6: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #7: [('true,false,false', 0), ('true,true', 0.5064599483204134), ('false', 0.5263157894736842), ('true,false,true', 0.5333333333333333)]
Tree #8: [('true,true,false', 0), ('true,false', 0), ('false,true', 0.5035971223021583), ('true,true,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #9: [('true', 0.5035971223021583), ('false,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #10: [('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('true', 0.5035971223021583), ('false,true,true', 0.5238095238095238), ('false,false,false,false,false,false', 0.5333333333333333)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.3819584589090352;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.35583412028469324;  // std dev = 10,392, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.32884073203744923;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.3067841181359882;  // std dev = 10,392, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.2720407226789254;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.2536014807119081;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.2905319363473968;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.21744269676868916;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.20502283157021553;  // std dev = 10,392, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.1694011705697492;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.15986419426098364;  // std dev = 10,210, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.18849967150413877;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.12975869989868563;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.12403735398979218;  // std dev = 10,392, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.0909911617221713;  // std dev = 9,835, 387,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=191 */
%   | else return 0.13078444337592013;  // std dev = 2,733, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   else return 0.10273874970689476;  // std dev = 3,770, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then return 0.07310357192906755;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, G) )
%   | then return 0.07108844105255685;  // std dev = 10,209, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.08973012811124036;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then if ( female(B) )
%   | then return 0.07295122095449029;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   | else return 0.038068975202407124;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05494797333347816;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.06748534536641704;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.040355646725216916;  // std dev = 10,206, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.04124425851093137;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.05066032858643426;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 0.73913
   AUC PR    = 0.695279
   CLL	      = -0.687863
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 6.567 seconds
Total inference time: 0.548 seconds
AUC ROC: 0.73913


Best model AUC ROC so far: 0.73913


Refining iteration 3
********************************
Candidate for revision
['2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;false', '6;;movie(A, B) :- workedunder(B, C).;false;false', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '7;false;workedunder(B, G).;false;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.5023148148148148), ('true', 0.5238095238095238)]
Tree #2: [('false', 0.5023148148148148), ('true', 0.5238095238095238)]
Tree #3: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #4: [('false', 0.5023148148148148), ('true', 0.5238095238095238)]
Tree #5: [('false,true', 0.5035971223021583), ('true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #6: [('false', 0.5023148148148148), ('true', 0.5238095238095238)]
Tree #7: [('true,true', 0.5064599483204134), ('false', 0.5263157894736842), ('true,false', 0.5333333333333333)]
Tree #8: [('true,false', 0), ('false,true', 0.5035971223021583), ('true,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #9: [('true,true', 0.5161290322580645), ('true,false', 0.5194805194805194), ('false,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]
Tree #10: [('false,true,false', 0), ('true', 0.5035971223021583), ('false,true,true', 0.5238095238095238), ('false,false', 0.5333333333333333)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.3742779673575739;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.3386684156189894;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.3844647245731954;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.3223629158985239;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.29225573318398057;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.33095332360970464;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.27116961926783567;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.2549158624065556;  // std dev = 10,388, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.21636950987298303;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.19437015080672382;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.22005937117937907;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.16794362418171552;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else return 0.16094853858155406;  // std dev = 10,387, 432,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=215 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.13177907519109808;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.11670387747520229;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.13255146294441583;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.09413753243737331;  // std dev = 10,204, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else return 0.10050603656405489;  // std dev = 3,770, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.07174976164347151;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( workedunder(B, F) )
%   | then return 0.07132376669140986;  // std dev = 10,204, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   | else return 0.08702567962126331;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.05381829050720323;  // std dev = 10,204, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05392355130236813;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.06543287442999951;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04051183016093578;  // std dev = 10,204, 417,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then return 0.04047298160367946;  // std dev = 3,237, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.04911362229771322;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 0.73913
   AUC PR    = 0.695279
   CLL	      = -0.681065
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 6.67 seconds
Total inference time: 0.491 seconds
AUC ROC: 0.73913


Best model AUC ROC so far: 0.73913


******************************************
Best model found
******************************************
Total revision time: 26.810000000000002
Best validation AUC ROC: 0.73913


Results
   AUC ROC   = 0.534361
   AUC PR    = 0.518429
   CLL	      = -0.695404
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.542 seconds
AUC ROC: 0.534361
Dataset: 3, Run: 1, Fold: 4, Type: transfer, Time: 00:45:02
{'Parameter Learning results': {'AUC ROC': 0.489796, 'AUC PR': 0.487037, 'F1': nan, 'Recall': 0.0, 'Learning time': 5.727, 'Inference time': 0.571, 'Precision': [nan, 0.5], 'CLL': -0.695923}, 'AUC ROC': 0.534361, 'AUC PR': 0.518429, 'Mapping results': {'Generating mappings time': 7.056199312210083, 'Generating paths time': 2.654433250427246, 'Knowledge compiling time': 0.021689176559448242, 'Total time': 41.763224363327026, 'Possible mappings': 76322, 'Finding best mapping': 32.0308952331543}, 'F1': nan, 'Recall': 0.0, 'Learning time': 26.810000000000002, 'Inference time': 0.542, 'Precision': [nan, 0.5], 'CLL': -0.695404}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.3742779673575739;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.3386684156189894;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.3844647245731954;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.3223629158985239;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.29225573318398057;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.33095332360970464;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.26701800590178987;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.24349741138539224;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.27367588493199607;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.2138230847849146;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.19669686695682195;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.21861833752124868;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.16692004970509117;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.15507927399599364;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.17020567418176158;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.1280984079377637;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.12015955256265096;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.13029714935514294;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.09727989149323762;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.09202446015990214;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.09874884064129494;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.07343108545419805;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.06995159949335529;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.07442550608117235;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.055246079506541076;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.05292359688583923;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.055933714161381216;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.0414928703645075;  // std dev = 0,500, 186,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else if ( actor(B) )
%   | then return 0.03992336080698494;  // std dev = 0,500, 231,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=111 */
%   | else return 0.04197987316341327;  // std dev = 0,499, 57,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
Results
   AUC ROC   = 0.534361
   AUC PR    = 0.518429
   CLL	      = -0.694223
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.124 seconds
Total inference time: 0.492 seconds
AUC ROC: 0.534361


Dataset: 3, Run: 1, Fold: 4, Type: scratch, Time: 00:45:12
{'AUC ROC': 0.534361, 'AUC PR': 0.518429, 'F1': nan, 'Recall': 0.0, 'Learning time': 9.124, 'Inference time': 0.492, 'Precision': [nan, 0.5], 'CLL': -0.694223}


Best mapping found: ['tempadvisedby(A,B) -> workedunder(A,B)', 'student(A) -> actor(A)', 'inphase(A,B) -> workedunder(A,B)', 'yearsinprogram(A,B) -> workedunder(A,B)', 'professor(A) -> director(A)', 'advisedby(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'hasposition(A,B) -> genre(A,B)', 'projectmember(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'actor(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,true': [0.392, 166, 39], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.35, 6, 1], 'false,false,true,false': [0.447, 102, 39], 'false,false,false,true': [0.478, 11, 6], 'false,false,false,false,true,false': [0.464, 10, 22], 'true': [0.46, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,true': 'workedunder(B, J), workedunder(K, J)', 'false,false,false': 'workedunder(L, B)', 'false,false': 'workedunder(B, I)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false,true': 'workedunder(M, N), genre(N, P)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,true,true': [0.49, 188, 126], 'false,false,false,false,true,true': [0.3, 9, 1], 'false,false,false,true': [0.478, 11, 6], 'false,false,true,false': [0.447, 102, 39], 'true': [0.46, 205, 469], 'false,false,false,false,true,false': [0.464, 10, 22], 'false,true': [0.392, 166, 39]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J)', 'false,false,true': 'workedunder(L, B)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'director(B)', 'false,false': 'workedunder(K, B)', 'false,false,true,false': 'workedunder(K, M), genre(M, N)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)'}, {'true,true': [0.452, 150, 375], 'false,false,true,true': [0.478, 11, 6], 'true,false,true': [0.499, 38, 33], 'false,false,true,false,true': [0.3, 9, 1], 'false,false,true,false,false': [0.464, 10, 22], 'false,false,false,true': [0.498, 37, 31], 'true,false,false': [0.413, 17, 61], 'false,true': [0.458, 456, 204]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,true,true': 'workedunder(L, J)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,true,true,true': [0.276, 11, 1], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false': [0.485, 53, 54], 'false,false,false,false,true': [0.478, 11, 6], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,true,true,false': [0.493, 177, 125], 'true': [0.457, 205, 469]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, J), workedunder(K, J), workedunder(K, L)', 'true,false': 'workedunder(I, B)', 'false,false,false': 'workedunder(B, N)', 'false,false': 'workedunder(M, B)', 'false,false,false,true': 'workedunder(B, P), workedunder(Q, P)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false,false,false': 'actor(B)'}, {'false,false,true': [0.456, 30, 29], 'true,true': [0.452, 150, 375], 'false,true': [0.392, 166, 39], 'true,false,true': [0.499, 38, 33], 'false,false,false,false,false': [0.35, 6, 1], 'false,false,false,true,false': [0.447, 102, 39], 'true,false,false': [0.413, 17, 61], 'false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)', 'false,false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)', 'false,false,false,true': 'workedunder(B, K), workedunder(L, K)', 'false,false,false,false,false,false': 'workedunder(R, B)', 'false,false,false,false': 'workedunder(M, B)'}, {'false,false,true': [0.412, 119, 33], 'false,false,false,false,false,false,false': [0.488, 43, 32], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.3, 9, 1], 'false,false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,true,false': [0.447, 102, 39], 'false,false,false,false,true': [0.478, 11, 6], 'true': [0.455, 205, 469], 'false,false,false,true,true': [0.489, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'false,false,false': 'workedunder(M, B)', 'false,false': 'workedunder(J, B), workedunder(J, K), workedunder(L, K)', 'false,false,false,false,false': 'actor(B)', 'true': 'workedunder(B, D), genre(D, E)', 'false,false,false,false': 'genre(B, N), genre(P, N), genre(P, Q)'}, {'false,false,true': [0.401, 39, 117], 'true,true': [0.282, 32, 3], 'false,true': [0.466, 141, 287], 'true,false,true': [0.489, 221, 147], 'false,false,false,false,false,true': [0.498, 37, 31], 'false,false,false,true': [0.499, 38, 33], 'false,false,false,false,true': [0.413, 17, 61], 'false,false,false,false,false,false': [0.35, 6, 1], 'true,false,false': [0.403, 203, 54]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [0.465, 130, 281], 'false,false,true': [0.282, 32, 3], 'true,false': [0.432, 65, 159], 'false,true': [0.317, 47, 6], 'false,false,false,false,false,true': [0.443, 74, 27], 'true,true,false': [0.437, 10, 29], 'false,false,false,true': [0.489, 221, 147], 'false,false,false,false,true': [0.35, 54, 9], 'false,false,false,false,false,false': [0.468, 101, 73]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,true': 'workedunder(M, L)', 'false,false,false,false,false,false': 'workedunder(B, R)', 'false,false,false,false': 'workedunder(N, B), workedunder(N, P), genre(P, Q)'}, {'false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false,false': [0.498, 37, 31], 'false,true': [0.453, 205, 469], 'false,false,false,false,false,true': [0.464, 10, 22], 'false,false,false,false,false,false,true': [0.458, 28, 12], 'false,false,false,true,false': [0.443, 74, 27], 'false,false,false,false,true': [0.3, 9, 1], 'true': [0.387, 166, 39], 'false,false,false,true,true': [0.487, 188, 126]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.437, 10, 29], 'false,true,true,true': [0.465, 130, 281], 'false,false,true': [0.477, 253, 150], 'false,true,false': [0.432, 65, 159], 'false,false,false,false,false,true': [0.445, 17, 7], 'false,false,false,false,false,false': [0.47, 84, 66], 'false,false,false,false,true': [0.443, 74, 27], 'false,false,false,true': [0.35, 54, 9], 'true': [0.317, 47, 6]}]] 

Transferred target predicate: movie 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '0;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '0;false,false,false;workedunder(L, B).;false;true', '0;false,false;workedunder(B, I).;true;true', '0;false,false,false,false,false;actor(B).;false;false', '0;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '0;false,false,false,false;workedunder(M, B).;true;true', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;true', '1;false,false,true;workedunder(B, J), workedunder(K, J).;false;false', '1;false,false,false;workedunder(L, B).;false;true', '1;false,false;workedunder(B, I).;true;true', '1;false,false,false,false,false;director(B).;false;false', '1;false,false,false,false,true;workedunder(M, N), genre(N, P).;false;false', '1;false,false,false,false;workedunder(M, B).;true;true', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, J).;false;true', '2;false,false,true;workedunder(L, B).;false;true', '2;true,false;workedunder(I, B).;false;false', '2;false,false,false;director(B).;false;false', '2;false,false;workedunder(K, B).;true;true', '2;false,false,true,false;workedunder(K, M), genre(M, N).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;true', '3;false,false,false;workedunder(B, J).;true;true', '3;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '3;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;false', '3;false,false,false,true;workedunder(B, K), workedunder(L, K).;true;false', '3;false,false,false,true,true;workedunder(L, J).;false;false', '3;false,false,false,false;workedunder(M, B).;false;true', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '4;false;workedunder(B, J), workedunder(K, J), workedunder(K, L).;false;true', '4;true,false;workedunder(I, B).;false;false', '4;false,false,false;workedunder(B, N).;true;true', '4;false,false;workedunder(M, B).;false;true', '4;false,false,false,true;workedunder(B, P), workedunder(Q, P).;false;false', '4;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;true', '4;false,false,false,false;actor(B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;true', '5;false,false,false;workedunder(B, J).;true;true', '5;false,false;workedunder(B, G), workedunder(H, G), workedunder(H, I).;false;true', '5;false,false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '5;false,false,false,true;workedunder(B, K), workedunder(L, K).;false;false', '5;false,false,false,false,false,false;workedunder(R, B).;false;false', '5;false,false,false,false;workedunder(M, B).;false;true', '6;;movie(A, B) :- workedunder(B, C).;true;true', '6;false;workedunder(H, B), workedunder(I, B).;false;true', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;false,false,false;workedunder(M, B).;false;true', '6;false,false;workedunder(J, B), workedunder(J, K), workedunder(L, K).;false;true', '6;false,false,false,false,false;actor(B).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '6;false,false,false,false;genre(B, N), genre(P, N), genre(P, Q).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;true', '7;true,true;workedunder(G, B).;false;false', '7;false,false,false;workedunder(B, K), workedunder(L, K).;false;true', '7;false,false;workedunder(B, I), genre(I, J).;false;true', '7;false,false,false,false,false;workedunder(B, Q).;false;false', '7;true;workedunder(F, B).;true;false', '7;false,false,false,false;workedunder(B, M), workedunder(N, M), workedunder(N, P).;false;true', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;true', '8;false,false,false;workedunder(B, L).;true;true', '8;false,false;genre(B, I), genre(J, I), workedunder(K, J).;false;true', '8;false,false,false,false,false;director(B).;false;true', '8;false,false,false,true;workedunder(M, L).;false;false', '8;false,false,false,false,false,false;workedunder(B, R).;false;false', '8;false,false,false,false;workedunder(N, B), workedunder(N, P), genre(P, Q).;false;true', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;true;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,true,true;workedunder(H, B).;false;false', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.32753669020155207;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.36179857013600447;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.35814893509951234;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.28281926339045904;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.31182561306068646;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(B, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, B) )
%   | | | then return 0.3087411357856348;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.2360651512693118;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.2588190839741042;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(J, B) )
%   | | then if ( workedunder(K, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.19122210796255448;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F) )
%   | then return 0.20788668576140792;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.2061374073445397;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.15125295405190917;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I), workedunder(J, I), workedunder(J, K) )
%   | then return 0.16283590024416186;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(L, B) )
%   | | then return 0.16162857548414683;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.11758031530297526;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F) )
%   | then return 0.12536469106450507;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(B, G), workedunder(H, G), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(K, B) )
%   | | | | then return 0.12455597792081977;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09686450802336101;  // std dev = 9,949, 396,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=200 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.05848066963952405;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, B), workedunder(I, B) )
%   | then return 0.09134702469362901;  // std dev = 3,963, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.06859822857339075;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07221545445305147;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(B, I), genre(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M), workedunder(N, M), workedunder(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( workedunder(B, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.07273741601371331;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.05442094427042485;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05201752326307314;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | else if ( genre(B, I), genre(J, I), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(M, B), workedunder(M, N), genre(N, P) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( director(B) )
%   | | | | | then return 0.054851149985239545;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04092219735495564;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then if ( workedunder(H, B) )
%   | | | then return 0.03931657395622034;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, I), workedunder(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, K), workedunder(L, K), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, N) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, P), genre(Q, P), workedunder(R, Q) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.04126592307999344;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
Results
   AUC ROC   = 0.458412
   AUC PR    = 0.476659
   CLL	      = -0.697162
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 6.158 seconds
Total inference time: 0.558 seconds
AUC ROC: 0.458412


Results in test set
   AUC ROC   = 0.458412
   AUC PR    = 0.476659
   CLL	      = -0.697162
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.558 seconds
AUC ROC: 0.458412
Structure after Parameter Learning
[['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.871, 7, 7], 'false,false,true': [0.0, 0, 0], 'true': [3.493, 26, 23], 'false,true': [10.136, 204, 207]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F), workedunder(G, F), workedunder(G, H)', 'false,false,false': 'workedunder(J, B)', 'false,false': 'workedunder(B, I)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.871, 7, 7], 'false,false,true': [0.0, 0, 0], 'true': [3.493, 26, 23], 'false,true': [10.136, 204, 207]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I)', 'false,false,true': 'workedunder(K, B)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(J, B)'}, {'true,false': [0.0, 0, 0], 'false,true': [10.136, 204, 207], 'false,false,false': [0.0, 0, 0], 'true,true': [3.493, 26, 23], 'false,false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.871, 7, 7]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.136, 204, 207], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [1.871, 7, 7], 'true': [3.493, 26, 23]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, I), workedunder(J, I), workedunder(J, K)', 'true': 'workedunder(F, B), workedunder(F, G), workedunder(H, G)', 'false,false': 'workedunder(L, B)'}, {'true,false': [0.0, 0, 0], 'false,false,true': [1.871, 7, 7], 'true,true': [3.493, 26, 23], 'false,true': [10.136, 204, 207], 'false,false,false': [0.0, 0, 0]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, F)', 'false,false,false,false': 'workedunder(K, B)', 'false,false,false': 'workedunder(B, J)', 'false,false': 'workedunder(B, G), workedunder(H, G), workedunder(H, I)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [10.136, 204, 207], 'false,false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [1.871, 7, 7], 'true': [3.493, 26, 23]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'workedunder(H, B), workedunder(I, B)', 'true,false': 'workedunder(B, F), workedunder(G, F)', 'true': 'workedunder(B, D), genre(D, E)'}, {'false,false': [0.0, 0, 0], 'true,true': [9.949, 196, 200], 'true,false,false': [0.0, 0, 0], 'true,false,true': [1.932, 8, 7], 'false,true': [3.963, 33, 30]}], ['movie(A, B)', {'': 'genre(B, C), genre(D, C), genre(D, E)', 'false': 'workedunder(B, H)', 'true,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K)', 'false,false': 'workedunder(B, I), genre(I, J)', 'false,false,false,false,false': 'workedunder(B, Q)', 'true': 'workedunder(F, B)', 'false,false,false,false': 'workedunder(B, M), workedunder(N, M), workedunder(N, P)'}, {'true,true,true': [3.493, 26, 23], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [10.136, 204, 207], 'false,false,false,false,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'false,false,false,false,false,false': [1.871, 7, 7]}], ['movie(A, B)', {'': 'workedunder(B, C), workedunder(D, C), workedunder(D, E)', 'false': 'genre(B, F), genre(G, F), genre(G, H)', 'false,false,false': 'workedunder(B, L)', 'false,false': 'genre(B, I), genre(J, I), workedunder(K, J)', 'false,false,false,false,false': 'director(B)', 'false,false,false,false': 'workedunder(M, B), workedunder(M, N), genre(N, P)'}, {'false,false,false,false,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [3.493, 26, 23], 'false,false,false,false,false,true': [1.871, 7, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [10.136, 204, 207]}], ['movie(A, B)', {'': 'workedunder(B, C)', 'false': 'genre(B, D), genre(E, D), genre(E, F)', 'false,true': 'workedunder(G, B)', 'false,false,false': 'workedunder(B, K), workedunder(L, K), workedunder(L, M)', 'false,false': 'workedunder(B, I), workedunder(J, I)', 'false,true,true': 'workedunder(H, B)', 'false,false,false,false,false': 'genre(B, P), genre(Q, P), workedunder(R, Q)', 'false,false,false,false': 'workedunder(B, N)'}, {'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [3.493, 26, 23], 'false,false,false,false,false,false': [1.871, 7, 7], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false,true': [0.0, 0, 0], 'true': [10.136, 204, 207]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '0;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '1;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '1;false;workedunder(B, F), workedunder(G, F), workedunder(G, H).;false;false', '2;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '2;false;workedunder(B, I).;false;false', '2;true;workedunder(F, B), workedunder(F, G), workedunder(H, G).;false;false', '3;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '3;false;workedunder(B, F).;false;false', '4;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '4;false;workedunder(B, I), workedunder(J, I), workedunder(J, K).;false;true', '4;false,false;workedunder(L, B).;false;false', '5;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;false;true', '5;false;workedunder(B, F).;false;false', '6;;movie(A, B) :- workedunder(B, C).;true;false', '6;true,false;workedunder(B, F), workedunder(G, F).;false;false', '6;true;workedunder(B, D), genre(D, E).;false;true', '7;;movie(A, B) :- genre(B, C), genre(D, C), genre(D, E).;true;true', '7;false;workedunder(B, H).;false;false', '7;true,true;workedunder(G, B).;false;false', '7;true;workedunder(F, B).;true;false', '8;;movie(A, B) :- workedunder(B, C), workedunder(D, C), workedunder(D, E).;false;true', '8;false;genre(B, F), genre(G, F), genre(G, H).;false;false', '9;;movie(A, B) :- workedunder(B, C).;false;true', '9;false;genre(B, D), genre(E, D), genre(E, F).;true;true', '9;false,true;workedunder(G, B).;false;false', '9;false,false,false;workedunder(B, K), workedunder(L, K), workedunder(L, M).;false;true', '9;false,false;workedunder(B, I), workedunder(J, I).;false;true', '9;false,false,false,false,false;genre(B, P), genre(Q, P), workedunder(R, Q).;false;false', '9;false,false,false,false;workedunder(B, N).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false,false,true', 0), ('false,false,false,false', 0), ('false,false,false,true', 0.5), ('false,true', 0.5036496350364964), ('true', 0.5306122448979592)]
Tree #2: [('false,false,true', 0), ('false,false,false,false', 0), ('false,false,false,true', 0.5), ('false,true', 0.5036496350364964), ('true', 0.5306122448979592)]
Tree #3: [('false,false,false', 0), ('true,false', 0), ('false,false,true,false', 0), ('false,false,true,true', 0.5), ('false,true', 0.5036496350364964), ('true,true', 0.5306122448979592)]
Tree #4: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0.5), ('false,true', 0.5036496350364964), ('true', 0.5306122448979592)]
Tree #5: [('true,false', 0), ('false,false,false', 0), ('false,false,true', 0.5), ('false,true', 0.5036496350364964), ('true,true', 0.5306122448979592)]
Tree #6: [('false,false,true', 0), ('false,false,false,false,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0.5), ('false,true', 0.5036496350364964), ('true', 0.5306122448979592)]
Tree #7: [('false,false', 0), ('true,false,false', 0), ('true,true', 0.5050505050505051), ('false,true', 0.5238095238095238), ('true,false,true', 0.5333333333333333)]
Tree #8: [('false,false,true', 0), ('true,false', 0), ('false,false,false,false,false,true', 0), ('true,true,false', 0), ('false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,false,false,false', 0.5), ('false,true', 0.5036496350364964), ('true,true,true', 0.5306122448979592)]
Tree #9: [('false,false,true', 0), ('false,false,false,false,false,false', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('false,false,false,false,false,true', 0.5), ('true', 0.5036496350364964), ('false,true', 0.5306122448979592)]
Tree #10: [('false,true,true,false', 0), ('false,false,true', 0), ('false,true,false', 0), ('false,false,false,false,false,true', 0), ('false,false,false,false,true', 0), ('false,false,false,true', 0), ('false,false,false,false,false,false', 0.5), ('true', 0.5036496350364964), ('false,true,true,true', 0.5306122448979592)]


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.32753669020155207;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.36179857013600447;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.35814893509951234;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.28281926339045904;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.31182561306068646;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.3087411357856348;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B), workedunder(F, G), workedunder(H, G) )
%   | then return 0.2360651512693118;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, I) )
%   | then return 0.2588190839741042;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.2564123687585864;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.19122210796255448;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F) )
%   | then return 0.20788668576140792;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.2061374073445397;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.15125295405190917;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F), workedunder(G, F), workedunder(G, H) )
%   | then return 0.16283590024416186;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else if ( workedunder(I, B) )
%   | | then return 0.16162857548414683;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then return 0.11758031530297526;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   else if ( workedunder(B, F) )
%   | then return 0.12536469106450507;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.12455597792081977;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then if ( workedunder(B, D), genre(D, E) )
%   | then return 0.09686450802336101;  // std dev = 9,949, 396,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=200 */
%   | else if ( workedunder(B, F), workedunder(G, F) )
%   | | then return 0.05848066963952405;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09134702469362901;  // std dev = 3,963, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( genre(B, C), genre(D, C), genre(D, E) )
%   then if ( workedunder(F, B) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.06859822857339075;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(B, H) )
%   | then return 0.07221545445305147;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   | else return 0.07273741601371331;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( workedunder(B, C), workedunder(D, C), workedunder(D, E) )
%   then return 0.05442094427042485;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   else if ( genre(B, F), genre(G, F), genre(G, H) )
%   | then return 0.05201752326307314;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | else return 0.054851149985239545;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( workedunder(B, C) )
%   then return 0.04092219735495564;  // std dev = 10,136, 411,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=207 */
%   else if ( genre(B, D), genre(E, D), genre(E, F) )
%   | then if ( workedunder(G, B) )
%   | | then return 0.03931657395622034;  // std dev = 3,493, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(B, H), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(B, J), workedunder(K, J), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else if ( workedunder(B, M) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else if ( genre(B, N), genre(P, N), workedunder(Q, P) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return 0.04126592307999344;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
Results
   AUC ROC   = 0.458412
   AUC PR    = 0.476659
   CLL	      = -0.697162
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 7.0 seconds
Total inference time: 0.56 seconds
AUC ROC: 0.458412


Best model AUC ROC so far: 0.458412


******************************************
Best model found
******************************************
Total revision time: 14.276
Best validation AUC ROC: 0.458412


Results
   AUC ROC   = 0.50354
   AUC PR    = 0.504141
   CLL	      = -0.695923
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total inference time: 0.573 seconds
AUC ROC: 0.50354
Dataset: 3, Run: 1, Fold: 5, Type: transfer, Time: 00:46:10
{'Parameter Learning results': {'AUC ROC': 0.50354, 'AUC PR': 0.504141, 'F1': nan, 'Recall': 0.0, 'Learning time': 6.158, 'Inference time': 0.539, 'Precision': [nan, 0.5], 'CLL': -0.695923}, 'AUC ROC': 0.50354, 'AUC PR': 0.504141, 'Mapping results': {'Generating mappings time': 6.993478298187256, 'Generating paths time': 2.6580183506011963, 'Knowledge compiling time': 0.021465063095092773, 'Total time': 41.93856883049011, 'Possible mappings': 76322, 'Finding best mapping': 32.265597343444824}, 'F1': nan, 'Recall': 0.0, 'Learning time': 14.276, 'Inference time': 0.573, 'Precision': [nan, 0.5], 'CLL': -0.695923}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.36114294707555866;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.3622472957552465;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.33433941128998734;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.3112716091123727;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.3122047642190786;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.288587396890732;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.25838703806361446;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.25911471232154154;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.24061162403417188;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.20757288751376807;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.2081013459291395;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.1945748329838448;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.16261945596455205;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.1629839299974296;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.15359877152831744;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.12521973570693146;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.1254638220656459;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.11916270481716094;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.09536758258440703;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.09552934044520114;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.09136717210389933;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.07215252737934999;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.07226004607686896;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.06952274321783666;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.054378512495059005;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.05445078731516716;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.052644946262454355;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.04089310539029203;  // std dev = 0,500, 167,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else return 0.04094244438501582;  // std dev = 0,500, 244,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=123 */
%   else return 0.03974248258629853;  // std dev = 0,499, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
Results
   AUC ROC   = 0.507497
   AUC PR    = 0.511212
   CLL	      = -0.695924
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 13.146 seconds
Total inference time: 0.487 seconds
AUC ROC: 0.507497


Dataset: 3, Run: 1, Fold: 5, Type: scratch, Time: 00:46:24
{'AUC ROC': 0.507497, 'AUC PR': 0.511212, 'F1': nan, 'Recall': 0.0, 'Learning time': 13.146, 'Inference time': 0.487, 'Precision': [nan, 0.5], 'CLL': -0.695924}


Start learning from source dataset


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995096;  // std dev = 1,07e-06, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.8396304165809906;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1418510649004876;  // std dev = 2,09e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.7046772772613799;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1254446385283921;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.5450585534393646;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.11231637819360653;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830936;  // std dev = 4,13e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.40964050878275793;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.10159632948783638;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601492;  // std dev = 3,82e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.3135139610554116;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.09269127618926049;  // std dev = 1,99e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694907;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.24796831369302438;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.08518475138839678;  // std dev = 1,15e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.20237120125775546;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07877675473109146;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.1695117314144433;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07324622576333709;  // std dev = 7,88e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15871639033148216;  // std dev = 0,105, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( actor(B) )
%   | then return -0.06842697784420318;  // std dev = 0,000, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.8364943149495182;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13865645100659174;  // std dev = 0,093, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( actor(B) )
%   | then return -0.06419184008202579;  // std dev = 1,53e-07, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.6890919803035764;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Predicates from source: ['workedunder(person,person).', 'female(person).', 'movie(movie,person).', 'actor(person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,false': [0.135, 4, 212], 'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'false': 'actor(B)', 'true': 'movie(C, A), movie(C, B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'true,false': [0.0, 30, 0], 'false,false,true': [0.0, 4, 0], 'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'false': 'actor(B)', 'true': 'movie(C, A), movie(C, B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'true,false': [0.0, 30, 0], 'false,false,true': [0.0, 4, 0], 'true,true': [0.093, 0, 382], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [0.0, 7, 0]}]] 



Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [6.32e-08, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [1.99e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [1.15e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [6.32e-08, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [7.88e-08, 378, 0]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [0.0, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.093, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [0.0, 7, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false', '9;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38412159545702557;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.13070878776985775;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33066412737059214;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.11404115113624248;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27345212837723554;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.09823056342501452;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21845754071446644;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.08363624406428903;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17009567685232743;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.07048607183332171;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13022352372052515;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.058882022872578696;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09869951287385564;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.04882199009670408;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07439192288783911;  // std dev = 34,432, 4.755,000 (wgt'ed) examples reached here.  /* #neg=2.254 #pos=2.501 */
%   else return 0.04022842411218062;  // std dev = 10,376, 543,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=148 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3763693293954506;  // std dev = 0,371, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.35996667678567534;  // std dev = 0,387, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.4459395531683741;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.23958342087771364;  // std dev = 4,30e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4428006818150606;  // std dev = 0,128, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return -0.33246856993836;  // std dev = 0,063, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.2146688140316531;  // std dev = 0,358, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.44026843379652236;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return -0.3176034689102507;  // std dev = 0,073, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.002084536110640584;  // std dev = 0,402, 98,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=33 */
%   else if ( venue(I, A), samebib(I, J), venue(J, B) )
%   | then if ( author(I, K), author(J, K) )
%   | | then return 0.27714544022425314;  // std dev = 0,375, 1.734,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=1.428 */
%   | | else return 0.2673228171672674;  // std dev = 0,390, 1.335,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.080 */
%   | else return -0.31921639853027284;  // std dev = 0,153, 2.028,000 (wgt'ed) examples reached here.  /* #neg=1.984 #pos=44 */
Results
   AUC ROC   = 0.902276
   AUC PR    = 0.852901
   CLL	      = -0.470842
   Precision = 0.849829 at threshold = 0.5
   Recall    = 0.943182
   F1        = 0.894075


Total learning time: 1030.237 seconds
Total inference time: 1.618 seconds
AUC ROC: 0.902276


Results in test set
   AUC ROC   = 0.902276
   AUC PR    = 0.852901
   CLL	      = -0.470842
   Precision = 0.849829 at threshold = 0.5
   Recall    = 0.943182
   F1        = 0.894075


Total inference time: 1.618 seconds
AUC ROC: 0.902276
Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [10.376, 395, 148], 'true': [34.432, 2254, 2501]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'true': 'author(C, E), author(D, E)'}, {'true,false': [0.387, 257, 1114], 'true,true': [0.371, 307, 1491], 'false,true': [0.153, 1780, 44], 'false,false': [4.3e-07, 305, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'venue(I, A), samebib(I, J), venue(J, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false,true': 'samebib(G, H), venue(H, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'true': 'author(E, D), venue(E, B)', 'true,false,false': 'author(G, D), venue(G, A)', 'false,true': 'author(I, K), author(J, K)'}, {'true,true,true': [0.128, 1, 48], 'true,false,false,true,true': [0.0, 0, 3], 'true,false,false,false': [0.402, 65, 33], 'true,false,true': [0.358, 5, 13], 'true,false,false,true,false': [0.073, 11, 0], 'true,true,false': [0.063, 22, 0], 'false,true,false': [0.39, 255, 1080], 'false,true,true': [0.375, 306, 1428], 'false,false': [0.153, 1984, 44]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '8;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;false;venue(I, A), samebib(I, J), venue(J, B).;true;false', '9;true,false;haswordvenue(B, C).;false;true', '9;true,false,false,true;samebib(G, H), venue(H, B).;false;false', '9;true,true;samebib(E, F), venue(F, A).;false;false', '9;true;author(E, D), venue(E, B).;true;true', '9;true,false,false;author(G, D), venue(G, A).;true;true', '9;false,true;author(I, K), author(J, K).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #2: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #3: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #4: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #5: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #6: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #7: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #8: [('true', 0.5259726603575184), ('false', 0.7274401473296501)]
Tree #9: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true', 0.9758771929824561)]
Tree #10: [('true,false,false,false', 0.6632653061224489), ('true,false,true', 0.7222222222222222), ('false,true,false', 0.8089887640449438), ('false,true,true', 0.8235294117647058), ('false,false', 0.9783037475345168), ('true,true,true', 0.9795918367346939)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6874036625744795;  // std dev = 0,376, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.6706945222621624;  // std dev = 0,390, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.11772825788294682;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5818675595452985;  // std dev = 0,376, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.5682562918609995;  // std dev = 0,390, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.1039923022856799;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.12544463852839202;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45890779926694225;  // std dev = 0,376, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.4492408540393215;  // std dev = 0,390, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.11694119845278614;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.09199788779519256;  // std dev = 0,156, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.1123163781936068;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.36470233818358877;  // std dev = 0,360, 1.664,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.409 */
%   | | else return 0.35507374979592443;  // std dev = 0,378, 1.267,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=1.048 */
%   | else return -0.08356965847766074;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return 0.12988782899874718;  // std dev = 0,487, 134,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=82 */
%   | | else return 0.1625383846086353;  // std dev = 0,482, 104,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=66 */
%   | else return -0.10159632948783663;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2608899848874239;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.25565626457807483;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.07579836716022118;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.09269127618926042;  // std dev = 1,60e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19841366294210175;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.19384451554390436;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.09128626493026555;  // std dev = 2,58e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06843328060403589;  // std dev = 0,156, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15355914333025653;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.14930648865560098;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.08746225524826354;  // std dev = 0,008, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.06258208201766959;  // std dev = 0,156, 1.757,000 (wgt'ed) examples reached here.  /* #neg=1.713 #pos=44 */
%   | else return -0.07877675473109143;  // std dev = 3,33e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12088368775524305;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.11682966393317185;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05855198003406745;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.07324622576333699;  // std dev = 9,42e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.09489363458845614;  // std dev = 21,438, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.054218573484348685;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.06842697784420303;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.14032845444443262;  // std dev = 0,181, 71,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=48 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.1587875867720539;  // std dev = 0,602, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return 8.098188479905487E-4;  // std dev = 0,135, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | | | then if ( author(G, I), author(H, I) )
%   | | | | | then return 0.21911763771753562;  // std dev = 0,204, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | else return 0.19937954134259564;  // std dev = 0,272, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else return -0.06753160419963009;  // std dev = 0,029, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then if ( author(J, L), author(K, L) )
%   | | then return 0.07247274078403368;  // std dev = 15,796, 1.734,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=1.428 */
%   | | else return 0.0702887308323608;  // std dev = 14,318, 1.335,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.080 */
%   | else return -0.05156971424928621;  // std dev = 6,553, 2.028,000 (wgt'ed) examples reached here.  /* #neg=1.984 #pos=44 */
Results
   AUC ROC   = 0.903165
   AUC PR    = 0.855055
   CLL	      = -0.341103
   Precision = 0.821656 at threshold = 0.5
   Recall    = 0.977273
   F1        = 0.892734


Total learning time: 1482.142 seconds
Total inference time: 2.389 seconds
AUC ROC: 0.903165


Best model AUC ROC so far: 0.903165


Refining iteration 2
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '0;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '1;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '2;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '2;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;venue(G, A), samebib(G, H), venue(H, B).;false;false', '3;true,true;author(D, F), author(E, F).;false;false', '3;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '4;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '5;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '5;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '6;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '6;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;false', '9;true,false;haswordvenue(B, C).;false;true', '9;true,false,false,true;venue(G, A), samebib(G, H), venue(H, B).;true;false', '9;true,false,false,false;venue(J, A), samebib(J, K), venue(K, B).;true;false', '9;true,false,false,true,true;author(G, I), author(H, I).;false;false', '9;true;author(E, D), venue(E, B).;true;true', '9;true,false,false;author(F, D), venue(F, A).;true;true', '9;true,false,false,false,true;author(J, L), author(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true', 0.9758771929824561)]
Tree #2: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true', 0.9758771929824561)]
Tree #3: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true,false', 0.9750566893424036)]
Tree #4: [('false,true,true', 0.6119402985074627), ('false,true,false', 0.6346153846153846), ('true,true,false', 0.8271507498026835), ('true,true,true', 0.8467548076923077), ('true,false', 0.9758771929824561)]
Tree #5: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true', 0.9758771929824561)]
Tree #6: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true,false', 0.9750566893424036)]
Tree #7: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true,false', 0.974957313602732)]
Tree #8: [('true,false', 0.812545587162655), ('true,true', 0.8292547274749722), ('false,true', 0.9758771929824561)]
Tree #9: [('true', 0.8220258756705585), ('false,true', 0.9758771929824561)]
Tree #10: [('true,true', 0.676056338028169), ('true,false,true', 0.7222222222222222), ('true,false,false,false,true,false', 0.8089887640449438), ('true,false,false,false,true,true', 0.8235294117647058), ('true,false,false,true,true,false', 0.9230769230769231), ('true,false,false,true,true,true', 0.9545454545454546), ('true,false,false,false,false', 0.9783037475345168)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.6801748107700657;  // std dev = 21,532, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.11772825788294682;  // std dev = 6,553, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.5759821650769816;  // std dev = 21,532, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.1039923022856799;  // std dev = 6,553, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.12544463852839202;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.45473182504437354;  // std dev = 21,532, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.11694119845278614;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.09199788779519256;  // std dev = 6,550, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.1123163781936068;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.36901787719288903;  // std dev = 14,694, 1.664,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.409 */
%   | | else return 0.34941381930326465;  // std dev = 13,459, 1.267,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=1.048 */
%   | else return -0.08356965847766074;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then return 0.14411180899637469;  // std dev = 7,481, 238,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=148 */
%   | else return -0.10159632948783663;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.25861565476135867;  // std dev = 21,425, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.07579836716022118;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.09269127618926042;  // std dev = 1,60e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.19641900493002382;  // std dev = 21,428, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.09128626493026555;  // std dev = 2,58e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06843328060403589;  // std dev = 6,550, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.15169586488737247;  // std dev = 21,433, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.08746225524826354;  // std dev = 0,008, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.06258208201766959;  // std dev = 6,549, 1.757,000 (wgt'ed) examples reached here.  /* #neg=1.713 #pos=44 */
%   | else return -0.07877675473109143;  // std dev = 3,33e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.11910245047702318;  // std dev = 21,437, 3.169,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=2.605 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.05855198003406745;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.07324622576333699;  // std dev = 9,42e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.2567142685960805;  // std dev = 0,111, 80,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | else return 0.10358457642808341;  // std dev = 0,372, 2.851,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=2.378 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( venue(J, B), author(J, I) )
%   | | | then return 0.1141402572346167;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.24747359056795007;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, A) )
%   | | | | then return -0.0858597427653833;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.31414025723461675;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11585974276538356;  // std dev = 0,495, 200,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=114 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.054218573484348685;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.06842697784420303;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( venue(F, A), samebib(F, G), venue(G, B) )
%   | | then if ( author(F, H), author(G, H) )
%   | | | then return 0.22982278130594905;  // std dev = 0,129, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.17479000754762133;  // std dev = 0,209, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.07012803523776721;  // std dev = 0,013, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.14008283186096934;  // std dev = 0,552, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( author(I, D), venue(I, A) )
%   | | | then return -0.006595149439742259;  // std dev = 0,120, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | | | | then if ( author(J, L), author(K, L) )
%   | | | | | then return 0.19263111857144635;  // std dev = 0,956, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | else return 0.16523513519415606;  // std dev = 0,982, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else return -0.06753160419963009;  // std dev = 0,029, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return 0.023318114822533056;  // std dev = 22,642, 5.097,000 (wgt'ed) examples reached here.  /* #neg=2.545 #pos=2.552 */
Results
   AUC ROC   = 0.90417
   AUC PR    = 0.855796
   CLL	      = -0.34054
   Precision = 0.821656 at threshold = 0.5
   Recall    = 0.977273
   F1        = 0.892734


Total learning time: 818.408 seconds
Total inference time: 3.104 seconds
AUC ROC: 0.90417


Best model AUC ROC so far: 0.90417


Refining iteration 3
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '0;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '2;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '2;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '3;true,true;author(D, F), author(E, F).;false;false', '3;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '5;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '6;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '6;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '7;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false;haswordvenue(A, N), haswordvenue(B, N).;false;false', '8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '8;true,false,false,true;author(M, L), venue(M, A).;false;false', '8;true,false,true;venue(J, B), author(J, I).;false;false', '8;true,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;true,false,false;haswordvenue(B, K), haswordauthor(L, K).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;true,true,true;author(F, H), author(G, H).;false;false', '9;true,true;venue(F, A), samebib(F, G), venue(G, B).;true;false', '9;true,false,false,false;venue(J, A), samebib(J, K), venue(K, B).;true;false', '9;true,false;haswordvenue(B, C).;false;true', '9;true;author(E, D), venue(E, B).;true;true', '9;true,false,false;author(I, D), venue(I, A).;false;true', '9;true,false,false,false,true;author(J, L), author(K, L).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.8220258756705585), ('false,true', 0.9758771929824561)]
Tree #2: [('true', 0.8220258756705585), ('false,true', 0.9758771929824561)]
Tree #3: [('true', 0.8220258756705585), ('false,true,false', 0.9750566893424036)]
Tree #4: [('false,true', 0.6218487394957983), ('true,true,false', 0.8271507498026835), ('true,true,true', 0.8467548076923077), ('true,false', 0.9758771929824561)]
Tree #5: [('true', 0.8220258756705585), ('false,true', 0.9758771929824561)]
Tree #6: [('true', 0.8220258756705585), ('false,true,false', 0.9750566893424036)]
Tree #7: [('true', 0.8220258756705585), ('false,true,false', 0.974957313602732)]
Tree #8: [('true', 0.8220258756705585), ('false,true', 0.9758771929824561)]
Tree #9: [('true,false,false,false', 0.57), ('true,false,false,true,true', 0.6), ('true,false,true,true', 0.8), ('true,true,false', 0.8340933005962821), ('true,false,true,false', 0.9333333333333333), ('false,true', 0.9758771929824561), ('true,true,true', 0.9875)]
Tree #10: [('false', 0.5006866784382971), ('true,false,true', 0.7222222222222222), ('true,false,false,true', 0.7857142857142857), ('true,false,false,false,true,false', 0.9230769230769231), ('true,true,true,false', 0.9473684210526315), ('true,false,false,false,true,true', 0.9545454545454546)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.6964293854577467;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( venue(H, B), author(H, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.45447921032886685;  // std dev = 0,491, 218,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=130 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.11772825788294682;  // std dev = 6,553, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.5892089835647161;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.4499519672120551;  // std dev = 1,138, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7908694363995712;  // std dev = 0,034, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then return 0.5080193346218546;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.6613013953160118;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.36339636730554786;  // std dev = 0,495, 200,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=114 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then return -0.1039923022856799;  // std dev = 6,553, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.12544463852839202;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.46410883503853;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.36438513997061045;  // std dev = 1,135, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.6317598896541954;  // std dev = 0,047, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3134061169263175;  // std dev = 0,485, 218,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=130 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.11694119845278614;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.09199788779519256;  // std dev = 6,550, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.1123163781936068;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.35931536347849524;  // std dev = 14,694, 1.664,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.409 */
%   | | else return 0.33971130558886886;  // std dev = 13,459, 1.267,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=1.048 */
%   | else return -0.08356965847766074;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( venue(K, B), author(K, J) )
%   | | | then return 0.349594976166;  // std dev = 0,871, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.44444784585237557;  // std dev = 0,250, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, A) )
%   | | | | then return 0.2297591447764297;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.4807324116091654;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.231216106968747;  // std dev = 0,495, 200,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=114 */
%   | else return -0.10159632948783663;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.2636958617391762;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( venue(H, B), author(H, G) )
%   | | | then return 0.26365172348792615;  // std dev = 0,871, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.334692472648742;  // std dev = 0,250, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.18871241100599298;  // std dev = 0,482, 218,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=130 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.07579836716022118;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.09269127618926042;  // std dev = 1,60e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.2008402312785173;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.16642222666479897;  // std dev = 1,115, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.31933756610432573;  // std dev = 0,030, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1403244496106803;  // std dev = 0,483, 218,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=130 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.09128626493026555;  // std dev = 2,58e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06843328060403589;  // std dev = 6,550, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.15581893690735357;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else return 0.11509443616266005;  // std dev = 0,469, 238,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=148 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.08746225524826354;  // std dev = 0,008, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.06258208201766959;  // std dev = 6,549, 1.757,000 (wgt'ed) examples reached here.  /* #neg=1.713 #pos=44 */
%   | else return -0.07877675473109143;  // std dev = 3,33e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.12305032467073843;  // std dev = 0,368, 2.931,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=2.457 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.09758033061201771;  // std dev = 1,117, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2330564750748143;  // std dev = 0,025, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then return 0.11627284523926873;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.19736561604959912;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.06834273149183905;  // std dev = 0,495, 200,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=114 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then return -0.05855198003406745;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.07324622576333699;  // std dev = 9,42e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.24762092166613264;  // std dev = 0,991, 80,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | else return 0.09448521656686217;  // std dev = 19,861, 2.851,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=2.378 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( venue(J, B), author(J, I) )
%   | | | then return 0.10646719676753073;  // std dev = 0,869, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.16809451667833217;  // std dev = 0,970, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, A) )
%   | | | | then return 0.03379481933152197;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.19559733528607984;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.05126581678070579;  // std dev = 0,495, 200,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=114 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.054218573484348685;  // std dev = 6,552, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.06842697784420303;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.11779247817310824;  // std dev = 0,166, 71,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=48 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.1354554512502423;  // std dev = 0,540, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.007982135515278942;  // std dev = 0,441, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | | | then if ( author(G, I), author(H, I) )
%   | | | | | then return 0.16607178437692405;  // std dev = 0,986, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | else return 0.1339747739360971;  // std dev = 0,954, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else return -0.06753160419963009;  // std dev = 0,029, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then if ( author(J, L), author(K, L) )
%   | | then return 0.07915330549574973;  // std dev = 0,375, 1.734,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=1.428 */
%   | | else return 0.068481873459415;  // std dev = 0,389, 1.335,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.080 */
%   | else return -0.05156971424928621;  // std dev = 0,146, 2.028,000 (wgt'ed) examples reached here.  /* #neg=1.984 #pos=44 */
Results
   AUC ROC   = 0.903961
   AUC PR    = 0.85713
   CLL	      = -0.33147
   Precision = 0.821656 at threshold = 0.5
   Recall    = 0.977273
   F1        = 0.892734


Total learning time: 1087.04 seconds
Total inference time: 3.13 seconds
AUC ROC: 0.903961


Best model AUC ROC so far: 0.90417


******************************************
Best model found
******************************************
Total revision time: 4428.068
Best validation AUC ROC: 0.90417


Results
   AUC ROC   = 0.843794
   AUC PR    = 0.771544
   CLL	      = -0.464683
   Precision = 0.764302 at threshold = 0.5
   Recall    = 0.907609
   F1        = 0.829814


Total inference time: 1.709 seconds
AUC ROC: 0.843794
Dataset: 4, Run: 1, Fold: 1, Type: transfer, Time: 02:00:31
{'Parameter Learning results': {'AUC ROC': 0.854202, 'AUC PR': 0.804042, 'F1': 0.828685, 'Recall': 0.847826, 'Learning time': 1030.237, 'Inference time': 1.276, 'Precision': [0.81039, 0.5], 'CLL': -0.514267}, 'AUC ROC': 0.843794, 'AUC PR': 0.771544, 'Mapping results': {'Generating mappings time': 0.0583956241607666, 'Generating paths time': 4.415774822235107, 'Knowledge compiling time': 0.32644009590148926, 'Total time': 4.8030266761779785, 'Possible mappings': 26, 'Finding best mapping': 0.0024101734161376953}, 'F1': 0.829814, 'Recall': 0.907609, 'Learning time': 4428.068, 'Inference time': 1.709, 'Precision': [0.764302, 0.5], 'CLL': -0.464683}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.704903742791815;  // std dev = 0,360, 1.664,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.409 */
%   | | else return 0.685299684902191;  // std dev = 0,378, 1.267,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=1.048 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.14185106490048766;  // std dev = 6,14e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.11690775424289422;  // std dev = 0,156, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   else if ( venue(I, A), samebib(I, J), venue(J, B) )
%   | then if ( author(I, K), author(J, K) )
%   | | then return 0.47008923360697336;  // std dev = 0,487, 134,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=82 */
%   | | else return 0.4927643197148978;  // std dev = 0,482, 104,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=66 */
%   | else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5816867081907969;  // std dev = 0,375, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.5681325619634019;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.10399312163897752;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.12544463852839202;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45882396011112137;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.44918131106445436;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.09281908673986644;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.1123163781936068;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3472356892779602;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.34048753153796973;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.08356951292727247;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.10159632948783663;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.26094666572920505;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.25569678888380404;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.07579824402717426;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.09269127618926042;  // std dev = 1,60e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19845428210321392;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.19387370409724575;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06918491809844818;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15358847256675504;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.14932760878511736;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06349417666983986;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.07877675473109143;  // std dev = 3,33e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12090528449637807;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.11684521372070314;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05854957407474493;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.07324622576333699;  // std dev = 9,42e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.09658973536293253;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.09270227084013152;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05421643298071023;  // std dev = 0,153, 1.824,000 (wgt'ed) examples reached here.  /* #neg=1.780 #pos=44 */
%   | else return -0.06842697784420303;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.07811526366229804;  // std dev = 0,374, 1.798,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=1.491 */
%   | else return 0.0744032221993014;  // std dev = 0,389, 1.371,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=1.114 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordauthor(G, F) )
%   | | then return -0.07286598902066505;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.07286598902066509;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.04962581923659844;  // std dev = 0,156, 1.764,000 (wgt'ed) examples reached here.  /* #neg=1.720 #pos=44 */
%   | else return -0.06419184008202593;  // std dev = 1,21e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
Results
   AUC ROC   = 0.854014
   AUC PR    = 0.803267
   CLL	      = -0.46668
   Precision = 0.764302 at threshold = 0.5
   Recall    = 0.907609
   F1        = 0.829814


Total learning time: 1577.919 seconds
Total inference time: 1.532 seconds
AUC ROC: 0.854014


Dataset: 4, Run: 1, Fold: 1, Type: scratch, Time: 02:26:50
{'AUC ROC': 0.854014, 'AUC PR': 0.803267, 'F1': 0.829814, 'Recall': 0.907609, 'Learning time': 1577.919, 'Inference time': 1.532, 'Precision': [0.764302, 0.5], 'CLL': -0.46668}


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'true,false': [0.135, 4, 212], 'false': [2.09e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [0.0, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [6.32e-08, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [1.99e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [1.15e-07, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false': [0.135, 4, 212], 'false': [6.32e-08, 378, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false': [0.135, 4, 212], 'false': [7.88e-08, 378, 0]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [0.0, 341, 0], 'false,false,false': [2.63e-09, 7, 0]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.093, 0, 382], 'false,false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,true': [1.53e-07, 341, 0], 'false,false,false': [0.0, 7, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false', '9;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
Traceback (most recent call last):
  File "total_transfer_experiment.py", line 406, in <module>
    [model, total_revision_time, inference_time, t_results, structured, pl_t_results] = theory_revision(background, boostsrl, target, tar_train_pos, tar_train_neg, tar_train_facts, validation_pos, validation_neg, tar_test_pos, tar_test_neg, tar_test_facts, transferred_structured, trees=10, max_revision_iterations=10, testAfterPL=True, verbose=verbose)
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 266, in theory_revision
    [model, learning_time, inference_time, t_results, structured, will] = learn_test_model(background, boostsrl, target, r_train_pos, r_train_neg, train_facts, validation_pos, validation_neg, train_facts, refine=get_boosted_refine_file(structured_tree), trees=trees, verbose=verbose)
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 225, in learn_test_model
    will = ['WILL Produced-Tree #'+str(i+1)+'\n'+('\n'.join(model.get_will_produced_tree(treenumber=i+1))) for i in range(trees)]
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 225, in <listcomp>
    will = ['WILL Produced-Tree #'+str(i+1)+'\n'+('\n'.join(model.get_will_produced_tree(treenumber=i+1))) for i in range(trees)]
  File "/home/rodrigoazs/anaconda3/lib/python3.5/site-packages/boostsrl/boostsrl.py", line 310, in get_will_produced_tree
    splitline = (line[0].split('\n'))[2:]
IndexError: list index out of range
