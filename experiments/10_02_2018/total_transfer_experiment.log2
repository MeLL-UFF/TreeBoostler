

Start learning from source dataset


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995096;  // std dev = 1,07e-06, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.8396304165809906;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1418510649004876;  // std dev = 2,09e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.7046772772613799;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.1254446385283921;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.5450585534393646;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.11231637819360653;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830936;  // std dev = 4,13e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.40964050878275793;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.10159632948783638;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601492;  // std dev = 3,82e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.3135139610554116;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.09269127618926049;  // std dev = 1,99e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694907;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.24796831369302438;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.08518475138839678;  // std dev = 1,15e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.20237120125775546;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07877675473109146;  // std dev = 6,32e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else return 0.1695117314144433;  // std dev = 0,135, 216,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   else return -0.07324622576333709;  // std dev = 7,88e-08, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15871639033148216;  // std dev = 0,105, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( actor(B) )
%   | then return -0.06842697784420318;  // std dev = 0,000, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.8364943149495182;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13865645100659174;  // std dev = 0,093, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( director(B), movie(D, A), movie(D, B) )
%   | then return -0.6890919803035764;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06419184008202579;  // std dev = 1,54e-07, 348,000 (wgt'ed) examples reached here.  /* #neg=348 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'female(person).', 'movie(movie,person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)'}, {'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'false': 'actor(B)', 'false,false': 'movie(D, A), movie(D, B)'}, {'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [2.63e-09, 7, 0], 'true,false': [0.0, 30, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, A), movie(C, B)', 'false': 'director(B), movie(D, A), movie(D, B)'}, {'true,true': [0.093, 0, 382], 'false,true': [0.0, 4, 0], 'false,false': [1.54e-07, 348, 0], 'true,false': [0.0, 30, 0]}]] 



Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [2.63e-09, 7, 0], 'true,false': [0.0, 30, 0]}], ['samevenue(A, B)', {}, {'true,true': [0.093, 0, 382], 'false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,false': [1.54e-07, 348, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38633735905340344;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.1335980368959151;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33253141955036913;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.1165446214604034;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2748964207405507;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.10034222837871722;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2194950072699155;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.0853729000244346;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17080517772779485;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.07188119298441659;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1306984549598731;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.05997874623394753;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09901789221620659;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.04966687775244284;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07460892395792487;  // std dev = 31,537, 3.991,000 (wgt'ed) examples reached here.  /* #neg=1.883 #pos=2.108 */
%   else return 0.04086683486744038;  // std dev = 9,999, 501,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=138 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3890645174111449;  // std dev = 0,358, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.3745510873545586;  // std dev = 0,374, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.424037812676499;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.24199946768442426;  // std dev = 5,06e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.29390212527894216;  // std dev = 0,358, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.2828903944103107;  // std dev = 0,374, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.3692007441486935;  // std dev = 1,69e-07, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.3192967134385278;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.20040772436549206;  // std dev = 2,67e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
Results
   AUC ROC   = 0.922553
   AUC PR    = 0.88332
   CLL	      = -0.467695
   Precision = 0.88 at threshold = 0.5
   Recall    = 0.883929
   F1        = 0.88196


Total learning time: 778.171 seconds
Total inference time: 1.433 seconds
AUC ROC: 0.922553


Results in test set
   AUC ROC   = 0.922553
   AUC PR    = 0.88332
   CLL	      = -0.467695
   Precision = 0.88 at threshold = 0.5
   Recall    = 0.883929
   F1        = 0.88196


Total inference time: 1.433 seconds
AUC ROC: 0.922553
Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.537, 1883, 2108], 'false': [9.999, 363, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.358, 244, 1290], 'false,true': [0.214, 1544, 78], 'false,false': [5.06e-07, 274, 0], 'true,false': [0.374, 184, 878]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false,true': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.358, 244, 1290], 'false,true,false': [0.218, 1485, 78], 'false,true,true': [1.69e-07, 59, 0], 'false,false': [2.67e-07, 274, 0], 'true,false': [0.374, 184, 878]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '8;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '9;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '9;false;haswordvenue(A, F), haswordvenue(B, F).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #2: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #3: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #4: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #5: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #6: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #7: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #8: [('true', 0.5281884239538963), ('false', 0.7245508982035929)]
Tree #9: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true', 0.9519112207151664)]
Tree #10: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false', 0.9500959692898272)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7214894990908306;  // std dev = 0,343, 1.383,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.194 */
%   | | else return 0.7035097598417756;  // std dev = 0,362, 970,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=820 */
%   | else return -0.0937622856156559;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then if ( author(H, J), author(I, J) )
%   | | then return 0.450741527692104;  // std dev = 0,491, 135,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=80 */
%   | | else return 0.48858371770820874;  // std dev = 0,483, 92,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=58 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5910781675143428;  // std dev = 0,363, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.5796486372329247;  // std dev = 0,377, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.13081609086760324;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.08141773747938137;  // std dev = 0,217, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.46550761087656845;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.45737704711049826;  // std dev = 0,377, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.12121816032288019;  // std dev = 0,013, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.07181008359398289;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3519749199296425;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.34622183659004185;  // std dev = 0,376, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06596018147561424;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2647166568531154;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.26015308562702993;  // std dev = 0,376, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05946329651491915;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.20180674972070453;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.1977568775074962;  // std dev = 0,376, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.09730094812120736;  // std dev = 0,011, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.052248811384411724;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.08518475138839678;  // std dev = 9,77e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.1567452428752447;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.15293593749915838;  // std dev = 0,377, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.0920423974792997;  // std dev = 0,019, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.047895547253939706;  // std dev = 0,217, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12393683951208233;  // std dev = 0,363, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.12028068504765056;  // std dev = 0,377, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.0846344403159003;  // std dev = 0,017, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.0857225504879411;  // std dev = 1,67e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.04234079478196521;  // std dev = 0,220, 1.527,000 (wgt'ed) examples reached here.  /* #neg=1.449 #pos=78 */
%   | else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.09806942303524833;  // std dev = 18,775, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.041158765610969185;  // std dev = 8,612, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.07953142620083987;  // std dev = 18,780, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.07554361818171042;  // std dev = 0,016, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.03644751348271481;  // std dev = 8,607, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.0641918400820261;  // std dev = 8,43e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
Results
   AUC ROC   = 0.923051
   AUC PR    = 0.888322
   CLL	      = -0.323113
   Precision = 0.853755 at threshold = 0.5
   Recall    = 0.964286
   F1        = 0.90566


Total learning time: 1385.264 seconds
Total inference time: 2.881 seconds
AUC ROC: 0.923051


Best model AUC ROC so far: 0.923051


Refining iteration 2
********************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true,true,true;haswordauthor(G, C).;false;false', '0;false;venue(H, A), samebib(H, I), venue(I, B).;false;false', '0;true,true;author(D, F), author(E, F).;true;false', '0;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '1;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '1;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '2;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '2;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '3;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '4;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '5;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '5;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '6;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '6;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false,true,false;haswordvenue(B, I), haswordauthor(J, I).;false;false', '7;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;true', '7;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '9;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,true,true', 0.5925925925925926), ('false,true,false', 0.6304347826086957), ('true,true,false', 0.845360824742268), ('true,true,true,false', 0.8633405639913232), ('true,false', 0.9519112207151664)]
Tree #2: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false', 0.9506016466117796)]
Tree #3: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false', 0.9500959692898272)]
Tree #4: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true', 0.9519112207151664)]
Tree #5: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true', 0.9519112207151664)]
Tree #6: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false', 0.9500959692898272)]
Tree #7: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false', 0.9506016466117796)]
Tree #8: [('true,false', 0.8267419962335216), ('true,true', 0.8409387222946545), ('false,true,false,false', 0.9489194499017681)]
Tree #9: [('true', 0.8351309707241911), ('false,true', 0.9519112207151664)]
Tree #10: [('true', 0.8351309707241911), ('false,true,false', 0.9500959692898272)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7214894990908306;  // std dev = 12,774, 1.383,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.194 */
%   | | else return 0.7035097598417756;  // std dev = 11,261, 970,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=820 */
%   | else return -0.0937622856156559;  // std dev = 8,617, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then return 0.46607845051801117;  // std dev = 7,356, 227,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=138 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.5864039025018316;  // std dev = 18,791, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.13081609086760324;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.08141773747938137;  // std dev = 8,611, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.4621852837749063;  // std dev = 18,763, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.12121816032288019;  // std dev = 0,013, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.07181008359398289;  // std dev = 8,608, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.3496207239458198;  // std dev = 18,752, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.06596018147561424;  // std dev = 8,614, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.26284183398280353;  // std dev = 18,752, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.05946329651491915;  // std dev = 8,614, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.20013618464524316;  // std dev = 18,758, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.09730094812120736;  // std dev = 0,011, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.052248811384411724;  // std dev = 8,608, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.08518475138839678;  // std dev = 9,77e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.15516900869256905;  // std dev = 18,765, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.0920423974792997;  // std dev = 0,019, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.047895547253939706;  // std dev = 8,609, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.1224203826203743;  // std dev = 18,771, 2.596,000 (wgt'ed) examples reached here.  /* #neg=428 #pos=2.168 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.0846344403159003;  // std dev = 0,017, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.0857225504879411;  // std dev = 1,67e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.04234079478196521;  // std dev = 8,603, 1.527,000 (wgt'ed) examples reached here.  /* #neg=1.449 #pos=78 */
%   | else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.11540248822826343;  // std dev = 0,350, 2.369,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=2.030 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( venue(H, B), author(H, G) )
%   | | | then return 0.3089877817625092;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14232111509584244;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then return 0.058987781762509184;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.132517193527215;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.13666439215053355;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then return -0.041158765610969185;  // std dev = 8,612, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.20188872605786984;  // std dev = 0,168, 68,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then if ( author(J, I), venue(J, B) )
%   | | | | then if ( author(K, I), venue(K, A) )
%   | | | | | then return 0.23583175953441193;  // std dev = 1,49e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | | | else return 0.1390873560997306;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | | else return 0.20012107665361578;  // std dev = 0,188, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.08834972400177786;  // std dev = 0,356, 2.251,000 (wgt'ed) examples reached here.  /* #neg=335 #pos=1.916 */
%   | else return -0.06454973785592746;  // std dev = 0,483, 227,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=138 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.07554361818171042;  // std dev = 0,016, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.03644751348271481;  // std dev = 8,607, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.0641918400820261;  // std dev = 8,43e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
Results
   AUC ROC   = 0.925004
   AUC PR    = 0.897755
   CLL	      = -0.320075
   Precision = 0.853755 at threshold = 0.5
   Recall    = 0.964286
   F1        = 0.90566


Total learning time: 841.557 seconds
Total inference time: 5.155 seconds
AUC ROC: 0.925004


Best model AUC ROC so far: 0.925004


Refining iteration 3
********************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true,true;author(D, F), author(E, F).;true;false', '0;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '0;false;venue(H, A), samebib(H, I), venue(I, B).;true;false', '0;true,true,true;haswordauthor(G, C).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '1;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '2;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '2;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '3;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '5;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '6;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '6;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '7;false,true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false', '7;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;true', '7;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;false;haswordvenue(A, L), haswordvenue(B, L).;false;false', '8;true,false,true;venue(H, B), author(H, G).;false;false', '8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '8;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '8;true,false,false,true;author(K, J), venue(K, A).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '9;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '9;false,true;haswordvenue(B, M), haswordauthor(N, M).;false;false', '9;true,true,false,true,true;author(K, I), venue(K, A).;false;false', '9;true,true;haswordvenue(B, F), haswordauthor(G, F).;false;true', '9;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;true,true,false;haswordvenue(A, H), haswordauthor(I, H).;true;false', '9;true,true,false,true;author(J, I), venue(J, B).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,true', 0.6079295154185022), ('true,true,false', 0.845360824742268), ('true,true,true,false', 0.8633405639913232), ('true,false', 0.9519112207151664)]
Tree #2: [('true', 0.8351309707241911), ('false,true,false', 0.9506016466117796)]
Tree #3: [('true', 0.8351309707241911), ('false,true,false', 0.9500959692898272)]
Tree #4: [('true', 0.8351309707241911), ('false,true', 0.9519112207151664)]
Tree #5: [('true', 0.8351309707241911), ('false,true', 0.9519112207151664)]
Tree #6: [('true', 0.8351309707241911), ('false,true,false', 0.9500959692898272)]
Tree #7: [('true', 0.8351309707241911), ('false,true,false', 0.9506016466117796)]
Tree #8: [('true', 0.8351309707241911), ('false,true,false,false', 0.9489194499017681)]
Tree #9: [('true,false,false,false', 0.5543478260869565), ('true,false,false,true,true', 0.75), ('true,false,false,true,false', 0.8235294117647058), ('true,false,true,false', 0.8333333333333334), ('true,true', 0.8569016462642465), ('false,true', 0.9519112207151664)]
Tree #10: [('true,false', 0.6079295154185022), ('true,true,false,false', 0.8511772545535318), ('true,true,false,true,true,false', 0.9), ('false,true,false', 0.9500959692898272), ('true,true,false,true,false', 0.9629629629629629), ('true,true,true', 0.9705882352941176)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7214894990908306;  // std dev = 12,774, 1.383,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.194 */
%   | | else return 0.7035097598417756;  // std dev = 11,261, 970,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=820 */
%   | else return -0.0937622856156559;  // std dev = 8,617, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.7217852987358758;  // std dev = 0,343, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then if ( venue(N, A), author(N, M) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.6816783468642181;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.4124967611864659;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.7228210225052354;  // std dev = 0,040, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.7076357635130912;  // std dev = 0,196, 50,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | else return 0.601149091702495;  // std dev = 0,354, 2.301,000 (wgt'ed) examples reached here.  /* #neg=337 #pos=1.964 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7461559834740239;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5794893168073573;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.37617745293486093;  // std dev = 0,492, 205,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=119 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.13081609086760324;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.08141773747938137;  // std dev = 8,611, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.474778478959409;  // std dev = 0,350, 2.369,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=2.030 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.47908570665934747;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5055087587496532;  // std dev = 0,371, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.4661748148491924;  // std dev = 0,355, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.2876273535878819;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.12121816032288019;  // std dev = 0,013, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.07181008359398289;  // std dev = 8,608, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3583667992467889;  // std dev = 0,350, 2.369,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=2.030 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.3676711099101607;  // std dev = 0,880, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.38654331508859296;  // std dev = 0,371, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.23993794012653588;  // std dev = 0,486, 204,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=119 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.06596018147561424;  // std dev = 8,614, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.26969299280524;  // std dev = 0,350, 2.369,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=2.030 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.39655859000801774;  // std dev = 0,038, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27975605880052057;  // std dev = 0,372, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.18371671730056516;  // std dev = 0,488, 205,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=119 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.05946329651491915;  // std dev = 8,614, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.3064366855396141;  // std dev = 0,168, 68,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else return 0.20324745058267607;  // std dev = 0,353, 2.301,000 (wgt'ed) examples reached here.  /* #neg=337 #pos=1.964 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( venue(J, A), author(J, I) )
%   | | | then return 0.22680691195811614;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.24292619530856724;  // std dev = 0,371, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.22093371286837363;  // std dev = 0,354, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.12880104399301218;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   else if ( haswordvenue(A, M), haswordvenue(B, M) )
%   | then if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.09730094812120736;  // std dev = 0,011, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.052248811384411724;  // std dev = 8,608, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.08518475138839678;  // std dev = 9,77e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.27824024581856244;  // std dev = 0,086, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.21503802534950758;  // std dev = 0,218, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.15854884246618506;  // std dev = 0,353, 2.301,000 (wgt'ed) examples reached here.  /* #neg=337 #pos=1.964 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.17278052079809375;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.18594005561162336;  // std dev = 0,371, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.10431469891807295;  // std dev = 0,485, 204,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=119 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.0920423974792997;  // std dev = 0,019, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.047895547253939706;  // std dev = 8,609, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.19759334814726673;  // std dev = 0,034, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else if ( author(I, G), venue(I, B) )
%   | | | | then return 0.23120815694467453;  // std dev = 0,008, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | | else return 0.16210379168458078;  // std dev = 0,271, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.12601598440444128;  // std dev = 0,353, 2.301,000 (wgt'ed) examples reached here.  /* #neg=337 #pos=1.964 */
%   | else return 0.08515565693750392;  // std dev = 0,476, 227,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=138 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.0846344403159003;  // std dev = 0,017, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.0857225504879411;  // std dev = 1,67e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.04234079478196521;  // std dev = 8,603, 1.527,000 (wgt'ed) examples reached here.  /* #neg=1.449 #pos=78 */
%   | else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.10356421806613941;  // std dev = 17,016, 2.369,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=2.030 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( venue(H, B), author(H, G) )
%   | | | then return 0.22286593230441062;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12054611808623956;  // std dev = 1,577, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then return 0.0819135558297599;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.12345620280437845;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.04979104600448227;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then return -0.041158765610969185;  // std dev = 8,612, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.1488217489553377;  // std dev = 1,373, 68,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1715236130099945;  // std dev = 0,196, 50,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return 0.08097955817525045;  // std dev = 16,885, 2.251,000 (wgt'ed) examples reached here.  /* #neg=335 #pos=1.916 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.096333514934094;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10136427858597606;  // std dev = 0,371, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then if ( author(P, N), venue(P, B) )
%   | | | | then return 0.19720071977223563;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 0.0889283190691799;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.0373497113719057;  // std dev = 0,497, 184,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=102 */
%   else return -0.04167357659740412;  // std dev = 0,198, 1.896,000 (wgt'ed) examples reached here.  /* #neg=1.818 #pos=78 */
Results
   AUC ROC   = 0.925004
   AUC PR    = 0.897755
   CLL	      = -0.318436
   Precision = 0.853755 at threshold = 0.5
   Recall    = 0.964286
   F1        = 0.90566


Total learning time: 1309.789 seconds
Total inference time: 7.854 seconds
AUC ROC: 0.925004


Best model AUC ROC so far: 0.925004


******************************************
Best model found
******************************************
Total revision time: 4332.103999999999
Best validation AUC ROC: 0.925004


Results
   AUC ROC   = 0.791825
   AUC PR    = 0.791472
   CLL	      = -0.467099
   Precision = 0.744928 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853821


Total inference time: 2.865 seconds
AUC ROC: 0.791825
Dataset: 4, Run: 1, Fold: 2, Type: transfer, Time: 01:12:32
{'Parameter Learning results': {'CLL': -0.549508, 'AUC ROC': 0.786953, 'AUC PR': 0.778065, 'F1': 0.839773, 'Recall': 0.958495, 'Learning time': 778.171, 'Inference time': 1.613, 'Precision': [0.747219, 0.5]}, 'CLL': -0.467099, 'AUC ROC': 0.791825, 'AUC PR': 0.791472, 'F1': 0.853821, 'Recall': 1.0, 'Learning time': 4332.103999999999, 'Inference time': 2.865, 'Mapping results': {'Knowledge compiling time': 0.34639763832092285, 'Possible mappings': 26, 'Generating paths time': 4.337220191955566, 'Total time': 4.739942789077759, 'Finding best mapping': 0.002416849136352539, 'Generating mappings time': 0.05390191078186035}, 'Precision': [0.744928, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6990876573941619;  // std dev = 0,366, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.6848909313330291;  // std dev = 0,378, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.0937622856156559;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5913697343801884;  // std dev = 0,366, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.5798223685687812;  // std dev = 0,378, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.13081609086760324;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.08141773747938137;  // std dev = 0,217, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.4656379673344627;  // std dev = 0,366, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.4574573007126915;  // std dev = 0,378, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.12121816032288019;  // std dev = 0,013, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.07181008359398289;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.35191311970405365;  // std dev = 0,366, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.3461895302548194;  // std dev = 0,378, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06596018147561424;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2645396431766473;  // std dev = 0,366, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.2600517209574327;  // std dev = 0,378, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05946329651491915;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   | else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.22555256964258164;  // std dev = 0,342, 1.399,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.210 */
%   | | else return 0.21624819923074787;  // std dev = 0,362, 970,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=820 */
%   | else return -0.053887575914295154;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.03972022773393349;  // std dev = 0,266, 55,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.04707751218900671;  // std dev = 0,887, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.020516227394102252;  // std dev = 0,272, 44,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | else if ( venue(L, A), samebib(L, M), venue(M, B) )
%   | | | then if ( author(L, N), author(M, N) )
%   | | | | then return -0.11104904606676314;  // std dev = 0,499, 106,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=56 */
%   | | | | else return -0.039369035767928905;  // std dev = 0,492, 78,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=46 */
%   | | | else return -0.08518475138839678;  // std dev = 8,02e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15743852105576045;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.15354843777633598;  // std dev = 0,376, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.09266953812483461;  // std dev = 0,010, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.04741127570352577;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.08079192823263955;  // std dev = 0,062, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12446051159756223;  // std dev = 0,362, 1.534,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1.290 */
%   | else return 0.12074027866279227;  // std dev = 0,376, 1.062,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=878 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.085166446783968;  // std dev = 0,009, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.04332522443775347;  // std dev = 0,218, 1.563,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=78 */
%   | else return -0.07499257764111958;  // std dev = 0,058, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.10712517870804633;  // std dev = 0,201, 111,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=66 */
%   | else if ( venue(F, A), samebib(F, G), venue(G, B) )
%   | | then if ( author(F, H), author(G, H) )
%   | | | then return 0.11391965820360646;  // std dev = 0,347, 1.354,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.165 */
%   | | | else return 0.10894921951092741;  // std dev = 0,363, 947,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=799 */
%   | | else return -0.03997617898241052;  // std dev = 0,217, 1.579,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=78 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.016791340111340793;  // std dev = 0,246, 55,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.0011685519611955187;  // std dev = 0,270, 50,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | else if ( venue(M, A), samebib(M, N), venue(N, B) )
%   | | | then if ( author(M, P), author(N, P) )
%   | | | | then return -0.1494365948636054;  // std dev = 0,499, 106,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=56 */
%   | | | | else return -0.09233301838965922;  // std dev = 0,492, 78,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=46 */
%   | | | else return -0.06818758933656707;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.0975012694236768;  // std dev = 0,342, 1.399,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=1.210 */
%   | | else return 0.08991804730557468;  // std dev = 0,362, 970,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=820 */
%   | else return -0.038259634361775575;  // std dev = 0,214, 1.622,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=78 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.01468708102463787;  // std dev = 0,245, 55,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.04534277998367179;  // std dev = 0,298, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.0018103725753394536;  // std dev = 0,274, 47,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | else if ( venue(L, A), samebib(L, M), venue(M, B) )
%   | | | then if ( author(L, N), author(M, N) )
%   | | | | then return -0.11597169697139018;  // std dev = 0,499, 106,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=56 */
%   | | | | else return -0.0719831174042918;  // std dev = 0,492, 78,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=46 */
%   | | | else return -0.06398058541463505;  // std dev = 1,02e-07, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
Results
   AUC ROC   = 0.785093
   AUC PR    = 0.776316
   CLL	      = -0.4668
   Precision = 0.744928 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853821


Total learning time: 1463.845 seconds
Total inference time: 2.235 seconds
AUC ROC: 0.785093


Dataset: 4, Run: 1, Fold: 2, Type: scratch, Time: 01:36:59
{'CLL': -0.4668, 'AUC ROC': 0.785093, 'AUC PR': 0.776316, 'F1': 0.853821, 'Recall': 1.0, 'Learning time': 1463.845, 'Inference time': 2.235, 'Precision': [0.744928, 0.5]}


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [2.63e-09, 7, 0], 'true,false': [0.0, 30, 0]}], ['samevenue(A, B)', {}, {'true,true': [0.093, 0, 382], 'false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,false': [1.54e-07, 348, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3858885041045507;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.12089403313872384;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33215319365266477;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.10553120813405044;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27460396394194286;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.09103771944765289;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21928501247706855;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.07770057774866972;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17066160588147375;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.06569533848238236;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1306023429200369;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.05509376199708579;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09895342608020848;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.04588303722556539;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07456493846865898;  // std dev = 32,972, 4.362,000 (wgt'ed) examples reached here.  /* #neg=2.060 #pos=2.302 */
%   else return 0.037989424677499356;  // std dev = 9,939, 510,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=134 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.36993712067182494;  // std dev = 0,377, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.3235607340251083;  // std dev = 0,410, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.4717084980483896;  // std dev = 9,42e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.47170849804838955;  // std dev = 7,30e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.4328735465920825;  // std dev = 0,193, 1.545,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=60 */
%   | else return -0.23144410437606655;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2794656501843331;  // std dev = 0,377, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.24427034562622887;  // std dev = 0,410, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.3294953357499593;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.19284655006625845;  // std dev = 2,56e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
Results
   AUC ROC   = 0.87446
   AUC PR    = 0.815706
   CLL	      = -0.50192
   Precision = 0.810219 at threshold = 0.5
   Recall    = 0.91358
   F1        = 0.858801


Total learning time: 730.657 seconds
Total inference time: 1.499 seconds
AUC ROC: 0.87446


Results in test set
   AUC ROC   = 0.87446
   AUC PR    = 0.815706
   CLL	      = -0.50192
   Precision = 0.810219 at threshold = 0.5
   Recall    = 0.91358
   F1        = 0.858801


Total inference time: 1.499 seconds
AUC ROC: 0.87446
Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [32.972, 2060, 2302], 'false': [9.939, 376, 134]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'false,true,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'true': 'author(C, E), author(D, E)', 'false,true': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,false': [0.41, 304, 1060], 'false,true,false,true': [7.3e-08, 41, 0], 'false,true,false,false': [0.193, 1485, 60], 'true,true': [0.377, 285, 1316], 'false,true,true': [9.42e-08, 45, 0], 'false,false': [0.0, 276, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.377, 285, 1316], 'false,true': [0.188, 1571, 60], 'false,false': [2.56e-07, 276, 0], 'true,false': [0.41, 304, 1060]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '8;false,true,false;haswordvenue(A, I), haswordauthor(J, I).;false;false', '8;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;true', '8;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '9;false;haswordvenue(A, F), haswordvenue(B, F).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #2: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #3: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #4: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #5: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #6: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #7: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #8: [('true', 0.5277395690050436), ('false', 0.7372549019607844)]
Tree #9: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true,false,false', 0.9611650485436893)]
Tree #10: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6801351936878897;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.6352750348062522;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.10506381781281364;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5759498971353084;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.5393163049384632;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.12953642286115039;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09170540142357159;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45470891310107964;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.4285737619858491;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.11919367642477294;  // std dev = 0,007, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.0816100676443957;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5222867217068529;  // std dev = 2,98e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3614619794388261;  // std dev = 0,367, 1.455,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1.221 */
%   | | else return 0.34682999929434594;  // std dev = 0,402, 1.261,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.006 */
%   | else return -0.07422640612827651;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then if ( author(H, J), author(I, J) )
%   | | then return 0.13297374460761657;  // std dev = 0,488, 131,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=80 */
%   | | else return 0.07332230390695153;  // std dev = 0,499, 103,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=54 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2586144948891612;  // std dev = 0,380, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.2448525755062558;  // std dev = 0,413, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06710982827703349;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.09269127618926044;  // std dev = 1,32e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19642929389551236;  // std dev = 0,380, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.18474777711381346;  // std dev = 0,413, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06102579212470589;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 9,88e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15171003471648015;  // std dev = 0,380, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.14106348581541056;  // std dev = 0,414, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05577116606336572;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.11911695605556115;  // std dev = 0,380, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.10911549998978565;  // std dev = 0,414, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05119213819202027;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.07324622576333689;  // std dev = 1,07e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.09051896643844272;  // std dev = 21,570, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.08100060814201833;  // std dev = 0,005, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.08126455784831196;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.04528014739362621;  // std dev = 7,594, 1.545,000 (wgt'ed) examples reached here.  /* #neg=1.485 #pos=60 */
%   | else return -0.06842697784420287;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.07231834093327481;  // std dev = 21,574, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.043619215976710535;  // std dev = 7,600, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.06419184008202608;  // std dev = 8,69e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
Results
   AUC ROC   = 0.874672
   AUC PR    = 0.818804
   CLL	      = -0.400346
   Precision = 0.781879 at threshold = 0.5
   Recall    = 0.958848
   F1        = 0.861368


Total learning time: 1237.725 seconds
Total inference time: 3.116 seconds
AUC ROC: 0.874672


Best model AUC ROC so far: 0.874672


Refining iteration 2
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '0;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '1;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '1;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '2;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '2;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true,true,true;haswordauthor(G, C).;false;false', '3;false;venue(H, A), samebib(H, I), venue(I, B).;false;false', '3;true,true;author(D, F), author(E, F).;true;false', '3;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '4;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '5;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '6;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false,true,false;haswordvenue(A, H), haswordauthor(I, H).;false;false', '8;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]
Tree #2: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true,false', 0.9621689785624212)]
Tree #3: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true,false', 0.9621689785624212)]
Tree #4: [('false,true,false', 0.5242718446601942), ('false,true,true', 0.6106870229007634), ('true,true,false', 0.7977795400475813), ('true,true,true,false', 0.8391752577319588), ('true,false', 0.9632127529123238)]
Tree #5: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]
Tree #6: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]
Tree #7: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]
Tree #8: [('true,false', 0.7771260997067448), ('true,true', 0.8219862585883823), ('false,true', 0.9632127529123238)]
Tree #9: [('true', 0.8013490725126475), ('false,true,false,false', 0.9611650485436893)]
Tree #10: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.6594980076121548;  // std dev = 21,725, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.10506381781281364;  // std dev = 7,602, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.559120866000615;  // std dev = 21,725, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.12953642286115039;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09170540142357159;  // std dev = 7,598, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.4427342140556014;  // std dev = 21,725, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.11919367642477294;  // std dev = 0,007, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.0816100676443957;  // std dev = 7,597, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5346063095088408;  // std dev = 2,98e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.37378156724079187;  // std dev = 14,013, 1.455,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1.221 */
%   | | else return 0.3323858495564147;  // std dev = 14,263, 1.261,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.006 */
%   | else return -0.07422640612827651;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then return 0.10725588215841289;  // std dev = 7,567, 234,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=134 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.25222471307914307;  // std dev = 21,575, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.06710982827703349;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.09269127618926044;  // std dev = 1,32e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.19093747425043456;  // std dev = 21,579, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.06102579212470589;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 9,88e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.14665259849385387;  // std dev = 21,584, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.05577116606336572;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.11432809945095143;  // std dev = 21,590, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.05119213819202027;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.07324622576333689;  // std dev = 1,07e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.1942344674281627;  // std dev = 0,274, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.19204838458113643;  // std dev = 0,290, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | else return 0.1014796545207136;  // std dev = 0,387, 2.605,000 (wgt'ed) examples reached here.  /* #neg=478 #pos=2.127 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.13788092852314732;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.060103150745369614;  // std dev = 0,448, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then if ( venue(P, B), author(P, N) )
%   | | | | then return -0.062119071476852694;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.04376328146432385;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return -0.12243653179431269;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.05024674769078324;  // std dev = 0,174, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( haswordauthor(I, E) )
%   | | | | then return 0.22233973573167792;  // std dev = 0,032, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else if ( author(J, G), venue(J, B) )
%   | | | | | then return 0.19805900937747764;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | else return 0.20360092909660543;  // std dev = 0,213, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else if ( haswordvenue(B, F) )
%   | | | | then return 0.2181280339215148;  // std dev = 0,035, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | | else return -0.08789317303040277;  // std dev = 0,470, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return 0.08275162628825015;  // std dev = 0,385, 2.659,000 (wgt'ed) examples reached here.  /* #neg=483 #pos=2.176 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.040443029730728754;  // std dev = 0,453, 24,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | else return -0.08150840569717728;  // std dev = 0,495, 210,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=117 */
%   else return -0.04655636520335263;  // std dev = 0,174, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
Results
   AUC ROC   = 0.876763
   AUC PR    = 0.817045
   CLL	      = -0.396927
   Precision = 0.781879 at threshold = 0.5
   Recall    = 0.958848
   F1        = 0.861368


Total learning time: 790.875 seconds
Total inference time: 10.084 seconds
AUC ROC: 0.876763


Best model AUC ROC so far: 0.876763


Refining iteration 3
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '0;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '1;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '2;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;false', '2;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true,true;author(D, F), author(E, F).;true;false', '3;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '3;false;venue(H, A), samebib(H, I), venue(I, B).;true;false', '3;true,true,true;haswordauthor(G, C).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '6;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '7;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '8;true,false;haswordvenue(B, J), haswordauthor(K, J).;true;true', '8;true,false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true', '8;true,false,true;author(L, K), venue(L, A).;false;false', '8;true,true;haswordvenue(A, F), haswordauthor(G, F).;false;true', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;true,true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false', '8;true,false,false,true;venue(P, B), author(P, N).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '9;true,true,true;author(H, G), venue(H, A).;true;true', '9;true,true,true,true;haswordauthor(I, E).;false;true', '9;true,true,true,false;haswordvenue(B, F).;false;false', '9;true,true;haswordvenue(A, F), haswordauthor(G, F).;true;false', '9;true;haswordvenue(A, E), haswordvenue(B, E).;true;false', '9;true,true,true,true,false;author(J, G), venue(J, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]
Tree #2: [('true', 0.8013490725126475), ('false,true,false', 0.9621689785624212)]
Tree #3: [('true', 0.8013490725126475), ('false,true,false', 0.9621689785624212)]
Tree #4: [('false,true', 0.5726495726495726), ('true,true,false', 0.7977795400475813), ('true,true,true,false', 0.8391752577319588), ('true,false', 0.9632127529123238)]
Tree #5: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]
Tree #6: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]
Tree #7: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]
Tree #8: [('true', 0.8013490725126475), ('false,true', 0.9632127529123238)]
Tree #9: [('true,false,false,false', 0.5396825396825397), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.7058823529411765), ('true,false,true,false', 0.7222222222222222), ('true,false,true,true', 0.8), ('true,true,false,false', 0.8165067178502879), ('true,true,false,true', 0.9074074074074074), ('true,true,true', 0.9166666666666666), ('false', 0.9685369690613529)]
Tree #10: [('true,false,false', 0.5571428571428572), ('true,true,true,false,false', 0.6666666666666666), ('true,false,true', 0.7083333333333334), ('true,true,false', 0.8183527641970666), ('true,true,true,true,false,false', 0.9523809523809523), ('true,true,true,true,false,true', 0.9545454545454546), ('false', 0.9685369690613529)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.6790936439973468;  // std dev = 0,383, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5803711573217345;  // std dev = 0,448, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else return 0.41529179224236623;  // std dev = 0,497, 210,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=117 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.10506381781281364;  // std dev = 7,602, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.5751015063743123;  // std dev = 0,383, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.5941965209637325;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5209618082998825;  // std dev = 0,447, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.3816289395752953;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.47788057897805464;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3394286343779878;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.12953642286115039;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09170540142357159;  // std dev = 7,598, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.4541064463803025;  // std dev = 0,383, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.4806435582622183;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.42436808389975145;  // std dev = 0,447, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then return 0.3096233491188699;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.3832603879587749;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27954995766569785;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.11919367642477294;  // std dev = 0,007, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.0816100676443957;  // std dev = 7,597, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5229085506633612;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3620838083953301;  // std dev = 14,013, 1.455,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1.221 */
%   | | else return 0.3206880907109523;  // std dev = 14,263, 1.261,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.006 */
%   | else return -0.07422640612827651;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then return 0.23927862127134986;  // std dev = 0,491, 234,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=134 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.25824771883512027;  // std dev = 0,383, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.24153847228192316;  // std dev = 1,138, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.24902418318849723;  // std dev = 0,446, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else return 0.1773045212211704;  // std dev = 0,495, 210,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=117 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.06710982827703349;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.09269127618926044;  // std dev = 1,32e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.33511799377574947;  // std dev = 0,187, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.3350900342754159;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( haswordvenue(A, E) )
%   | | | then return 0.3380195923894162;  // std dev = 0,044, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17430802007039448;  // std dev = 0,452, 32,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.19339218181552179;  // std dev = 0,386, 2.660,000 (wgt'ed) examples reached here.  /* #neg=484 #pos=2.176 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, B) )
%   | | | | then return 0.12575593676337107;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.17347411971860527;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.12609312528894817;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.06452231690539696;  // std dev = 0,174, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.1512925526309227;  // std dev = 0,383, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else return 0.10676698148460384;  // std dev = 0,490, 234,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=134 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.055477908228870554;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.08028935893419156;  // std dev = 1,29e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( haswordvenue(B, E) )
%   | | then return 0.2399369230057132;  // std dev = 0,051, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( author(G, F), venue(G, A) )
%   | | | then return 0.26021698628245016;  // std dev = 0,209, 45,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else if ( author(H, F), venue(H, B) )
%   | | | | then return 0.03306735657897599;  // std dev = 1,042, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.04691953975283909;  // std dev = 0,467, 29,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.11649654835776554;  // std dev = 0,385, 2.659,000 (wgt'ed) examples reached here.  /* #neg=483 #pos=2.176 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, A) )
%   | | | | then return 0.14473438765139426;  // std dev = 0,856, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.14166896431327103;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.06872141543799508;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.05435416961973141;  // std dev = 0,174, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15920028778731857;  // std dev = 2,273, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.16088056682972313;  // std dev = 2,103, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | else return 0.091295801742011;  // std dev = 19,745, 2.605,000 (wgt'ed) examples reached here.  /* #neg=478 #pos=2.127 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14924633875535284;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11978059172446127;  // std dev = 1,892, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then if ( venue(P, B), author(P, N) )
%   | | | | then return 0.04833776517696391;  // std dev = 1,076, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.09358590051548198;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.051571536023077694;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.05018594327527349;  // std dev = 7,610, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( haswordauthor(I, E) )
%   | | | | then return 0.177543700365362;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else if ( author(J, G), venue(J, B) )
%   | | | | | then return 0.16993567561988102;  // std dev = 0,977, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | | | else return 0.1748493182098171;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else if ( haswordvenue(B, F) )
%   | | | | then return 0.1736822970779394;  // std dev = 0,030, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | | else return -0.07752275159459623;  // std dev = 1,629, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return 0.07466439488306584;  // std dev = 19,862, 2.659,000 (wgt'ed) examples reached here.  /* #neg=483 #pos=2.176 */
%   | else return 0.046745952123037005;  // std dev = 7,488, 234,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=134 */
%   else return -0.046501960073421125;  // std dev = 7,611, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
Results
   AUC ROC   = 0.876823
   AUC PR    = 0.818852
   CLL	      = -0.392803
   Precision = 0.781879 at threshold = 0.5
   Recall    = 0.958848
   F1        = 0.861368


Total learning time: 1050.702 seconds
Total inference time: 10.935 seconds
AUC ROC: 0.876823


Best model AUC ROC so far: 0.876823


Refining iteration 4
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '0;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '0;false;haswordvenue(A, I), haswordvenue(B, I).;false;false', '0;true,false,true;author(H, G), venue(H, B).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;false,true;haswordvenue(B, M), haswordauthor(N, M).;false;false', '1;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '1;true,false,true;venue(H, A), author(H, G).;false;false', '1;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '1;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '1;true,false,false,true;venue(K, B), author(K, J).;false;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '2;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;false,true;haswordvenue(A, M), haswordauthor(N, M).;false;false', '2;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '2;true,false,true;author(H, G), venue(H, A).;false;false', '2;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '2;true,false,false,true;author(K, J), venue(K, B).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true,true;author(D, F), author(E, F).;true;false', '3;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '3;false;venue(H, A), samebib(H, I), venue(I, B).;true;false', '3;true,true,true;haswordauthor(G, C).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '4;false;haswordvenue(A, I), haswordvenue(B, I).;false;false', '4;true,false,true;author(H, G), venue(H, B).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '5;true,true,true;author(H, F), venue(H, A).;false;false', '5;true,false;haswordvenue(A, I), haswordvenue(B, I).;false;true', '5;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true', '5;true,true;author(G, F), venue(G, B).;true;true', '5;true;haswordvenue(B, E), haswordauthor(F, E).;true;true', '5;true,true,false;haswordvenue(A, E).;false;false', '5;true,false,false,true;author(L, K), venue(L, B).;false;false', '6;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '6;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '7;true,false;haswordvenue(A, I), haswordvenue(B, I).;false;true', '7;true,true,false,false;author(H, F), venue(H, B).;false;false', '7;true,false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true', '7;true,true;haswordvenue(B, E).;false;true', '7;true;haswordvenue(A, E), haswordauthor(F, E).;true;true', '7;true,true,false;author(G, F), venue(G, A).;false;true', '7;true,false,false,true;author(L, K), venue(L, A).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '8;true,false;haswordvenue(B, J), haswordauthor(K, J).;true;true', '8;true,false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true', '8;true,false,true;author(L, K), venue(L, A).;false;false', '8;true,true;haswordvenue(A, F), haswordauthor(G, F).;false;true', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;true,true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false', '8;true,false,false,true;venue(P, B), author(P, N).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '9;true,true,true;author(H, G), venue(H, A).;true;true', '9;true,true,true,true;haswordauthor(I, E).;false;true', '9;true,true,true,false;haswordvenue(B, F).;false;false', '9;true,true;haswordvenue(A, F), haswordauthor(G, F).;true;false', '9;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;true,true,true,true,false;author(J, G), venue(J, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0.5571428571428572), ('true,false,true,true', 0.6666666666666666), ('true,false,true,false', 0.7222222222222222), ('true,true', 0.8209447088978397), ('false,true', 0.9632127529123238)]
Tree #2: [('true,false,false,false', 0.5396825396825397), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.7058823529411765), ('true,false,true,false', 0.7222222222222222), ('true,false,true,true', 0.8), ('true,true', 0.8209447088978397), ('false,true,false', 0.9621689785624212)]
Tree #3: [('true,false,false,false', 0.5396825396825397), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.7058823529411765), ('true,false,true,false', 0.7222222222222222), ('true,false,true,true', 0.8), ('true,true', 0.8209447088978397), ('false,true,false', 0.9621689785624212)]
Tree #4: [('false,true', 0.5726495726495726), ('true,true,false', 0.7977795400475813), ('true,true,true,false', 0.8391752577319588), ('true,false', 0.9632127529123238)]
Tree #5: [('true,false,false', 0.5571428571428572), ('true,false,true,true', 0.6666666666666666), ('true,false,true,false', 0.7222222222222222), ('true,true', 0.8209447088978397), ('false,true', 0.9632127529123238)]
Tree #6: [('true,false,false,false', 0.5396825396825397), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.7058823529411765), ('true,true,false,false', 0.71875), ('true,false,true', 0.8180451127819549), ('true,true,true,false', 0.9545454545454546), ('true,true,true,true', 0.9642857142857143), ('false', 0.9685369690613529)]
Tree #7: [('true,false', 0.5726495726495726), ('true,true', 0.8209447088978397), ('false,true', 0.9632127529123238)]
Tree #8: [('true,false,false,false', 0.5396825396825397), ('true,true,false,false,true', 0.6), ('true,true,false,false,false', 0.6896551724137931), ('true,false,false,true,false', 0.7058823529411765), ('true,false,false,true,true', 0.75), ('true,false,true', 0.8183527641970666), ('true,true,false,true', 0.9555555555555556), ('false', 0.9685369690613529)]
Tree #9: [('true,false,false,false', 0.5396825396825397), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.7058823529411765), ('true,false,true,false', 0.7222222222222222), ('true,false,true,true', 0.8), ('true,true,false,false', 0.8165067178502879), ('true,true,false,true', 0.9074074074074074), ('true,true,true', 0.9166666666666666), ('false', 0.9685369690613529)]
Tree #10: [('true,false', 0.5726495726495726), ('true,true,true,false,false', 0.6666666666666666), ('true,true,false', 0.8183527641970666), ('true,true,true,true,false,false', 0.9523809523809523), ('true,true,true,true,false,true', 0.9545454545454546), ('false', 0.9685369690613529)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.6790936439973468;  // std dev = 20,036, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.5724346493852266;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.397831474782049;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then return -0.10506381781281364;  // std dev = 7,602, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.5751015063743123;  // std dev = 20,036, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.5731133809126147;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.49607199018397924;  // std dev = 1,902, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.3816289395752953;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.47788057897805464;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3422103149615975;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.12953642286115039;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09170540142357159;  // std dev = 7,598, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.4541064463803025;  // std dev = 20,036, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.45765536132773815;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.39793044418425566;  // std dev = 1,902, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then return 0.3096233491188699;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.3832603879587749;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.28236509882992666;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.11919367642477294;  // std dev = 0,007, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.0816100676443957;  // std dev = 7,597, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5229085506633612;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3620838083953301;  // std dev = 14,013, 1.455,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1.221 */
%   | | else return 0.3206880907109523;  // std dev = 14,263, 1.261,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=1.006 */
%   | else return -0.07422640612827651;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( venue(L, B), author(L, K) )
%   | | | then return 0.3006694260379478;  // std dev = 1,142, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3085855001030048;  // std dev = 0,447, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else return 0.2314107737533774;  // std dev = 0,494, 210,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=117 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.25824771883512027;  // std dev = 20,018, 2.731,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=2.242 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.22864115483247635;  // std dev = 1,141, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.23234141376273573;  // std dev = 1,895, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else return 0.1789680834498915;  // std dev = 0,494, 210,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=117 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return -0.06710982827703349;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.09269127618926044;  // std dev = 1,32e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.3340960347318825;  // std dev = 0,987, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.3350900342754159;  // std dev = 0,977, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( haswordvenue(A, E) )
%   | | | then return 0.3380195923894162;  // std dev = 0,044, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15861745210766798;  // std dev = 2,553, 32,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.19339218181552179;  // std dev = 19,886, 2.660,000 (wgt'ed) examples reached here.  /* #neg=484 #pos=2.176 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, B) )
%   | | | | then return 0.11365198809757163;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.16039868003964056;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1304682126130973;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.06452231690539696;  // std dev = 7,610, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.147789098383914;  // std dev = 21,376, 2.965,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=2.376 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.055477908228870554;  // std dev = 7,601, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.08028935893419156;  // std dev = 1,29e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( haswordvenue(B, E) )
%   | | then return 0.24061930273264612;  // std dev = 0,051, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( author(G, F), venue(G, A) )
%   | | | then return 0.2603728037611132;  // std dev = 1,401, 45,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else if ( author(H, F), venue(H, B) )
%   | | | | then return 0.017841487697118862;  // std dev = 1,047, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.035612850575810574;  // std dev = 2,507, 29,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.11724541660334384;  // std dev = 19,863, 2.659,000 (wgt'ed) examples reached here.  /* #neg=483 #pos=2.176 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, A) )
%   | | | | then return 0.1128456227286311;  // std dev = 0,855, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.11123225996940575;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.06190712153645183;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.05435416961973141;  // std dev = 7,610, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.16020598832445557;  // std dev = 2,271, 72,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=66 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.16212068335478466;  // std dev = 2,101, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | | | else return 0.09184502938250924;  // std dev = 19,745, 2.605,000 (wgt'ed) examples reached here.  /* #neg=478 #pos=2.127 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.12883986505980688;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09827084728490837;  // std dev = 1,894, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then if ( venue(P, B), author(P, N) )
%   | | | | then return 0.03231202671819986;  // std dev = 1,075, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.07727670512006195;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.04644458279843869;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.05018594327527349;  // std dev = 7,610, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.17327648424441877;  // std dev = 0,199, 48,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.04955974191404078;  // std dev = 0,355, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0.075095972338347;  // std dev = 19,862, 2.659,000 (wgt'ed) examples reached here.  /* #neg=483 #pos=2.176 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.07155040428234016;  // std dev = 1,106, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.07107937052475682;  // std dev = 0,445, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, A) )
%   | | | | then return 0.059081105143044765;  // std dev = 0,856, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.06189207300308681;  // std dev = 0,456, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.03483400138860492;  // std dev = 0,498, 189,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=102 */
%   else return -0.046501960073421125;  // std dev = 7,611, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.847 #pos=60 */
Results
   AUC ROC   = 0.875197
   AUC PR    = 0.817269
   CLL	      = -0.393158
   Precision = 0.781879 at threshold = 0.5
   Recall    = 0.958848
   F1        = 0.861368


Total learning time: 762.688 seconds
Total inference time: 7.702 seconds
AUC ROC: 0.875197


Best model AUC ROC so far: 0.876823


******************************************
Best model found
******************************************
Total revision time: 4605.983
Best validation AUC ROC: 0.876823


Results
   AUC ROC   = 0.913666
   AUC PR    = 0.8759
   CLL	      = -0.337517
   Precision = 0.834074 at threshold = 0.5
   Recall    = 0.969019
   F1        = 0.896497


Total inference time: 4.688 seconds
AUC ROC: 0.913666
Dataset: 4, Run: 1, Fold: 3, Type: transfer, Time: 02:53:58
{'Parameter Learning results': {'CLL': -0.476838, 'AUC ROC': 0.913099, 'AUC PR': 0.866499, 'F1': 0.882747, 'Recall': 0.907057, 'Learning time': 730.657, 'Inference time': 1.416, 'Precision': [0.859706, 0.5]}, 'CLL': -0.337517, 'AUC ROC': 0.913666, 'AUC PR': 0.8759, 'F1': 0.896497, 'Recall': 0.969019, 'Learning time': 4605.983, 'Inference time': 4.688, 'Mapping results': {'Knowledge compiling time': 0.3568902015686035, 'Possible mappings': 26, 'Generating paths time': 4.392605781555176, 'Total time': 4.806833982467651, 'Finding best mapping': 0.002469301223754883, 'Generating mappings time': 0.05486249923706055}, 'Precision': [0.834074, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6801351936878897;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.6352750348062522;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.10506381781281364;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5759498971353084;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.5393163049384632;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.12953642286115039;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09170540142357159;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.12544463852839194;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45470891310107964;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.4285737619858491;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.11919367642477294;  // std dev = 0,007, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08161006764439567;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.34427298029525305;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.326176558953514;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.07422640612827652;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.1015963294878366;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.25856299564601926;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.2448356882273074;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.10033516913421853;  // std dev = 0,006, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.06616711684035427;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.09269127618926044;  // std dev = 1,32e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19632921837998216;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.18465811346826572;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.061029442544007904;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 9,88e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15159411453841262;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.14094305375320104;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05577437696468689;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.07877675473109143;  // std dev = 5,16e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.1190011748805201;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.10898743519224875;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.0847404501650617;  // std dev = 0,010, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.05024318939122092;  // std dev = 0,191, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=60 */
%   | else return -0.07324622576333689;  // std dev = 1,07e-07, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.09476803363065649;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.08527962602115786;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04717626241905887;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.06842697784420287;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.07637846480529416;  // std dev = 0,383, 1.601,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=1.316 */
%   | else return 0.06740176806307062;  // std dev = 0,416, 1.364,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1.060 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04361833051104532;  // std dev = 0,188, 1.631,000 (wgt'ed) examples reached here.  /* #neg=1.571 #pos=60 */
%   | else return -0.06419184008202608;  // std dev = 8,69e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
Results
   AUC ROC   = 0.898878
   AUC PR    = 0.843387
   CLL	      = -0.343624
   Precision = 0.834074 at threshold = 0.5
   Recall    = 0.969019
   F1        = 0.896497


Total learning time: 1192.676 seconds
Total inference time: 2.125 seconds
AUC ROC: 0.898878


Dataset: 4, Run: 1, Fold: 3, Type: scratch, Time: 03:13:53
{'CLL': -0.343624, 'AUC ROC': 0.898878, 'AUC PR': 0.843387, 'F1': 0.896497, 'Recall': 0.969019, 'Learning time': 1192.676, 'Inference time': 2.125, 'Precision': [0.834074, 0.5]}


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [2.63e-09, 7, 0], 'true,false': [0.0, 30, 0]}], ['samevenue(A, B)', {}, {'true,true': [0.093, 0, 382], 'false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,false': [1.54e-07, 348, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3893521303066964;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.12406653809576255;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.335071304789671;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.10828290626530304;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27685917216523304;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.09336602141499448;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22090324737429115;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.07962534380151065;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17176748148084697;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.06725261774921992;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13134276047281349;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.056328930920597556;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09945053513545855;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.046844769593676935;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07490474131957593;  // std dev = 31,585, 4.006,000 (wgt'ed) examples reached here.  /* #neg=1.878 #pos=2.128 */
%   else return 0.03872520133245198;  // std dev = 10,210, 534,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=142 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3742141147271916;  // std dev = 0,369, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.349042178311419;  // std dev = 0,395, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.43599811806679706;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.23406334783622487;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.4119939301596847;  // std dev = 0,217, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.33921727066422147;  // std dev = 0,319, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.33998633299621533;  // std dev = 0,065, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.253725985582059;  // std dev = 0,282, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.07398649557230688;  // std dev = 0,411, 114,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=52 */
%   else if ( venue(H, A), samebib(H, I), venue(I, B) )
%   | then if ( author(H, J), author(I, J) )
%   | | then return 0.27607248267170514;  // std dev = 0,372, 1.548,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=1.277 */
%   | | else return 0.2601013079631689;  // std dev = 0,397, 1.052,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=839 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return -0.32874233063157754;  // std dev = 0,197, 1.489,000 (wgt'ed) examples reached here.  /* #neg=1.429 #pos=60 */
%   | | else return -0.19472884314045957;  // std dev = 0,000, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
Results
   AUC ROC   = 0.886967
   AUC PR    = 0.818725
   CLL	      = -0.482816
   Precision = 0.843621 at threshold = 0.5
   Recall    = 0.903084
   F1        = 0.87234


Total learning time: 754.352 seconds
Total inference time: 1.607 seconds
AUC ROC: 0.886967


Results in test set
   AUC ROC   = 0.886967
   AUC PR    = 0.818725
   CLL	      = -0.482816
   Precision = 0.843621 at threshold = 0.5
   Recall    = 0.903084
   F1        = 0.87234


Total inference time: 1.607 seconds
AUC ROC: 0.886967
Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [31.585, 1878, 2128], 'false': [10.21, 392, 142]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.369, 275, 1342], 'false,true': [0.193, 1481, 60], 'false,false': [0.0, 297, 0], 'true,false': [0.395, 217, 868]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true,true,true': 'author(F, D)', 'false,true': 'author(H, J), author(I, J)', 'false': 'venue(H, A), samebib(H, I), venue(I, B)', 'true,false': 'author(G, D), venue(G, A)', 'true,true': 'samebib(E, F), venue(F, A)', 'true': 'author(E, D), venue(E, B)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,false,false': [0.411, 62, 52], 'true,true,true,true': [0.217, 1, 23], 'true,true,true,false': [0.319, 3, 17], 'false,false,false': [0.0, 267, 0], 'true,false,true': [0.282, 12, 2], 'false,true,true': [0.372, 271, 1277], 'false,false,true': [0.197, 1429, 60], 'true,true,false': [0.065, 12, 0], 'false,true,false': [0.397, 213, 839]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '8;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;true,true,true;author(F, D).;false;false', '9;false,true;author(H, J), author(I, J).;false;false', '9;false;venue(H, A), samebib(H, I), venue(I, B).;true;true', '9;true,true;samebib(E, F), venue(F, A).;true;false', '9;true;author(E, D), venue(E, B).;true;false', '9;false,false;haswordvenue(A, K), haswordvenue(B, K).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #2: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #3: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #4: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #5: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #6: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #7: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #8: [('true', 0.5312031952071892), ('false', 0.7340823970037453)]
Tree #9: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true', 0.9610642439974043)]
Tree #10: [('true,false,false', 0.543859649122807), ('false,true,false', 0.7975285171102662), ('false,true,true', 0.8249354005167958), ('true,true,true,false', 0.85), ('true,false,true', 0.8571428571428571), ('true,true,true,true', 0.9583333333333334), ('false,false,true', 0.9597044996642041)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.688080907888623;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.6581489350995074;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.10120065839642456;  // std dev = 0,197, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.14185106490048785;  // std dev = 8,43e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5824186891795181;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.5580193346218498;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.09084589478496982;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.125444638528392;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.4801730329600137;  // std dev = 0,356, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.46282885567438603;  // std dev = 0,383, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.1193900463579433;  // std dev = 0,011, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.11581246728199829;  // std dev = 5,05e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.07814107394006142;  // std dev = 0,200, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   else if ( venue(K, A), samebib(K, L), venue(L, B) )
%   | then if ( author(K, M), author(L, M) )
%   | | then return 0.2185138681688329;  // std dev = 0,492, 129,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=76 */
%   | | else return 0.25305972113555386;  // std dev = 0,487, 108,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=66 */
%   | else return -0.11231637819360685;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.34743062560618554;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.335363356634822;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordauthor(G, F) )
%   | | then return -0.10413636127566585;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07253374256248461;  // std dev = 0,194, 1.535,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=60 */
%   | else return -0.10159632948783662;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.2611282551876495;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.25181387714944314;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06565532236288815;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.09269127618926043;  // std dev = 1,52e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19863742726046393;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.19057129123459252;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.09195337751148074;  // std dev = 0,007, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.0953817592043205;  // std dev = 1,29e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.05710133606930101;  // std dev = 0,200, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.16991557313848607;  // std dev = 0,356, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.1623512801336816;  // std dev = 0,383, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.08455820491871907;  // std dev = 0,006, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.053176757984150023;  // std dev = 0,197, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   else if ( venue(I, A), samebib(I, J), venue(J, B) )
%   | then if ( author(I, K), author(J, K) )
%   | | then return -0.03242091448361096;  // std dev = 0,492, 129,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=76 */
%   | | else return 0.0011909776053521332;  // std dev = 0,487, 108,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=66 */
%   | else return -0.07877675473109143;  // std dev = 3,65e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12150054911185411;  // std dev = 0,371, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.11430086951419437;  // std dev = 0,397, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04999589734063169;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.07324622576333696;  // std dev = 9,88e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.09438290489621437;  // std dev = 19,855, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.046027762472574216;  // std dev = 7,589, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.2078714621686515;  // std dev = 0,995, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.12749649073963726;  // std dev = 1,530, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.07386177226379406;  // std dev = 0,016, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.054666386409376856;  // std dev = 2,440, 128,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=54 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return 0.07355602074674757;  // std dev = 14,786, 1.548,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=1.277 */
%   | | else return 0.06837707469310476;  // std dev = 12,941, 1.052,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=839 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then return -0.041372278388918236;  // std dev = 7,586, 1.489,000 (wgt'ed) examples reached here.  /* #neg=1.429 #pos=60 */
%   | | else return -0.06419184008202614;  // std dev = 7,30e-08, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
Results
   AUC ROC   = 0.887539
   AUC PR    = 0.81869
   CLL	      = -0.351441
   Precision = 0.820896 at threshold = 0.5
   Recall    = 0.969163
   F1        = 0.888889


Total learning time: 1218.926 seconds
Total inference time: 2.111 seconds
AUC ROC: 0.887539


Best model AUC ROC so far: 0.887539


Refining iteration 2
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '0;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '0;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '1;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true', '2;false;venue(K, A), samebib(K, L), venue(L, B).;false;false', '2;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false', '2;true,true;author(D, F), author(E, F).;false;false', '2;true;venue(D, A), samebib(D, E), venue(E, B).;true;true', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '3;false,true;haswordauthor(G, F).;false;false', '3;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '4;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '5;false,true,false;haswordvenue(A, I), haswordauthor(J, I).;false;false', '5;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;true', '5;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;false', '6;false;venue(I, A), samebib(I, J), venue(J, B).;false;false', '6;true,true;author(D, F), author(E, F).;false;false', '6;true;venue(D, A), samebib(D, E), venue(E, B).;true;true', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;true,true,true;author(F, D).;false;false', '9;false,true;author(G, I), author(H, I).;false;false', '9;false;venue(G, A), samebib(G, H), venue(H, B).;true;true', '9;true,true;samebib(E, F), venue(F, A).;true;false', '9;true;author(E, D), venue(E, B).;true;true', '9;false,false;haswordvenue(A, J), haswordvenue(B, J).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true,false', 0.959349593495935)]
Tree #2: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true', 0.9610642439974043)]
Tree #3: [('false,true,true', 0.5891472868217055), ('false,true,false', 0.6111111111111112), ('true,true,false', 0.8208802456499488), ('true,true,true', 0.8508064516129032), ('true,false,false,false', 0.9581005586592178)]
Tree #4: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true,false', 0.9609120521172638)]
Tree #5: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true', 0.9610642439974043)]
Tree #6: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true,false,false', 0.9581005586592178)]
Tree #7: [('false,true,true', 0.5891472868217055), ('false,true,false', 0.6111111111111112), ('true,true,false', 0.8208802456499488), ('true,true,true', 0.8508064516129032), ('true,false,false', 0.959349593495935)]
Tree #8: [('true,false', 0.8), ('true,true', 0.8299319727891157), ('false,true', 0.9610642439974043)]
Tree #9: [('true', 0.8179126572908957), ('false,true', 0.9610642439974043)]
Tree #10: [('true,false', 0.578125), ('false,true,false', 0.7975285171102662), ('false,true,true', 0.8249354005167958), ('true,true,true,false', 0.85), ('true,true,true,true', 0.9583333333333334), ('false,false,true', 0.9597044996642041)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.6760615923904029;  // std dev = 20,060, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.10120065839642456;  // std dev = 7,587, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.14185106490048785;  // std dev = 8,43e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.5726311769379266;  // std dev = 20,060, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.09084589478496982;  // std dev = 7,592, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.125444638528392;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.48524527691685554;  // std dev = 13,743, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.45531907095389734;  // std dev = 11,986, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.1193900463579433;  // std dev = 0,011, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.11581246728199829;  // std dev = 5,05e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.07814107394006142;  // std dev = 7,582, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   else if ( venue(K, A), samebib(K, L), venue(L, B) )
%   | then return 0.23359494344739418;  // std dev = 7,545, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   | else return -0.11231637819360685;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.34258361393745856;  // std dev = 19,920, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.10413636127566585;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07253374256248461;  // std dev = 7,590, 1.535,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=60 */
%   | else return -0.10159632948783662;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.2573587401120604;  // std dev = 19,919, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.06565532236288815;  // std dev = 7,591, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.09269127618926043;  // std dev = 1,52e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.19534451946053433;  // std dev = 19,924, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.09195337751148074;  // std dev = 0,007, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.0953817592043205;  // std dev = 1,29e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.05710133606930101;  // std dev = 7,582, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.17617128809442573;  // std dev = 13,743, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.15284797599669764;  // std dev = 11,986, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.08455820491871907;  // std dev = 0,006, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.053176757984150023;  // std dev = 7,585, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   else if ( venue(I, A), samebib(I, J), venue(J, B) )
%   | then return -0.018018867166961938;  // std dev = 7,545, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   | else return -0.07877675473109143;  // std dev = 3,65e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.11854392877036962;  // std dev = 19,855, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.04999589734063169;  // std dev = 7,589, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.07324622576333696;  // std dev = 9,88e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.2653640151170825;  // std dev = 0,014, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1061331438434709;  // std dev = 0,369, 2.446,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.049 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.026036648449986582;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.19270331511665317;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return -0.06316522948428621;  // std dev = 0,494, 213,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=123 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then return -0.046027762472574216;  // std dev = 7,589, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.20806298769199613;  // std dev = 0,997, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.12201843441302859;  // std dev = 1,515, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.07386177226379406;  // std dev = 0,016, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | then if ( author(G, I), author(H, I) )
%   | | | then return 0.18222517123779422;  // std dev = 0,250, 42,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.2170076255669873;  // std dev = 0,235, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07078882696792091;  // std dev = 0,048, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then if ( author(J, L), author(K, L) )
%   | | then return 0.0786485147287279;  // std dev = 14,740, 1.548,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=1.277 */
%   | | else return 0.06292225993084566;  // std dev = 12,908, 1.052,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=839 */
%   | else return -0.04484199534339456;  // std dev = 0,181, 1.756,000 (wgt'ed) examples reached here.  /* #neg=1.696 #pos=60 */
Results
   AUC ROC   = 0.888199
   AUC PR    = 0.822723
   CLL	      = -0.348829
   Precision = 0.820896 at threshold = 0.5
   Recall    = 0.969163
   F1        = 0.888889


Total learning time: 685.444 seconds
Total inference time: 2.456 seconds
AUC ROC: 0.888199


Best model AUC ROC so far: 0.888199


Refining iteration 3
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '0;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '0;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true', '2;false;venue(K, A), samebib(K, L), venue(L, B).;true;false', '2;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false', '2;true,true;author(D, F), author(E, F).;false;false', '2;true;venue(D, A), samebib(D, E), venue(E, B).;true;true', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '3;false,true;haswordauthor(F, E).;false;false', '3;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;false,true,false;haswordvenue(A, H), haswordauthor(I, H).;false;false', '5;false,true;haswordvenue(B, F), haswordauthor(G, F).;false;true', '5;false;haswordvenue(A, E), haswordvenue(B, E).;true;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true,true;author(D, F), author(E, F).;false;false', '6;true;venue(D, A), samebib(D, E), venue(E, B).;true;true', '6;false;venue(I, A), samebib(I, J), venue(J, B).;true;false', '6;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '7;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;false;haswordvenue(A, J), haswordvenue(B, J).;false;false', '8;true,false,true;author(I, H), venue(I, B).;false;false', '8;true,true;haswordauthor(F, E).;false;false', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;true,true,true;author(F, D).;false;false', '9;false;venue(J, A), samebib(J, K), venue(K, B).;false;false', '9;true,false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '9;true,false,true;author(G, I), author(H, I).;false;false', '9;true,true;samebib(E, F), venue(F, A).;true;false', '9;true;author(E, D), venue(E, B).;true;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.8179126572908957), ('false,true,false', 0.959349593495935)]
Tree #2: [('true', 0.8179126572908957), ('false,true', 0.9610642439974043)]
Tree #3: [('false,true', 0.5991561181434599), ('true,true,false', 0.8208802456499488), ('true,true,true', 0.8508064516129032), ('true,false,false,false', 0.9581005586592178)]
Tree #4: [('true', 0.8179126572908957), ('false,true,false', 0.9609120521172638)]
Tree #5: [('true', 0.8179126572908957), ('false,true', 0.9610642439974043)]
Tree #6: [('true', 0.8179126572908957), ('false,true,false,false', 0.9581005586592178)]
Tree #7: [('false,true', 0.5991561181434599), ('true,true,false', 0.8208802456499488), ('true,true,true', 0.8508064516129032), ('true,false,false', 0.959349593495935)]
Tree #8: [('true', 0.8179126572908957), ('false,true', 0.9610642439974043)]
Tree #9: [('true,false,false', 0.5774647887323944), ('true,false,true,true', 0.6666666666666666), ('true,false,true,false', 0.8333333333333334), ('true,true,false', 0.8376941946034342), ('false,true', 0.9610642439974043)]
Tree #10: [('false,true,false', 0.7975285171102662), ('false,true,true', 0.8249354005167958), ('true,true,true,false', 0.85), ('true,false,true,true', 0.9285714285714286), ('true,false,true,false', 0.9375), ('true,true,true,true', 0.9583333333333334), ('false,false', 0.9658314350797267)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then if ( author(I, H), venue(I, A) )
%   | | | | then if ( author(J, H), venue(J, B) )
%   | | | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | | else return 0.8181489350995119;  // std dev = 0,196, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.6927385498398758;  // std dev = 0,372, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else return 0.4573050532429688;  // std dev = 0,490, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.10120065839642456;  // std dev = 7,587, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.14185106490048785;  // std dev = 8,43e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.6986880830932052;  // std dev = 0,158, 77,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.5862078233952376;  // std dev = 0,372, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( venue(J, A), author(J, I) )
%   | | | then return 0.7929327751192601;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5824064593297863;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, B) )
%   | | | | then return 0.39293277511926017;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.6164621868839658;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.3450161084525907;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.09084589478496982;  // std dev = 7,592, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.125444638528392;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.47604997063076243;  // std dev = 13,723, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.4467798813674987;  // std dev = 11,968, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.08092641851256034;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.634080411252945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4708900484652238;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, B) )
%   | | | | then return 0.3210673463029067;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.49750744564630195;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.282685299187482;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.11231637819360685;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3511299697191946;  // std dev = 0,367, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.47893292009958466;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36132253866579656;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.2521934589298964;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.3804627495604669;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.22358694237666144;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordauthor(M, L) )
%   | | then return -0.1077797353813076;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07251097910447833;  // std dev = 7,592, 1.535,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=60 */
%   | else return -0.10159632948783662;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.35871986738635564;  // std dev = 0,009, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then if ( author(J, G), venue(J, B) )
%   | | | | | then return 0.3175622492925017;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | | | else return 0.3642813029121603;  // std dev = 0,007, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | | else return 0.32943852019022096;  // std dev = 0,196, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.2615122130283284;  // std dev = 0,371, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else return 0.19221616159997165;  // std dev = 0,481, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then return -0.06564769811602107;  // std dev = 7,592, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.09269127618926043;  // std dev = 1,52e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.20115167199806933;  // std dev = 0,367, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.3196311677325514;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22381989821939854;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.14594135672570988;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.2383788336755868;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.12632793336934237;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.09491941999456044;  // std dev = 0,007, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.058104901125167766;  // std dev = 0,197, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.1651923427113832;  // std dev = 13,722, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.14229148440945033;  // std dev = 11,966, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.05448759577960497;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.2544347022775171;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.169847903747543;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( venue(N, B), author(N, M) )
%   | | | | then return 0.10958478771187155;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.18192548995020744;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.09519166725773427;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.07877675473109143;  // std dev = 3,65e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.12335042040313549;  // std dev = 0,367, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else return 0.08379305563935151;  // std dev = 0,480, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04997394863263075;  // std dev = 7,592, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.07324622576333696;  // std dev = 9,88e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.19358825847723357;  // std dev = 0,011, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.0982084620970123;  // std dev = 18,210, 2.446,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.049 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.10487480942536122;  // std dev = 1,121, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.12739009619604355;  // std dev = 1,573, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.056812386652507305;  // std dev = 0,488, 213,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=123 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then return -0.04600819643246059;  // std dev = 7,592, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.1991157093363131;  // std dev = 1,010, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.132010797023779;  // std dev = 1,458, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.07829841351394119;  // std dev = 0,022, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | then if ( author(G, I), author(H, I) )
%   | | | then return 0.14968585546677712;  // std dev = 1,618, 42,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.19257005156931983;  // std dev = 0,954, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07391426644168374;  // std dev = 0,069, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then return 0.07417228728236237;  // std dev = 19,467, 2.600,000 (wgt'ed) examples reached here.  /* #neg=484 #pos=2.116 */
%   | else return -0.044671688687762036;  // std dev = 7,595, 1.756,000 (wgt'ed) examples reached here.  /* #neg=1.696 #pos=60 */
Results
   AUC ROC   = 0.89045
   AUC PR    = 0.836101
   CLL	      = -0.344734
   Precision = 0.820896 at threshold = 0.5
   Recall    = 0.969163
   F1        = 0.888889


Total learning time: 1264.209 seconds
Total inference time: 6.209 seconds
AUC ROC: 0.89045


Best model AUC ROC so far: 0.89045


Refining iteration 4
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '0;false;haswordvenue(A, K), haswordvenue(B, K).;true;false', '0;false,true;haswordvenue(B, L), haswordauthor(M, L).;false;false', '0;true,true,false,true,true;author(J, H), venue(J, B).;false;false', '0;true,true;haswordauthor(F, E).;false;true', '0;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '0;true,true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false', '0;true,true,false,true;author(I, H), venue(I, A).;true;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true', '1;true,false,true;venue(J, A), author(J, I).;false;false', '1;true,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '1;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '1;true,false,false,true;author(M, L), venue(M, B).;false;false', '1;false;haswordvenue(A, N), haswordvenue(B, N).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false,true,false;haswordvenue(A, L), haswordauthor(M, L).;true;true', '2;false,true;haswordvenue(B, I), haswordauthor(J, I).;true;true', '2;false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '2;false,true,false,true;author(N, M), venue(N, B).;false;false', '2;true,true;author(D, F), author(E, F).;false;false', '2;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '2;false,true,true;venue(K, A), author(K, J).;false;false', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;false,true;haswordauthor(M, L).;false;false', '3;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '3;true,false,true;venue(H, A), author(H, G).;false;false', '3;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '3;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '3;true,false,false,true;venue(K, B), author(K, J).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;true,true,true;haswordauthor(H, E).;false;true', '4;true,true,true,false,true;author(J, G), venue(J, B).;false;false', '4;true,true,true,false;author(I, G), venue(I, A).;true;false', '4;true,true;haswordvenue(B, F), haswordauthor(G, F).;true;false', '4;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '4;false;haswordvenue(A, K), haswordvenue(B, K).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;haswordvenue(B, M), haswordauthor(N, M).;false;false', '5;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '5;true,false,true;venue(H, A), author(H, G).;false;false', '5;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '5;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '5;true,false,false,true;venue(K, B), author(K, J).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false,true,false;haswordvenue(A, L), haswordauthor(M, L).;true;true', '6;false,true;haswordvenue(B, I), haswordauthor(J, I).;true;true', '6;false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '6;false,true,false,true;venue(N, B), author(N, M).;false;false', '6;true,true;author(D, F), author(E, F).;false;false', '6;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '6;false,true,true;venue(K, A), author(K, J).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;false;haswordvenue(A, J), haswordvenue(B, J).;false;false', '8;true,false,true;author(I, H), venue(I, B).;false;false', '8;true,true;haswordauthor(F, E).;false;false', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;false', '9;true,true,true;author(F, D).;false;false', '9;true,false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '9;true,false,true;author(G, I), author(H, I).;false;false', '9;true,true;samebib(E, F), venue(F, A).;true;false', '9;true;author(E, D), venue(E, B).;true;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.5991561181434599), ('true,true,false,false', 0.8345896147403685), ('true,true,false,true,true,true', 0.9473684210526315), ('false,true,false', 0.959349593495935), ('true,true,false,true,false', 0.96)]
Tree #2: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true,false', 0.8345896147403685), ('false,true', 0.9610642439974043), ('true,true,true', 0.974025974025974)]
Tree #3: [('false,true,false,false', 0.5520833333333334), ('false,true,false,true,true', 0.6), ('false,true,true,false', 0.7894736842105263), ('true,true,false', 0.8208802456499488), ('false,true,false,true,false', 0.8235294117647058), ('true,true,true', 0.8508064516129032), ('true,false', 0.9610642439974043)]
Tree #4: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true', 0.8389452332657201), ('false,true,false', 0.9609120521172638)]
Tree #5: [('true,false', 0.5991561181434599), ('true,true,false', 0.8345896147403685), ('true,true,true,false,true,true', 0.9473684210526315), ('true,true,true,false,false', 0.96), ('false,true', 0.9610642439974043)]
Tree #6: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true', 0.8389452332657201), ('false,true,false', 0.959349593495935)]
Tree #7: [('false,true,false,false', 0.5520833333333334), ('false,true,false,true,true', 0.6), ('false,true,true,false', 0.7894736842105263), ('true,true,false', 0.8208802456499488), ('false,true,false,true,false', 0.8235294117647058), ('true,true,true', 0.8508064516129032), ('true,false', 0.9610642439974043)]
Tree #8: [('true,false', 0.5991561181434599), ('true,true', 0.8389452332657201), ('false,true', 0.9610642439974043)]
Tree #9: [('true,false,false', 0.5774647887323944), ('true,false,true,true', 0.6666666666666666), ('true,false,true,false', 0.8333333333333334), ('true,true,false', 0.8376941946034342), ('false,true', 0.9610642439974043)]
Tree #10: [('false,true', 0.8138461538461539), ('true,true,true,false', 0.85), ('true,false,true,true', 0.9285714285714286), ('true,false,true,false', 0.9375), ('true,true,true,true', 0.9583333333333334), ('false,false', 0.9658314350797267)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.8236661764788228;  // std dev = 0,182, 58,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.6927385498398758;  // std dev = 18,157, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, B) )
%   | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.6816783468642181;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.4102322684328426;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else return -0.10920688644564804;  // std dev = 0,178, 1.838,000 (wgt'ed) examples reached here.  /* #neg=1.778 #pos=60 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.6987018726506978;  // std dev = 1,394, 77,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.5862078233952376;  // std dev = 18,157, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( venue(J, A), author(J, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5494185715067316;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, B) )
%   | | | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.5772066794120977;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.3526384935636215;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.09013422454315524;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.1290699805457513;  // std dev = 2,60e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.47598333163452305;  // std dev = 13,723, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.44688150836982343;  // std dev = 11,969, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.08033636249829207;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43580662724469027;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, B) )
%   | | | | then return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.45560116266536577;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.2903790442644987;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.1152423088558472;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3511298552345111;  // std dev = 18,216, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.331164704788703;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.3448948463549135;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.23055350404401445;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordauthor(M, L) )
%   | | then return -0.11108781134211247;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07199986345937656;  // std dev = 7,593, 1.535,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=60 */
%   | else return -0.10400282704888024;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.35872794698442917;  // std dev = 0,009, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3339563887842907;  // std dev = 0,183, 58,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.26151205671304234;  // std dev = 18,151, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.26110998342124064;  // std dev = 0,372, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, B) )
%   | | | | then return 0.19292386438161405;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.25904528127845544;  // std dev = 0,381, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.1783413292887898;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.06522484557755213;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.09470260434400751;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.20115085488008916;  // std dev = 18,213, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.266664429525331;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1847653156925239;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.14565792934085833;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.19674969883689405;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.13575280378977952;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.09792823630280803;  // std dev = 0,008, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.057592495914534816;  // std dev = 7,587, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.08688911117047124;  // std dev = 5,96e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.16510921978233326;  // std dev = 13,722, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.1424162778883088;  // std dev = 11,967, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.05416790602682102;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.21784369631456757;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14155847188110124;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( venue(N, B), author(N, M) )
%   | | | | then return 0.10936989620321738;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.1519855521716933;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.10243769353874994;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.08023829552423462;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.11994792812732925;  // std dev = 19,659, 2.702,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=2.210 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.04969395154553319;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.0745126182829145;  // std dev = 1,58e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.19413374135598827;  // std dev = 0,011, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.09886373703750719;  // std dev = 18,211, 2.446,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.049 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.09265077228285286;  // std dev = 1,118, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.09894251843301681;  // std dev = 1,573, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, A) )
%   | | | | then return 0.16574779905243853;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 0.0727420540262474;  // std dev = 0,416, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.04701274090769928;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, M), haswordvenue(B, M) )
%   | then return -0.04576117873601097;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06953432751504489;  // std dev = 1,35e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.19832957244066005;  // std dev = 1,006, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.13117990248074018;  // std dev = 1,461, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.07840765367806232;  // std dev = 0,021, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | then if ( author(G, I), author(H, I) )
%   | | | then return 0.14436352794927926;  // std dev = 1,629, 42,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.18345152109273433;  // std dev = 0,965, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07434388975333106;  // std dev = 0,064, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return 0.026355152666304615;  // std dev = 21,249, 4.356,000 (wgt'ed) examples reached here.  /* #neg=2.180 #pos=2.176 */
Results
   AUC ROC   = 0.891847
   AUC PR    = 0.839554
   CLL	      = -0.347703
   Precision = 0.820896 at threshold = 0.5
   Recall    = 0.969163
   F1        = 0.888889


Total learning time: 913.642 seconds
Total inference time: 4.441 seconds
AUC ROC: 0.891847


Best model AUC ROC so far: 0.891847


Refining iteration 5
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;false', '0;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '0;true,false,false;haswordvenue(A, L), haswordauthor(M, L).;true;true', '0;true,false,true;author(K, J), venue(K, A).;false;false', '0;true,true;haswordauthor(F, E).;false;true', '0;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '0;true,true,false;haswordvenue(B, G), haswordauthor(H, G).;false;false', '0;true,false,false,true;author(N, M), venue(N, B).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true', '1;true,false,true;venue(J, A), author(J, I).;false;false', '1;true,true;haswordvenue(B, F), haswordauthor(G, F).;false;false', '1;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '1;true,false,false,true;author(M, L), venue(M, B).;false;false', '1;false;haswordvenue(A, N), haswordvenue(B, N).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false,true,false;haswordvenue(A, L), haswordauthor(M, L).;true;true', '2;false,true;haswordvenue(B, I), haswordauthor(J, I).;true;true', '2;false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '2;false,true,false,true;author(N, M), venue(N, B).;false;false', '2;true,true;author(D, F), author(E, F).;false;false', '2;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '2;false,true,true;venue(K, A), author(K, J).;false;false', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;false,true;haswordauthor(M, L).;false;false', '3;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '3;true,false,true;venue(H, A), author(H, G).;false;false', '3;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '3;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '3;true,false,false,true;venue(K, B), author(K, J).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '4;true,true,true;haswordauthor(H, E).;false;false', '4;false;haswordvenue(A, N), haswordvenue(B, N).;false;false', '4;true,false;haswordvenue(B, I), haswordauthor(J, I).;false;true', '4;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true', '4;true,true;haswordvenue(B, F), haswordauthor(G, F).;true;false', '4;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '4;true,false,false,true;author(M, L), venue(M, B).;false;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '5;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;haswordvenue(B, M), haswordauthor(N, M).;false;false', '5;false;haswordvenue(A, L), haswordvenue(B, L).;true;false', '5;true,false,true;venue(H, A), author(H, G).;false;false', '5;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '5;true;haswordvenue(A, E), haswordvenue(B, E).;false;true', '5;true,false,false,true;venue(K, B), author(K, J).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false,true,false;haswordvenue(A, L), haswordauthor(M, L).;true;true', '6;false,true;haswordvenue(B, I), haswordauthor(J, I).;true;true', '6;false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '6;false,true,false,true;venue(N, B), author(N, M).;false;false', '6;true,true;author(D, F), author(E, F).;false;false', '6;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '6;false,true,true;venue(K, A), author(K, J).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '7;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;true,false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true', '8;true,false,true;author(I, H), venue(I, B).;false;false', '8;true,true;haswordauthor(F, E).;false;false', '8;true;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;true,false,false,true;author(L, K), venue(L, A).;false;false', '8;false;haswordvenue(A, M), haswordvenue(B, M).;false;false', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '9;true,true,true;author(F, D).;false;false', '9;true,false;venue(G, A), samebib(G, H), venue(H, B).;true;false', '9;true,false,true;author(G, I), author(H, I).;false;false', '9;true,true;samebib(E, F), venue(F, A).;true;false', '9;true;author(E, D), venue(E, B).;true;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true,false,false', 0.8345896147403685), ('true,true,false,true', 0.9655172413793104), ('false', 0.9673558215451578)]
Tree #2: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true,false', 0.8345896147403685), ('false,true', 0.9610642439974043), ('true,true,true', 0.974025974025974)]
Tree #3: [('false,true,false,false', 0.5520833333333334), ('false,true,false,true,true', 0.6), ('false,true,true,false', 0.7894736842105263), ('true,true,false', 0.8208802456499488), ('false,true,false,true,false', 0.8235294117647058), ('true,true,true', 0.8508064516129032), ('true,false', 0.9610642439974043)]
Tree #4: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true', 0.8389452332657201), ('false,true,false', 0.9609120521172638)]
Tree #5: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,false,true,false', 0.8235294117647058), ('true,false,true', 0.8260869565217391), ('true,true,false', 0.8345896147403685), ('false,true', 0.9610642439974043), ('true,true,true,false', 0.9655172413793104)]
Tree #6: [('true,false,false,false', 0.5520833333333334), ('true,false,false,true,true', 0.6), ('true,false,true,false', 0.7894736842105263), ('true,false,false,true,false', 0.8235294117647058), ('true,true', 0.8389452332657201), ('false,true,false', 0.959349593495935)]
Tree #7: [('false,true,false,false', 0.5520833333333334), ('false,true,false,true,true', 0.6), ('false,true,true,false', 0.7894736842105263), ('true,true,false', 0.8208802456499488), ('false,true,false,true,false', 0.8235294117647058), ('true,true,true', 0.8508064516129032), ('true,false', 0.9610642439974043)]
Tree #8: [('true', 0.8179126572908957), ('false,true', 0.9610642439974043)]
Tree #9: [('true,false,false,false', 0.5520833333333334), ('true,false,true,true', 0.6666666666666666), ('true,false,false,true,false', 0.7777777777777778), ('true,false,true,false', 0.8333333333333334), ('true,true,false', 0.8376941946034342), ('false,true', 0.9610642439974043)]
Tree #10: [('false', 0.5004591368227732), ('true,true,true,false', 0.85), ('true,false,true,true', 0.9285714285714286), ('true,false,true,false', 0.9375), ('true,true,true,true', 0.9583333333333334)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.8236661764788228;  // std dev = 1,390, 58,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.6927385498398758;  // std dev = 18,157, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6476226193100386;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, B) )
%   | | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.6816783468642181;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.4102322684328426;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else return -0.10920688644564804;  // std dev = 7,618, 1.838,000 (wgt'ed) examples reached here.  /* #neg=1.778 #pos=60 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.6987018726506978;  // std dev = 1,394, 77,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.5862078233952376;  // std dev = 18,157, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( venue(J, A), author(J, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5494185715067316;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, B) )
%   | | | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.5772066794120977;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.3526384935636215;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.09013422454315524;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.1290699805457513;  // std dev = 2,60e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.47598333163452305;  // std dev = 13,723, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.44688150836982343;  // std dev = 11,969, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.08033636249829207;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43580662724469027;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( author(N, M), venue(N, B) )
%   | | | | then return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.45560116266536577;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.2903790442644987;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.1152423088558472;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3511298552345111;  // std dev = 18,216, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.331164704788703;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.3448948463549135;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.23055350404401445;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordauthor(M, L) )
%   | | then return -0.11108781134211247;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07199986345937656;  // std dev = 7,593, 1.535,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=60 */
%   | else return -0.10400282704888024;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.35872794698442917;  // std dev = 0,009, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3339563887842907;  // std dev = 1,393, 58,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.26151205671304234;  // std dev = 18,151, 2.388,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=1.993 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.26110998342124064;  // std dev = 1,782, 23,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then if ( author(M, L), venue(M, B) )
%   | | | | then return 0.19292386438161405;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.25904528127845544;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.1783413292887898;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, N), haswordvenue(B, N) )
%   | then return -0.06522484557755213;  // std dev = 7,594, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.09470260434400751;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.20115085488008916;  // std dev = 18,213, 2.465,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.068 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( venue(H, A), author(H, G) )
%   | | | then return 0.266664429525331;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1847653156925239;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then return 0.14565792934085833;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.19674969883689405;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.13575280378977952;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | then if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.09792823630280803;  // std dev = 0,008, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.057592495914534816;  // std dev = 7,587, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.08688911117047124;  // std dev = 5,96e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.16510921978233326;  // std dev = 13,722, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.1424162778883088;  // std dev = 11,967, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else return -0.05416790602682102;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( venue(K, A), author(K, J) )
%   | | | then return 0.21784369631456757;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14155847188110124;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then if ( venue(N, B), author(N, M) )
%   | | | | then return 0.10936989620321738;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else return 0.1519855521716933;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.10243769353874994;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   | else return -0.08023829552423462;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.2135887237398512;  // std dev = 0,012, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1915630971964428;  // std dev = 0,183, 58,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( venue(K, B), author(K, J) )
%   | | | | then if ( author(L, J), venue(L, A) )
%   | | | | | then return 0.22951641542721052;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | | | else return 0.22538199820568489;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | | else return 0.24554250997381527;  // std dev = 0,197, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.11808038024094447;  // std dev = 0,374, 2.329,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=1.937 */
%   | else return 0.08456179837505659;  // std dev = 0,479, 237,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=142 */
%   else if ( haswordvenue(A, M), haswordvenue(B, M) )
%   | then return -0.04969395154553319;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.0745126182829145;  // std dev = 1,58e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.17990258915537694;  // std dev = 0,010, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.09841354189144415;  // std dev = 18,201, 2.446,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=2.049 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.10120240673114521;  // std dev = 1,117, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.10588062157536922;  // std dev = 1,573, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then if ( author(L, K), venue(L, A) )
%   | | | | then return 0.1706988768263814;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 0.0801539691840573;  // std dev = 1,764, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.05585902773880272;  // std dev = 0,497, 192,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=106 */
%   else if ( haswordvenue(A, M), haswordvenue(B, M) )
%   | then return -0.04576117873601097;  // std dev = 7,593, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06953432751504489;  // std dev = 1,35e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.1821912394155357;  // std dev = 1,014, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.11761598096981221;  // std dev = 1,448, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.07840765367806232;  // std dev = 0,021, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | | then if ( author(G, I), author(H, I) )
%   | | | then return 0.13325509252373288;  // std dev = 1,617, 42,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.17377891679427562;  // std dev = 0,951, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07434388975333106;  // std dev = 0,064, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then if ( author(J, L), author(K, L) )
%   | | then return 0.08009155950653643;  // std dev = 0,372, 1.548,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=1.277 */
%   | | else return 0.06743935615827126;  // std dev = 0,396, 1.052,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=839 */
%   | else return -0.044626431266223135;  // std dev = 0,181, 1.756,000 (wgt'ed) examples reached here.  /* #neg=1.696 #pos=60 */
Results
   AUC ROC   = 0.891304
   AUC PR    = 0.838007
   CLL	      = -0.344819
   Precision = 0.820896 at threshold = 0.5
   Recall    = 0.969163
   F1        = 0.888889


Total learning time: 1085.082 seconds
Total inference time: 7.334 seconds
AUC ROC: 0.891304


Best model AUC ROC so far: 0.891847


******************************************
Best model found
******************************************
Total revision time: 5945.813000000001
Best validation AUC ROC: 0.891847


Results
   AUC ROC   = 0.917875
   AUC PR    = 0.874803
   CLL	      = -0.317366
   Precision = 0.852632 at threshold = 0.5
   Recall    = 0.975904
   F1        = 0.910112


Total inference time: 5.079 seconds
AUC ROC: 0.917875
Dataset: 4, Run: 1, Fold: 4, Type: transfer, Time: 04:53:13
{'Parameter Learning results': {'CLL': -0.468269, 'AUC ROC': 0.918221, 'AUC PR': 0.876161, 'F1': 0.900193, 'Recall': 0.935743, 'Learning time': 754.352, 'Inference time': 1.884, 'Precision': [0.867246, 0.5]}, 'CLL': -0.317366, 'AUC ROC': 0.917875, 'AUC PR': 0.874803, 'F1': 0.910112, 'Recall': 0.975904, 'Learning time': 5945.813000000001, 'Inference time': 5.079, 'Mapping results': {'Knowledge compiling time': 0.4148867130279541, 'Possible mappings': 26, 'Generating paths time': 4.3878843784332275, 'Total time': 4.8600172996521, 'Finding best mapping': 0.002434253692626953, 'Generating mappings time': 0.05480551719665527}, 'Precision': [0.852632, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.688080907888623;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.6581489350995074;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.10120065839642456;  // std dev = 0,197, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   | else return -0.14185106490048785;  // std dev = 8,43e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5824186891795181;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.5580193346218498;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.12927602766770974;  // std dev = 0,012, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.08950380821015311;  // std dev = 0,197, 1.489,000 (wgt'ed) examples reached here.  /* #neg=1.429 #pos=60 */
%   | else return -0.125444638528392;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45929855413622406;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.44194861002443636;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.0809289541715185;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.11231637819360685;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.34747523071052355;  // std dev = 0,376, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.335411394950937;  // std dev = 0,400, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.10740027260359156;  // std dev = 0,010, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.1079086186655791;  // std dev = 1,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.06998518705379538;  // std dev = 0,200, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   | else return -0.10159632948783662;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.2819288207916577;  // std dev = 0,356, 1.488,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=1.266 */
%   | | else return 0.2726486187949657;  // std dev = 0,383, 977,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=802 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.0975315034301398;  // std dev = 0,009, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.06425668368722963;  // std dev = 0,197, 1.476,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=60 */
%   else if ( venue(I, A), samebib(I, J), venue(J, B) )
%   | then if ( author(I, K), author(J, K) )
%   | | then return 0.020269656000468143;  // std dev = 0,492, 129,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=76 */
%   | | else return 0.06287948425613744;  // std dev = 0,487, 108,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=66 */
%   | else return -0.09269127618926043;  // std dev = 1,52e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.19864424070993736;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.19057068858879325;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.059677836684292884;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.08518475138839678;  // std dev = 1,03e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15377862103899786;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.14630908042154522;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.054499017219975486;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.07877675473109143;  // std dev = 3,65e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.12109323039300336;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.11400150141241433;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.08041927667864665;  // std dev = 0,008, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.08338344456687043;  // std dev = 1,05e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.047576369619917215;  // std dev = 0,200, 1.432,000 (wgt'ed) examples reached here.  /* #neg=1.372 #pos=60 */
%   | else return -0.07324622576333696;  // std dev = 9,88e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.09677287200840579;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.0900011659933431;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.046033572495808625;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.0782915826690055;  // std dev = 0,373, 1.617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=1.342 */
%   | else return 0.0718408734229063;  // std dev = 0,398, 1.085,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=868 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.042522479832321824;  // std dev = 0,193, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.481 #pos=60 */
%   | else return -0.06419184008202597;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
Results
   AUC ROC   = 0.917699
   AUC PR    = 0.871134
   CLL	      = -0.317772
   Precision = 0.852632 at threshold = 0.5
   Recall    = 0.975904
   F1        = 0.910112


Total learning time: 1030.13 seconds
Total inference time: 3.039 seconds
AUC ROC: 0.917699


Dataset: 4, Run: 1, Fold: 4, Type: scratch, Time: 05:10:26
{'CLL': -0.317772, 'AUC ROC': 0.917699, 'AUC PR': 0.871134, 'F1': 0.910112, 'Recall': 0.975904, 'Learning time': 1030.13, 'Inference time': 3.039, 'Precision': [0.852632, 0.5]}


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Tranferred structured tree: [['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [1.07e-06, 0, 170], 'false': [2.09e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [5.72e-07, 0, 170], 'false': [0.0, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [4.13e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [3.82e-07, 0, 170], 'false': [1.99e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [1.15e-07, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'false': [6.32e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true,true': [0.0, 0, 170], 'false': [7.88e-08, 378, 0], 'true,false': [0.135, 4, 212]}], ['samevenue(A, B)', {'false,false': 'haswordvenue(A, D), haswordvenue(B, D)'}, {'true,true': [0.105, 0, 382], 'false,true': [0.0, 341, 0], 'false,false,true': [0.0, 4, 0], 'false,false,false': [2.63e-09, 7, 0], 'true,false': [0.0, 30, 0]}], ['samevenue(A, B)', {}, {'true,true': [0.093, 0, 382], 'false,true': [0.0, 4, 0], 'true,false': [0.0, 30, 0], 'false,false': [1.54e-07, 348, 0]}]] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false', '8;false,false;haswordvenue(A, D), haswordvenue(B, D).;false;false']
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3824792922423643;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.11806082937263693;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3292798044863255;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.10307303282956715;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2723806846561682;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.08895576976707957;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21768723064634676;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.07597671320457546;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1695685606612909;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.06429753725346339;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12987072650959303;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.05398202578138118;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09846328744721551;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.045014559538952656;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07423128533878183;  // std dev = 33,427, 4.480,000 (wgt'ed) examples reached here.  /* #neg=2.131 #pos=2.349 */
%   else return 0.037322441908980666;  // std dev = 9,345, 454,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=118 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.37079845046481974;  // std dev = 0,372, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.340675272548683;  // std dev = 0,404, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.4282092845298157;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.22911465633880615;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.27988546223838023;  // std dev = 0,371, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.25727486322620435;  // std dev = 0,404, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.36487930766274307;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.364879307662743;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.3227106329639521;  // std dev = 0,201, 1.660,000 (wgt'ed) examples reached here.  /* #neg=1.590 #pos=70 */
%   | else return -0.19116906109115253;  // std dev = 2,89e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
Results
   AUC ROC   = 0.893169
   AUC PR    = 0.839428
   CLL	      = -0.48292
   Precision = 0.843066 at threshold = 0.5
   Recall    = 0.939024
   F1        = 0.888462


Total learning time: 907.929 seconds
Total inference time: 1.603 seconds
AUC ROC: 0.893169


Results in test set
   AUC ROC   = 0.893169
   AUC PR    = 0.839428
   CLL	      = -0.48292
   Precision = 0.843066 at threshold = 0.5
   Recall    = 0.939024
   F1        = 0.888462


Total inference time: 1.603 seconds
AUC ROC: 0.893169
Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [33.427, 2131, 2349], 'false': [9.345, 336, 118]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.372, 305, 1413], 'false,true': [0.197, 1666, 70], 'false,false': [0.0, 235, 0], 'true,false': [0.404, 261, 984]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'false,true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true': 'author(C, E), author(D, E)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,false': [0.404, 261, 984], 'false,true,false,true': [0.0, 37, 0], 'false,true,false,false': [0.201, 1590, 70], 'true,true': [0.371, 305, 1413], 'false,true,true': [0.0, 39, 0], 'false,false': [2.89e-07, 235, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '8;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '9;false,true,false;haswordvenue(B, I), haswordauthor(J, I).;false;false', '9;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;true', '9;false;haswordvenue(A, F), haswordvenue(B, F).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #2: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #3: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #4: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #5: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #6: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #7: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #8: [('true', 0.5243303571428571), ('false', 0.7400881057268722)]
Tree #9: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true', 0.9596774193548387)]
Tree #10: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true,false,false', 0.9578313253012049)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6806169211297751;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.64851038088264;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.10152848425532852;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.1418510649004884;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5763422520144952;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.5501443425574101;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.08961299725825712;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.1254446385283918;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45498749363344704;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.4363254697418025;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.1201361515979929;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.07883821649474608;  // std dev = 0,199, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.11231637819360679;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.34446710719271745;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.331523032083695;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.07163097944851574;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.10159632948783658;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.25871347147066254;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.2488315407482957;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.10472578553837682;  // std dev = 0,007, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.06378518590579166;  // std dev = 0,199, 1.697,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=70 */
%   | else return -0.09269127618926049;  // std dev = 7,60e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.1964603368196788;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.1879950826142095;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.0952952506930908;  // std dev = 0,007, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.05789469132011349;  // std dev = 0,199, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.08518475138839678;  // std dev = 8,69e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.17771401100662554;  // std dev = 0,359, 1.597,000 (wgt'ed) examples reached here.  /* #neg=242 #pos=1.355 */
%   | | else return 0.1591620202222529;  // std dev = 0,396, 1.147,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=924 */
%   | else return -0.05365629910908255;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return -0.19141301953099638;  // std dev = 0,500, 121,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=58 */
%   | | else return -0.034172855140270006;  // std dev = 0,487, 98,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=60 */
%   | else return -0.07877675473109143;  // std dev = 6,66e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.11946611149818664;  // std dev = 0,378, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.11187733454653814;  // std dev = 0,406, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.08582386589086177;  // std dev = 0,011, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.04834416031709704;  // std dev = 0,199, 1.697,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=70 */
%   | else return -0.07324622576333671;  // std dev = 1,25e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.09216420875259557;  // std dev = 21,215, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.04526124650843764;  // std dev = 8,194, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.06842697784420262;  // std dev = 5,16e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.0738726792990039;  // std dev = 21,221, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.07608239635668868;  // std dev = 0,010, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.07661518609549546;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.04020289035844866;  // std dev = 8,188, 1.660,000 (wgt'ed) examples reached here.  /* #neg=1.590 #pos=70 */
%   | else return -0.06419184008202625;  // std dev = 2,36e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
Results
   AUC ROC   = 0.893516
   AUC PR    = 0.839676
   CLL	      = -0.375022
   Precision = 0.805461 at threshold = 0.5
   Recall    = 0.95935
   F1        = 0.875696


Total learning time: 1393.595 seconds
Total inference time: 2.321 seconds
AUC ROC: 0.893516


Best model AUC ROC so far: 0.893516


Refining iteration 2
********************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '0;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '1;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '1;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '2;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '2;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '2;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '3;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '3;false;haswordvenue(A, F), haswordvenue(B, F).;false;false', '4;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '4;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '4;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '5;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '5;false,true;haswordvenue(B, G), haswordauthor(H, G).;false;false', '5;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true,true;author(D, F), author(E, F).;false;false', '6;true;venue(D, A), samebib(D, E), venue(E, B).;true;false', '6;false;venue(G, A), samebib(G, H), venue(H, B).;false;false', '7;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;false;true', '7;false,true;haswordvenue(A, G), haswordauthor(H, G).;false;false', '7;false;haswordvenue(A, F), haswordvenue(B, F).;true;false', '8;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;false;false', '9;;samevenue(A, B) :- venue(C, A), samebib(C, D), venue(D, B).;true;true', '9;false,true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false', '9;false,true;haswordvenue(A, F), haswordauthor(G, F).;false;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true', 0.9596774193548387)]
Tree #2: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true', 0.9596774193548387)]
Tree #3: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true,false', 0.9587020648967551)]
Tree #4: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true', 0.9596774193548387)]
Tree #5: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true,false', 0.9587507365939893)]
Tree #6: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true,false', 0.9587020648967551)]
Tree #7: [('false,true,true', 0.5206611570247934), ('false,true,false', 0.6122448979591837), ('true,true,false', 0.8055797733217088), ('true,true,true', 0.8484658735128365), ('true,false', 0.9596774193548387)]
Tree #8: [('true,false', 0.7903614457831325), ('true,true', 0.8224679860302677), ('false,true,false', 0.9587507365939893)]
Tree #9: [('true', 0.8089773877826527), ('false,true', 0.9596774193548387)]
Tree #10: [('true', 0.8089773877826527), ('false,true,false,false', 0.9578313253012049)]


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.6671263228821599;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.10152848425532852;  // std dev = 8,196, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.1418510649004884;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.5653462238366426;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.08961299725825712;  // std dev = 8,196, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.1254446385283918;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.4471698401565085;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.1201361515979929;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.07883821649474608;  // std dev = 8,192, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.11231637819360679;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.3390305207919437;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return -0.07163097944851574;  // std dev = 8,195, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.10159632948783658;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.2545259672499767;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.10472578553837682;  // std dev = 0,007, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.06378518590579166;  // std dev = 8,192, 1.697,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=70 */
%   | else return -0.09269127618926049;  // std dev = 7,60e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.19283678059708675;  // std dev = 21,398, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.0952952506930908;  // std dev = 0,007, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.05789469132011349;  // std dev = 8,191, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.08518475138839678;  // std dev = 8,69e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.18785096490482492;  // std dev = 14,329, 1.597,000 (wgt'ed) examples reached here.  /* #neg=242 #pos=1.355 */
%   | | else return 0.14496486471369685;  // std dev = 13,403, 1.147,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=924 */
%   | else return -0.05365629910908255;  // std dev = 8,194, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then return -0.12180212321988934;  // std dev = 7,377, 219,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=118 */
%   | else return -0.07877675473109143;  // std dev = 6,66e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then return 0.11617167299029724;  // std dev = 21,227, 2.963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=2.397 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.08582386589086177;  // std dev = 0,011, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.04834416031709704;  // std dev = 8,191, 1.697,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=70 */
%   | else return -0.07324622576333671;  // std dev = 1,25e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.10901555849955036;  // std dev = 0,375, 2.744,000 (wgt'ed) examples reached here.  /* #neg=465 #pos=2.279 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.23077997775151907;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.28435140632294764;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.11033179847981045;  // std dev = 0,498, 204,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=112 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then return -0.04526124650843764;  // std dev = 8,194, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.06842697784420262;  // std dev = 5,16e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.08765035971672111;  // std dev = 0,375, 2.744,000 (wgt'ed) examples reached here.  /* #neg=465 #pos=2.279 */
%   | else return -0.09292690346343592;  // std dev = 0,498, 219,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=118 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.07608239635668868;  // std dev = 0,010, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.07661518609549546;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.04020289035844866;  // std dev = 8,188, 1.660,000 (wgt'ed) examples reached here.  /* #neg=1.590 #pos=70 */
%   | else return -0.06419184008202625;  // std dev = 2,36e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
Results
   AUC ROC   = 0.893351
   AUC PR    = 0.839558
   CLL	      = -0.367548
   Precision = 0.805461 at threshold = 0.5
   Recall    = 0.95935
   F1        = 0.875696


Total learning time: 822.858 seconds
Total inference time: 2.27 seconds
AUC ROC: 0.893351


Best model AUC ROC so far: 0.893516


******************************************
Best model found
******************************************
Total revision time: 3130.576
Best validation AUC ROC: 0.893516


Results
   AUC ROC   = 0.937069
   AUC PR    = 0.904243
   CLL	      = -0.288417
   Precision = 0.888525 at threshold = 0.5
   Recall    = 0.985455
   F1        = 0.934483


Total inference time: 2.018 seconds
AUC ROC: 0.937069
Dataset: 4, Run: 1, Fold: 5, Type: transfer, Time: 06:02:46
{'Parameter Learning results': {'CLL': -0.45622, 'AUC ROC': 0.937884, 'AUC PR': 0.904872, 'F1': 0.894161, 'Recall': 0.890909, 'Learning time': 907.929, 'Inference time': 1.763, 'Precision': [0.897436, 0.5]}, 'CLL': -0.288417, 'AUC ROC': 0.937069, 'AUC PR': 0.904243, 'F1': 0.934483, 'Recall': 0.985455, 'Learning time': 3130.576, 'Inference time': 2.018, 'Mapping results': {'Knowledge compiling time': 0.36852192878723145, 'Possible mappings': 26, 'Generating paths time': 4.364428281784058, 'Total time': 4.79017972946167, 'Finding best mapping': 0.0024306774139404297, 'Generating mappings time': 0.054792165756225586}, 'Precision': [0.888525, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6806169211297751;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.64851038088264;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.14185106490048768;  // std dev = 4,34e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.1005531297972449;  // std dev = 0,199, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.1418510649004884;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5763422520144952;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.5501443425574101;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.08961463318834723;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.1254446385283918;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.45498749363344704;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.4363254697418025;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.07981496716856;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.11231637819360679;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.34446710719271745;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.331523032083695;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.1116340356200422;  // std dev = 0,008, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.0707113315313774;  // std dev = 0,199, 1.697,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=70 */
%   | else return -0.10159632948783658;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.25871347147066254;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.2488315407482957;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.1010214776996792;  // std dev = 0,007, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.06382782956000661;  // std dev = 0,199, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   | else return -0.09269127618926049;  // std dev = 7,60e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.1964603368196788;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.1879950826142095;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.058781435915121215;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.08518475138839678;  // std dev = 8,69e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.15171612352405595;  // std dev = 0,382, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.1439436926836766;  // std dev = 0,407, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.05365563432017818;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.07877675473109143;  // std dev = 6,66e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.14511544280230645;  // std dev = 0,359, 1.597,000 (wgt'ed) examples reached here.  /* #neg=242 #pos=1.355 */
%   | | else return 0.12699544584142897;  // std dev = 0,396, 1.147,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=924 */
%   | else return -0.049185575925388525;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return -0.22401158773531665;  // std dev = 0,500, 121,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=58 */
%   | | else return -0.06633942952109433;  // std dev = 0,487, 98,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=60 */
%   | else return -0.07324622576333671;  // std dev = 1,25e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.175511707526507;  // std dev = 0,152, 15,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | else if ( venue(E, A), samebib(E, F), venue(F, B) )
%   | | then if ( author(E, G), author(F, G) )
%   | | | then return 0.11470422007177082;  // std dev = 0,360, 1.586,000 (wgt'ed) examples reached here.  /* #neg=242 #pos=1.344 */
%   | | | else return 0.09994656497786719;  // std dev = 0,396, 1.147,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=924 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.07983168521738727;  // std dev = 2,04e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.04442794794646231;  // std dev = 0,199, 1.695,000 (wgt'ed) examples reached here.  /* #neg=1.625 #pos=70 */
%   else if ( venue(J, A), samebib(J, K), venue(K, B) )
%   | then if ( author(J, L), author(K, L) )
%   | | then return -0.17525458242421108;  // std dev = 0,500, 121,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=58 */
%   | | else return -0.05170225162051115;  // std dev = 0,487, 98,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=60 */
%   | else return -0.06842697784420262;  // std dev = 5,16e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.07773167691687034;  // std dev = 0,375, 1.718,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1.413 */
%   | else return 0.07019934887359884;  // std dev = 0,405, 1.245,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=984 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.0418294379483655;  // std dev = 0,197, 1.736,000 (wgt'ed) examples reached here.  /* #neg=1.666 #pos=70 */
%   | else return -0.06419184008202625;  // std dev = 2,36e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
Results
   AUC ROC   = 0.937556
   AUC PR    = 0.908807
   CLL	      = -0.289532
   Precision = 0.888525 at threshold = 0.5
   Recall    = 0.985455
   F1        = 0.934483


Total learning time: 1554.234 seconds
Total inference time: 2.403 seconds
AUC ROC: 0.937556


Dataset: 4, Run: 1, Fold: 5, Type: scratch, Time: 06:28:43
{'CLL': -0.289532, 'AUC ROC': 0.937556, 'AUC PR': 0.908807, 'F1': 0.934483, 'Recall': 0.985455, 'Learning time': 1554.234, 'Inference time': 2.403, 'Precision': [0.888525, 0.5]}


Start learning from source dataset


WILL Produced-Tree #1
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.33796956290219954;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.37233333226262916;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.36561162166667527;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #2
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.2916636562286573;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.320721892370015;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.315046841762795;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #3
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.24303193449685057;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.26574348163593675;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.26132924438542776;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #4
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.19635489872620826;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.21290255917354506;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.2097078845617246;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #5
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.1548409063029179;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.16628800257419135;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.164090949713896;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #6
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.11999914456696263;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.12767546628885396;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.1262050132209306;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #7
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.09191868164445316;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.0969982355262952;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.09602093589865422;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #8
% FOR movie(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return 0.0698825135727583;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   | else return 0.0732416953947796;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   else return 0.07258748913619488;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #9
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.052878613354709315;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.05511642304449537;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.05467165100666466;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */
WILL Produced-Tree #10
% FOR movie(A, B):
%   if ( female(B) )
%   then return 0.039894061422871316;  // std dev = 0,500, 223,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=107 */
%   else if ( actor(B) )
%   | then return 0.041402192966160566;  // std dev = 0,500, 282,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=145 */
%   | else return 0.04109392201114319;  // std dev = 0,500, 67,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=34 */


Predicates from source: ['movie(movie,person).', 'actor(person).', 'female(person).'] 

Source structured tree: [['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'actor(B)', 'true': 'female(B)'}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['movie(A, B)', {'': 'female(B)', 'false': 'actor(B)'}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 



Best mapping found: ['movie(A,B) -> haswordauthor(A,B)'] 

Tranferred structured tree: [['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 

Transferred target predicate: haswordauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
[]
WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.858148935099509;  // std dev = 7,15e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.719473412210954;  // std dev = 2,36e-08, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.7194734122109573;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,87e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.5553664367462832;  // std dev = 3,73e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 9,13e-09, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.4175135841583106;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601498;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716015;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.32071184716014967;  // std dev = 2,07e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.2551722425694882;  // std dev = 1,86e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.20975771563253587;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20975771563253573;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.2097577156325349;  // std dev = 1,94e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 1,44e-08, 312,000 (wgt'ed) examples reached here.  /* #pos=312 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,56e-09, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.17709649774527755;  // std dev = 4,56e-09, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367114;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.1527438580936717;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.761 seconds
Total inference time: 0.951 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.951 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 82], 'false': [7.15e-08, 0, 230]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [1.05e-08, 0, 8], 'false': [0.0, 0, 230], 'true,false': [2.36e-08, 0, 74]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [3.87e-08, 0, 82], 'false': [3.73e-08, 0, 230]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [9.13e-09, 0, 82], 'false': [0.0, 0, 230]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [2.07e-08, 0, 230], 'true,false': [0.0, 0, 74]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [1.86e-08, 0, 230], 'true,false': [0.0, 0, 74]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [2.63e-09, 0, 8], 'false': [1.94e-08, 0, 230], 'true,false': [0.0, 0, 74]}], ['haswordauthor(A, B)', {}, {}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [4.56e-09, 0, 82], 'false': [4.56e-09, 0, 230]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [0.0, 0, 230], 'true,false': [0.0, 0, 74]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '1;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '1;true;author(D, A), venue(D, C).;false;false', '2;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '3;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '4;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '4;true;author(D, A), venue(D, C).;false;false', '5;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '5;true;author(D, A), venue(D, C).;false;false', '6;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '6;true;author(D, A), venue(D, C).;false;false', '8;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '9;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '9;true;author(D, A), venue(D, C).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.858148935099509;  // std dev = 1,08e-06, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.719473412210954;  // std dev = 2,06e-07, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.7194734122109573;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.5553664367462832;  // std dev = 5,46e-07, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 9,42e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.4175135841583106;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601498;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716015;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.32071184716014967;  // std dev = 3,15e-07, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.2551722425694882;  // std dev = 2,86e-07, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.20975771563253587;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20975771563253573;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.2097577156325349;  // std dev = 2,89e-07, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 1,44e-08, 312,000 (wgt'ed) examples reached here.  /* #pos=312 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.17709649774527755;  // std dev = 7,88e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367114;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.1527438580936717;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.524 seconds
Total inference time: 0.919 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 24.155
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.504 seconds
AUC ROC: 1.0
Dataset: 5, Run: 1, Fold: 1, Type: transfer, Time: 06:29:25
{'Parameter Learning results': {'CLL': -0.143878, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 13.761, 'Inference time': 0.513, 'Precision': [1.0, 0.5]}, 'CLL': -0.143878, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 24.155, 'Inference time': 0.504, 'Mapping results': {'Knowledge compiling time': 0.4053835868835449, 'Possible mappings': 20, 'Generating paths time': 4.308538913726807, 'Total time': 4.765551567077637, 'Finding best mapping': 0.0006089210510253906, 'Generating mappings time': 0.05101299285888672}, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.858148935099509;  // std dev = 7,15e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.719473412210954;  // std dev = 2,36e-08, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.7194734122109573;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462836;  // std dev = 3,73e-08, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.5553664367462832;  // std dev = 3,73e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.41751358415830986;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4175135841583106;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.4175135841583106;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.3207118471601501;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.32071184716014967;  // std dev = 2,07e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2551722425694882;  // std dev = 1,86e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20975771563253573;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.2097577156325349;  // std dev = 1,94e-08, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.17709649774527714;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1770964977452772;  // std dev = 2,63e-09, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.17709649774527755;  // std dev = 4,56e-09, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367075;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367058;  // std dev = 8,54e-09, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.1527438580936717;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801095;  // std dev = 1,86e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.13400703000801092;  // std dev = 5,89e-09, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return 0.13400703000801092;  // std dev = 6,45e-09, 230,000 (wgt'ed) examples reached here.  /* #pos=230 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.766 seconds
Total inference time: 0.512 seconds
AUC ROC: 1.0


Dataset: 5, Run: 1, Fold: 1, Type: scratch, Time: 06:29:38
{'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 12.766, 'Inference time': 0.512, 'Precision': [1.0, 0.5]}


Best mapping found: ['movie(A,B) -> haswordauthor(A,B)'] 

Tranferred structured tree: [['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 

Transferred target predicate: haswordauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
[]
WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.858148935099512;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.8581489350995087;  // std dev = 6,83e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.7194734122109541;  // std dev = 2,11e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.7194734122109575;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462835;  // std dev = 3,94e-08, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.5553664367462832;  // std dev = 2,89e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.41751358415830986;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.41751358415831014;  // std dev = 1,75e-08, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.4175135841583109;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3207118471601503;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.32071184716015005;  // std dev = 1,34e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.255172242569488;  // std dev = 1,97e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.20975771563253484;  // std dev = 1,83e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527716;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.1770964977452773;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367075;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367122;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.15274385809367158;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,72e-09, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.13400703000801106;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.325 seconds
Total inference time: 0.865 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.865 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [6.83e-08, 0, 250], 'true,false': [0.0, 0, 88]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [2.11e-08, 0, 96], 'false': [0.0, 0, 250]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [2.89e-08, 0, 250], 'true,false': [3.94e-08, 0, 88]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [1.05e-08, 0, 8], 'false': [0.0, 0, 250], 'true,false': [1.75e-08, 0, 88]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [1.34e-08, 0, 250], 'true,false': [0.0, 0, 88]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 96], 'false': [1.97e-08, 0, 250]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 96], 'false': [1.83e-08, 0, 250]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 96], 'false': [0.0, 0, 250]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [0.0, 0, 250], 'true,false': [0.0, 0, 88]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [6.72e-09, 0, 96], 'false': [0.0, 0, 250]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '0;true;author(D, A), venue(D, C).;false;false', '1;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '2;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '2;true;author(D, A), venue(D, C).;false;false', '3;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '3;true;author(D, A), venue(D, C).;false;false', '4;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '4;true;author(D, A), venue(D, C).;false;false', '5;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '6;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '7;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '8;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '8;true;author(D, A), venue(D, C).;false;false', '9;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.858148935099512;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.8581489350995087;  // std dev = 1,08e-06, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.7194734122109575;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462835;  // std dev = 3,67e-07, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.5553664367462832;  // std dev = 4,62e-07, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.41751358415831014;  // std dev = 1,63e-07, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.4175135841583109;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3207118471601503;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.32071184716015005;  // std dev = 2,06e-07, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.255172242569488;  // std dev = 3,10e-07, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.20975771563253484;  // std dev = 2,86e-07, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2,11e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.1770964977452773;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367075;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367122;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.15274385809367158;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,50e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.13400703000801106;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.891 seconds
Total inference time: 0.83 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 20.911
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.548 seconds
AUC ROC: 1.0
Dataset: 5, Run: 1, Fold: 2, Type: transfer, Time: 06:30:06
{'Parameter Learning results': {'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 11.325, 'Inference time': 0.559, 'Precision': [1.0, 0.5]}, 'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 20.911, 'Inference time': 0.548, 'Mapping results': {'Knowledge compiling time': 0.35670900344848633, 'Possible mappings': 20, 'Generating paths time': 4.3287599086761475, 'Total time': 4.737239360809326, 'Finding best mapping': 0.0005888938903808594, 'Generating mappings time': 0.05117535591125488}, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.858148935099512;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.8581489350995087;  // std dev = 6,83e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 346,000 (wgt'ed) examples reached here.  /* #pos=346 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 346,000 (wgt'ed) examples reached here.  /* #pos=346 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.7194734122109541;  // std dev = 2,11e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.7194734122109575;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462835;  // std dev = 3,94e-08, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.5553664367462832;  // std dev = 2,89e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,30e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.4175135841583109;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716015033;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.32071184716015005;  // std dev = 1,34e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.255172242569488;  // std dev = 1,97e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 1,47e-08, 346,000 (wgt'ed) examples reached here.  /* #pos=346 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2097577156325358;  // std dev = 1,05e-08, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   else return 0.20975771563253484;  // std dev = 1,83e-08, 250,000 (wgt'ed) examples reached here.  /* #pos=250 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.194916
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.936 seconds
Total inference time: 0.521 seconds
AUC ROC: 1.0


Dataset: 5, Run: 1, Fold: 2, Type: scratch, Time: 06:30:18
{'CLL': -0.194916, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 10.936, 'Inference time': 0.521, 'Precision': [1.0, 0.5]}


Best mapping found: ['movie(A,B) -> haswordauthor(A,B)'] 

Tranferred structured tree: [['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 

Transferred target predicate: haswordauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
[]
WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.8581489350995087;  // std dev = 6,58e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109542;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.7194734122109575;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462838;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.5553664367462832;  // std dev = 2,36e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.41751358415830986;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.4175135841583111;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.3207118471601503;  // std dev = 5,27e-09, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 2,24e-08, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2551722425694894;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.2551722425694879;  // std dev = 2,04e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 1,47e-08, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 1,47e-08, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.235416
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.034 seconds
Total inference time: 0.913 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.235416
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.913 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 60], 'false': [6.58e-08, 0, 263]}], ['haswordauthor(A, B)', {}, {}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [1.05e-08, 0, 8], 'false': [0.0, 0, 263], 'true,false': [0.0, 0, 52]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [2.36e-08, 0, 263], 'true,false': [7.45e-09, 0, 52]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [1.05e-08, 0, 8], 'false': [0.0, 0, 263], 'true,false': [0.0, 0, 52]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 60], 'false': [5.27e-09, 0, 263]}], ['haswordauthor(A, B)', {}, {}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [5.27e-09, 0, 8], 'false': [2.04e-08, 0, 263], 'true,false': [0.0, 0, 52]}], ['haswordauthor(A, B)', {}, {}], ['haswordauthor(A, B)', {}, {}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '2;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '2;true;author(D, A), venue(D, C).;false;false', '3;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '3;true;author(D, A), venue(D, C).;false;false', '4;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '4;true;author(D, A), venue(D, C).;false;false', '5;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '7;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '7;true;author(D, A), venue(D, C).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.8581489350995087;  // std dev = 1,07e-06, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109542;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.7194734122109575;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462838;  // std dev = 5,96e-08, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.5553664367462832;  // std dev = 3,95e-07, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.4175135841583111;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716014944;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.3207118471601503;  // std dev = 1,03e-07, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.2551722425694879;  // std dev = 3,32e-07, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2097577156325356;  // std dev = 2,63e-09, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.2097577156325348;  // std dev = 1,77e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.1770964977452772;  // std dev = 7,30e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367075;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.15274385809367158;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801095;  // std dev = 1,86e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.13400703000801079;  // std dev = 6,72e-09, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.13400703000801123;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.264 seconds
Total inference time: 0.932 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 22.143
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.235416
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.544 seconds
AUC ROC: 1.0
Dataset: 5, Run: 1, Fold: 3, Type: transfer, Time: 06:30:47
{'Parameter Learning results': {'CLL': -0.235416, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 11.034, 'Inference time': 0.542, 'Precision': [1.0, 0.5]}, 'CLL': -0.235416, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 22.143, 'Inference time': 0.544, 'Mapping results': {'Knowledge compiling time': 0.3718094825744629, 'Possible mappings': 20, 'Generating paths time': 4.309483766555786, 'Total time': 4.734189510345459, 'Finding best mapping': 0.0005931854248046875, 'Generating mappings time': 0.05229663848876953}, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.8581489350995087;  // std dev = 6,58e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109542;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.7194734122109575;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462838;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.5553664367462832;  // std dev = 2,36e-08, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.4175135841583111;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601494;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716014944;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return 0.3207118471601503;  // std dev = 5,27e-09, 263,000 (wgt'ed) examples reached here.  /* #pos=263 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 2,24e-08, 323,000 (wgt'ed) examples reached here.  /* #pos=323 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.294602
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.486 seconds
Total inference time: 0.496 seconds
AUC ROC: 1.0


Dataset: 5, Run: 1, Fold: 3, Type: scratch, Time: 06:31:00
{'CLL': -0.294602, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 12.486, 'Inference time': 0.496, 'Precision': [1.0, 0.5]}


Best mapping found: ['movie(A,B) -> haswordauthor(A,B)'] 

Tranferred structured tree: [['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 

Transferred target predicate: haswordauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
[]
WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.858148935099512;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.858148935099509;  // std dev = 6,99e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109537;  // std dev = 2,98e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.7194734122109573;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,15e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.5553664367462832;  // std dev = 3,65e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,24e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.41751358415831064;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.32071184716014983;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716015033;  // std dev = 6,45e-09, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.3207118471601497;  // std dev = 1,97e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.2551722425694881;  // std dev = 1,90e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.20975771563253587;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2097577156325358;  // std dev = 1,02e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.2097577156325349;  // std dev = 1,92e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.17709649774527736;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17709649774527714;  // std dev = 1,02e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.17709649774527753;  // std dev = 5,27e-09, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367125;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.1527438580936717;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1340070300080112;  // std dev = 2,63e-09, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.13400703000801092;  // std dev = 6,45e-09, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.047 seconds
Total inference time: 0.804 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.804 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [6.99e-08, 0, 232], 'true,false': [0.0, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [1.05e-08, 0, 8], 'false': [0.0, 0, 232], 'true,false': [2.98e-08, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [4.15e-08, 0, 95], 'false': [3.65e-08, 0, 232]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [2.24e-08, 0, 95], 'false': [0.0, 0, 232]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [5.27e-09, 0, 8], 'false': [1.97e-08, 0, 232], 'true,false': [6.45e-09, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 95], 'false': [1.9e-08, 0, 232]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [2.63e-09, 0, 8], 'false': [1.92e-08, 0, 232], 'true,false': [1.02e-08, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [2.63e-09, 0, 8], 'false': [5.27e-09, 0, 232], 'true,false': [1.02e-08, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [0.0, 0, 232], 'true,false': [0.0, 0, 87]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 8], 'false': [6.45e-09, 0, 232], 'true,false': [2.63e-09, 0, 87]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '0;true;author(D, A), venue(D, C).;false;false', '1;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '1;true;author(D, A), venue(D, C).;false;false', '2;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '3;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '4;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '4;true;author(D, A), venue(D, C).;false;false', '5;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '6;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '6;true;author(D, A), venue(D, C).;false;false', '7;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '7;true;author(D, A), venue(D, C).;false;false', '8;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '8;true;author(D, A), venue(D, C).;false;false', '9;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '9;true;author(D, A), venue(D, C).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.858148935099512;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.858148935099509;  // std dev = 1,08e-06, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109537;  // std dev = 2,80e-07, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.7194734122109573;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.5553664367462832;  // std dev = 5,46e-07, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,15e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.41751358415831064;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.32071184716014983;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.32071184716015033;  // std dev = 5,96e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.3207118471601497;  // std dev = 3,10e-07, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.2551722425694881;  // std dev = 2,89e-07, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.20975771563253587;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2097577156325358;  // std dev = 9,42e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.2097577156325349;  // std dev = 2,89e-07, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17709649774527714;  // std dev = 9,42e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.17709649774527753;  // std dev = 8,43e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15274385809367125;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.1527438580936717;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1340070300080112;  // std dev = 2,58e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.13400703000801092;  // std dev = 1,03e-07, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.283 seconds
Total inference time: 0.9 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 21.034000000000002
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.536 seconds
AUC ROC: 1.0
Dataset: 5, Run: 1, Fold: 4, Type: transfer, Time: 06:31:28
{'Parameter Learning results': {'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 14.047, 'Inference time': 0.523, 'Precision': [1.0, 0.5]}, 'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 21.034000000000002, 'Inference time': 0.536, 'Mapping results': {'Knowledge compiling time': 0.42317891120910645, 'Possible mappings': 20, 'Generating paths time': 4.3058202266693115, 'Total time': 4.781989097595215, 'Finding best mapping': 0.0005888938903808594, 'Generating mappings time': 0.052394866943359375}, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,33e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.858148935099509;  // std dev = 6,99e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109537;  // std dev = 2,98e-08, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.7194734122109573;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,15e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.5553664367462832;  // std dev = 3,65e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.4175135841583112;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.41751358415831064;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3207118471601503;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.3207118471601497;  // std dev = 1,97e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   else return 0.2551722425694881;  // std dev = 1,90e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.20975771563253567;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.2097577156325349;  // std dev = 1,92e-08, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2,63e-09, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.17709649774527753;  // std dev = 5,27e-09, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.1527438580936717;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,72e-09, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   else return 0.13400703000801092;  // std dev = 6,45e-09, 232,000 (wgt'ed) examples reached here.  /* #pos=232 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.188 seconds
Total inference time: 0.512 seconds
AUC ROC: 1.0


Dataset: 5, Run: 1, Fold: 4, Type: scratch, Time: 06:31:40
{'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 11.188, 'Inference time': 0.512, 'Precision': [1.0, 0.5]}


Best mapping found: ['movie(A,B) -> haswordauthor(A,B)'] 

Tranferred structured tree: [['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true,true': [0.5, 116, 107], 'false': [0.5, 33, 34], 'true,false': [0.5, 137, 145]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}], ['haswordauthor(A, B)', {}, {'true': [0.5, 116, 107], 'false,true': [0.5, 137, 145], 'false,false': [0.5, 33, 34]}]] 

Transferred target predicate: haswordauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
[]
WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.8581489350995088;  // std dev = 6,83e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109538;  // std dev = 2,79e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.7194734122109574;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,87e-08, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.5553664367462832;  // std dev = 3,16e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,18e-08, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.4175135841583108;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3207118471601502;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.32071184716014994;  // std dev = 1,62e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.255172242569488;  // std dev = 1,97e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.20975771563253487;  // std dev = 1,84e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,56e-09, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.1770964977452774;  // std dev = 8,33e-09, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15274385809367116;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.1527438580936717;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1340070300080109;  // std dev = 6,45e-09, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.134007030008011;  // std dev = 4,17e-09, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.011 seconds
Total inference time: 0.901 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.901 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 83], 'false': [6.83e-08, 0, 245]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 4], 'false': [0.0, 0, 245], 'true,false': [2.79e-08, 0, 79]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [3.87e-08, 0, 83], 'false': [3.16e-08, 0, 245]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [1.18e-08, 0, 83], 'false': [0.0, 0, 245]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 4], 'false': [1.62e-08, 0, 245], 'true,false': [0.0, 0, 79]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 4], 'false': [1.97e-08, 0, 245], 'true,false': [0.0, 0, 79]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [0.0, 0, 83], 'false': [1.84e-08, 0, 245]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)'}, {'true': [4.56e-09, 0, 83], 'false': [8.33e-09, 0, 245]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 4], 'false': [0.0, 0, 245], 'true,false': [0.0, 0, 79]}], ['haswordauthor(A, B)', {'': 'haswordvenue(C, B)', 'true': 'author(D, A), venue(D, C)'}, {'true,true': [0.0, 0, 4], 'false': [4.17e-09, 0, 245], 'true,false': [6.45e-09, 0, 79]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '1;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '1;true;author(D, A), venue(D, C).;false;false', '2;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '3;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '4;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '4;true;author(D, A), venue(D, C).;false;false', '5;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '5;true;author(D, A), venue(D, C).;false;false', '6;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '7;;haswordauthor(A, B) :- haswordvenue(C, B).;false;false', '8;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '8;true;author(D, A), venue(D, C).;false;false', '9;;haswordauthor(A, B) :- haswordvenue(C, B).;true;false', '9;true;author(D, A), venue(D, C).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.8581489350995088;  // std dev = 1,07e-06, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109538;  // std dev = 2,38e-07, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.7194734122109574;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,53e-07, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.5553664367462832;  // std dev = 4,92e-07, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,12e-07, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.4175135841583108;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3207118471601502;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.32071184716014994;  // std dev = 2,53e-07, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.255172242569488;  // std dev = 3,07e-07, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.20975771563253487;  // std dev = 2,89e-07, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.1770964977452774;  // std dev = 1,30e-07, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15274385809367116;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.1527438580936717;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1340070300080109;  // std dev = 5,37e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.134007030008011;  // std dev = 6,66e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.519 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 16.326
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126929
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.547 seconds
AUC ROC: 1.0
Dataset: 5, Run: 1, Fold: 5, Type: transfer, Time: 06:32:03
{'Parameter Learning results': {'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 9.011, 'Inference time': 0.544, 'Precision': [1.0, 0.5]}, 'CLL': -0.126929, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 16.326, 'Inference time': 0.547, 'Mapping results': {'Knowledge compiling time': 0.37745046615600586, 'Possible mappings': 20, 'Generating paths time': 4.3020689487457275, 'Total time': 4.732205390930176, 'Finding best mapping': 0.0005807876586914062, 'Generating mappings time': 0.052098989486694336}, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.8581489350995088;  // std dev = 6,83e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #2
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109538;  // std dev = 2,79e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.7194734122109574;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #3
% FOR haswordauthor(A, B):
%   return 0;  // std dev = 0,000, 328,000 (wgt'ed) examples reached here.  /* #pos=328 */
WILL Produced-Tree #4
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5553664367462836;  // std dev = 3,80e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.5553664367462832;  // std dev = 3,16e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #5
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,05e-08, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.4175135841583108;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #6
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.32071184716014944;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3207118471601502;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.32071184716014994;  // std dev = 1,62e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #7
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.255172242569488;  // std dev = 1,97e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #8
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20975771563253592;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.20975771563253487;  // std dev = 1,84e-08, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #9
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,56e-09, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.1770964977452774;  // std dev = 8,33e-09, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
WILL Produced-Tree #10
% FOR haswordauthor(A, B):
%   if ( haswordvenue(C, B) )
%   then if ( author(D, A), venue(D, C) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15274385809367116;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.1527438580936717;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #pos=245 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.129 seconds
Total inference time: 0.546 seconds
AUC ROC: 1.0


Dataset: 5, Run: 1, Fold: 5, Type: scratch, Time: 06:32:13
{'CLL': -0.143878, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Learning time': 9.129, 'Inference time': 0.546, 'Precision': [1.0, 0.5]}


Start learning from source dataset


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(F, I), student(I) )
%   | | | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(K, B), publication(K, L), tempadvisedby(L, B) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7387459500248855;  // std dev = 0,324, 67,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=59 */
%   else return -0.14185106490048766;  // std dev = 7,74e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return -0.015215469127175384;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( projectmember(J, B) )
%   | | | then return 0.7429301229363086;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( tempadvisedby(K, B), publication(L, A) )
%   | | | | then return 0.49293012293630856;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return 0.6040304452093826;  // std dev = 0,347, 63,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=54 */
%   else return -0.12544463852839144;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.5553664367462842;  // std dev = 1,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | then if ( publication(G, B), hasposition(F, C) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return -0.01339314781379419;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( hasposition(F, C) )
%   | | | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(I, B), hasposition(J, C), projectmember(K, J) )
%   | | | then return 0.5116057544698971;  // std dev = 0,303, 56,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   | | | else if ( publication(L, B) )
%   | | | | then return 0.1123553317133802;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | | else return 0.5998154796102758;  // std dev = 0,046, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10743221058693267;  // std dev = 0,081, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583102;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( publication(F, B), hasposition(B, G), hasposition(E, G) )
%   | | | then if ( tempadvisedby(H, B) )
%   | | | | then return -0.011805553093525652;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.11914890490746428;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(J, B), publication(K, B) )
%   | | | then if ( publication(L, J) )
%   | | | | then return 0.10776921399157328;  // std dev = 0,499, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | | else return 0.3878174573801285;  // std dev = 0,292, 29,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return 0.38968920151440956;  // std dev = 0,292, 36,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   else return -0.10204299778952944;  // std dev = 5,27e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), hasposition(E, C), projectmember(F, E) )
%   | then if ( publication(D, A) )
%   | | then return 0.3207118471601495;  // std dev = 2,11e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( publication(G, A), publication(G, H), hasposition(H, C) )
%   | | | then if ( tempadvisedby(I, B) )
%   | | | | then return -0.010418869089799103;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else return 0.09841340278401867;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else if ( tempadvisedby(J, B), publication(D, K), inphase(K, L) )
%   | | | | then return 0.24414480435780364;  // std dev = 0,366, 28,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | | | else return 0.3629681831085091;  // std dev = 0,188, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( publication(M, B) )
%   | | then if ( publication(M, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.01488691247062221;  // std dev = 0,502, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.3095226944203147;  // std dev = 0,210, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.09009350091005039;  // std dev = 0,076, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), tempadvisedby(E, B), publication(F, B) )
%   | | then if ( publication(D, G), publication(F, G) )
%   | | | then return -0.061160539633893195;  // std dev = 0,414, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.14815949096304312;  // std dev = 0,532, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then if ( tempadvisedby(J, B) )
%   | | | | then return 0.2573046652242641;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else if ( tempadvisedby(K, I), publication(L, K) )
%   | | | | | then return 0.023290293635679072;  // std dev = 0,987, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return 0.1800554975042807;  // std dev = 1,213, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( publication(M, A) )
%   | | | | then return 0.30668003990897436;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.21266647331085753;  // std dev = 0,317, 64,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=55 */
%   else return -0.0857346008229907;  // std dev = 1,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.20975771563253545;  // std dev = 5,96e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, B), tempadvisedby(F, B) )
%   | | then if ( publication(E, G), inphase(G, H), inphase(A, H) )
%   | | | then if ( inphase(F, H) )
%   | | | | then return -0.1003407398320387;  // std dev = 1,034, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( publication(I, A) )
%   | | | | | then if ( publication(E, J), publication(I, J), hasposition(J, C) )
%   | | | | | | then return 0.19791120991120545;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.1557050019693147;  // std dev = 0,674, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | | else return 0.0774370537732662;  // std dev = 0,406, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.22465720313301504;  // std dev = 0,139, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.22886190461463146;  // std dev = 0,055, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1592916990700199;  // std dev = 0,349, 40,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=31 */
%   else return -0.07724121530571607;  // std dev = 0,075, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.17563699554821866;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | | then if ( tempadvisedby(I, E), publication(H, E) )
%   | | | | | then return 0.04848077537123871;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else return -0.14066044440283978;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else if ( publication(J, B), publication(J, K), student(K) )
%   | | | | | then if ( tempadvisedby(L, E), publication(M, L) )
%   | | | | | | then return -0.01122559974202364;  // std dev = 0,681, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return 0.19150988466714408;  // std dev = 1,122, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | | else return -0.051167837605550034;  // std dev = 0,791, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1402050100784221;  // std dev = 0,310, 72,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=62 */
%   else return -0.07379256577371687;  // std dev = 4,01e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | then if ( publication(G, B), hasposition(F, C) )
%   | | | then if ( publication(G, F), publication(G, H), inphase(H, I) )
%   | | | | then return 0.28341193563249795;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( publication(G, F), tempadvisedby(J, F) )
%   | | | | | then return -0.22162844669874338;  // std dev = 0,156, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | | else return -0.06522611556661746;  // std dev = 0,800, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else if ( hasposition(F, C) )
%   | | | | then return 0.15951905113995068;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.06918953445224243;  // std dev = 1,100, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(K, B), tempadvisedby(L, B), publication(M, L) )
%   | | | then return -0.05830591009242509;  // std dev = 0,496, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1365479309855519;  // std dev = 0,268, 63,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=57 */
%   else return -0.06746449698015368;  // std dev = 0,074, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.13400703000801104;  // std dev = 2,58e-08, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(F, B), tempadvisedby(G, B) )
%   | | then if ( publication(E, H), publication(F, H) )
%   | | | then return -0.09108253436168885;  // std dev = 0,401, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.0954597413649692;  // std dev = 0,398, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(I, B), hasposition(J, C), projectmember(K, J) )
%   | | | then if ( tempadvisedby(L, B), publication(I, L) )
%   | | | | then return 0.0036489281236705253;  // std dev = 1,104, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | | else if ( publication(M, A), publication(M, N), hasposition(N, C) )
%   | | | | | then return 0.013727296102257683;  // std dev = 1,034, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | | | else return 0.14097685661050682;  // std dev = 0,232, 48,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else if ( publication(P, B) )
%   | | | | then return -0.1288570629369007;  // std dev = 0,514, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | | else return 0.1313696348712506;  // std dev = 0,201, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.06298487658825583;  // std dev = 0,075, 92,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */


Predicates from source: ['advisedby(person,person).', 'student(person).', 'inphase(person,prequals).', 'professor(person).', 'projectmember(project,person).', 'hasposition(person,faculty).', 'publication(title,person).', 'tempadvisedby(person,person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'publication(K, B), publication(K, L), tempadvisedby(L, B)', 'true,false,true,false': 'tempadvisedby(J, B)', 'true,false,true,true,true': 'publication(F, I), student(I)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(F, B), hasposition(B, G), hasposition(E, G)', 'true': 'publication(C, A), publication(C, B)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [7.74e-08, 90, 0], 'true,false,false,false': [0.324, 8, 59], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [1.095, 2, 3], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'projectmember(J, B)', 'true,false,false,false': 'tempadvisedby(K, B), publication(L, A)', 'true,false,true,false': 'tempadvisedby(I, B)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(F, B), hasposition(B, G), hasposition(E, G)', 'true': 'publication(C, A), publication(C, B)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [0.0, 90, 0], 'true,false,false,false,true': [0.866, 1, 3], 'true,false,false,false,false': [0.347, 9, 54], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.0, 0, 5], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(E, A), publication(E, F), professor(F)', 'true,false,false': 'publication(I, B), hasposition(J, C), projectmember(K, J)', 'true,false,false,false': 'publication(L, B)', 'true,false,true,false': 'hasposition(F, C)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(G, B), hasposition(F, C)', 'true': 'publication(D, B), publication(D, A)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [0.081, 91, 1], 'true,false,false,false,true': [1.225, 3, 3], 'true,false,false,false,false': [0.046, 0, 8], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [1.46e-07, 0, 41], 'true,false,false,true': [0.303, 6, 50], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,false': 'tempadvisedby(J, B), publication(K, B)', 'true,false,true,false': 'tempadvisedby(I, B)', 'true,false,true,true': 'tempadvisedby(H, B)', 'true,false,true': 'publication(F, B), hasposition(B, G), hasposition(E, G)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,true': 'publication(L, J)'}, {'true,false,true,false,true': [0.0, 0, 4], 'true,false,false,true,false': [0.292, 3, 26], 'false': [5.27e-08, 90, 0], 'true,false,false,false': [0.292, 4, 32], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [0.0, 0, 41], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,false,true,true': [0.499, 3, 4], 'true,false,true,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(M, B)', 'true,true,false,false': 'tempadvisedby(J, B), publication(D, K), inphase(K, L)', 'true,false,true': 'publication(M, A)', 'true,true': 'publication(D, A)', 'true': 'publication(D, B), hasposition(E, C), projectmember(F, E)', 'true,true,false': 'publication(G, A), publication(G, H), hasposition(H, C)', 'true,true,false,true': 'tempadvisedby(I, B)'}, {'true,true,true': [2.11e-08, 0, 38], 'true,true,false,false,true': [0.366, 5, 23], 'true,true,false,true,true': [0.328, 7, 1], 'true,false,true,false': [0.502, 4, 4], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.21, 1, 13], 'false': [0.076, 91, 1], 'true,true,false,false,false': [0.188, 1, 28], 'true,true,false,true,false': [1.155, 4, 2]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), tempadvisedby(E, B), publication(F, B)', 'true,false,false,false': 'publication(M, A)', 'true,false,true': 'publication(D, G), publication(F, G)', 'true,false,false': 'publication(H, A), publication(H, I), professor(I)', 'true': 'publication(C, A), publication(C, B)', 'true,false,false,true,false': 'tempadvisedby(K, I), publication(L, K)', 'true,false,false,true': 'tempadvisedby(J, B)'}, {'true,false,true,true': [0.414, 6, 1], 'true,false,false,true,false,true': [0.987, 3, 2], 'false': [1.05e-08, 90, 0], 'true,false,false,false,true': [0.006, 0, 4], 'true,false,true,false': [0.532, 2, 3], 'true,false,false,false,false': [0.317, 9, 55], 'true,true': [0.0, 0, 41], 'true,false,false,true,true': [0.0, 0, 4], 'true,false,false,true,false,false': [1.213, 3, 3]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(E, B), tempadvisedby(F, B)', 'true,false,false': 'tempadvisedby(K, B)', 'true,false,true,true': 'inphase(F, H)', 'true,false,true': 'publication(E, G), inphase(G, H), inphase(A, H)', 'true': 'publication(D, B), publication(D, A)', 'true,false,true,true,false,true': 'publication(E, J), publication(I, J), hasposition(J, C)', 'true,false,true,true,false': 'publication(I, A)'}, {'true,false,true,true,true': [1.034, 2, 2], 'true,false,false,false': [0.349, 9, 31], 'false': [0.075, 91, 1], 'true,false,true,false': [0.139, 3, 18], 'true,false,true,true,false,true,true': [0.816, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,false,true': [0.055, 0, 9], 'true,false,true,true,false,true,false': [0.674, 3, 1], 'true,false,true,true,false,false': [0.406, 3, 9]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true,false': 'tempadvisedby(G, B), publication(H, B)', 'true,false,true,false,true': 'tempadvisedby(I, E), publication(H, E)', 'true,false,true': 'projectmember(F, B)', 'true,false,true,false,false,true': 'tempadvisedby(L, E), publication(M, L)', 'true': 'publication(C, B), publication(C, A)', 'true,false,true,false,false': 'publication(J, B), publication(J, K), student(K)'}, {'true,false,true,false,true,true': [0.885, 4, 1], 'true,false,true,false,false,true,false': [1.122, 2, 3], 'true,false,true,false,true,false': [0.003, 3, 0], 'true,false,true,false,false,true,true': [0.681, 2, 1], 'true,false,false': [0.31, 10, 62], 'true,true': [0.0, 0, 41], 'true,false,true,false,false,false': [0.791, 2, 2], 'true,false,true,true': [0.0, 0, 3], 'false': [4.01e-08, 90, 0]}], ['advisedby(A, B)', {'': 'hasposition(B, C), student(A)', 'true,false': 'publication(E, A), publication(E, F), professor(F)', 'true,false,false': 'publication(K, B), tempadvisedby(L, B), publication(M, L)', 'true,false,true,false': 'hasposition(F, C)', 'true,false,true,true': 'publication(G, F), publication(G, H), inphase(H, I)', 'true,false,true': 'publication(G, B), hasposition(F, C)', 'true': 'publication(D, B), publication(D, A)', 'true,false,true,true,false': 'publication(G, F), tempadvisedby(J, F)'}, {'true,false,true,true,false,true': [0.156, 4, 0], 'false': [0.074, 91, 1], 'true,false,false,false': [0.268, 6, 57], 'true,false,true,true,true': [0.912, 2, 2], 'true,false,true,false,true': [0.027, 0, 4], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.496, 3, 4], 'true,false,true,false,false': [1.1, 2, 3], 'true,false,true,true,false,false': [0.8, 5, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A), hasposition(B, C)', 'true,false': 'publication(E, A), publication(F, B), tempadvisedby(G, B)', 'true,false,false,false': 'publication(P, B)', 'true,false,true': 'publication(E, H), publication(F, H)', 'true,false,false': 'publication(I, B), hasposition(J, C), projectmember(K, J)', 'true': 'publication(D, B), publication(D, A)', 'true,false,false,true,false': 'publication(M, A), publication(M, N), hasposition(N, C)', 'true,false,false,true': 'tempadvisedby(L, B), publication(I, L)'}, {'true,false,true,true': [0.401, 6, 1], 'true,false,false,true,false,true': [1.034, 4, 2], 'false': [0.075, 91, 1], 'true,false,false,false,true': [0.514, 4, 4], 'true,false,true,false': [0.398, 2, 3], 'true,false,false,false,false': [0.201, 1, 13], 'true,true': [2.58e-08, 0, 41], 'true,false,false,true,true': [1.104, 2, 3], 'true,false,false,true,false,false': [0.232, 3, 45]}]] 



Best mapping found: ['advisedby(A,B) -> samebib(A,B)', 'publication(A,B) -> author(B,A)', 'projectmember(A,B) -> title(B,A)', 'hasposition(A,B) -> venue(A,B)', 'inphase(A,B) -> title(A,B)'] 

Tranferred structured tree: [['samebib(A, B)', {'true,false,false': 'author(B, K), author(L, K)', 'true,false': 'author(A, D), author(E, D)', 'true,false,true': 'author(B, F), venue(B, G), venue(E, G)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [7.74e-08, 90, 0], 'true,false,false,false': [0.324, 8, 59], 'true,false,true,true,true,true': [0.894, 4, 1], 'true,true': [2.46e-07, 0, 41], 'true,false,false,true': [1.095, 2, 3], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,true,false': [0.0, 3, 0], 'true,false,true,true,false': [1.155, 4, 2]}], ['samebib(A, B)', {'true,false,false': 'title(B, J)', 'true,false': 'author(A, D), author(E, D)', 'true,false,false,false': 'author(A, L)', 'true,false,true': 'author(B, F), venue(B, G), venue(E, G)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [0.0, 90, 0], 'true,false,false,false,true': [0.866, 1, 3], 'true,false,false,false,false': [0.347, 9, 54], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.0, 0, 5], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,false': [1.155, 4, 2]}], ['samebib(A, B)', {'': 'venue(B, C)', 'true,false': 'author(A, E), author(F, E)', 'true,false,false,false': 'author(B, L)', 'true,false,true,false': 'venue(F, C)', 'true,false,false': 'author(B, I), venue(J, C), title(J, K)', 'true': 'author(B, D), author(A, D)', 'true,false,true': 'author(B, G), venue(F, C)'}, {'true,false,true,false,true': [0.0, 0, 4], 'false': [0.081, 91, 1], 'true,false,false,false,true': [1.225, 3, 3], 'true,false,false,false,false': [0.046, 0, 8], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [1.46e-07, 0, 41], 'true,false,false,true': [0.303, 6, 50], 'true,false,true,false,false': [1.095, 2, 3], 'true,false,true,true,false': [1.155, 4, 2]}], ['samebib(A, B)', {'true,false,false': 'author(B, K)', 'true,false': 'author(A, D), author(E, D)', 'true,false,false,true': 'author(J, L)', 'true,false,true': 'author(B, F), venue(B, G), venue(E, G)'}, {'true,false,true,false,true': [0.0, 0, 4], 'true,false,true,false,false': [1.095, 2, 3], 'false': [5.27e-08, 90, 0], 'true,false,false,false': [0.292, 4, 32], 'true,false,true,true,true': [0.328, 7, 1], 'true,true': [0.0, 0, 41], 'true,false,false,true,false': [0.292, 3, 26], 'true,false,false,true,true': [0.499, 3, 4], 'true,false,true,true,false': [1.155, 4, 2]}], ['samebib(A, B)', {'': 'venue(B, C)', 'true,false': 'author(B, M)', 'true,true,false,false': 'author(K, D), title(K, L)', 'true,false,true': 'author(A, M)', 'true,true': 'author(A, D)', 'true': 'author(B, D), venue(E, C), title(E, F)', 'true,true,false': 'author(A, G), author(H, G), venue(H, C)'}, {'true,true,true': [2.11e-08, 0, 38], 'true,true,false,false,true': [0.366, 5, 23], 'true,true,false,true,true': [0.328, 7, 1], 'true,false,true,false': [0.502, 4, 4], 'true,false,true,true': [0.0, 0, 3], 'true,false,false': [0.21, 1, 13], 'false': [0.076, 91, 1], 'true,true,false,false,false': [0.188, 1, 28], 'true,true,false,true,false': [1.155, 4, 2]}], ['samebib(A, B)', {'true,false,true': 'author(G, D), author(G, F)', 'true,false': 'author(A, D), author(B, F)', 'true,false,false,true,false': 'author(K, L)', 'true,false,false': 'author(A, H), author(I, H)', 'true,false,false,false': 'author(A, M)'}, {'true,false,true,true': [0.414, 6, 1], 'true,false,false,true,false,true': [0.987, 3, 2], 'false': [1.05e-08, 90, 0], 'true,false,false,false,true': [0.006, 0, 4], 'true,false,true,false': [0.532, 2, 3], 'true,false,false,false,false': [0.317, 9, 55], 'true,true': [0.0, 0, 41], 'true,false,false,true,true': [0.0, 0, 4], 'true,false,false,true,false,false': [1.213, 3, 3]}], ['samebib(A, B)', {'': 'venue(B, C)', 'true,false': 'author(B, E)', 'true,false,true,true': 'title(F, H)', 'true,false,true': 'author(G, E), title(G, H), title(A, H)', 'true': 'author(B, D), author(A, D)', 'true,false,true,true,false,true': 'author(J, E), author(J, I), venue(J, C)', 'true,false,true,true,false': 'author(A, I)'}, {'true,false,true,true,true': [1.034, 2, 2], 'false': [0.075, 91, 1], 'true,false,false,false': [0.349, 9, 31], 'true,false,true,true,false,true,true': [0.816, 2, 1], 'true,true': [5.96e-08, 0, 41], 'true,false,true,false': [0.139, 3, 18], 'true,false,true,true,false,true,false': [0.674, 3, 1], 'true,false,false,true': [0.055, 0, 9], 'true,false,true,true,false,false': [0.406, 3, 9]}], ['samebib(A, B)', {'true,false': 'author(A, D), author(E, D)', 'true,false,true,false': 'author(B, H)', 'true,false,true,false,true': 'author(E, H)', 'true,false,true': 'title(B, F)', 'true,false,true,false,false,true': 'author(L, M)', 'true,false,true,false,false': 'author(B, J), author(K, J)'}, {'true,false,true,false,true,true': [0.885, 4, 1], 'true,false,true,false,false,true,false': [1.122, 2, 3], 'true,false,true,false,true,false': [0.003, 3, 0], 'true,true': [0.0, 0, 41], 'true,false,false': [0.31, 10, 62], 'true,false,true,false,false,true,true': [0.681, 2, 1], 'true,false,true,false,false,false': [0.791, 2, 2], 'true,false,true,true': [0.0, 0, 3], 'false': [4.01e-08, 90, 0]}], ['samebib(A, B)', {'': 'venue(B, C)', 'true,false': 'author(A, E), author(F, E)', 'true,false,true,false': 'venue(F, C)', 'true,false,true,true': 'author(F, G), author(H, G), title(H, I)', 'true,false,false': 'author(B, K), author(L, M)', 'true': 'author(B, D), author(A, D)', 'true,false,true': 'author(B, G), venue(F, C)', 'true,false,true,true,false': 'author(F, G)'}, {'true,false,true,true,false,true': [0.156, 4, 0], 'false': [0.074, 91, 1], 'true,false,false,false': [0.268, 6, 57], 'true,false,true,true,true': [0.912, 2, 2], 'true,false,true,false,true': [0.027, 0, 4], 'true,true': [0.0, 0, 41], 'true,false,false,true': [0.496, 3, 4], 'true,false,true,false,false': [1.1, 2, 3], 'true,false,true,true,false,false': [0.8, 5, 1]}], ['samebib(A, B)', {'': 'venue(B, C)', 'true,false': 'author(A, E), author(B, F)', 'true,false,false,false': 'author(B, P)', 'true,false,true': 'author(H, E), author(H, F)', 'true,false,false': 'author(B, I), venue(J, C), title(J, K)', 'true': 'author(B, D), author(A, D)', 'true,false,false,true,false': 'author(A, M), author(N, M), venue(N, C)', 'true,false,false,true': 'author(L, I)'}, {'true,false,true,true': [0.401, 6, 1], 'true,false,false,true,false,true': [1.034, 4, 2], 'false': [0.075, 91, 1], 'true,false,false,false,true': [0.514, 4, 4], 'true,false,true,false': [0.398, 2, 3], 'true,false,false,false,false': [0.201, 1, 13], 'true,true': [2.58e-08, 0, 41], 'true,false,false,true,true': [1.104, 2, 3], 'true,false,false,true,false,false': [0.232, 3, 45]}]] 

Transferred target predicate: samebib 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;true,false,false;author(B, K), author(L, K).;false;false', '0;true,false;author(A, D), author(E, D).;true;true', '0;true,false,true;author(B, F), venue(B, G), venue(E, G).;false;false', '1;true,false,false;title(B, J).;false;true', '1;true,false;author(A, D), author(E, D).;true;true', '1;true,false,false,false;author(A, L).;false;false', '1;true,false,true;author(B, F), venue(B, G), venue(E, G).;false;false', '2;;samebib(A, B) :- venue(B, C).;true;false', '2;true,false;author(A, E), author(F, E).;true;true', '2;true,false,false,false;author(B, L).;false;false', '2;true,false,true,false;venue(F, C).;false;false', '2;true,false,false;author(B, I), venue(J, C), title(J, K).;false;true', '2;true;author(B, D), author(A, D).;false;true', '2;true,false,true;author(B, G), venue(F, C).;false;true', '3;true,false,false;author(B, K).;true;false', '3;true,false;author(A, D), author(E, D).;true;true', '3;true,false,false,true;author(J, L).;false;false', '3;true,false,true;author(B, F), venue(B, G), venue(E, G).;false;false', '4;;samebib(A, B) :- venue(B, C).;true;false', '4;true,false;author(B, M).;true;false', '4;true,true,false,false;author(K, D), title(K, L).;false;false', '4;true,false,true;author(A, M).;false;false', '4;true,true;author(A, D).;false;true', '4;true;author(B, D), venue(E, C), title(E, F).;true;true', '4;true,true,false;author(A, G), author(H, G), venue(H, C).;false;true', '5;true,false,true;author(G, D), author(G, F).;false;false', '5;true,false;author(A, D), author(B, F).;true;true', '5;true,false,false,true,false;author(K, L).;false;false', '5;true,false,false;author(A, H), author(I, H).;false;true', '5;true,false,false,false;author(A, M).;false;false', '6;;samebib(A, B) :- venue(B, C).;true;false', '6;true,false;author(B, E).;true;false', '6;true,false,true,true;title(F, H).;false;true', '6;true,false,true;author(G, E), title(G, H), title(A, H).;true;false', '6;true;author(B, D), author(A, D).;false;true', '6;true,false,true,true,false,true;author(J, E), author(J, I), venue(J, C).;false;false', '6;true,false,true,true,false;author(A, I).;true;false', '7;true,false;author(A, D), author(E, D).;true;false', '7;true,false,true,false;author(B, H).;true;true', '7;true,false,true,false,true;author(E, H).;false;false', '7;true,false,true;title(B, F).;false;true', '7;true,false,true,false,false,true;author(L, M).;false;false', '7;true,false,true,false,false;author(B, J), author(K, J).;true;false', '8;;samebib(A, B) :- venue(B, C).;true;false', '8;true,false;author(A, E), author(F, E).;true;true', '8;true,false,true,false;venue(F, C).;false;false', '8;true,false,true,true;author(F, G), author(H, G), title(H, I).;false;true', '8;true,false,false;author(B, K), author(L, M).;false;false', '8;true;author(B, D), author(A, D).;false;true', '8;true,false,true;author(B, G), venue(F, C).;true;true', '8;true,false,true,true,false;author(F, G).;false;false', '9;;samebib(A, B) :- venue(B, C).;true;false', '9;true,false;author(A, E), author(B, F).;true;true', '9;true,false,false,false;author(B, P).;false;false', '9;true,false,true;author(H, E), author(H, F).;false;false', '9;true,false,false;author(B, I), venue(J, C), title(J, K).;true;true', '9;true;author(B, D), author(A, D).;false;true', '9;true,false,false,true,false;author(A, M), author(N, M), venue(N, C).;false;false', '9;true,false,false,true;author(L, I).;false;true']
Traceback (most recent call last):
  File "total_transfer_experiment.py", line 406, in <module>
    [model, total_revision_time, inference_time, t_results, structured, pl_t_results] = theory_revision(background, boostsrl, target, tar_train_pos, tar_train_neg, tar_train_facts, validation_pos, validation_neg, tar_test_pos, tar_test_neg, tar_test_facts, transferred_structured, trees=10, max_revision_iterations=10, testAfterPL=True, verbose=verbose)
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 266, in theory_revision
    [model, learning_time, inference_time, t_results, structured, will] = learn_test_model(background, boostsrl, target, r_train_pos, r_train_neg, train_facts, validation_pos, validation_neg, train_facts, refine=get_boosted_refine_file(structured_tree), trees=trees, verbose=verbose)
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 225, in learn_test_model
    will = ['WILL Produced-Tree #'+str(i+1)+'\n'+('\n'.join(model.get_will_produced_tree(treenumber=i+1))) for i in range(trees)]
  File "/home/rodrigoazs/Projetos/TPRE/boostedrevision.py", line 225, in <listcomp>
    will = ['WILL Produced-Tree #'+str(i+1)+'\n'+('\n'.join(model.get_will_produced_tree(treenumber=i+1))) for i in range(trees)]
  File "/home/rodrigoazs/anaconda3/lib/python3.5/site-packages/boostsrl/boostsrl.py", line 310, in get_will_produced_tree
    splitline = (line[0].split('\n'))[2:]
IndexError: list index out of range
