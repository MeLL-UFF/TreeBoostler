Starting experiment #1 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1418510649004889;  // std dev = 0,000, 683,000 (wgt'ed) examples reached here.  /* #neg=683 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.12544463852839238;  // std dev = 0,000, 746,000 (wgt'ed) examples reached here.  /* #neg=746 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360664;  // std dev = 0,000, 723,000 (wgt'ed) examples reached here.  /* #neg=723 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783621;  // std dev = 3,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783529;  // std dev = 4,02e-07, 672,000 (wgt'ed) examples reached here.  /* #neg=672 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926189;  // std dev = 0,000, 733,000 (wgt'ed) examples reached here.  /* #neg=733 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.08518475138839675;  // std dev = 1,30e-07, 693,000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 1,29e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109307;  // std dev = 0,000, 811,000 (wgt'ed) examples reached here.  /* #neg=811 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.0732462257633366;  // std dev = 2,13e-07, 681,000 (wgt'ed) examples reached here.  /* #neg=681 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420271;  // std dev = 9,13e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06842697784420251;  // std dev = 1,87e-07, 694,000 (wgt'ed) examples reached here.  /* #neg=694 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06419184008202528;  // std dev = 2,24e-07, 755,000 (wgt'ed) examples reached here.  /* #neg=755 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.06485915184020996
   Generating paths time   = 2.446544885635376
   Generating mappings time   = 0.04387402534484863
   Possible mappings   = 6
   Finding best mapping   = 0.00048279762268066406
   Total time   = 2.5557656288146973


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 6.804 seconds
Total inference time: 2.349 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013869225180251455;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.005957832775187853;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10766164862300709;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.12155053751189683;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.01315829206443623;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.005199339142670968;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09698160012061074;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919780712233723;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765441175670749;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337544241702779;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.059875698442106516;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.01051083570080592;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.010516407400113871;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.003112582678769971;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652711715737251;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033766487625346573;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597783257421361;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0029805964675241815;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.543974
   AUC PR    = 0.401971
   CLL	      = -0.657932
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.93 seconds
Total inference time: 2.625 seconds
AUC ROC: 0.543974


Refined model AUC ROC: 0.543974


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 00:04:28
{'Recall': 0.0, 'AUC PR': 0.401971, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.06485915184020996, 'Total time': 2.5557656288146973, 'Generating mappings time': 0.04387402534484863, 'Generating paths time': 2.446544885635376, 'Possible mappings': 6, 'Finding best mapping': 0.00048279762268066406}, 'CLL': -0.657932, 'AUC ROC': 0.543974, 'Precision': [nan, 0.5], 'Inference time': 2.625, 'Learning time': 17.734, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.4025, 'F1': nan, 'CLL': -0.657894, 'AUC ROC': 0.544977, 'Precision': [nan, 0.5], 'Inference time': 2.349, 'Learning time': 6.804}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.23314893509951226;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.24703782398839647;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.008517731567154418;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231107442984;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.014812149378556561;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.014812149378556561;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.007484033389160554;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18108346735311384;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.013040256218347378;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006908039657602639;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14971133009076293;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.012220355492515312;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0060425988269574476;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142565513679901;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.010785323720359997;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.010779979783825066;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.005029785699329297;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09698165027320635;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.009524655459733244;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.009519975578147655;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.004431230860193146;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654415891418319;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0084195762051411;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004134051643060256;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573181488664;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.007938232217198572;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.003621112903084298;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046527143681337396;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033794115176989693;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.035977853421105536;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.006646779015410897;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.006639107345961848;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0025926428497922696;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */


Results
   AUC ROC   = 0.543974
   AUC PR    = 0.401971
   CLL	      = -0.657965
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 17.466 seconds
Total inference time: 2.781 seconds
AUC ROC: 0.543974


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 00:04:48
{'Recall': 0.0, 'AUC PR': 0.401971, 'F1': nan, 'CLL': -0.657965, 'AUC ROC': 0.543974, 'Precision': [nan, 0.5], 'Inference time': 2.781, 'Learning time': 17.466}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.10418844223022461
   Generating paths time   = 2.470189332962036
   Generating mappings time   = 0.045175790786743164
   Possible mappings   = 6
   Finding best mapping   = 0.00047206878662109375
   Total time   = 2.620030164718628


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 19.717 seconds
Total inference time: 2.296 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.4113806961560762;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18785338428611997;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.30593832111340963;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5594283908462323;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07937763648261707;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19057160915376772;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14027079549463276;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2290648325448347;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.42066313822755863;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.059920993081969534;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14413868690627155;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.10548200417940042;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2010364162078511;  // std dev = 1,490, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.39506568044364215;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.045107135322949535;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16971775493961935;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07878303235820754;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06029875295182253;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13759688832080105;  // std dev = 1,490, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.29288106073401843;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.018869668081318625;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14332639406832295;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04413337891025944;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.456443
   AUC PR    = 0.300569
   CLL	      = -0.746855
   Precision = 0.335275 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.498803


Total learning time: 20.753 seconds
Total inference time: 5.184 seconds
AUC ROC: 0.456443


Refined model AUC ROC: 0.456443


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 00:05:39
{'Recall': 0.973731, 'AUC PR': 0.300569, 'F1': 0.498803, 'Mapping results': {'Knowledge compiling time': 0.10418844223022461, 'Total time': 2.620030164718628, 'Generating mappings time': 0.045175790786743164, 'Generating paths time': 2.470189332962036, 'Possible mappings': 6, 'Finding best mapping': 0.00047206878662109375}, 'CLL': -0.746855, 'AUC ROC': 0.456443, 'Precision': [0.335275, 0.5], 'Inference time': 5.184, 'Learning time': 40.47, 'Parameter Learning results': {'Recall': 1.0, 'AUC PR': 0.288412, 'F1': 0.50078, 'CLL': -0.749493, 'AUC ROC': 0.445862, 'Precision': [0.334027, 0.5], 'Inference time': 2.296, 'Learning time': 19.717}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2469412934675934;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4969412934675934;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return -0.0030587065324065854;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2713904919923692;  // std dev = 0,889, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.3030587065324066;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.3390465566254879;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2530587065324066;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07641149214309431;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060259640672158665;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06692644350369109;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.1708132263497628;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.36136699519280974;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return -0.017352007114239898;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.21929185404024618;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24261297681472244;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.04376171942357453;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06325764536406013;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */


Results
   AUC ROC   = 0.461174
   AUC PR    = 0.297434
   CLL	      = -0.745794
   Precision = 0.337873 at threshold = 0.5
   Recall    = 0.97195
   F1        = 0.501436


Total learning time: 19.633 seconds
Total inference time: 3.116 seconds
AUC ROC: 0.461174


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 00:06:03
{'Recall': 0.97195, 'AUC PR': 0.297434, 'F1': 0.501436, 'CLL': -0.745794, 'AUC ROC': 0.461174, 'Precision': [0.337873, 0.5], 'Inference time': 3.116, 'Learning time': 19.633}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.19702863693237305
   Generating paths time   = 2.428661346435547
   Generating mappings time   = 0.035851478576660156
   Possible mappings   = 6
   Finding best mapping   = 0.00037097930908203125
   Total time   = 2.661917209625244


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21741063582462272;  // std dev = 18,687, 1.517,000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else return 0.01744097049774153;  // std dev = 5,501, 226,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18005323766081235;  // std dev = 18,815, 1.555,000 (wgt'ed) examples reached here.  /* #neg=1.010 #pos=545 */
%   else return 0.009204056032348147;  // std dev = 5,521, 235,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16762286371104146;  // std dev = 18,603, 1.493,000 (wgt'ed) examples reached here.  /* #neg=948 #pos=545 */
%   else return 0.011396137925191532;  // std dev = 5,510, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1315863249342346;  // std dev = 18,721, 1.527,000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else return 0.005997193694593882;  // std dev = 5,523, 236,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10990798732274239;  // std dev = 18,690, 1.518,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else return 0.009908402768903708;  // std dev = 5,508, 229,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08114890237786501;  // std dev = 18,801, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.006 #pos=545 */
%   else return 0.034195425025567924;  // std dev = 5,424, 197,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07391419557468921;  // std dev = 18,670, 1.512,000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else return 0.023547684246098308;  // std dev = 5,445, 204,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05809240652553475;  // std dev = 18,677, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else return 0.013813116967553534;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04762267999270562;  // std dev = 18,649, 1.506,000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   else return 0.006558030771406365;  // std dev = 5,485, 219,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.029971360314259354;  // std dev = 18,755, 1.537,000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else return 0.01111216123166033;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.729449
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 15.401 seconds
Total inference time: 2.442 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.687, 972, 545], 'false': [5.501, 190, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.815, 1010, 545], 'false': [5.521, 199, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.603, 948, 545], 'false': [5.51, 194, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.721, 982, 545], 'false': [5.523, 200, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.69, 973, 545], 'false': [5.508, 193, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.801, 1006, 545], 'false': [5.424, 161, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.67, 967, 545], 'false': [5.445, 168, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.677, 969, 545], 'false': [5.467, 176, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.649, 961, 545], 'false': [5.485, 183, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.755, 992, 545], 'false': [5.467, 176, 36]}]]
[{'': [0.23019273111719937, 0.1339180828569202]}, {'': [0.22764446190589352, 0.12972385694884622]}, {'': [0.23178494505953112, 0.13202268431001962]}, {'': [0.22952495766018163, 0.12927319735708107]}, {'': [0.23012605866188457, 0.13249175263629723]}, {'': [0.22791393917777986, 0.1493468009997669]}, {'': [0.23052572366393945, 0.14532871972318204]}, {'': [0.23039260167977144, 0.14097543609825505]}, {'': [0.23092446504377026, 0.13736160630512328]}, {'': [0.22885501799253635, 0.14097543609825533]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22027518094668344;  // std dev = 0,481, 1.505,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024815601766178853;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.02656998773109047;  // std dev = 0,374, 190,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18375239962923243;  // std dev = 0,478, 1.537,000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.04489878247426092;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else return 0.02041272580458463;  // std dev = 0,371, 206,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.401543994416798;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.1265439944167983;  // std dev = 0,468, 40,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.1636247610150316;  // std dev = 0,481, 1.461,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   else return 0.016666798189092214;  // std dev = 0,370, 220,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12289870929658141;  // std dev = 0,478, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | else return 0.1212785243434081;  // std dev = 0,476, 1.525,000 (wgt'ed) examples reached here.  /* #neg=996 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.016435699544434287;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.011872085224128517;  // std dev = 0,368, 211,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06653256069103765;  // std dev = 0,462, 51,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | else return 0.11267478300004645;  // std dev = 0,480, 1.468,000 (wgt'ed) examples reached here.  /* #neg=939 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.02724329861197353;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.014451622887404605;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return 0.014507892837822707;  // std dev = 0,372, 193,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08735329445843944;  // std dev = 0,474, 46,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0817752200095415;  // std dev = 0,477, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.09826413931410317;  // std dev = 0,482, 1.404,000 (wgt'ed) examples reached here.  /* #neg=888 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.023900478173794842;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.028940289438189593;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.01980543220801147;  // std dev = 0,378, 185,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06855527490179672;  // std dev = 0,479, 1.526,000 (wgt'ed) examples reached here.  /* #neg=981 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.030088322039859536;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06133184859056483;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.0075111741286454665;  // std dev = 0,370, 196,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06957136830683995;  // std dev = 0,483, 1.463,000 (wgt'ed) examples reached here.  /* #neg=918 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.0033000598946878873;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.004256762738068485;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.007358196113046339;  // std dev = 0,370, 195,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041261915832260125;  // std dev = 0,480, 1.518,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.054836760670284264;  // std dev = 0,287, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04473241043876336;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.0016218390677623347;  // std dev = 0,363, 205,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04293885640109736;  // std dev = 0,481, 43,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.030256788643262655;  // std dev = 0,447, 47,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else return 0.02547024478652635;  // std dev = 0,478, 1.463,000 (wgt'ed) examples reached here.  /* #neg=947 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.04246372324097778;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else return -0.0016165143063206423;  // std dev = 0,361, 220,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=34 */


Results
   AUC ROC   = 0.550675
   AUC PR    = 0.501043
   CLL	      = -0.729118
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 25.384 seconds
Total inference time: 2.826 seconds
AUC ROC: 0.550675


Refined model AUC ROC: 0.550675


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 00:06:52
{'Recall': 0.0, 'AUC PR': 0.501043, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.19702863693237305, 'Total time': 2.661917209625244, 'Generating mappings time': 0.035851478576660156, 'Generating paths time': 2.428661346435547, 'Possible mappings': 6, 'Finding best mapping': 0.00037097930908203125}, 'CLL': -0.729118, 'AUC ROC': 0.550675, 'Precision': [nan, 0.5], 'Inference time': 2.826, 'Learning time': 40.785, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.49112, 'F1': nan, 'CLL': -0.729449, 'AUC ROC': 0.547853, 'Precision': [nan, 0.5], 'Inference time': 2.442, 'Learning time': 15.401}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21552598427983524;  // std dev = 0,479, 1.525,000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.03073776758682107;  // std dev = 0,378, 197,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1823598538394825;  // std dev = 0,478, 1.546,000 (wgt'ed) examples reached here.  /* #neg=1.001 #pos=545 */
%   else return 0.01771684270257987;  // std dev = 0,369, 221,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16320744570513113;  // std dev = 0,480, 1.511,000 (wgt'ed) examples reached here.  /* #neg=966 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.022852385223163983;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.016857993101024687;  // std dev = 0,370, 207,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1372594452373405;  // std dev = 0,481, 1.506,000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.025471135481555555;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.011662941453835361;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.007646476153365193;  // std dev = 0,364, 203,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10794567647604711;  // std dev = 0,479, 1.525,000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04179534508865184;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return 0.012173871183778813;  // std dev = 0,369, 209,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10481843626059131;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.018707325149480133;  // std dev = 0,453, 45,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.08943774285474061;  // std dev = 0,480, 1.471,000 (wgt'ed) examples reached here.  /* #neg=942 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.03402069500078511;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.008786526407431357;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.016778667098717805;  // std dev = 0,375, 189,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061776708120655936;  // std dev = 0,477, 1.559,000 (wgt'ed) examples reached here.  /* #neg=1.014 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.029850544058152042;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03504159984899887;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.024055851416672224;  // std dev = 0,383, 179,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19574275652211126;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.023181933321937243;  // std dev = 0,462, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.060821883796175306;  // std dev = 0,481, 1.462,000 (wgt'ed) examples reached here.  /* #neg=933 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.03657063222074554;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.005471541996357414;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return -0.008354567799342185;  // std dev = 0,357, 214,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1527986112318099;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.02597069558480734;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.051118269584575174;  // std dev = 0,481, 1.449,000 (wgt'ed) examples reached here.  /* #neg=920 #pos=529 */
%   else return 0.011069834726723718;  // std dev = 0,371, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2174089826555007;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.005834816361357607;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.008258627650221595;  // std dev = 0,471, 39,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.036016966815142604;  // std dev = 0,480, 1.429,000 (wgt'ed) examples reached here.  /* #neg=913 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.028246605560083477;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.005424835012208687;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.00929063462159418;  // std dev = 0,373, 191,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=32 */


Results
   AUC ROC   = 0.550713
   AUC PR    = 0.501089
   CLL	      = -0.728639
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 32.895 seconds
Total inference time: 2.957 seconds
AUC ROC: 0.550713


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 00:07:28
{'Recall': 0.0, 'AUC PR': 0.501089, 'F1': nan, 'CLL': -0.728639, 'AUC ROC': 0.550713, 'Precision': [nan, 0.5], 'Inference time': 2.957, 'Learning time': 32.895}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.18970441818237305
   Generating paths time   = 2.4236865043640137
   Generating mappings time   = 0.0360562801361084
   Possible mappings   = 6
   Finding best mapping   = 0.00035452842712402344
   Total time   = 2.649806022644043


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 11.798 seconds
Total inference time: 2.162 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7095671269394623;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2904328730605376;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5095671269394624;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1336823039040812;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10691853206751069;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0832613978638063;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06427503674384107;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04931389391634977;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767226576776904;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.560389
   AUC PR    = 0.411766
   CLL	      = -0.642012
   Precision = 0.947368 at threshold = 0.5
   Recall    = 0.015859
   F1        = 0.031196


Total learning time: 19.103 seconds
Total inference time: 2.538 seconds
AUC ROC: 0.560389


Refined model AUC ROC: 0.560389


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 00:08:07
{'Recall': 0.015859, 'AUC PR': 0.411766, 'F1': 0.031196, 'Mapping results': {'Knowledge compiling time': 0.18970441818237305, 'Total time': 2.649806022644043, 'Generating mappings time': 0.0360562801361084, 'Generating paths time': 2.4236865043640137, 'Possible mappings': 6, 'Finding best mapping': 0.00035452842712402344}, 'CLL': -0.642012, 'AUC ROC': 0.560389, 'Precision': [0.947368, 0.5], 'Inference time': 2.538, 'Learning time': 30.901000000000003, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.39269, 'F1': nan, 'CLL': -0.643296, 'AUC ROC': 0.554206, 'Precision': [nan, 0.5], 'Inference time': 2.162, 'Learning time': 11.798}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6381115570915674;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.36188844290843264;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4381115570915674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.06222673405618188;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04926813701943352;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5942389012114381;  // std dev = 0,133, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3880106112732222;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.39357926679739946;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.03568543325973943;  // std dev = 0,493, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.564462
   AUC PR    = 0.420874
   CLL	      = -0.640867
   Precision = 0.873684 at threshold = 0.5
   Recall    = 0.036564
   F1        = 0.07019


Total learning time: 26.696 seconds
Total inference time: 2.927 seconds
AUC ROC: 0.564462


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 00:08:37
{'Recall': 0.036564, 'AUC PR': 0.420874, 'F1': 0.07019, 'CLL': -0.640867, 'AUC ROC': 0.564462, 'Precision': [0.873684, 0.5], 'Inference time': 2.927, 'Learning time': 26.696}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.1808006763458252
   Generating paths time   = 2.4668843746185303
   Generating mappings time   = 0.04508662223815918
   Possible mappings   = 6
   Finding best mapping   = 0.0004553794860839844
   Total time   = 2.6932320594787598


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 16.718 seconds
Total inference time: 2.361 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,973, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.736560729180538;  // std dev = 0,977, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.20330707524601116;  // std dev = 0,066, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.08157913744913269;  // std dev = 1,277, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.6714083474525957;  // std dev = 0,926, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.39710918051048366;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.14209741668706702;  // std dev = 0,456, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.04822967119721917;  // std dev = 0,852, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.21844148298733687;  // std dev = 0,419, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.22889400631759366;  // std dev = 2,291, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.030391883501436998;  // std dev = 1,728, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.33635543475454255;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6261458324592553;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1738541675407447;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(M, J), venue(M, B) )
%   | | | then return -0.17539709446705035;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11922074506368836;  // std dev = 2,907, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.06037620118348823;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17530759103348365;  // std dev = 0,412, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.12203609472378803;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26376858636228895;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.594755836805674;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19397183329821693;  // std dev = 0,071, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08091094473504853;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.025666596396420077;  // std dev = 0,777, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12333183720852565;  // std dev = 2,943, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.027193338069167336;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.49516527398477683;  // std dev = 0,984, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.23521220618819103;  // std dev = 0,074, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.13707436664935363;  // std dev = 1,271, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.43202907267135787;  // std dev = 0,920, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.19488832736535144;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.23469170206569823;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14497882465850878;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09165823005000304;  // std dev = 0,451, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.043862039849262444;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14370802073377992;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.48640787072987496;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16770902564992574;  // std dev = 0,022, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05583157190843793;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.12211276786539733;  // std dev = 1,187, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07167828700237913;  // std dev = 2,779, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.017131448544301264;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10853207739809737;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4228692833816119;  // std dev = 0,868, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19964794921713433;  // std dev = 0,107, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1444853338714612;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.054862777772797106;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.09347159809108112;  // std dev = 1,099, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0669517469943512;  // std dev = 2,784, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01463482869827685;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04489819142711671;  // std dev = 0,344, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.05679295467551577;  // std dev = 2,170, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.08931289368915053;  // std dev = 1,687, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.09050956069134171;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.09810603562125471;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03426750839950838;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.062459456765236405;  // std dev = 1,058, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0506276443921532;  // std dev = 2,775, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012480140174441177;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.357763930601741;  // std dev = 0,103, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.027782051386981844;  // std dev = 0,338, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.043469752082483125;  // std dev = 2,167, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.0697339491453735;  // std dev = 1,692, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06801551769771519;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.037548904091866266;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01910240694056658;  // std dev = 0,558, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0504990321672139;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01062669616932668;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04649632470121437;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31902564703615616;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17526651466378457;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.19352325137806312;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03687216449427496;  // std dev = 2,847, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.016322425791778117;  // std dev = 0,560, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04069068808149464;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.009036881591473613;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.555315
   AUC PR    = 0.394935
   CLL	      = -0.710721
   Precision = 0.378356 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.539944


Total learning time: 27.883 seconds
Total inference time: 6.298 seconds
AUC ROC: 0.555315


Refined model AUC ROC: 0.555315


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 00:09:34
{'Recall': 0.94244, 'AUC PR': 0.394935, 'F1': 0.539944, 'Mapping results': {'Knowledge compiling time': 0.1808006763458252, 'Total time': 2.6932320594787598, 'Generating mappings time': 0.04508662223815918, 'Generating paths time': 2.4668843746185303, 'Possible mappings': 6, 'Finding best mapping': 0.0004553794860839844}, 'CLL': -0.710721, 'AUC ROC': 0.555315, 'Precision': [0.378356, 0.5], 'Inference time': 6.298, 'Learning time': 44.601, 'Parameter Learning results': {'Recall': 0.952169, 'AUC PR': 0.374863, 'F1': 0.538514, 'CLL': -0.702177, 'AUC ROC': 0.543975, 'Precision': [0.37542, 0.5], 'Inference time': 2.361, 'Learning time': 16.718}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.15444523139580865;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.2937645648840257;  // std dev = 2,776, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09115601443641211;  // std dev = 1,941, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3960038833352001;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6382893592786268;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1617106407213732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11101663200589931;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.14154274242296505;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.36574146548753184;  // std dev = 0,657, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.46118064083119226;  // std dev = 0,705, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.24306802116841592;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.048293135634375615;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.32511612588614197;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.532484644543276;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14096895064493492;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539660047640662;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06270150077767886;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4476730419869587;  // std dev = 0,034, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.1790776547783782;  // std dev = 2,776, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.02395607086453667;  // std dev = 1,945, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.13582457937069967;  // std dev = 3,384, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.26357108031201404;  // std dev = 13,098, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.6075912134000846;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1924087865999155;  // std dev = 0,000817, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07742231974692283;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05114746447074553;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.341291315201303;  // std dev = 0,031, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.13987472083495145;  // std dev = 2,776, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.01974147107291068;  // std dev = 1,945, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1653316941035738;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.018368134017134153;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.20128986635139595;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1657118266143023;  // std dev = 0,435, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06504284350671198;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04374914261487807;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2691978112465669;  // std dev = 0,027, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.11408734793796321;  // std dev = 2,769, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.002580567060863545;  // std dev = 1,950, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.12396718292973258;  // std dev = 2,746, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.013412138333380405;  // std dev = 1,886, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.15172185423451448;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.127462717787863;  // std dev = 0,386, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06261833788426893;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.035424452846848406;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.48872456291566846;  // std dev = 1,088, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3937941309218589;  // std dev = 0,082, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.05471734140763938;  // std dev = 0,387, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1109808476012467;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.45027730855869946;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19462285940002716;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04692020407903667;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.0737007378780514;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012199746304308326;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.19102816795112113;  // std dev = 0,083, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.052996262527108186;  // std dev = 2,775, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.0345176619386807;  // std dev = 1,895, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.08383988953151712;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return -0.011901993518776452;  // std dev = 0,321, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.058655685809695206;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04942810739887829;  // std dev = 0,666, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07367310979828996;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01038591873338424;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.436831038134676;  // std dev = 1,109, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.4121748267774539;  // std dev = 0,115, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.026686966812171413;  // std dev = 0,393, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.06318098355648868;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.0861581433876522;  // std dev = 0,379, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.028717963945638223;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.04084339935611585;  // std dev = 0,670, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06014109102126876;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008830655009274475;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029333435726339185;  // std dev = 0,382, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.05381677681570863;  // std dev = 2,151, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.016489245344928193;  // std dev = 1,982, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.04975786173903791;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.07558707863358284;  // std dev = 0,379, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.22618162930855035;  // std dev = 0,029, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03530897759472661;  // std dev = 2,857, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0440834386915975;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.0075002360611118885;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.544692
   AUC PR    = 0.379034
   CLL	      = -0.709161
   Precision = 0.379924 at threshold = 0.5
   Recall    = 0.934333
   F1        = 0.540192


Total learning time: 36.735 seconds
Total inference time: 8.007 seconds
AUC ROC: 0.544692


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 00:10:19
{'Recall': 0.934333, 'AUC PR': 0.379034, 'F1': 0.540192, 'CLL': -0.709161, 'AUC ROC': 0.544692, 'Precision': [0.379924, 0.5], 'Inference time': 8.007, 'Learning time': 36.735}


Starting experiment #2 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6,14e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.14185106490048893;  // std dev = 0,000, 668,000 (wgt'ed) examples reached here.  /* #neg=668 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0,000, 692,000 (wgt'ed) examples reached here.  /* #neg=692 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360626;  // std dev = 5,16e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.11231637819360646;  // std dev = 0,000, 701,000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783617;  // std dev = 4,83e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783516;  // std dev = 4,40e-07, 711,000 (wgt'ed) examples reached here.  /* #neg=711 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.09269127618926197;  // std dev = 0,000, 693,000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.08518475138839675;  // std dev = 1,30e-07, 663,000 (wgt'ed) examples reached here.  /* #neg=663 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109169;  // std dev = 3,16e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07877675473109287;  // std dev = 0,000, 724,000 (wgt'ed) examples reached here.  /* #neg=724 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07324622576333654;  // std dev = 2,37e-07, 704,000 (wgt'ed) examples reached here.  /* #neg=704 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420244;  // std dev = 1,95e-07, 664,000 (wgt'ed) examples reached here.  /* #neg=664 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202529;  // std dev = 2,53e-07, 704,000 (wgt'ed) examples reached here.  /* #neg=704 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.14355230331420898
   Generating paths time   = 2.431800127029419
   Generating mappings time   = 0.04332995414733887
   Possible mappings   = 6
   Finding best mapping   = 0.00046181678771972656
   Total time   = 2.619149684906006


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 7.313 seconds
Total inference time: 2.162 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.015720215771076185;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.015720215771076185;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.007386882437742631;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.007202937787125471;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339334372327114;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0055829814026832;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919737392043678;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.010980229039029475;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004001165836753696;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038262143846673493;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033762541247835806;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.022213802569885824;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.03610269145877673;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.009669278669785852;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.008858055898963702;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0023100173869444905;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */


Results
   AUC ROC   = 0.543974
   AUC PR    = 0.401971
   CLL	      = -0.657936
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 14.327 seconds
Total inference time: 2.587 seconds
AUC ROC: 0.543974


Refined model AUC ROC: 0.543974


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 00:20:59
{'Recall': 0.0, 'AUC PR': 0.401971, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.14355230331420898, 'Total time': 2.619149684906006, 'Generating mappings time': 0.04332995414733887, 'Generating paths time': 2.431800127029419, 'Possible mappings': 6, 'Finding best mapping': 0.00046181678771972656}, 'CLL': -0.657936, 'AUC ROC': 0.543974, 'Precision': [nan, 0.5], 'Inference time': 2.587, 'Learning time': 21.64, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.4025, 'F1': nan, 'CLL': -0.657894, 'AUC ROC': 0.544977, 'Precision': [nan, 0.5], 'Inference time': 2.162, 'Learning time': 7.313}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.008939672495424532;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.014812149378556561;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.007854932333985694;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.014818939670846278;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.013040256218347378;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.006485606337512788;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.011495970442168556;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006078988450034129;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005584113622656255;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004920733058639077;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.011084684241693853;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.008923524684207994;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0037340390400002667;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.007891879688926053;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0036217744630709973;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033779980639776623;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0029817865839015132;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544838
   AUC PR    = 0.402465
   CLL	      = -0.657928
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.246 seconds
Total inference time: 2.318 seconds
AUC ROC: 0.544838


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 00:21:14
{'Recall': 0.0, 'AUC PR': 0.402465, 'F1': nan, 'CLL': -0.657928, 'AUC ROC': 0.544838, 'Precision': [nan, 0.5], 'Inference time': 2.318, 'Learning time': 12.246}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.14171338081359863
   Generating paths time   = 2.4579176902770996
   Generating mappings time   = 0.044861555099487305
   Possible mappings   = 6
   Finding best mapping   = 0.0004825592041015625
   Total time   = 2.644979953765869


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 20.035 seconds
Total inference time: 2.447 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786975683850058;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102622286408955;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24461578299317407;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18790189941833405;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422433303415912;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.23204029366135517;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4202201444025261;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04441518325941762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.144572897651299;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.10554610052187961;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08027591665101112;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06025311042836817;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04526922519768531;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.449754
   AUC PR    = 0.292844
   CLL	      = -0.748181
   Precision = 0.335142 at threshold = 0.5
   Recall    = 0.98976
   F1        = 0.500732


Total learning time: 26.733 seconds
Total inference time: 3.462 seconds
AUC ROC: 0.449754


Refined model AUC ROC: 0.449754


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 00:22:10
{'Recall': 0.98976, 'AUC PR': 0.292844, 'F1': 0.500732, 'Mapping results': {'Knowledge compiling time': 0.14171338081359863, 'Total time': 2.644979953765869, 'Generating mappings time': 0.044861555099487305, 'Generating paths time': 2.4579176902770996, 'Possible mappings': 6, 'Finding best mapping': 0.0004825592041015625}, 'CLL': -0.748181, 'AUC ROC': 0.449754, 'Precision': [0.335142, 0.5], 'Inference time': 3.462, 'Learning time': 46.768, 'Parameter Learning results': {'Recall': 1.0, 'AUC PR': 0.288412, 'F1': 0.50078, 'CLL': -0.749493, 'AUC ROC': 0.445862, 'Precision': [0.334027, 0.5], 'Inference time': 2.447, 'Learning time': 20.035}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024251324982943;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.3731198414242351;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5628684117765307;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1797910253783208;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018388985139194833;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.2432009432869608;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3493623909129761;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6054519199354709;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.13945986604372818;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.15945755141049564;  // std dev = 0,885, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19454808006452912;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.32847159349922933;  // std dev = 1,518, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.014793605727078898;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.18492211861097677;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26350725648635615;  // std dev = 1,489, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4558111460028007;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10672361311181479;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1021548370116814;  // std dev = 1,223, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14068360460425638;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.1579386097021482;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700690671362306;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11863151760461348;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.13739964773609437;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2918907276063185;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05473729319144939;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.129198145115903;  // std dev = 0,968, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11253301681575412;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.22566266103725058;  // std dev = 1,521, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10326251621994861;  // std dev = 1,223, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07837557930912754;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.10369694053815129;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06054273544281475;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06558980001795689;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.10552321217235783;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2638134700127499;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.026113759218260993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.142797190794283;  // std dev = 0,928, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14059362742092377;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.04451910051122477;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06223469063011638;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */


Results
   AUC ROC   = 0.463631
   AUC PR    = 0.305078
   CLL	      = -0.745345
   Precision = 0.3368 at threshold = 0.5
   Recall    = 0.966162
   F1        = 0.499482


Total learning time: 29.07 seconds
Total inference time: 5.079 seconds
AUC ROC: 0.463631


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 00:22:45
{'Recall': 0.966162, 'AUC PR': 0.305078, 'F1': 0.499482, 'CLL': -0.745345, 'AUC ROC': 0.463631, 'Precision': [0.3368, 0.5], 'Inference time': 5.079, 'Learning time': 29.07}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.1049489974975586
   Generating paths time   = 2.4509217739105225
   Generating mappings time   = 0.04498863220214844
   Possible mappings   = 6
   Finding best mapping   = 0.00046896934509277344
   Total time   = 2.6013331413269043


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21181538545641845;  // std dev = 18,768, 1.541,000 (wgt'ed) examples reached here.  /* #neg=996 #pos=545 */
%   else return 0.011340424461213605;  // std dev = 5,521, 235,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18962223845986376;  // std dev = 18,687, 1.517,000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else return 0.029839781005993472;  // std dev = 5,456, 208,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16456377734473263;  // std dev = 18,638, 1.503,000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   else return 0.008234199968395734;  // std dev = 5,515, 232,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12841376011591935;  // std dev = 18,765, 1.540,000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else return -4.3236905821325246E-4;  // std dev = 5,540, 244,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11104104650507197;  // std dev = 18,680, 1.515,000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else return 0.016464712579805207;  // std dev = 5,485, 219,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08596095754109238;  // std dev = 18,735, 1.531,000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else return 0.009285940242224741;  // std dev = 5,501, 226,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06729693687248678;  // std dev = 18,755, 1.537,000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else return 0.017030354908980343;  // std dev = 5,472, 214,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06426246407280463;  // std dev = 18,595, 1.491,000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else return 0.015621553967163379;  // std dev = 5,470, 213,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05204160845781774;  // std dev = 18,574, 1.485,000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   else return 0.005282086814834737;  // std dev = 5,497, 224,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03873994272545297;  // std dev = 18,603, 1.493,000 (wgt'ed) examples reached here.  /* #neg=948 #pos=545 */
%   else return 0.009010757547586259;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.727304
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.881 seconds
Total inference time: 2.135 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.768, 996, 545], 'false': [5.521, 199, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.687, 972, 545], 'false': [5.456, 172, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.638, 958, 545], 'false': [5.515, 196, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.765, 995, 545], 'false': [5.54, 208, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.68, 970, 545], 'false': [5.485, 183, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.735, 986, 545], 'false': [5.501, 190, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.755, 992, 545], 'false': [5.472, 178, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.595, 946, 545], 'false': [5.47, 177, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.574, 940, 545], 'false': [5.497, 188, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.603, 948, 545], 'false': [5.482, 182, 36]}]]
[{'': [0.22858649224883978, 0.12972385694884672]}, {'': [0.2301927311172066, 0.14312130177514806]}, {'': [0.23112347051294635, 0.13109393579072467]}, {'': [0.22865365154326495, 0.12577264176296563]}, {'': [0.23032600289730737, 0.13736160630512262]}, {'': [0.22925722740267307, 0.13391808285691836]}, {'': [0.22885501799253471, 0.13992488426936836]}, {'': [0.23191687572337974, 0.14044832374528854]}, {'': [0.2323118956115632, 0.13488520408163335]}, {'': [0.2317849450595277, 0.13786718289706143]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.25814893509951237;  // std dev = 0,490, 40,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=16 */
%   | else return 0.22147311092368321;  // std dev = 0,481, 1.456,000 (wgt'ed) examples reached here.  /* #neg=927 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024815601766178853;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.023097388707758962;  // std dev = 0,371, 194,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19097168752680455;  // std dev = 0,481, 1.505,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else return 0.013650059804987446;  // std dev = 0,365, 228,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2942733584524399;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.10972546768820372;  // std dev = 0,462, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.15770340469067634;  // std dev = 0,479, 1.479,000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.022924130820611052;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.007247874970544662;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.01361655148749429;  // std dev = 0,367, 200,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.17061284562497095;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.17355860314225738;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.08440570405771865;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.13337451573400255;  // std dev = 0,480, 1.435,000 (wgt'ed) examples reached here.  /* #neg=919 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.02671334521399513;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 0.011580798193758183;  // std dev = 0,366, 213,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.13663404121283806;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.12846400095069577;  // std dev = 0,480, 36,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | else return 0.11549499731385991;  // std dev = 0,482, 1.444,000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   else return 0.011812625247703507;  // std dev = 0,367, 224,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08312491329224853;  // std dev = 0,479, 1.531,000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.025473385780053683;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.020991914616716154;  // std dev = 0,376, 199,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06557773778011224;  // std dev = 0,479, 1.534,000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04198284571155294;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.020902805378916672;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.016432024005409673;  // std dev = 0,376, 188,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.058969746609143954;  // std dev = 0,481, 1.504,000 (wgt'ed) examples reached here.  /* #neg=959 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03081067443985859;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.011794028032501395;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.020864316197822662;  // std dev = 0,381, 181,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03548585781469334;  // std dev = 0,477, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.006 #pos=545 */
%   else return 0.0010286225590793942;  // std dev = 0,363, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03684582710008378;  // std dev = 0,480, 1.512,000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.021499403421973515;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03819613282741033;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return 0.005268070603215517;  // std dev = 0,370, 195,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */


Results
   AUC ROC   = 0.550034
   AUC PR    = 0.500301
   CLL	      = -0.729321
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 25.301 seconds
Total inference time: 2.795 seconds
AUC ROC: 0.550034


Refined model AUC ROC: 0.550034


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 00:23:28
{'Recall': 0.0, 'AUC PR': 0.500301, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.1049489974975586, 'Total time': 2.6013331413269043, 'Generating mappings time': 0.04498863220214844, 'Generating paths time': 2.4509217739105225, 'Possible mappings': 6, 'Finding best mapping': 0.00046896934509277344}, 'CLL': -0.729321, 'AUC ROC': 0.550034, 'Precision': [nan, 0.5], 'Inference time': 2.795, 'Learning time': 35.182, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.49112, 'F1': nan, 'CLL': -0.727304, 'AUC ROC': 0.547853, 'Precision': [nan, 0.5], 'Inference time': 2.135, 'Learning time': 9.881}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134292480069389;  // std dev = 0,479, 1.534,000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else return 0.02637323416493195;  // std dev = 0,374, 214,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18402918864258655;  // std dev = 0,478, 1.540,000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else return 0.0223499756994147;  // std dev = 0,373, 215,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15648299044717856;  // std dev = 0,478, 1.540,000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.030239171013747512;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.005959924008876909;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.008976515260762919;  // std dev = 0,364, 204,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13097314253528747;  // std dev = 0,478, 1.538,000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.026468985697803885;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.015305518853177628;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.016782116298985857;  // std dev = 0,372, 193,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11665169390434167;  // std dev = 0,481, 1.499,000 (wgt'ed) examples reached here.  /* #neg=954 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.007133746232412837;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return 0.01786754645328291;  // std dev = 0,374, 202,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0977538881089164;  // std dev = 0,482, 1.485,000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.022607718783755004;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.00683997163442247;  // std dev = 0,366, 213,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07563768661543244;  // std dev = 0,481, 1.495,000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.011452491121724832;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.009947244210321997;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.014061632201172526;  // std dev = 0,374, 190,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04989245914148076;  // std dev = 0,478, 1.537,000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else return -0.0028953237909111382;  // std dev = 0,358, 238,000 (wgt'ed) examples reached here.  /* #neg=202 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.11320525212869281;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.0017069942889715185;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.041583891033647374;  // std dev = 0,479, 1.482,000 (wgt'ed) examples reached here.  /* #neg=953 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.03190716416364617;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -5.235660320707894E-4;  // std dev = 0,361, 220,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03432742152242705;  // std dev = 0,480, 1.520,000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.005818637016525582;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return 0.005613814523113607;  // std dev = 0,367, 212,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=34 */


Results
   AUC ROC   = 0.550698
   AUC PR    = 0.50108
   CLL	      = -0.7295
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 22.505 seconds
Total inference time: 2.452 seconds
AUC ROC: 0.550698


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 00:23:54
{'Recall': 0.0, 'AUC PR': 0.50108, 'F1': nan, 'CLL': -0.7295, 'AUC ROC': 0.550698, 'Precision': [nan, 0.5], 'Inference time': 2.452, 'Learning time': 22.505}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.11808395385742188
   Generating paths time   = 2.464514970779419
   Generating mappings time   = 0.04474616050720215
   Possible mappings   = 6
   Finding best mapping   = 0.0004661083221435547
   Total time   = 2.6278164386749268


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.347 seconds
Total inference time: 2.218 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8198971323208211;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.18010286767917896;  // std dev = 1,18e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6198971323208211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24401230928544115;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20673899513831911;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1693084233437465;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1357050208623199;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698056984977042;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0833117473090207;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6211391308448906;  // std dev = 0,131, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3613305947903154;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.420590792746448;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.11412353569411986;  // std dev = 1,438, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.29827634289350136;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.06134981758081461;  // std dev = 0,494, 1.649,000 (wgt'ed) examples reached here.  /* #neg=952 #pos=697 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04927685916010347;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03765456929113977;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.564204
   AUC PR    = 0.415214
   CLL	      = -0.641818
   Precision = 0.554404 at threshold = 0.5
   Recall    = 0.047137
   F1        = 0.086886


Total learning time: 21.387 seconds
Total inference time: 3.191 seconds
AUC ROC: 0.564204


Refined model AUC ROC: 0.564204


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 00:24:36
{'Recall': 0.047137, 'AUC PR': 0.415214, 'F1': 0.086886, 'Mapping results': {'Knowledge compiling time': 0.11808395385742188, 'Total time': 2.6278164386749268, 'Generating mappings time': 0.04474616050720215, 'Generating paths time': 2.464514970779419, 'Possible mappings': 6, 'Finding best mapping': 0.0004661083221435547}, 'CLL': -0.641818, 'AUC ROC': 0.564204, 'Precision': [0.554404, 0.5], 'Inference time': 3.191, 'Learning time': 33.734, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.39269, 'F1': nan, 'CLL': -0.643296, 'AUC ROC': 0.554206, 'Precision': [nan, 0.5], 'Inference time': 2.218, 'Learning time': 12.347}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6381115570915674;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.36188844290843264;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4381115570915674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.06222673405618188;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6059534646702209;  // std dev = 0,132, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.37637801531164106;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.40534192295291616;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.04731593037002917;  // std dev = 0,493, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0375820886171004;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.564462
   AUC PR    = 0.420874
   CLL	      = -0.640867
   Precision = 0.873684 at threshold = 0.5
   Recall    = 0.036564
   F1        = 0.07019


Total learning time: 26.531 seconds
Total inference time: 2.958 seconds
AUC ROC: 0.564462


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 00:25:06
{'Recall': 0.036564, 'AUC PR': 0.420874, 'F1': 0.07019, 'CLL': -0.640867, 'AUC ROC': 0.564462, 'Precision': [0.873684, 0.5], 'Inference time': 2.958, 'Learning time': 26.531}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.07981133460998535
   Generating paths time   = 2.4564459323883057
   Generating mappings time   = 0.04494071006774902
   Possible mappings   = 6
   Finding best mapping   = 0.00048041343688964844
   Total time   = 2.5816843509674072


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 16.629 seconds
Total inference time: 2.525 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3890173227673069;  // std dev = 0,490, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6459339491096061;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15406605089039405;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11902117736139686;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1912873480467316;  // std dev = 1,246, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1301352623823768;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6606313449709058;  // std dev = 0,969, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.28232076702827746;  // std dev = 0,047, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.16014465695187646;  // std dev = 1,297, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.6035922403520518;  // std dev = 0,929, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.24131868406702484;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.04725021266956468;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.3379864255487217;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.121558539816466;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.05987039785412888;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1524537065808724;  // std dev = 0,413, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.1924322599898875;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.03914384360343743;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.2652433780752396;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5182227986185939;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14987723744772044;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(M, J), venue(M, B) )
%   | | | then return -0.18947977890252465;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10521982359619057;  // std dev = 2,886, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0514771410586062;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11916512364450012;  // std dev = 0,410, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.14077031399172427;  // std dev = 2,787, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return 0.0035092107235194982;  // std dev = 1,844, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.2026623442399268;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.49646593285715446;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16376423498210677;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(M, J), venue(M, A) )
%   | | | then return -0.15912284674669813;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09216573938903018;  // std dev = 2,864, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04112666869128097;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.12369119715027453;  // std dev = 0,395, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.1833696764300506;  // std dev = 1,296, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3962775134047179;  // std dev = 0,925, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1483165078692684;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.12634632394874218;  // std dev = 0,386, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.1702276727680503;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08026758143412192;  // std dev = 2,861, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.08451360557535835;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014060964147063643;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.41171137093135574;  // std dev = 0,968, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.30574828399421855;  // std dev = 0,049, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.03559035390231114;  // std dev = 0,377, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.11156608469076981;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.10307019785065455;  // std dev = 0,380, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05204090927651681;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.005956715343906904;  // std dev = 0,637, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07932381276644632;  // std dev = 2,912, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.011985953900317965;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.03486434100455607;  // std dev = 0,354, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return 0.07927056068154292;  // std dev = 0,334, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else return 0.08385314576195227;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.009876484284860928;  // std dev = 0,298, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return 0.05843343520798403;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05748601091383641;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.005062665175935033;  // std dev = 0,638, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06492960577709511;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010202396639930927;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03889171265210721;  // std dev = 0,347, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.04264697767663493;  // std dev = 2,690, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.05674299813981362;  // std dev = 1,961, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.0670812717652581;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.32443170075265393;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1715013564710093;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(M, J), venue(M, B) )
%   | | | then return -0.15547657010805677;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04707690471472887;  // std dev = 2,858, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.019557046751285036;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03059470238680141;  // std dev = 0,347, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.047493876063632166;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3297085745697014;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16684074014950623;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.15722760328636068;  // std dev = 0,028, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03321596290424787;  // std dev = 2,839, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.018447810728374637;  // std dev = 0,531, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.048737203954801654;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.00571515395885503;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.547422
   AUC PR    = 0.38577
   CLL	      = -0.711313
   Precision = 0.375919 at threshold = 0.5
   Recall    = 0.932712
   F1        = 0.535864


Total learning time: 27.296 seconds
Total inference time: 6.508 seconds
AUC ROC: 0.547422


Refined model AUC ROC: 0.547422


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 00:26:02
{'Recall': 0.932712, 'AUC PR': 0.38577, 'F1': 0.535864, 'Mapping results': {'Knowledge compiling time': 0.07981133460998535, 'Total time': 2.5816843509674072, 'Generating mappings time': 0.04494071006774902, 'Generating paths time': 2.4564459323883057, 'Possible mappings': 6, 'Finding best mapping': 0.00048041343688964844}, 'CLL': -0.711313, 'AUC ROC': 0.547422, 'Precision': [0.375919, 0.5], 'Inference time': 6.508, 'Learning time': 43.925, 'Parameter Learning results': {'Recall': 0.952169, 'AUC PR': 0.374863, 'F1': 0.538514, 'CLL': -0.702177, 'AUC ROC': 0.543975, 'Precision': [0.37542, 0.5], 'Inference time': 2.525, 'Learning time': 16.629}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38894034888452006;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6459339491096061;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15406605089039405;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11902117736139686;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.0512481561016578;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1516877554730703;  // std dev = 2,947, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6348106353391928;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.22828522735600387;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.036324444211999686;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2209220226467017;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.0159200826164565;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.33800191245385325;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.20355787443693604;  // std dev = 0,441, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10292232740272288;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05985655083862233;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2495486412563976;  // std dev = 0,486, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5013377787729236;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1606266343983545;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1866346768283814;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10803630169786065;  // std dev = 2,886, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.03689260569460828;  // std dev = 0,783, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12052260780837735;  // std dev = 2,943, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02726519483452864;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.417888207854452;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.10505461304012628;  // std dev = 2,764, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07980196688015904;  // std dev = 1,940, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.19892619248936494;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.03262352489054367;  // std dev = 0,317, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return 0.09890700989419629;  // std dev = 0,924, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09125038499677111;  // std dev = 2,885, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.09338180423078762;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023461208986509288;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3209658328329748;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.08008527496100525;  // std dev = 2,764, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.062411441292395765;  // std dev = 1,940, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.15035895584933695;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.369555934871497;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14742572228559495;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.16437694015337898;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07620518569418377;  // std dev = 2,884, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0366364662126069;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1088894233660978;  // std dev = 0,484, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4700543299201033;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17605673107535683;  // std dev = 0,031, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16978602893282288;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.056001125975973204;  // std dev = 2,842, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.00804056888514169;  // std dev = 0,558, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07190828360440024;  // std dev = 2,899, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.014831635416265814;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08194367292642456;  // std dev = 0,484, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35947651935469305;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15198298557541953;  // std dev = 0,028, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1472069679030896;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04587952855813328;  // std dev = 2,841, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.00690043703171204;  // std dev = 0,559, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05885305318908359;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01264971409870148;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2207784501643033;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.0026887613306683803;  // std dev = 2,812, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.11469737256725301;  // std dev = 1,868, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.0655112505737517;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.023499832224049416;  // std dev = 0,265, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.021215730841316404;  // std dev = 0,868, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.037373731904565576;  // std dev = 2,840, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.0419936115456039;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.01077235744733136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.394616945054121;  // std dev = 1,046, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.4945795481433083;  // std dev = 0,131, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.06009483066813829;  // std dev = 0,399, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.05233779524642324;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.02004226952011517;  // std dev = 0,263, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.017018664407904782;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03030427709511334;  // std dev = 2,839, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.03417816592427014;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009161674653890528;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.552455
   AUC PR    = 0.392474
   CLL	      = -0.70623
   Precision = 0.377524 at threshold = 0.5
   Recall    = 0.924605
   F1        = 0.536138


Total learning time: 32.696 seconds
Total inference time: 5.237 seconds
AUC ROC: 0.552455


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 00:26:41
{'Recall': 0.924605, 'AUC PR': 0.392474, 'F1': 0.536138, 'CLL': -0.70623, 'AUC ROC': 0.552455, 'Precision': [0.377524, 0.5], 'Inference time': 5.237, 'Learning time': 32.696}


Starting experiment #3 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.1418510649004888;  // std dev = 0,000, 660,000 (wgt'ed) examples reached here.  /* #neg=660 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.12544463852839238;  // std dev = 0,000, 712,000 (wgt'ed) examples reached here.  /* #neg=712 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1123163781936063;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360678;  // std dev = 0,000, 731,000 (wgt'ed) examples reached here.  /* #neg=731 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783619;  // std dev = 4,34e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783516;  // std dev = 4,27e-07, 658,000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926187;  // std dev = 0,000, 741,000 (wgt'ed) examples reached here.  /* #neg=741 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839675;  // std dev = 1,37e-07, 683,000 (wgt'ed) examples reached here.  /* #neg=683 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07877675473109282;  // std dev = 0,000, 709,000 (wgt'ed) examples reached here.  /* #neg=709 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07324622576333643;  // std dev = 2,67e-07, 750,000 (wgt'ed) examples reached here.  /* #neg=750 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420256;  // std dev = 1,86e-07, 705,000 (wgt'ed) examples reached here.  /* #neg=705 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.0641918400820253;  // std dev = 2,52e-07, 702,000 (wgt'ed) examples reached here.  /* #neg=702 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.06711506843566895
   Generating paths time   = 2.451615571975708
   Generating mappings time   = 0.0434720516204834
   Possible mappings   = 6
   Finding best mapping   = 0.0004942417144775391
   Total time   = 2.562701463699341


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.855 seconds
Total inference time: 2.462 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.008939672495424532;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190219902398689;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.007202785323176992;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013914797721872551;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.005955626066664379;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.012258692432086871;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.012264350488929498;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0048705982369146444;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.00492037530858293;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0102419427824313;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004039137101183589;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.009048600157797727;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.00976534342097135;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.003231609303051322;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.008001716255439738;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.0086307245728963;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.002851001571766346;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.007634670652921772;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0027471406592569614;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */


Results
   AUC ROC   = 0.544838
   AUC PR    = 0.402465
   CLL	      = -0.657936
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.061 seconds
Total inference time: 2.299 seconds
AUC ROC: 0.544838


Refined model AUC ROC: 0.544838


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 00:39:24
{'Recall': 0.0, 'AUC PR': 0.402465, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.06711506843566895, 'Total time': 2.562701463699341, 'Generating mappings time': 0.0434720516204834, 'Generating paths time': 2.451615571975708, 'Possible mappings': 6, 'Finding best mapping': 0.0004942417144775391}, 'CLL': -0.657936, 'AUC ROC': 0.544838, 'Precision': [nan, 0.5], 'Inference time': 2.299, 'Learning time': 20.916, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.4025, 'F1': nan, 'CLL': -0.657894, 'AUC ROC': 0.544977, 'Precision': [nan, 0.5], 'Inference time': 2.462, 'Learning time': 10.855}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.015720215771076185;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.007808823366012659;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.013830072514852364;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006867242215940554;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.012184844592133214;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006043561909330779;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0055835849933739785;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004920268084137689;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.009521332956687212;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004075524709701986;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.008416660924299147;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.003594422500117919;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.011082686512148533;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0029871861136082237;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.007103689324536078;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0027725465479264168;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */


Results
   AUC ROC   = 0.544838
   AUC PR    = 0.402465
   CLL	      = -0.657924
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 13.064 seconds
Total inference time: 2.151 seconds
AUC ROC: 0.544838


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 00:39:39
{'Recall': 0.0, 'AUC PR': 0.402465, 'F1': nan, 'CLL': -0.657924, 'AUC ROC': 0.544838, 'Precision': [nan, 0.5], 'Inference time': 2.151, 'Learning time': 13.064}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.0843515396118164
   Generating paths time   = 2.554318428039551
   Generating mappings time   = 0.04496884346008301
   Possible mappings   = 6
   Finding best mapping   = 0.0004706382751464844
   Total time   = 2.684114933013916


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 8.895 seconds
Total inference time: 2.34 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.4113806961560762;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18785338428611997;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2675475540523595;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4551754305857587;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07937763648261707;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1111862807036976;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1408049090648476;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26835125623406175;  // std dev = 1,489, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5244897948940568;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.059920993081969534;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.22551020510594322;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.10496055991045017;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2015338067065884;  // std dev = 1,490, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.39497383862209295;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.045107135322949535;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16981135809686498;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22416612913093073;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10975106044271546;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07773947241586789;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.1523468881540845;  // std dev = 1,490, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3054610422067898;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.03390122869830803;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1291025481260104;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.05915907031088667;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10332637792800259;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.26439635314695303;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.025455986741768313;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.09818274550243677;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04444966314050499;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.457327
   AUC PR    = 0.303354
   CLL	      = -0.746759
   Precision = 0.335275 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.498803


Total learning time: 23.474 seconds
Total inference time: 6.061 seconds
AUC ROC: 0.457327


Refined model AUC ROC: 0.457327


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 00:40:23
{'Recall': 0.973731, 'AUC PR': 0.303354, 'F1': 0.498803, 'Mapping results': {'Knowledge compiling time': 0.0843515396118164, 'Total time': 2.684114933013916, 'Generating mappings time': 0.04496884346008301, 'Generating paths time': 2.554318428039551, 'Possible mappings': 6, 'Finding best mapping': 0.0004706382751464844}, 'CLL': -0.746759, 'AUC ROC': 0.457327, 'Precision': [0.335275, 0.5], 'Inference time': 6.061, 'Learning time': 32.369, 'Parameter Learning results': {'Recall': 1.0, 'AUC PR': 0.288412, 'F1': 0.50078, 'CLL': -0.749493, 'AUC ROC': 0.445862, 'Precision': [0.334027, 0.5], 'Inference time': 2.34, 'Learning time': 8.895}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.637634646666501;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.3749995821840918;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.310166091071622;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24455409068503994;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2933588196832311;  // std dev = 1,504, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5414617402943253;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.12441582961421462;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06900809544368272;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18642808416422202;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14219496756289499;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697104597704148;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08029681295397562;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13963431623214806;  // std dev = 1,504, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3307719117838479;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.013610457410299523;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1280391922130701;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.05912439972723248;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04536069184427188;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.456382
   AUC PR    = 0.300811
   CLL	      = -0.74695
   Precision = 0.336289 at threshold = 0.5
   Recall    = 0.979519
   F1        = 0.500683


Total learning time: 36.211 seconds
Total inference time: 4.416 seconds
AUC ROC: 0.456382


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 00:41:04
{'Recall': 0.979519, 'AUC PR': 0.300811, 'F1': 0.500683, 'CLL': -0.74695, 'AUC ROC': 0.456382, 'Precision': [0.336289, 0.5], 'Inference time': 4.416, 'Learning time': 36.211}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.1923816204071045
   Generating paths time   = 2.4657440185546875
   Generating mappings time   = 0.046170711517333984
   Possible mappings   = 6
   Finding best mapping   = 0.0004761219024658203
   Total time   = 2.704777956008911


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2129666434328407;  // std dev = 18,752, 1.536,000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else return 0.02178529873587505;  // std dev = 5,487, 220,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19017188756908057;  // std dev = 18,677, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else return 0.004853871026999256;  // std dev = 5,534, 241,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16094707942911704;  // std dev = 18,687, 1.517,000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else return 0.025491239152233197;  // std dev = 5,464, 211,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1466119449296904;  // std dev = 18,504, 1.466,000 (wgt'ed) examples reached here.  /* #neg=921 #pos=545 */
%   else return 0.016821508294729923;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1037624124680989;  // std dev = 18,742, 1.533,000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else return 0.020162546185387986;  // std dev = 5,464, 211,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07959229812302016;  // std dev = 18,801, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.006 #pos=545 */
%   else return 0.0034728462555451475;  // std dev = 5,510, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07095890535213298;  // std dev = 18,694, 1.519,000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else return 0.030173866451539556;  // std dev = 5,421, 196,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06416514992457041;  // std dev = 18,577, 1.486,000 (wgt'ed) examples reached here.  /* #neg=941 #pos=545 */
%   else return 0.013154673354930604;  // std dev = 5,464, 211,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038979357962936605;  // std dev = 18,745, 1.534,000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else return 0.010596810885359794;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038543198867774985;  // std dev = 18,627, 1.500,000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   else return -0.002047874135105248;  // std dev = 5,504, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.728101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.622 seconds
Total inference time: 1.849 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.752, 991, 545], 'false': [5.487, 184, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.677, 969, 545], 'false': [5.534, 205, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.687, 972, 545], 'false': [5.464, 175, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.504, 921, 545], 'false': [5.482, 182, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.742, 988, 545], 'false': [5.464, 175, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.801, 1006, 545], 'false': [5.51, 194, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.694, 974, 545], 'false': [5.421, 160, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.577, 941, 545], 'false': [5.464, 175, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.745, 989, 545], 'false': [5.467, 176, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.627, 955, 545], 'false': [5.504, 191, 36]}]]
[{'': [0.2289221021864011, 0.1368595041322325]}, {'': [0.2303926016797855, 0.12706392796267363]}, {'': [0.23019273111720637, 0.14150625547494294]}, {'': [0.2335544744076317, 0.13786718289706318]}, {'': [0.22912323746038307, 0.14150625547494414]}, {'': [0.2279139391777758, 0.13202268431002007]}, {'': [0.23005936218911335, 0.14993752603082167]}, {'': [0.23224614119398998, 0.1415062554749436]}, {'': [0.2290562121678144, 0.14097543609825566]}, {'': [0.2313222222222355, 0.13343942246113769]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2171739680375838;  // std dev = 0,480, 1.518,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.02161047356104994;  // std dev = 0,370, 208,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18558086669872692;  // std dev = 0,479, 1.531,000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else return 0.011006541404462626;  // std dev = 0,362, 232,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16267352626906295;  // std dev = 0,480, 1.510,000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else return 0.019501383762396393;  // std dev = 0,371, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13650350643188208;  // std dev = 0,481, 1.506,000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   else return 0.021047041898125996;  // std dev = 0,375, 213,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10939663758970428;  // std dev = 0,480, 1.516,000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04572976439054909;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.03410209320295645;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.008211057814215907;  // std dev = 0,366, 201,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06925096979958224;  // std dev = 0,474, 47,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | else return 0.09516892818939017;  // std dev = 0,482, 1.444,000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.020223720022848703;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058968760591487444;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.030808592535654315;  // std dev = 0,387, 175,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06927930726091201;  // std dev = 0,480, 1.516,000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.005519029697817483;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 1.2590164439693234E-4;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.002352424551300839;  // std dev = 0,365, 202,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02712737755973549;  // std dev = 0,469, 49,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | else return 0.06351648587879012;  // std dev = 0,482, 1.436,000 (wgt'ed) examples reached here.  /* #neg=907 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05097432382469362;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 1.1049574786221277E-4;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.015669510724265437;  // std dev = 0,377, 186,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04137621207503978;  // std dev = 0,480, 1.516,000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.055606396911527675;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 9.697384480917916E-5;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.009969269861314077;  // std dev = 0,374, 190,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04644656668822327;  // std dev = 0,484, 43,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else return 0.038906497226113806;  // std dev = 0,482, 1.445,000 (wgt'ed) examples reached here.  /* #neg=916 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.03079214612547659;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.01743798118122366;  // std dev = 0,381, 193,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=34 */


Results
   AUC ROC   = 0.545539
   AUC PR    = 0.489742
   CLL	      = -0.726819
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 16.779 seconds
Total inference time: 2.597 seconds
AUC ROC: 0.545539


Refined model AUC ROC: 0.545539


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 00:41:38
{'Recall': 0.0, 'AUC PR': 0.489742, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.1923816204071045, 'Total time': 2.704777956008911, 'Generating mappings time': 0.046170711517333984, 'Generating paths time': 2.4657440185546875, 'Possible mappings': 6, 'Finding best mapping': 0.0004761219024658203}, 'CLL': -0.726819, 'AUC ROC': 0.545539, 'Precision': [nan, 0.5], 'Inference time': 2.597, 'Learning time': 26.401, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.49112, 'F1': nan, 'CLL': -0.728101, 'AUC ROC': 0.547853, 'Precision': [nan, 0.5], 'Inference time': 1.849, 'Learning time': 9.622}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21741063582462272;  // std dev = 0,480, 1.517,000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else return 0.01744097049774153;  // std dev = 0,366, 226,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1855474085051631;  // std dev = 0,479, 1.531,000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.038724275434617636;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.02267923333731271;  // std dev = 0,373, 204,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16003096876181883;  // std dev = 0,480, 1.521,000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else return 0.01670346402752962;  // std dev = 0,369, 221,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14229397862962;  // std dev = 0,482, 1.484,000 (wgt'ed) examples reached here.  /* #neg=939 #pos=545 */
%   else return 0.010150053299830606;  // std dev = 0,365, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10829395685290105;  // std dev = 0,480, 1.518,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.039089783585053245;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 0.006430930714468109;  // std dev = 0,363, 218,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08412495469477407;  // std dev = 0,479, 1.532,000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009984911418021164;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return 0.0017261244357213428;  // std dev = 0,359, 223,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06763068349651181;  // std dev = 0,479, 1.530,000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021172823621779784;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.024569989937207465;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.012020266626725364;  // std dev = 0,370, 196,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542239613253573;  // std dev = 0,479, 1.522,000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03400719466505313;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 0.0072008692345944805;  // std dev = 0,366, 213,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04219276770247655;  // std dev = 0,479, 1.528,000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else return 0.005216762962055201;  // std dev = 0,365, 228,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return -0.01230171457245064;  // std dev = 0,440, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then return -0.031218026539216147;  // std dev = 0,420, 62,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.040243735095633455;  // std dev = 0,481, 1.418,000 (wgt'ed) examples reached here.  /* #neg=902 #pos=516 */
%   | | else return 0.014903229339245531;  // std dev = 0,375, 189,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=32 */


Results
   AUC ROC   = 0.545618
   AUC PR    = 0.489802
   CLL	      = -0.729651
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 20.819 seconds
Total inference time: 2.104 seconds
AUC ROC: 0.545618


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 00:42:02
{'Recall': 0.0, 'AUC PR': 0.489802, 'F1': nan, 'CLL': -0.729651, 'AUC ROC': 0.545618, 'Precision': [nan, 0.5], 'Inference time': 2.104, 'Learning time': 20.819}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.11701178550720215
   Generating paths time   = 2.582690477371216
   Generating mappings time   = 0.04620170593261719
   Possible mappings   = 6
   Finding best mapping   = 0.000476837158203125
   Total time   = 2.7463862895965576


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.018 seconds
Total inference time: 2.07 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8198971323208211;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.18010286767917896;  // std dev = 1,18e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6198971323208211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24401230928544115;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20673899513831911;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1693084233437465;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1357050208623199;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6643967196489688;  // std dev = 0,127, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3186710259089181;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4640307322832973;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.10502195026953681;  // std dev = 0,493, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08322594082923927;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06426148833575103;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.049314790298708604;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03768188465885338;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.564462
   AUC PR    = 0.420874
   CLL	      = -0.640866
   Precision = 0.873684 at threshold = 0.5
   Recall    = 0.036564
   F1        = 0.07019


Total learning time: 22.058 seconds
Total inference time: 3.155 seconds
AUC ROC: 0.564462


Refined model AUC ROC: 0.564462


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 00:42:45
{'Recall': 0.036564, 'AUC PR': 0.420874, 'F1': 0.07019, 'Mapping results': {'Knowledge compiling time': 0.11701178550720215, 'Total time': 2.7463862895965576, 'Generating mappings time': 0.04620170593261719, 'Generating paths time': 2.582690477371216, 'Possible mappings': 6, 'Finding best mapping': 0.000476837158203125}, 'CLL': -0.640866, 'AUC ROC': 0.564462, 'Precision': [0.873684, 0.5], 'Inference time': 3.155, 'Learning time': 34.076, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.39269, 'F1': nan, 'CLL': -0.643296, 'AUC ROC': 0.554206, 'Precision': [nan, 0.5], 'Inference time': 2.07, 'Learning time': 12.018}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8198971323208211;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.18010286767917896;  // std dev = 1,18e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6198971323208211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24401230928544115;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7668009019665657;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2189769140432643;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.566833684824225;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2047588167707237;  // std dev = 0,493, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1691765661872623;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13561540380976456;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692770341266108;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08328719011524384;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.48491890870179416;  // std dev = 0,131, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.26010951567324336;  // std dev = 0,073, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3335210284956137;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.06288727160600388;  // std dev = 0,493, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   | else return 0.028236411838479056;  // std dev = 0,415, 127,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0492581206670111;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022416439790203455;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03765359191152935;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01885563964213209;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.564264
   AUC PR    = 0.415081
   CLL	      = -0.640744
   Precision = 0.554404 at threshold = 0.5
   Recall    = 0.047137
   F1        = 0.086886


Total learning time: 30.483 seconds
Total inference time: 3.203 seconds
AUC ROC: 0.564264


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 00:43:19
{'Recall': 0.047137, 'AUC PR': 0.415081, 'F1': 0.086886, 'CLL': -0.640744, 'AUC ROC': 0.564264, 'Precision': [0.554404, 0.5], 'Inference time': 3.203, 'Learning time': 30.483}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.09105181694030762
   Generating paths time   = 2.583223581314087
   Generating mappings time   = 0.04634737968444824
   Possible mappings   = 6
   Finding best mapping   = 0.0004680156707763672
   Total time   = 2.721095561981201


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 20.218 seconds
Total inference time: 2.483 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,973, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.15444523139580865;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.7474809064030066;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.2782230657358341;  // std dev = 2,771, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.04627746233457826;  // std dev = 1,927, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.39710918051048366;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6382893592786268;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1617106407213732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.1617106407213732;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13097228610789485;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.07259080244766883;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.4622072786904688;  // std dev = 0,280, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.22863415479526997;  // std dev = 2,287, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.02857998784711886;  // std dev = 1,719, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.32564856579256024;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6273809364020053;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16936950787253396;  // std dev = 0,020, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.165768774046206;  // std dev = 0,018, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11703130509468601;  // std dev = 2,887, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.060184984647794;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5974422699296146;  // std dev = 0,995, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.31961981176265514;  // std dev = 0,068, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1628448329613874;  // std dev = 1,151, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.4869963239657302;  // std dev = 0,902, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.12133032478406934;  // std dev = 0,411, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.2662110583382696;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.18416407400769857;  // std dev = 0,437, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08477223389192096;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05135426252718943;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1905934505753987;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5072151771228604;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15434097050257733;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15210011610972032;  // std dev = 0,020, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08981406711714422;  // std dev = 2,882, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.003324929599177584;  // std dev = 0,759, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1073904455308331;  // std dev = 2,939, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.020014710351289988;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07124610717851333;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.11578421982447946;  // std dev = 2,192, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.03604337793494253;  // std dev = 1,693, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.1566017307998963;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.12871256368842968;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.060731511011927856;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.0028114790603800733;  // std dev = 0,759, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08915218509387861;  // std dev = 2,937, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017132840997254085;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05545869880028249;  // std dev = 0,382, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.11286125736980772;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.36131434860154477;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15102780902125298;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.14069871911062284;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06445472597777073;  // std dev = 2,880, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0023765435772600263;  // std dev = 0,758, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07318606880032368;  // std dev = 2,936, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.014636032593790342;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05571825782080663;  // std dev = 0,374, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0029082092967215355;  // std dev = 0,403, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.08934709520927377;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.06936599966419267;  // std dev = 0,348, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.12454628986689381;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05293798227804695;  // std dev = 2,879, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.09539734332678275;  // std dev = 1,207, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.04440717723678465;  // std dev = 2,780, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012481177338658755;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2843907350781093;  // std dev = 0,060, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.0037846664875398044;  // std dev = 0,391, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.06304489466670968;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.056660902678370505;  // std dev = 0,346, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.11159964340567256;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04318638288749435;  // std dev = 2,878, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0765663916896826;  // std dev = 1,201, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03611702825241255;  // std dev = 2,780, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.010627586970839192;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.15168306848002774;  // std dev = 0,184, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.042705537163658366;  // std dev = 2,179, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.09921681036434635;  // std dev = 1,716, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.048776179785276194;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.046167789156860005;  // std dev = 0,344, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.025761555834853823;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.020621502060821185;  // std dev = 0,741, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.041510012864379844;  // std dev = 2,932, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.009037644694630944;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.544845
   AUC PR    = 0.379076
   CLL	      = -0.709641
   Precision = 0.379987 at threshold = 0.5
   Recall    = 0.934333
   F1        = 0.540255


Total learning time: 27.83 seconds
Total inference time: 6.385 seconds
AUC ROC: 0.544845


Refined model AUC ROC: 0.544845


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 00:44:19
{'Recall': 0.934333, 'AUC PR': 0.379076, 'F1': 0.540255, 'Mapping results': {'Knowledge compiling time': 0.09105181694030762, 'Total time': 2.721095561981201, 'Generating mappings time': 0.04634737968444824, 'Generating paths time': 2.583223581314087, 'Possible mappings': 6, 'Finding best mapping': 0.0004680156707763672}, 'CLL': -0.709641, 'AUC ROC': 0.544845, 'Precision': [0.379987, 0.5], 'Inference time': 6.385, 'Learning time': 48.048, 'Parameter Learning results': {'Recall': 0.952169, 'AUC PR': 0.374863, 'F1': 0.538514, 'CLL': -0.702177, 'AUC ROC': 0.543975, 'Precision': [0.37542, 0.5], 'Inference time': 2.483, 'Learning time': 20.218}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.29509450923344677;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.3087411357856347;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.1058893024861437;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802537;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195342;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.24572761349189018;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.08165239320886163;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3228522750581093;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6118300905303702;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1881699094696298;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.17041876548708698;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12279186044498233;  // std dev = 2,912, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.06059859802209346;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.1801561679289663;  // std dev = 2,763, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.024150040920605752;  // std dev = 1,946, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2144626696670033;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.08306691748524349;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.2615604204827223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.20014764979329724;  // std dev = 0,489, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09253097679091994;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.048839363177153136;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.14087533955040024;  // std dev = 2,762, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.0199042835271335;  // std dev = 1,946, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.1952817823335753;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5662287712617846;  // std dev = 0,890, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.23377122873821551;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07849656923545013;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04166110742218245;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.10224508326735691;  // std dev = 2,793, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.014826616337707706;  // std dev = 1,891, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.1476960304989083;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4776874327258664;  // std dev = 0,888, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17613465270818268;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06964855117001495;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.08992503839195971;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009917167659714484;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.07543296887191928;  // std dev = 2,778, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.04204694009754148;  // std dev = 1,906, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.11188120425381193;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.016411591465560996;  // std dev = 0,312, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07608036752505656;  // std dev = 0,446, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.0898204858760916;  // std dev = 1,203, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07132874434444131;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.008429367444559762;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08228217059949716;  // std dev = 0,482, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35320782762783165;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1572682091144056;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17528234221824077;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.061942245679618334;  // std dev = 2,883, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.05758325919550369;  // std dev = 0,751, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07563374413488148;  // std dev = 2,934, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.007157430001758399;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.062170775908091676;  // std dev = 0,482, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.18815833073903415;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2277639034770092;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.06403974009749448;  // std dev = 0,981, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04455987592349958;  // std dev = 2,842, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.042133334236744605;  // std dev = 1,005, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05880132289773295;  // std dev = 2,780, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.006072117279384136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047046456878841264;  // std dev = 0,482, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.25462082441882794;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1426706374151126;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.15841452704556788;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03994466639550825;  // std dev = 2,873, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.015880528744287505;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.544533
   AUC PR    = 0.378061
   CLL	      = -0.709941
   Precision = 0.375166 at threshold = 0.5
   Recall    = 0.914876
   F1        = 0.532123


Total learning time: 35.024 seconds
Total inference time: 6.252 seconds
AUC ROC: 0.544533


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 00:45:01
{'Recall': 0.914876, 'AUC PR': 0.378061, 'F1': 0.532123, 'CLL': -0.709941, 'AUC ROC': 0.544533, 'Precision': [0.375166, 0.5], 'Inference time': 6.252, 'Learning time': 35.024}


Starting experiment #4 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,37e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1418510649004891;  // std dev = 0,000, 712,000 (wgt'ed) examples reached here.  /* #neg=712 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839235;  // std dev = 0,000, 710,000 (wgt'ed) examples reached here.  /* #neg=710 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360697;  // std dev = 0,000, 768,000 (wgt'ed) examples reached here.  /* #neg=768 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783624;  // std dev = 2,79e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783509;  // std dev = 4,63e-07, 738,000 (wgt'ed) examples reached here.  /* #neg=738 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926197;  // std dev = 0,000, 684,000 (wgt'ed) examples reached here.  /* #neg=684 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.08518475138839675;  // std dev = 1,26e-07, 702,000 (wgt'ed) examples reached here.  /* #neg=702 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109166;  // std dev = 3,80e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.07877675473109289;  // std dev = 0,000, 738,000 (wgt'ed) examples reached here.  /* #neg=738 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.07324622576333668;  // std dev = 1,90e-07, 650,000 (wgt'ed) examples reached here.  /* #neg=650 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 2,47e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420257;  // std dev = 1,46e-07, 711,000 (wgt'ed) examples reached here.  /* #neg=711 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06419184008202529;  // std dev = 2,23e-07, 718,000 (wgt'ed) examples reached here.  /* #neg=718 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.14811921119689941
   Generating paths time   = 2.4426920413970947
   Generating mappings time   = 0.0437161922454834
   Possible mappings   = 6
   Finding best mapping   = 0.00047969818115234375
   Total time   = 2.635011911392212


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 7.349 seconds
Total inference time: 2.144 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23314893509951226;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.24703782398839647;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.008939672495424532;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231107442984;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190219902398689;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18108346735311384;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.007202785323176992;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14971133009076293;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013914797721872551;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.01297115753151067;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.005581464388539177;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142565513679902;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.011435663496309968;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.012258692432086871;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.004915168274519412;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09698165027320635;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.010813478056243098;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004622446637218298;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654415891418319;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004338878860760449;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.046848791007505934;  // std dev = 0,485, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.0599938900081508;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.009044867080427066;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.009050242474122349;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.003270263902063387;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652706025382141;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.008003158334633054;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.003143924560203799;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597779342498481;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002982422412663183;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.54482
   AUC PR    = 0.402484
   CLL	      = -0.657968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 14.112 seconds
Total inference time: 2.713 seconds
AUC ROC: 0.54482


Refined model AUC ROC: 0.54482


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 00:56:51
{'Recall': 0.0, 'AUC PR': 0.402484, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.14811921119689941, 'Total time': 2.635011911392212, 'Generating mappings time': 0.0437161922454834, 'Generating paths time': 2.4426920413970947, 'Possible mappings': 6, 'Finding best mapping': 0.00047969818115234375}, 'CLL': -0.657968, 'AUC ROC': 0.54482, 'Precision': [nan, 0.5], 'Inference time': 2.713, 'Learning time': 21.461, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.4025, 'F1': nan, 'CLL': -0.657894, 'AUC ROC': 0.544977, 'Precision': [nan, 0.5], 'Inference time': 2.144, 'Learning time': 7.349}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.015720215771076185;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.007808823366012659;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.01477863462100374;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006819213754869622;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013016798821271259;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.013011085062868511;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.005627367516772922;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.01147051163985301;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.005285547184749942;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08321762930485788;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.09710651819375278;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.010853792955263897;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004620317812442128;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654410164892803;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.009585334746586505;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.004073152923833274;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.059875685593971474;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.003827542254960132;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046527106945944016;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.003377424376562922;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597782454839819;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0029812807547791535;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.543974
   AUC PR    = 0.401971
   CLL	      = -0.657944
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 17.452 seconds
Total inference time: 2.336 seconds
AUC ROC: 0.543974


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 00:57:11
{'Recall': 0.0, 'AUC PR': 0.401971, 'F1': nan, 'CLL': -0.657944, 'AUC ROC': 0.543974, 'Precision': [nan, 0.5], 'Inference time': 2.336, 'Learning time': 17.452}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.19581818580627441
   Generating paths time   = 2.475534439086914
   Generating mappings time   = 0.04514932632446289
   Possible mappings   = 6
   Finding best mapping   = 0.00045990943908691406
   Total time   = 2.7169673442840576


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 25.165 seconds
Total inference time: 2.386 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2469412934675934;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4969412934675934;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return -0.0030587065324065854;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2530587065324066;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07831781168622158;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0601901808633252;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045207589489153266;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.449754
   AUC PR    = 0.292844
   CLL	      = -0.748513
   Precision = 0.335142 at threshold = 0.5
   Recall    = 0.98976
   F1        = 0.500732


Total learning time: 14.449 seconds
Total inference time: 2.911 seconds
AUC ROC: 0.449754


Refined model AUC ROC: 0.449754


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 00:58:00
{'Recall': 0.98976, 'AUC PR': 0.292844, 'F1': 0.500732, 'Mapping results': {'Knowledge compiling time': 0.19581818580627441, 'Total time': 2.7169673442840576, 'Generating mappings time': 0.04514932632446289, 'Generating paths time': 2.475534439086914, 'Possible mappings': 6, 'Finding best mapping': 0.00045990943908691406}, 'CLL': -0.748513, 'AUC ROC': 0.449754, 'Precision': [0.335142, 0.5], 'Inference time': 2.911, 'Learning time': 39.614, 'Parameter Learning results': {'Recall': 1.0, 'AUC PR': 0.288412, 'F1': 0.50078, 'CLL': -0.749493, 'AUC ROC': 0.445862, 'Precision': [0.334027, 0.5], 'Inference time': 2.386, 'Learning time': 25.165}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.10044268112546312;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.5034859593139709;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.0886193038439238;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.2949382508597063;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2932939459978594;  // std dev = 1,504, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5413968142097683;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06906490682644309;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18641542858905658;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21094768407303122;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2656806696095375;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.45553205323393936;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12170106649041106;  // std dev = 0,883, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1494046841940307;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1406956730389668;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17051241532383873;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.182721338796867;  // std dev = 1,499, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.37375871087139917;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08482510781250396;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1059044231166785;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11742711821392408;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08038650843036785;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0886237927895699;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060386428380007504;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06722196870787724;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.10566153127823101;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.26295675872906527;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.01909990643670724;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.16528948611392907;  // std dev = 0,970, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1473985687086865;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.04442208785274978;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06549312843148788;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */


Results
   AUC ROC   = 0.462956
   AUC PR    = 0.302426
   CLL	      = -0.745011
   Precision = 0.336852 at threshold = 0.5
   Recall    = 0.966162
   F1        = 0.49954


Total learning time: 26.181 seconds
Total inference time: 4.353 seconds
AUC ROC: 0.462956


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 00:58:30
{'Recall': 0.966162, 'AUC PR': 0.302426, 'F1': 0.49954, 'CLL': -0.745011, 'AUC ROC': 0.462956, 'Precision': [0.336852, 0.5], 'Inference time': 4.353, 'Learning time': 26.181}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.21246910095214844
   Generating paths time   = 2.4548420906066895
   Generating mappings time   = 0.045075416564941406
   Possible mappings   = 6
   Finding best mapping   = 0.0004744529724121094
   Total time   = 2.7128653526306152


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21693761186053437;  // std dev = 18,694, 1.519,000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else return 0.02328654977841049;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19443029301992457;  // std dev = 18,606, 1.494,000 (wgt'ed) examples reached here.  /* #neg=949 #pos=545 */
%   else return 0.01388087736710763;  // std dev = 5,504, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1641921996997528;  // std dev = 18,620, 1.498,000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   else return 0.010769305297568265;  // std dev = 5,508, 229,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13116084138074613;  // std dev = 18,701, 1.521,000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else return 0.01735046605245717;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10243578050180416;  // std dev = 18,772, 1.542,000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else return 0.006535986203035225;  // std dev = 5,510, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0861634243216383;  // std dev = 18,721, 1.527,000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else return 0.018193150863185573;  // std dev = 5,470, 213,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06999173459745844;  // std dev = 18,704, 1.522,000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else return 0.018262736854108327;  // std dev = 5,462, 210,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04827897028446078;  // std dev = 18,808, 1.553,000 (wgt'ed) examples reached here.  /* #neg=1.008 #pos=545 */
%   else return 0.0058853221286105945;  // std dev = 5,494, 223,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.040955888576671526;  // std dev = 18,765, 1.540,000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else return 1.9745522041065568E-4;  // std dev = 5,510, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03162427498697732;  // std dev = 18,772, 1.542,000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else return 0.013460993300365392;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.731197
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.875 seconds
Total inference time: 2.125 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.694, 974, 545], 'false': [5.482, 182, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.606, 949, 545], 'false': [5.504, 191, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.62, 953, 545], 'false': [5.508, 193, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.701, 976, 545], 'false': [5.482, 182, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.772, 997, 545], 'false': [5.51, 194, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.721, 982, 545], 'false': [5.47, 177, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.704, 977, 545], 'false': [5.462, 174, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.808, 1008, 545], 'false': [5.494, 187, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.765, 995, 545], 'false': [5.51, 194, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.772, 997, 545], 'false': [5.467, 176, 36]}]]
[{'': [0.23005936218908463, 0.13786718289706365]}, {'': [0.2317189328487671, 0.13343942246113688]}, {'': [0.2314545785123361, 0.13249175263629706]}, {'': [0.22992589826152127, 0.1378671828970619]}, {'': [0.2285193147848017, 0.13202268431001965]}, {'': [0.229524957660179, 0.14044832374528932]}, {'': [0.22985913133868907, 0.14204081632652962]}, {'': [0.22777923127413222, 0.1353737255927116]}, {'': [0.22865365154326442, 0.13202268431001848]}, {'': [0.22851931478483103, 0.1409754360982566]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21482432776966442;  // std dev = 0,479, 1.528,000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.015556342506918919;  // std dev = 0,364, 216,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13182306339460967;  // std dev = 0,459, 53,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | else return 0.18809470019027238;  // std dev = 0,479, 1.477,000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   else return 0.018673291978960047;  // std dev = 0,369, 222,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1305138675649372;  // std dev = 0,466, 50,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else return 0.1650444501129859;  // std dev = 0,481, 1.456,000 (wgt'ed) examples reached here.  /* #neg=927 #pos=529 */
%   else return 0.014161770722616013;  // std dev = 0,367, 225,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.12298694471790024;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0.08510815683911271;  // std dev = 0,456, 44,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.07650039585697614;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.13350629078473786;  // std dev = 0,480, 1.436,000 (wgt'ed) examples reached here.  /* #neg=920 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -9.508043574843235E-4;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.052606326824129676;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return 0.02606862141603636;  // std dev = 0,379, 184,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1088960469361785;  // std dev = 0,479, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010155236886953845;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03607560149743385;  // std dev = 0,307, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return 0.01045720610220057;  // std dev = 0,368, 198,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08148723273031834;  // std dev = 0,477, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.006 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.002087840357517682;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.016829217303816594;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return -0.0022708772935817493;  // std dev = 0,357, 213,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0606720037933397;  // std dev = 0,476, 1.571,000 (wgt'ed) examples reached here.  /* #neg=1.026 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.02703935771311267;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.01695355930095334;  // std dev = 0,374, 202,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05388002992971322;  // std dev = 0,478, 1.545,000 (wgt'ed) examples reached here.  /* #neg=1.000 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.030261166218915534;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 0.009224705491362933;  // std dev = 0,369, 209,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07233778312228502;  // std dev = 0,478, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | else return 0.051014492629108836;  // std dev = 0,481, 1.461,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.03107100935253361;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 6.096827692756071E-4;  // std dev = 0,362, 219,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03711294443245303;  // std dev = 0,480, 1.520,000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else return 0.0038793413426096643;  // std dev = 0,364, 229,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=36 */


Results
   AUC ROC   = 0.545579
   AUC PR    = 0.48979
   CLL	      = -0.731224
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 19.045 seconds
Total inference time: 2.717 seconds
AUC ROC: 0.545579


Refined model AUC ROC: 0.545579


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 00:59:08
{'Recall': 0.0, 'AUC PR': 0.48979, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.21246910095214844, 'Total time': 2.7128653526306152, 'Generating mappings time': 0.045075416564941406, 'Generating paths time': 2.4548420906066895, 'Possible mappings': 6, 'Finding best mapping': 0.0004744529724121094}, 'CLL': -0.731224, 'AUC ROC': 0.545579, 'Precision': [nan, 0.5], 'Inference time': 2.717, 'Learning time': 28.92, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.49112, 'F1': nan, 'CLL': -0.731197, 'AUC ROC': 0.547853, 'Precision': [nan, 0.5], 'Inference time': 2.125, 'Learning time': 9.875}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2219673596655955;  // std dev = 0,481, 1.498,000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   else return 0.016043671941616714;  // std dev = 0,365, 228,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18583468323147348;  // std dev = 0,479, 1.527,000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else return 0.010030858964229554;  // std dev = 0,361, 234,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.17594290266383578;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.07177623599716944;  // std dev = 0,444, 48,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | else return 0.15934398667468722;  // std dev = 0,480, 1.476,000 (wgt'ed) examples reached here.  /* #neg=947 #pos=529 */
%   else return 0.024756483282155666;  // std dev = 0,375, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12880302944877894;  // std dev = 0,478, 1.539,000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005694109979770161;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return 0.04613367041933141;  // std dev = 0,396, 175,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11140057023317178;  // std dev = 0,480, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else return 0.0020898837013680334;  // std dev = 0,363, 231,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11627813972305014;  // std dev = 0,482, 43,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05461110223250003;  // std dev = 0,468, 40,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.08944373821577231;  // std dev = 0,480, 1.434,000 (wgt'ed) examples reached here.  /* #neg=918 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.006279957367625052;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.011484683748157783;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.00565817339469967;  // std dev = 0,367, 200,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08084377113798423;  // std dev = 0,482, 1.478,000 (wgt'ed) examples reached here.  /* #neg=933 #pos=545 */
%   else return 0.013803141017244868;  // std dev = 0,374, 214,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2854493602963493;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.011598190063915768;  // std dev = 0,462, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.016987230402121186;  // std dev = 0,462, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.053320028527053684;  // std dev = 0,480, 1.439,000 (wgt'ed) examples reached here.  /* #neg=923 #pos=516 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.007237135512436702;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.02131134187039651;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.007203516809849541;  // std dev = 0,370, 195,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0494973598627295;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.04174802559788398;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | else return 0.04873870471742231;  // std dev = 0,481, 1.450,000 (wgt'ed) examples reached here.  /* #neg=921 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.03423205025468656;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.006316259153647593;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.007948811001937731;  // std dev = 0,372, 193,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10920764764050062;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.03260697820636656;  // std dev = 0,447, 47,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | else return 0.030375631305943958;  // std dev = 0,479, 1.481,000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.02252196461457475;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.023373513131793887;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return 0.00862540747877011;  // std dev = 0,373, 191,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=32 */


Results
   AUC ROC   = 0.55072
   AUC PR    = 0.501091
   CLL	      = -0.72805
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 33.976 seconds
Total inference time: 3.288 seconds
AUC ROC: 0.55072


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 00:59:45
{'Recall': 0.0, 'AUC PR': 0.501091, 'F1': nan, 'CLL': -0.72805, 'AUC ROC': 0.55072, 'Precision': [nan, 0.5], 'Inference time': 3.288, 'Learning time': 33.976}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.07848572731018066
   Generating paths time   = 2.4635472297668457
   Generating mappings time   = 0.04479336738586426
   Possible mappings   = 6
   Finding best mapping   = 0.0004870891571044922
   Total time   = 2.5873184204101562


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.39 seconds
Total inference time: 2.197 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6114787713542363;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3885212286457636;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4114787713542364;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.03559394831885097;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.560389
   AUC PR    = 0.411766
   CLL	      = -0.642013
   Precision = 0.947368 at threshold = 0.5
   Recall    = 0.015859
   F1        = 0.031196


Total learning time: 17.845 seconds
Total inference time: 2.586 seconds
AUC ROC: 0.560389


Refined model AUC ROC: 0.560389


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 01:00:24
{'Recall': 0.015859, 'AUC PR': 0.411766, 'F1': 0.031196, 'Mapping results': {'Knowledge compiling time': 0.07848572731018066, 'Total time': 2.5873184204101562, 'Generating mappings time': 0.04479336738586426, 'Generating paths time': 2.4635472297668457, 'Possible mappings': 6, 'Finding best mapping': 0.0004870891571044922}, 'CLL': -0.642013, 'AUC ROC': 0.560389, 'Precision': [0.947368, 0.5], 'Inference time': 2.586, 'Learning time': 30.235, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.39269, 'F1': nan, 'CLL': -0.643296, 'AUC ROC': 0.554206, 'Precision': [nan, 0.5], 'Inference time': 2.197, 'Learning time': 12.39}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8198971323208211;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.18010286767917896;  // std dev = 1,18e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6198971323208211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24401230928544115;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20673899513831917;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1693084233437465;  // std dev = 0,494, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1357050208623199;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698056984977039;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08331174730902055;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0643150189146492;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4823557798153254;  // std dev = 3,33e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2830477152223541;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.33230339229609046;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.04781420029141378;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.36517748080458845;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.22560318314355027;  // std dev = 0,027, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.24944593566112258;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.03652767196300384;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   | else return 0.0205323405293571;  // std dev = 0,415, 127,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */


Results
   AUC ROC   = 0.560961
   AUC PR    = 0.411916
   CLL	      = -0.642202
   Precision = 0.46875 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.061728


Total learning time: 27.9 seconds
Total inference time: 3.111 seconds
AUC ROC: 0.560961


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 01:00:55
{'Recall': 0.03304, 'AUC PR': 0.411916, 'F1': 0.061728, 'CLL': -0.642202, 'AUC ROC': 0.560961, 'Precision': [0.46875, 0.5], 'Inference time': 3.111, 'Learning time': 27.9}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.09324765205383301
   Generating paths time   = 2.458242177963257
   Generating mappings time   = 0.04485273361206055
   Possible mappings   = 6
   Finding best mapping   = 0.0004706382751464844
   Total time   = 2.596818685531616


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 13.529 seconds
Total inference time: 2.324 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3888659278385547;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15436515246372265;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13877718541034842;  // std dev = 2,912, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.030823778666540985;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15637051244554845;  // std dev = 2,977, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6778502345572616;  // std dev = 0,968, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.26324010990297575;  // std dev = 0,066, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.10483050446749763;  // std dev = 1,267, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.6323428870153838;  // std dev = 0,906, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.24134771529915794;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.047275841450109525;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.3353516846825268;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12126466931070977;  // std dev = 0,445, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.06040834211578666;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6208114646615492;  // std dev = 0,984, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3073597700932152;  // std dev = 0,003, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.11861000795995658;  // std dev = 1,168, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.546447208810435;  // std dev = 0,899, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.12316512145119644;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26286283221169976;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.19459179504773777;  // std dev = 0,489, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08282674687712843;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.051825826126072595;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.13885208508778435;  // std dev = 0,392, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.1942053154321595;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5071001290615847;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15693622042635713;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.15823613513753393;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09203467851931774;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.13933275904190795;  // std dev = 1,368, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08780413963932077;  // std dev = 2,792, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.019896389328593847;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1441025715948874;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5342858155375714;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2609020847164597;  // std dev = 0,026, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.20625883841258252;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07355097759012925;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.08569067620601893;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.017030124437526894;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07782155225441331;  // std dev = 0,385, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02556464552502241;  // std dev = 0,401, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.11692560064544237;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.11242584574340782;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.14828351884514945;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06251694823251161;  // std dev = 2,877, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.07886852050639537;  // std dev = 1,201, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06281195953451743;  // std dev = 2,784, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.014547231740019703;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3859066940730944;  // std dev = 0,983, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3194752162052404;  // std dev = 0,003, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.04076982918466293;  // std dev = 0,377, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.08349921181700012;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.09122252471747322;  // std dev = 0,379, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03889929457400886;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.03108712528573105;  // std dev = 0,733, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06388764287052244;  // std dev = 2,933, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01240467956040858;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3733100803436699;  // std dev = 1,000, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3218018881424255;  // std dev = 0,010, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.009346470629523537;  // std dev = 0,372, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.06305319236555008;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.0734865893934603;  // std dev = 0,376, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03191521193175439;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.05622972830525694;  // std dev = 1,195, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.040596501315229384;  // std dev = 2,781, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.010561887913804007;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.0016068462471333495;  // std dev = 0,334, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return 0.08938312702491702;  // std dev = 0,354, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else return 0.04758592901756394;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.30351168022897024;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18575085946636724;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.026080464320585497;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.03452822840556259;  // std dev = 0,730, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04340704876573983;  // std dev = 2,931, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008981366294877637;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.560599
   AUC PR    = 0.405922
   CLL	      = -0.708243
   Precision = 0.379987 at threshold = 0.5
   Recall    = 0.934333
   F1        = 0.540255


Total learning time: 27.94 seconds
Total inference time: 6.614 seconds
AUC ROC: 0.560599


Refined model AUC ROC: 0.560599


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 01:01:49
{'Recall': 0.934333, 'AUC PR': 0.405922, 'F1': 0.540255, 'Mapping results': {'Knowledge compiling time': 0.09324765205383301, 'Total time': 2.596818685531616, 'Generating mappings time': 0.04485273361206055, 'Generating paths time': 2.458242177963257, 'Possible mappings': 6, 'Finding best mapping': 0.0004706382751464844}, 'CLL': -0.708243, 'AUC ROC': 0.560599, 'Precision': [0.379987, 0.5], 'Inference time': 6.614, 'Learning time': 41.469, 'Parameter Learning results': {'Recall': 0.952169, 'AUC PR': 0.374863, 'F1': 0.538514, 'CLL': -0.702177, 'AUC ROC': 0.543975, 'Precision': [0.37542, 0.5], 'Inference time': 2.324, 'Learning time': 13.529}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.27737164896836203;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.04350068122642711;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.29350068122642653;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.056658575963269224;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4105805710335841;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.23751165111095784;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10992892384012874;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07238614830967717;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6347517234722438;  // std dev = 4,21e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2282368765330061;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.036281745594709314;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3245842321955653;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5430537902000985;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13448480875918262;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10245086441356127;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06048848070981057;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.47948773916480103;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.18245174624789132;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.030121551881160735;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.25491460163810087;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5914026120378448;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20859738796215513;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.1889383658804832;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10283971778908703;  // std dev = 2,864, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05090568619887992;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.36318129588137965;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.10512379790522651;  // std dev = 2,759, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08017728540877567;  // std dev = 1,938, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.19928015661313037;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.14308952009679982;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07848553412293263;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.0014900499334771443;  // std dev = 0,757, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10628619838366385;  // std dev = 2,939, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02006473410254734;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.28398816025149015;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.08017942677413296;  // std dev = 2,758, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.0626931804386585;  // std dev = 1,938, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.10599594243606635;  // std dev = 2,777, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.03129265622647904;  // std dev = 1,854, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.1561992060937166;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.026094531912879537;  // std dev = 0,315, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.0840988276308292;  // std dev = 0,446, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.03487274421360672;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10879207695206028;  // std dev = 0,483, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.36305470516966676;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14901829900733957;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.17063756665282256;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06876277714499837;  // std dev = 2,880, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.10721460417950361;  // std dev = 1,210, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0653506967456934;  // std dev = 2,784, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012066012721048059;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.21122713278352645;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.034158935404738175;  // std dev = 2,757, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07268480094042704;  // std dev = 1,938, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08620896555488256;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.42662941811444705;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2078147870581352;  // std dev = 0,020, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03451042473628893;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.05889173282592652;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.010271113669890721;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1781734974842688;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.02369104084541446;  // std dev = 2,772, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.09561192134993933;  // std dev = 1,903, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.06486653635106189;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.007028426077435958;  // std dev = 0,263, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.042119584163258506;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.02943078397910005;  // std dev = 0,642, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05749537766038759;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008732348588873319;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.15356038039969713;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.020857657262112438;  // std dev = 2,712, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07844616916969037;  // std dev = 1,974, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.04974888159579575;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.056185032037174065;  // std dev = 0,346, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.15522143371942906;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.037190350542583954;  // std dev = 2,857, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.038798799117374314;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.007416238618560128;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.54474
   AUC PR    = 0.378417
   CLL	      = -0.709344
   Precision = 0.375104 at threshold = 0.5
   Recall    = 0.914876
   F1        = 0.53206


Total learning time: 28.054 seconds
Total inference time: 6.39 seconds
AUC ROC: 0.54474


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 01:02:24
{'Recall': 0.914876, 'AUC PR': 0.378417, 'F1': 0.53206, 'CLL': -0.709344, 'AUC ROC': 0.54474, 'Precision': [0.375104, 0.5], 'Inference time': 6.39, 'Learning time': 28.054}


Starting experiment #5 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048904;  // std dev = 0,000, 701,000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839233;  // std dev = 0,000, 636,000 (wgt'ed) examples reached here.  /* #neg=636 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360656;  // std dev = 0,000, 696,000 (wgt'ed) examples reached here.  /* #neg=696 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1015963294878362;  // std dev = 4,08e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783513;  // std dev = 4,47e-07, 719,000 (wgt'ed) examples reached here.  /* #neg=719 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.09269127618926204;  // std dev = 0,000, 712,000 (wgt'ed) examples reached here.  /* #neg=712 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.08518475138839675;  // std dev = 1,33e-07, 682,000 (wgt'ed) examples reached here.  /* #neg=682 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07877675473109276;  // std dev = 0,000, 702,000 (wgt'ed) examples reached here.  /* #neg=702 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07324622576333656;  // std dev = 2,26e-07, 664,000 (wgt'ed) examples reached here.  /* #neg=664 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 2,24e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06842697784420262;  // std dev = 1,79e-07, 736,000 (wgt'ed) examples reached here.  /* #neg=736 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06419184008202532;  // std dev = 2,53e-07, 717,000 (wgt'ed) examples reached here.  /* #neg=717 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.06559562683105469
   Generating paths time   = 2.433474063873291
   Generating mappings time   = 0.04320168495178223
   Possible mappings   = 6
   Finding best mapping   = 0.0004782676696777344
   Total time   = 2.5427544116973877


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 7.016 seconds
Total inference time: 2.618 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.543, 544, 346], 'false': [4.369, 144, 22]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.008939672495424532;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.014812149378556561;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.007854932333985694;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.014818939670846278;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.013040256218347378;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.006485606337512788;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006340047823149142;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.00558360820304623;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004920288695385921;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337991618806369;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.010545009515729797;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.003486143875747357;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.003376654460269072;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002980601935584446;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544838
   AUC PR    = 0.402465
   CLL	      = -0.657918
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.855 seconds
Total inference time: 2.386 seconds
AUC ROC: 0.544838


Refined model AUC ROC: 0.544838


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 01:14:59
{'Recall': 0.0, 'AUC PR': 0.402465, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.06559562683105469, 'Total time': 2.5427544116973877, 'Generating mappings time': 0.04320168495178223, 'Generating paths time': 2.433474063873291, 'Possible mappings': 6, 'Finding best mapping': 0.0004782676696777344}, 'CLL': -0.657918, 'AUC ROC': 0.544838, 'Precision': [nan, 0.5], 'Inference time': 2.386, 'Learning time': 16.871000000000002, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.4025, 'F1': nan, 'CLL': -0.657894, 'AUC ROC': 0.544977, 'Precision': [nan, 0.5], 'Inference time': 2.618, 'Learning time': 7.016}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.008939672495424532;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.015766324739049153;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.007806619657505074;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013875925786287012;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.006865023629025232;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.012224812213268432;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.013051226231225899;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.005667774361157207;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.011505544106601429;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0052841611395703205;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004921046244006805;  // std dev = 0,339, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009590772570960339;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.009580848242482943;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0037789618805595605;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.008477586575755047;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.008468879464501033;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.0033324762156928494;  // std dev = 0,340, 150,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03276309646556675;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.04665198535446013;  // std dev = 0,487, 882,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.007492448520761263;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.0031706623765763607;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0359777894260681;  // std dev = 0,487, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.006633648726871923;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.002798339568994559;  // std dev = 0,339, 158,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=21 */


Results
   AUC ROC   = 0.543974
   AUC PR    = 0.401971
   CLL	      = -0.65796
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 13.881 seconds
Total inference time: 2.407 seconds
AUC ROC: 0.543974


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 01:15:16
{'Recall': 0.0, 'AUC PR': 0.401971, 'F1': nan, 'CLL': -0.65796, 'AUC ROC': 0.543974, 'Precision': [nan, 0.5], 'Inference time': 2.407, 'Learning time': 13.881}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.10701990127563477
   Generating paths time   = 2.557265043258667
   Generating mappings time   = 0.044687509536743164
   Possible mappings   = 6
   Finding best mapping   = 0.0005013942718505859
   Total time   = 2.709479570388794


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 20.153 seconds
Total inference time: 2.312 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.477065862939483;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.02293413706051719;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.4085786122330218;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6618040777503276;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08819592224967243;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24264690120153415;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18782221033037141;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2652162418060013;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4555471527950496;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09510913561010936;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11084052530848212;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.33389692984368025;  // std dev = 1,545, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1107174459514724;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.13939948301112048;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10693192505317167;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08029362223872269;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.1377238688422203;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.33206261301060686;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02567553771900688;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1285414862020904;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.05911628774284759;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04538721047881515;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.456441
   AUC PR    = 0.300502
   CLL	      = -0.746639
   Precision = 0.335275 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.498803


Total learning time: 20.508 seconds
Total inference time: 4.754 seconds
AUC ROC: 0.456441


Refined model AUC ROC: 0.456441


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 01:16:07
{'Recall': 0.973731, 'AUC PR': 0.300502, 'F1': 0.498803, 'Mapping results': {'Knowledge compiling time': 0.10701990127563477, 'Total time': 2.709479570388794, 'Generating mappings time': 0.044687509536743164, 'Generating paths time': 2.557265043258667, 'Possible mappings': 6, 'Finding best mapping': 0.0005013942718505859}, 'CLL': -0.746639, 'AUC ROC': 0.456441, 'Precision': [0.335275, 0.5], 'Inference time': 4.754, 'Learning time': 40.661, 'Parameter Learning results': {'Recall': 1.0, 'AUC PR': 0.288412, 'F1': 0.50078, 'CLL': -0.749493, 'AUC ROC': 0.445862, 'Precision': [0.334027, 0.5], 'Inference time': 2.312, 'Learning time': 20.153}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786155931204664;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31020206293627983;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24458662491678418;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.187900891913932;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422616792626306;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.23207873351559846;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.42025765435698237;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04445336869193128;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18262993186681722;  // std dev = 0,918, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19453612006072568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10557479416464463;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08037466632617292;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08845572838887777;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.15512173468539858;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.305265449208274;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.013360862959023376;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.15866552775397377;  // std dev = 0,919, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1676188415359297;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05914118804403471;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07962066363296118;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04547694806793146;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.049349394481249496;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.462152
   AUC PR    = 0.301303
   CLL	      = -0.74597
   Precision = 0.337873 at threshold = 0.5
   Recall    = 0.97195
   F1        = 0.501436


Total learning time: 37.131 seconds
Total inference time: 3.606 seconds
AUC ROC: 0.462152


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 01:16:48
{'Recall': 0.97195, 'AUC PR': 0.301303, 'F1': 0.501436, 'CLL': -0.74597, 'AUC ROC': 0.462152, 'Precision': [0.337873, 0.5], 'Inference time': 3.606, 'Learning time': 37.131}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.18705463409423828
   Generating paths time   = 2.47328519821167
   Generating mappings time   = 0.045842647552490234
   Possible mappings   = 6
   Finding best mapping   = 0.00046539306640625
   Total time   = 2.706652879714966


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2095351375495396;  // std dev = 18,801, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.006 #pos=545 */
%   else return 0.02637323416493195;  // std dev = 5,472, 214,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18970652884179476;  // std dev = 18,690, 1.518,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else return 0.021574781900965085;  // std dev = 5,477, 216,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1575845099817453;  // std dev = 18,745, 1.534,000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else return 0.009416670414214049;  // std dev = 5,508, 229,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1234709841873435;  // std dev = 18,860, 1.569,000 (wgt'ed) examples reached here.  /* #neg=1.024 #pos=545 */
%   else return 0.0048676438432452215;  // std dev = 5,519, 234,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11390717197685565;  // std dev = 18,677, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else return 0.0049097337740131985;  // std dev = 5,517, 233,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09698905227559043;  // std dev = 18,606, 1.494,000 (wgt'ed) examples reached here.  /* #neg=949 #pos=545 */
%   else return 0.018791701154688555;  // std dev = 5,470, 213,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06873238320311838;  // std dev = 18,735, 1.531,000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else return 0.012500564740685319;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05726952664704885;  // std dev = 18,694, 1.519,000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else return 0.0029443499847268324;  // std dev = 5,508, 229,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04792993073841281;  // std dev = 18,652, 1.507,000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else return 0.011253203108375645;  // std dev = 5,480, 217,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03561006901137505;  // std dev = 18,680, 1.515,000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else return 0.0024680363655140546;  // std dev = 5,504, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.729208
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.486 seconds
Total inference time: 1.914 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.801, 1006, 545], 'false': [5.472, 178, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.69, 973, 545], 'false': [5.477, 180, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.745, 989, 545], 'false': [5.508, 193, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.86, 1024, 545], 'false': [5.519, 198, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.677, 969, 545], 'false': [5.517, 197, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.606, 949, 545], 'false': [5.47, 177, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.735, 986, 545], 'false': [5.482, 182, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.694, 974, 545], 'false': [5.508, 193, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.652, 962, 545], 'false': [5.48, 181, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.68, 970, 545], 'false': [5.504, 191, 36]}]]
[{'': [0.22791393917776323, 0.1399248842693696]}, {'': [0.23012605866190008, 0.138888888888888]}, {'': [0.2290562121678298, 0.1324917526362948]}, {'': [0.22669950494787336, 0.13017751479290054]}, {'': [0.23039260167978354, 0.1306341984564103]}, {'': [0.23171893284876247, 0.14044832374528965]}, {'': [0.2292572274026912, 0.13786718289706237]}, {'': [0.23005936218908019, 0.13249175263629698]}, {'': [0.2308580748367839, 0.13837626621928584]}, {'': [0.2303260028973211, 0.13343942246113888]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.19857446701440598;  // std dev = 0,474, 47,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | else return 0.22047770222279506;  // std dev = 0,481, 1.460,000 (wgt'ed) examples reached here.  /* #neg=931 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.001006077956655051;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.025636619828575496;  // std dev = 0,373, 203,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19064074724043983;  // std dev = 0,480, 1.508,000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0200005388389232;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.024326519417276527;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.020802569969367725;  // std dev = 0,372, 193,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16338119187565944;  // std dev = 0,481, 1.502,000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.009205193849429739;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return 0.02052175925650631;  // std dev = 0,373, 203,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13648054239807492;  // std dev = 0,481, 1.500,000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01242899958220839;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return 0.01706367455148027;  // std dev = 0,373, 204,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5023011567144453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05462673810979397;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.10684116948210191;  // std dev = 0,480, 1.475,000 (wgt'ed) examples reached here.  /* #neg=946 #pos=529 */
%   else return 0.011166497515332576;  // std dev = 0,368, 222,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08563377317118456;  // std dev = 0,479, 1.522,000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.008871044221357406;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return 0.008701977540473952;  // std dev = 0,368, 210,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0010937045270708087;  // std dev = 0,452, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050251536404908;  // std dev = 0,468, 40,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.0698208374427887;  // std dev = 0,480, 1.435,000 (wgt'ed) examples reached here.  /* #neg=919 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.003221064606993826;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.008461894262737114;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.007462137821448539;  // std dev = 0,369, 197,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05462930130890463;  // std dev = 0,479, 1.521,000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0287917295162231;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.023696400559048033;  // std dev = 0,383, 190,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04217301448973567;  // std dev = 0,479, 1.524,000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01801582566079422;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return 0.013765351738656634;  // std dev = 0,377, 198,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.020853662585295436;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | else return 0.030265077940983348;  // std dev = 0,478, 1.490,000 (wgt'ed) examples reached here.  /* #neg=961 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.011237201591634858;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.006333445298541081;  // std dev = 0,361, 221,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=34 */


Results
   AUC ROC   = 0.55072
   AUC PR    = 0.501091
   CLL	      = -0.72928
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 19.628 seconds
Total inference time: 2.485 seconds
AUC ROC: 0.55072


Refined model AUC ROC: 0.55072


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 01:17:25
{'Recall': 0.0, 'AUC PR': 0.501091, 'F1': nan, 'Mapping results': {'Knowledge compiling time': 0.18705463409423828, 'Total time': 2.706652879714966, 'Generating mappings time': 0.045842647552490234, 'Generating paths time': 2.47328519821167, 'Possible mappings': 6, 'Finding best mapping': 0.00046539306640625}, 'CLL': -0.72928, 'AUC ROC': 0.55072, 'Precision': [nan, 0.5], 'Inference time': 2.485, 'Learning time': 29.114, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.49112, 'F1': nan, 'CLL': -0.729208, 'AUC ROC': 0.547853, 'Precision': [nan, 0.5], 'Inference time': 1.914, 'Learning time': 9.486}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.2391013160518933;  // std dev = 0,486, 42,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else return 0.21899477411724272;  // std dev = 0,480, 1.466,000 (wgt'ed) examples reached here.  /* #neg=937 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.015011680197550796;  // std dev = 0,364, 204,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.326482270457523;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1435554411892307;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.18414227466954203;  // std dev = 0,478, 1.491,000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.01403400446759732;  // std dev = 0,361, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return 0.019241581198218984;  // std dev = 0,369, 209,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16915722379881976;  // std dev = 0,482, 1.483,000 (wgt'ed) examples reached here.  /* #neg=938 #pos=545 */
%   else return 0.025982347812405996;  // std dev = 0,377, 210,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24369429982433521;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05959439008036802;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.1279744114157225;  // std dev = 0,478, 1.492,000 (wgt'ed) examples reached here.  /* #neg=963 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.026782060779762588;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return 0.020135137085278237;  // std dev = 0,375, 201,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11013369708163266;  // std dev = 0,480, 1.515,000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else return 0.01138033722620128;  // std dev = 0,368, 222,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09722672727995989;  // std dev = 0,482, 1.481,000 (wgt'ed) examples reached here.  /* #neg=936 #pos=545 */
%   else return 0.022344663505775225;  // std dev = 0,380, 206,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.14889929989390574;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0048337444040113;  // std dev = 0,456, 44,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.0444256166394742;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.06696755653783237;  // std dev = 0,479, 1.443,000 (wgt'ed) examples reached here.  /* #neg=927 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.011955840607628308;  // std dev = 0,340, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return 0.011481560644845191;  // std dev = 0,373, 203,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2142719518242077;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.15178728300849512;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.06230379261653379;  // std dev = 0,482, 1.443,000 (wgt'ed) examples reached here.  /* #neg=914 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.027970165235426357;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return 0.008166264149431893;  // std dev = 0,371, 206,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04204944598546464;  // std dev = 0,480, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021847450919412575;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return 0.018805527747951325;  // std dev = 0,382, 192,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return -0.07294338128074454;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return -0.02808510947360506;  // std dev = 0,418, 63,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.02331257970974831;  // std dev = 0,477, 1.510,000 (wgt'ed) examples reached here.  /* #neg=981 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.034139414541869965;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.006967287280077017;  // std dev = 0,374, 190,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=32 */


Results
   AUC ROC   = 0.550706
   AUC PR    = 0.501087
   CLL	      = -0.728589
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 33.586 seconds
Total inference time: 2.888 seconds
AUC ROC: 0.550706


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 01:18:02
{'Recall': 0.0, 'AUC PR': 0.501087, 'F1': nan, 'CLL': -0.728589, 'AUC ROC': 0.550706, 'Precision': [nan, 0.5], 'Inference time': 2.888, 'Learning time': 33.586}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.1802380084991455
   Generating paths time   = 2.457382917404175
   Generating mappings time   = 0.04673504829406738
   Possible mappings   = 6
   Finding best mapping   = 0.00047659873962402344
   Total time   = 2.68483829498291


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.738 seconds
Total inference time: 2.366 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [20.312, 968, 719], 'false': [4.677, 100, 28]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8198971323208211;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.18010286767917896;  // std dev = 1,18e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6198971323208211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24401230928544115;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6672456140353762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.15502068646977815;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5100760802941824;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2051382629213446;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.169066590748321;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13554482857499828;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10688978975880675;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08327338053341281;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431257595654209;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.37038180833539136;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21556738890806962;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2567558943036962;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.04831499601471243;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767025366349528;  // std dev = 0,492, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.560721
   AUC PR    = 0.411852
   CLL	      = -0.642319
   Precision = 0.46875 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.061728


Total learning time: 22.046 seconds
Total inference time: 3.58 seconds
AUC ROC: 0.560721


Refined model AUC ROC: 0.560721


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 01:18:46
{'Recall': 0.03304, 'AUC PR': 0.411852, 'F1': 0.061728, 'Mapping results': {'Knowledge compiling time': 0.1802380084991455, 'Total time': 2.68483829498291, 'Generating mappings time': 0.04673504829406738, 'Generating paths time': 2.457382917404175, 'Possible mappings': 6, 'Finding best mapping': 0.00047659873962402344}, 'CLL': -0.642319, 'AUC ROC': 0.560721, 'Precision': [0.46875, 0.5], 'Inference time': 3.58, 'Learning time': 34.784, 'Parameter Learning results': {'Recall': 0.0, 'AUC PR': 0.39269, 'F1': nan, 'CLL': -0.643296, 'AUC ROC': 0.554206, 'Precision': [nan, 0.5], 'Inference time': 2.366, 'Learning time': 12.738}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7095671269394623;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2904328730605376;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5095671269394624;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1336823039040812;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.043228927397659093;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10691853206751069;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0832613978638063;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4983838983975666;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27021430205805713;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3482334339763082;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.06274460032645687;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else return 0.026513970893597166;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04921679557958067;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03761265144162131;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 0,413, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.560389
   AUC PR    = 0.411766
   CLL	      = -0.641905
   Precision = 0.46875 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.061728


Total learning time: 27.337 seconds
Total inference time: 3.106 seconds
AUC ROC: 0.560389


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 01:19:16
{'Recall': 0.03304, 'AUC PR': 0.411766, 'F1': 0.061728, 'CLL': -0.641905, 'AUC ROC': 0.560389, 'Precision': [0.46875, 0.5], 'Inference time': 3.106, 'Learning time': 27.337}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.20126843452453613
   Generating paths time   = 2.520051956176758
   Generating mappings time   = 0.04587244987487793
   Possible mappings   = 6
   Finding best mapping   = 0.0004703998565673828
   Total time   = 2.7676680088043213


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 17.34 seconds
Total inference time: 2.273 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.29350068122642653;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.056658575963269224;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.29350068122642653;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.056658575963269224;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4105805710335841;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.2407588308988403;  // std dev = 0,489, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10912768446848496;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0723861483096773;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.5057913125343155;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.24128471362487264;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.0472202231314855;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.24128471362487264;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.0472202231314855;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.33528519876489965;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2043095363206659;  // std dev = 0,441, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10243769375047865;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06049201796401414;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24935845595224837;  // std dev = 0,486, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5929379221430456;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20330614491888666;  // std dev = 0,022, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1785713004799714;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10209910969754626;  // std dev = 2,882, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.018753897190039892;  // std dev = 0,766, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12407005784566436;  // std dev = 2,941, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.027223876420622392;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.324377666711815;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.13691828198863842;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.007177808296382625;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.19615456398707523;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.479190257630046;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17236586056966532;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06954346228210796;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.09455031635697429;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.02342495292177398;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.41091014430829087;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.06853706056958139;  // std dev = 2,819, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07463644257164366;  // std dev = 1,991, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.09829249051674521;  // std dev = 2,776, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.03899971454510794;  // std dev = 1,855, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.1556974496328908;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.13871336990492678;  // std dev = 0,430, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05248180998519433;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03660696756464954;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.16549144528759596;  // std dev = 0,337, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.08978226021501451;  // std dev = 2,691, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.018322933947557823;  // std dev = 1,958, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.11153877333945088;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.10164442047682516;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05073680089426697;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.015687882047958002;  // std dev = 0,743, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07645905136244896;  // std dev = 2,934, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.014803558461864114;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.13005316520384316;  // std dev = 0,339, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.04326150175821518;  // std dev = 2,763, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.09406760674851673;  // std dev = 1,868, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.08563857644863507;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.33239824712921784;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16801881305573713;  // std dev = 0,020, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.1762283369015555;  // std dev = 0,018, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.057850658547977475;  // std dev = 2,876, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02455770414994829;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06154755133629838;  // std dev = 0,484, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1550634483146347;  // std dev = 0,602, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14816048503862358;  // std dev = 0,021, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.006955568458193029;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04733369314022142;  // std dev = 2,875, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.017149668904639048;  // std dev = 0,743, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05767797366817171;  // std dev = 2,933, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008966658306121216;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4259248608495472;  // std dev = 1,027, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.4712255611771215;  // std dev = 0,201, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2415153613364567;  // std dev = 1,168, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3665630945884505;  // std dev = 0,998, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.02933314047031909;  // std dev = 2,690, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.07074774444545419;  // std dev = 1,962, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.05253114822550036;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.02940406158401346;  // std dev = 0,419, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.016904386614808187;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.552293
   AUC PR    = 0.392231
   CLL	      = -0.708886
   Precision = 0.377586 at threshold = 0.5
   Recall    = 0.924605
   F1        = 0.536201


Total learning time: 30.022 seconds
Total inference time: 7.013 seconds
AUC ROC: 0.552293


Refined model AUC ROC: 0.552293


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 01:20:17
{'Recall': 0.924605, 'AUC PR': 0.392231, 'F1': 0.536201, 'Mapping results': {'Knowledge compiling time': 0.20126843452453613, 'Total time': 2.7676680088043213, 'Generating mappings time': 0.04587244987487793, 'Generating paths time': 2.520051956176758, 'Possible mappings': 6, 'Finding best mapping': 0.0004703998565673828}, 'CLL': -0.708886, 'AUC ROC': 0.552293, 'Precision': [0.377586, 0.5], 'Inference time': 7.013, 'Learning time': 47.361999999999995, 'Parameter Learning results': {'Recall': 0.952169, 'AUC PR': 0.374863, 'F1': 0.538514, 'CLL': -0.702177, 'AUC ROC': 0.543975, 'Precision': [0.37542, 0.5], 'Inference time': 2.273, 'Learning time': 17.34}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38894034888452006;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6459339491096061;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15406605089039405;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1552586107068695;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13909043014687983;  // std dev = 2,890, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.0512481561016578;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1516877554730703;  // std dev = 2,947, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.6348106353391928;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.2069027459230016;  // std dev = 2,772, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.027903365504930232;  // std dev = 1,934, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.24441425961406837;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.049482338948841784;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.33800191245385325;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.20355787443693604;  // std dev = 0,441, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10269872661225198;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05985655083862233;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4795364573234141;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.16365809228763964;  // std dev = 2,771, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.022339474780911483;  // std dev = 1,934, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.25704948963755514;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5013377787729236;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1606266343983545;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08775002862141855;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.1114323901873155;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.02726519483452864;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3632151750623715;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.12580533771611854;  // std dev = 2,765, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.020293683107039363;  // std dev = 1,938, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.19702610586660468;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.49789925535621016;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16018146421327056;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06401950551584701;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.0934822466172502;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023461208986509288;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2840110573849475;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.08220484266307077;  // std dev = 2,763, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.05757718039931596;  // std dev = 1,932, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.10198650789263262;  // std dev = 2,777, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.035302565129045574;  // std dev = 1,854, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.15624008326709754;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.019585045699560856;  // std dev = 0,314, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07542755680080078;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0363843271610839;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22993777240341856;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.062341835875921105;  // std dev = 2,763, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.04545652802951346;  // std dev = 1,932, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11305773588493234;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.1140399132760768;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.17240600926568575;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06289910788601956;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06575566706786792;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014868548882141475;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.19176218107890755;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.05520592206648806;  // std dev = 2,708, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.05246869624429834;  // std dev = 1,977, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return 0.08507059582094813;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09263197312540464;  // std dev = 0,380, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0379716438039404;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.027957212664503926;  // std dev = 0,643, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06391033474076448;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01268152501592626;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1637806998388723;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.041706961281837006;  // std dev = 2,708, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.041522540062907454;  // std dev = 1,976, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.04315155761827794;  // std dev = 2,732, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.09426894164388132;  // std dev = 1,901, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.0678879898917617;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.07469609460044882;  // std dev = 0,377, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031153841047856158;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.020260085318549524;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.14256549824494344;  // std dev = 9,13e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.0257513592435356;  // std dev = 2,709, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.05543807260822999;  // std dev = 1,972, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.04903438143742982;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.059904906401412196;  // std dev = 0,374, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02546089706864364;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.02670332979907305;  // std dev = 0,644, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.048007424518065334;  // std dev = 2,909, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.007761633430697074;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.54474
   AUC PR    = 0.378417
   CLL	      = -0.710279
   Precision = 0.375104 at threshold = 0.5
   Recall    = 0.914876
   F1        = 0.53206


Total learning time: 28.181 seconds
Total inference time: 7.309 seconds
AUC ROC: 0.54474


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 01:20:52
{'Recall': 0.914876, 'AUC PR': 0.378417, 'F1': 0.53206, 'CLL': -0.710279, 'AUC ROC': 0.54474, 'Precision': [0.375104, 0.5], 'Inference time': 7.309, 'Learning time': 28.181}


