Starting experiment #1 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.0971829891204834
   Generating paths time   = 2.430640459060669
   Generating mappings time   = 0.04244399070739746
   Possible mappings   = 6
   Finding best mapping   = 0.0004949569702148438
   Total time   = 2.570768117904663


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713612662632881;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04081037392942105;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035168675979243974;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03018284839116349;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.025811541495858664;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02200525834155446;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767193453249417;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018710481180709487;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325496383829088;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0158728462379152;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545842
   AUC PR    = 0.552218
   CLL	      = -0.685106
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 5.609 seconds
Total inference time: 2.144 seconds
AUC ROC: 0.545842


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}]]
[{'': [0.2474035457827825, 0.16220850480109833]}, {'': [0.24740354578278867, 0.16220850480109672]}, {'': [0.24740354578278376, 0.162208504801097]}, {'': [0.24740354578279572, 0.16220850480109708]}, {'': [0.2474035457827851, 0.16220850480109775]}, {'': [0.24740354578278675, 0.16220850480109666]}, {'': [0.2474035457827889, 0.16220850480109694]}, {'': [0.24740354578278811, 0.16220850480109822]}, {'': [0.24740354578279392, 0.16220850480109725]}, {'': [0.24740354578279258, 0.16220850480109716]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10045159299692252;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.052374669919999256;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713237160592949;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08069535425463026;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.039272917494498426;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.165263285625693;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06904164990626158;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.029949754272557413;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01313264877274475;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.13689616384061307;  // std dev = 0,497, 621,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.14087331266340014;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.026972269404693106;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227389623816056;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05437312839828579;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.024614361035771422;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686460458930194;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0219104084978595;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767208172983722;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.01862999401239856;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325568118053895;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039005394659853206;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.10681499227577347;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.012182797245971022;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */


Results
   AUC ROC   = 0.545777
   AUC PR    = 0.552209
   CLL	      = -0.68498
   Precision = 0.552968 at threshold = 0.5
   Recall    = 0.914307
   F1        = 0.689145


Total learning time: 10.722 seconds
Total inference time: 2.189 seconds
AUC ROC: 0.545777


Refined model AUC ROC: 0.545777


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 02:20:07
{'Mapping results': {'Generating paths time': 2.430640459060669, 'Finding best mapping': 0.0004949569702148438, 'Possible mappings': 6, 'Generating mappings time': 0.04244399070739746, 'Knowledge compiling time': 0.0971829891204834, 'Total time': 2.570768117904663}, 'AUC ROC': 0.545777, 'F1': 0.689145, 'Inference time': 2.189, 'Recall': 0.914307, 'CLL': -0.68498, 'Learning time': 16.331, 'Parameter Learning results': {'AUC ROC': 0.545842, 'F1': 0.697434, 'Inference time': 2.144, 'Recall': 0.94413, 'CLL': -0.685106, 'Learning time': 5.609, 'AUC PR': 0.552218, 'Precision': [0.552952, 0.5]}, 'AUC PR': 0.552209, 'Precision': [0.552968, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.18378492633025587;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.05045159299692233;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0939208905689094;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.045313833441535306;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04078781629662854;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1461262233292628;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0753447376635854;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.030260869247512746;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.030100067736435667;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02574064590492091;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.021944971829990098;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767193453249417;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018659532654240606;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.007700450174448518;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.043746495163172534;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.10639655152070245;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.013242405497757534;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */


Results
   AUC ROC   = 0.545777
   AUC PR    = 0.552209
   CLL	      = -0.684933
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 9.786 seconds
Total inference time: 2.237 seconds
AUC ROC: 0.545777


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 02:20:19
{'AUC ROC': 0.545777, 'F1': 0.697434, 'Inference time': 2.237, 'Recall': 0.94413, 'CLL': -0.684933, 'Learning time': 9.786, 'AUC PR': 0.552209, 'Precision': [0.552952, 0.5]}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.12321901321411133
   Generating paths time   = 2.4545278549194336
   Generating mappings time   = 0.043350934982299805
   Possible mappings   = 6
   Finding best mapping   = 0.00045680999755859375
   Total time   = 2.621560573577881


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.435093
   AUC PR    = 0.441949
   CLL	      = -0.710668
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 9.092 seconds
Total inference time: 2.173 seconds
AUC ROC: 0.435093


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.02293413706051719;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2445775978837916;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.35169116683306106;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6051012938582047;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1243710725659718;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14489870614179545;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18593702842856355;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14219305645328253;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10693903283106053;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08024969599636471;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.18335150914271678;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3757289838131594;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.01359420895127729;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18972369480471807;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.05875420982531233;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045300800378383785;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.436411
   AUC PR    = 0.44576
   CLL	      = -0.712515
   Precision = 0.506912 at threshold = 0.5
   Recall    = 0.979519
   F1        = 0.668084


Total learning time: 28.792 seconds
Total inference time: 3.396 seconds
AUC ROC: 0.436411


Refined model AUC ROC: 0.436411


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 02:21:06
{'Mapping results': {'Generating paths time': 2.4545278549194336, 'Finding best mapping': 0.00045680999755859375, 'Possible mappings': 6, 'Generating mappings time': 0.043350934982299805, 'Knowledge compiling time': 0.12321901321411133, 'Total time': 2.621560573577881}, 'AUC ROC': 0.436411, 'F1': 0.668084, 'Inference time': 3.396, 'Recall': 0.979519, 'CLL': -0.712515, 'Learning time': 37.884, 'Parameter Learning results': {'AUC ROC': 0.435093, 'F1': 0.671651, 'Inference time': 2.173, 'Recall': 1.0, 'CLL': -0.710668, 'Learning time': 9.092, 'AUC PR': 0.441949, 'Precision': [0.505628, 0.5]}, 'AUC PR': 0.44576, 'Precision': [0.506912, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.02293413706051719;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.5691711260973777;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.02293413706051719;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.3065360616149676;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.3730984915426596;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5628460432537193;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0184068364381519;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.2431180603253168;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2909920118005058;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5417767170274824;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.13944346875285463;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06873254449792185;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.3284545233752082;  // std dev = 1,518, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.01480782905677367;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.18537549142405688;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2183804636633412;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4075073872179145;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10671055528903949;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.053997202578887515;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14103146343883324;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16503794667771973;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31440365853840513;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.08097945339557655;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.040098872622469826;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2147565349794025;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.04269468513019061;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.1053783446435023;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08042422317456913;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.10694875495590639;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.23605351273552633;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.041253942862222615;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12342085224229576;  // std dev = 0,984, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.09847328553123394;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.059643542193220316;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.08258751145430575;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04565343702235158;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.049759304410073084;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.438265
   AUC PR    = 0.45053
   CLL	      = -0.716328
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 33.213 seconds
Total inference time: 4.77 seconds
AUC ROC: 0.438265


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 02:21:44
{'AUC ROC': 0.438265, 'F1': 0.665551, 'Inference time': 4.77, 'Recall': 0.973731, 'CLL': -0.716328, 'Learning time': 33.213, 'AUC PR': 0.45053, 'Precision': [0.505548, 0.5]}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.08023262023925781
   Generating paths time   = 2.4568941593170166
   Generating mappings time   = 0.04313206672668457
   Possible mappings   = 6
   Finding best mapping   = 0.0004661083221435547
   Total time   = 2.5807321071624756


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.10989718684776263;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3381324625115332;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.09598593207565466;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792220410552898;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08294278301248605;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225960724865444;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.070983394688111;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17292314273443157;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.06023243295977683;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.132116822336117;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.05073254996009713;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997146552308236;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.0424607827785455;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526239702478985;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.035347369736667855;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652161392412218;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02929340425641169;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240424163714376;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.024185398482155205;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.548689
   AUC PR    = 0.556347
   CLL	      = -0.684209
   Precision = 0.557115 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700974


Total learning time: 13.952 seconds
Total inference time: 2.285 seconds
AUC ROC: 0.548689


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}]]
[{'': [0.2487863084225942, 0.1883710694899519]}, {'': [0.2487863084226126, 0.1883710694899506]}, {'': [0.24878630842260438, 0.18837106948995108]}, {'': [0.24878630842260832, 0.18837106948995117]}, {'': [0.2487863084225907, 0.18837106948995028]}, {'': [0.24878630842259658, 0.1883710694899514]}, {'': [0.2487863084225935, 0.18837106948995186]}, {'': [0.24878630842259572, 0.18837106948995172]}, {'': [0.24878630842260163, 0.1883710694899495]}, {'': [0.24878630842260596, 0.18837106948995072]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.31942341822397186;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.33871948718047523;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.09598328910259446;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26405658250833375;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.27969735271471474;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.08294043899173771;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.17328205495092025;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.17646726172953034;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.22559029664521596;  // std dev = 0,499, 959,000 (wgt'ed) examples reached here.  /* #neg=443 #pos=516 */
%   else return 0.07098136969431161;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.172914417889364;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.060230725023529365;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13211252128141948;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.05073114052597435;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06283457275751567;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06616716492304936;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.10219987868778006;  // std dev = 0,499, 959,000 (wgt'ed) examples reached here.  /* #neg=443 #pos=516 */
%   else return 0.04245964263339484;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.047438186827195916;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.0761897481344191;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.005486788336138372;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.01078805943091256;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03926456611391649;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.035732290845666925;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.05721587924277407;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.029282853186748878;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.053502739032835325;  // std dev = 0,501, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.04205685650283425;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.02417676173188096;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.550224
   AUC PR    = 0.557303
   CLL	      = -0.684234
   Precision = 0.558193 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.688385


Total learning time: 16.08 seconds
Total inference time: 2.55 seconds
AUC ROC: 0.550224


Refined model AUC ROC: 0.550224


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 02:22:22
{'Mapping results': {'Generating paths time': 2.4568941593170166, 'Finding best mapping': 0.0004661083221435547, 'Possible mappings': 6, 'Generating mappings time': 0.04313206672668457, 'Knowledge compiling time': 0.08023262023925781, 'Total time': 2.5807321071624756}, 'AUC ROC': 0.550224, 'F1': 0.688385, 'Inference time': 2.55, 'Recall': 0.897783, 'CLL': -0.684234, 'Learning time': 30.031999999999996, 'Parameter Learning results': {'AUC ROC': 0.548689, 'F1': 0.700974, 'Inference time': 2.285, 'Recall': 0.944992, 'CLL': -0.684209, 'Learning time': 13.952, 'AUC PR': 0.556347, 'Precision': [0.557115, 0.5]}, 'AUC PR': 0.557303, 'Precision': [0.558193, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.37427796735757685;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.39357403631408244;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33813193646009276;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.09798372998175561;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.22956390287297862;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.2808836021724135;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.08293804268176834;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225922209835073;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.045498914859915765;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.045539017921579675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0746455717166829;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.40372057576063647;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12349503151884347;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.1733373107008608;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.038816814889317985;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06165201921160777;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.307670546831851;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05720201528631592;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.09464254863426547;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.13469962300490196;  // std dev = 0,499, 959,000 (wgt'ed) examples reached here.  /* #neg=443 #pos=516 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.032931719286749886;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.05190291493642937;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09995674576595624;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021157522471247955;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.04386040013799554;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07525849389676018;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02086525345129052;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.036285395394488044;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652422796895605;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02925770178390393;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04241039553745437;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02415638181130514;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.555264
   AUC PR    = 0.567544
   CLL	      = -0.683618
   Precision = 0.559817 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.691668


Total learning time: 20.193 seconds
Total inference time: 2.981 seconds
AUC ROC: 0.555264


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 02:22:46
{'AUC ROC': 0.555264, 'F1': 0.691668, 'Inference time': 2.981, 'Recall': 0.904762, 'CLL': -0.683618, 'Learning time': 20.193, 'AUC PR': 0.567544, 'Precision': [0.559817, 0.5]}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.10820698738098145
   Generating paths time   = 2.4838814735412598
   Generating mappings time   = 0.04332089424133301
   Possible mappings   = 6
   Finding best mapping   = 0.00047206878662109375
   Total time   = 2.6358869075775146


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1659690293797968;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12746201339668561;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09685618727552187;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314632774922773;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505128868533588;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135677853271354;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.561798
   AUC PR    = 0.566326
   CLL	      = -0.685519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.258 seconds
Total inference time: 1.96 seconds
AUC ROC: 0.561798


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}]]
[{'': [0.24982563183941908, 0.2104289513238537]}, {'': [0.24982563183938786, 0.21042895132385236]}, {'': [0.24982563183939718, 0.2104289513238527]}, {'': [0.24982563183938641, 0.2104289513238534]}, {'': [0.24982563183940412, 0.2104289513238524]}, {'': [0.2498256318393981, 0.21042895132385156]}, {'': [0.2498256318394109, 0.21042895132385186]}, {'': [0.24982563183940082, 0.21042895132385175]}, {'': [0.24982563183940212, 0.2104289513238521]}, {'': [0.2498256318394016, 0.21042895132385186]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3697263591226623;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3185213726274275;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7278194931467045;  // std dev = 0,184, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2475443559389499;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5130378025980971;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.26255369591876215;  // std dev = 0,498, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21205422098267526;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1657942202934261;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4913130231938174;  // std dev = 0,220, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.2726045270417451;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14960571239572037;  // std dev = 0,744, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.101703203028088;  // std dev = 1,105, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.39698957014832104;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12557890457024856;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09689755546635116;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3300700285356938;  // std dev = 0,153, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22648036397394097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.28645045443407813;  // std dev = 0,000549, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07270202127684022;  // std dev = 0,498, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.055223814197328566;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04156749414633656;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.581171
   AUC PR    = 0.588838
   CLL	      = -0.680691
   Precision = 0.658291 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.106116


Total learning time: 23.76 seconds
Total inference time: 3.692 seconds
AUC ROC: 0.581171


Refined model AUC ROC: 0.581171


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 02:23:29
{'Mapping results': {'Generating paths time': 2.4838814735412598, 'Finding best mapping': 0.00047206878662109375, 'Possible mappings': 6, 'Generating mappings time': 0.04332089424133301, 'Knowledge compiling time': 0.10820698738098145, 'Total time': 2.6358869075775146}, 'AUC ROC': 0.581171, 'F1': 0.106116, 'Inference time': 3.692, 'Recall': 0.057709, 'CLL': -0.680691, 'Learning time': 34.018, 'Parameter Learning results': {'AUC ROC': 0.561798, 'F1': nan, 'Inference time': 1.96, 'Recall': 0.0, 'CLL': -0.685519, 'Learning time': 10.258, 'AUC PR': 0.566326, 'Precision': [nan, 0.5]}, 'AUC PR': 0.588838, 'Precision': [0.658291, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6992333937344074;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30076660626559243;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6992333937344075;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2108108177575581;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1658612987001745;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12740534867866046;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09683635334425537;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07315020253210085;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4209593075338263;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3269762126883884;  // std dev = 0,068, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4209593075338264;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.053872605358172315;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   | else return 0.04054995139352571;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135589091852166;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.030041343049646695;  // std dev = 0,458, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.570445
   AUC PR    = 0.576908
   CLL	      = -0.682925
   Precision = 0.641026 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.06284


Total learning time: 23.271 seconds
Total inference time: 2.521 seconds
AUC ROC: 0.570445


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 02:23:55
{'AUC ROC': 0.570445, 'F1': 0.06284, 'Inference time': 2.521, 'Recall': 0.03304, 'CLL': -0.682925, 'Learning time': 23.271, 'AUC PR': 0.576908, 'Precision': [0.641026, 0.5]}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.12677621841430664
   Generating paths time   = 2.4615750312805176
   Generating mappings time   = 0.04376697540283203
   Possible mappings   = 6
   Finding best mapping   = 0.0004634857177734375
   Total time   = 2.632586717605591


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.537245
   AUC PR    = 0.543881
   CLL	      = -0.684587
   Precision = 0.54438 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.692716


Total learning time: 13.658 seconds
Total inference time: 2.04 seconds
AUC ROC: 0.537245


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.27737164896836203;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.04350068122642711;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.629623109416637;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17037689058336297;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.16093240232975084;  // std dev = 0,000354, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13161763142406072;  // std dev = 2,888, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.07238614830967727;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31797061987021163;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5218082953475985;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14762999744343452;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09578431227722728;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18044574807936495;  // std dev = 1,241, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12020344766143867;  // std dev = 2,788, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.035420645028606604;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2500327257731294;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5097321229525924;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15524140492430444;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14962275985890341;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10132140361807045;  // std dev = 2,865, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.09995780384203046;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.030661823183272242;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5259725503930256;  // std dev = 0,970, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.40048731211592375;  // std dev = 0,079, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2852705439666325;  // std dev = 1,258, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.4497535617257226;  // std dev = 0,910, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.2010436438296095;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.12948547235502886;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.13156625538817734;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08526102473209961;  // std dev = 2,863, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.042892328987186035;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.2857621196270002;  // std dev = 0,258, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return -0.006406301414554672;  // std dev = 0,405, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else return 0.15192586844872671;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.10574189815039355;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.11724902021170891;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07099452735920857;  // std dev = 2,861, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.014698873788142918;  // std dev = 0,652, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08746982086235333;  // std dev = 2,912, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02041047178186193;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10868438320640467;  // std dev = 0,482, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3372164623886408;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16602228124869425;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.10564777876096132;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05859154253202677;  // std dev = 2,860, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.0742946654628342;  // std dev = 1,086, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.060359784860502655;  // std dev = 2,784, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.017476536738779507;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08169608986839598;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3362659429687621;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16320953755477222;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1847953561989881;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.047795101044733175;  // std dev = 2,837, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.00561827631626455;  // std dev = 0,514, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05719338040573174;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.014933260834347173;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.411022438733218;  // std dev = 0,993, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.5048067391564114;  // std dev = 0,085, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.3379947337617802;  // std dev = 1,148, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.31111805250034524;  // std dev = 0,901, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06854868882014142;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.04723497634800072;  // std dev = 0,345, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02817154820595942;  // std dev = 0,430, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.04006447647387874;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012737295868407788;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046414621379671714;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2309409246058908;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15414635492423553;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.023041063610209456;  // std dev = 0,430, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.021358854500043573;  // std dev = 0,996, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03493124321561178;  // std dev = 2,778, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.010847602431558367;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.549414
   AUC PR    = 0.568156
   CLL	      = -0.685251
   Precision = 0.546111 at threshold = 0.5
   Recall    = 0.950547
   F1        = 0.693684


Total learning time: 21.236 seconds
Total inference time: 3.927 seconds
AUC ROC: 0.549414


Refined model AUC ROC: 0.549414


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 02:24:39
{'Mapping results': {'Generating paths time': 2.4615750312805176, 'Finding best mapping': 0.0004634857177734375, 'Possible mappings': 6, 'Generating mappings time': 0.04376697540283203, 'Knowledge compiling time': 0.12677621841430664, 'Total time': 2.632586717605591}, 'AUC ROC': 0.549414, 'F1': 0.693684, 'Inference time': 3.927, 'Recall': 0.950547, 'CLL': -0.685251, 'Learning time': 34.894, 'Parameter Learning results': {'AUC ROC': 0.537245, 'F1': 0.692716, 'Inference time': 2.04, 'Recall': 0.952169, 'CLL': -0.684587, 'Learning time': 13.658, 'AUC PR': 0.543881, 'Precision': [0.54438, 0.5]}, 'AUC PR': 0.568156, 'Precision': [0.546111, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.29509450923344677;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.39586522947349756;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.14243461824051976;  // std dev = 0,456, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.030823778666540985;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15637051244554845;  // std dev = 2,977, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3173630726399444;  // std dev = 0,486, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6270341140765293;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17296588592347062;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09931671243652423;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.026449435318373526;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1341519178379384;  // std dev = 2,977, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03537595553139093;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4762714826753899;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.16185621012900867;  // std dev = 2,766, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.02701475159499852;  // std dev = 1,940, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2574398753164262;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.051794443481457036;  // std dev = 0,384, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return 0.17300199696252072;  // std dev = 1,005, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.10461230458540126;  // std dev = 2,912, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.10339913756627375;  // std dev = 0,459, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03062212191614032;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.19702848281939886;  // std dev = 0,568, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.28503450307920275;  // std dev = 0,568, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.13801673978649776;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.007264689913688099;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.19724932589132538;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.0865142661391167;  // std dev = 0,445, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.08629604159802376;  // std dev = 0,459, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.02641435365441102;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5063692920573909;  // std dev = 1,036, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3883288231591856;  // std dev = 0,088, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.06138637132061922;  // std dev = 0,400, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0964832865906889;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.041475240227646454;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.15621310750858083;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.14946616532144713;  // std dev = 0,433, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05429611813353436;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03666520866072581;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2657033464746138;  // std dev = 0,110, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.07008451970140454;  // std dev = 2,224, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.03472651289066657;  // std dev = 1,947, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11185241286669319;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.059044362263216396;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.12698167756516773;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05149638613136811;  // std dev = 2,788, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01747233865902741;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2174297362244247;  // std dev = 0,095, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.05384983643656932;  // std dev = 2,218, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.027715274930752144;  // std dev = 1,947, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08403311112283914;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.42667308948423993;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20723611383377877;  // std dev = 0,020, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03433716053639496;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.05257097428576609;  // std dev = 0,458, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014929629447202638;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.18286454618470724;  // std dev = 0,083, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.005732006035097749;  // std dev = 2,795, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.11497562219238056;  // std dev = 1,871, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.06593304856529349;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.03652273513979633;  // std dev = 0,434, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.039178512643525634;  // std dev = 0,879, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05251921731385527;  // std dev = 2,975, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012734166085489825;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.15721049032546675;  // std dev = 0,073, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.019245807458979095;  // std dev = 2,720, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07852909612029788;  // std dev = 1,965, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.04976694884456342;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return -0.02439846459664105;  // std dev = 0,321, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.039032573729061534;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.08787873380201021;  // std dev = 1,366, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0227863980635063;  // std dev = 2,785, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.010844913350212319;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.544315
   AUC PR    = 0.560671
   CLL	      = -0.688885
   Precision = 0.545433 at threshold = 0.5
   Recall    = 0.924605
   F1        = 0.686118


Total learning time: 27.089 seconds
Total inference time: 5.738 seconds
AUC ROC: 0.544315


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 02:25:12
{'AUC ROC': 0.544315, 'F1': 0.686118, 'Inference time': 5.738, 'Recall': 0.924605, 'CLL': -0.688885, 'Learning time': 27.089, 'AUC PR': 0.560671, 'Precision': [0.545433, 0.5]}


Starting experiment #2 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'actor(person).', 'director(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.09674596786499023
   Generating paths time   = 2.452843427658081
   Generating mappings time   = 0.04255390167236328
   Possible mappings   = 6
   Finding best mapping   = 0.0004706382751464844
   Total time   = 2.592618703842163


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713612662632881;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04081037392942105;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035168675979243974;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03018284839116349;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.025811541495858664;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02200525834155446;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767193453249417;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018710481180709487;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325496383829088;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0158728462379152;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545842
   AUC PR    = 0.552218
   CLL	      = -0.685106
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 5.471 seconds
Total inference time: 2.058 seconds
AUC ROC: 0.545842


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}]]
[{'': [0.2474035457827825, 0.16220850480109833]}, {'': [0.24740354578278867, 0.16220850480109672]}, {'': [0.24740354578278376, 0.162208504801097]}, {'': [0.24740354578279572, 0.16220850480109708]}, {'': [0.2474035457827851, 0.16220850480109775]}, {'': [0.24740354578278675, 0.16220850480109666]}, {'': [0.2474035457827889, 0.16220850480109694]}, {'': [0.24740354578278811, 0.16220850480109822]}, {'': [0.24740354578279392, 0.16220850480109725]}, {'': [0.24740354578279258, 0.16220850480109716]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.41048387873879927;  // std dev = 0,497, 621,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.060072012022589036;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3516825348610373;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.18401125170649132;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.050441328638399875;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28964569147578073;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.047111362330240075;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003304570675345;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0407886916056896;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17798897062194194;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035149901184418575;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551744961724269;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14068093385211686;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.027009202022895633;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227843283521769;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11785027004570355;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.023110987003450878;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686804611785641;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02187481757358263;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767467171085313;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09329343101676431;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.01646569999751777;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325762370021906;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.01570435594369906;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545777
   AUC PR    = 0.552209
   CLL	      = -0.685046
   Precision = 0.552968 at threshold = 0.5
   Recall    = 0.914307
   F1        = 0.689145


Total learning time: 7.747 seconds
Total inference time: 2.112 seconds
AUC ROC: 0.545777


Refined model AUC ROC: 0.545777


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 01:59:31
{'AUC ROC': 0.545777, 'Recall': 0.914307, 'Inference time': 2.112, 'F1': 0.689145, 'AUC PR': 0.552209, 'Precision': [0.552968, 0.5], 'Parameter Learning results': {'AUC ROC': 0.545842, 'Recall': 0.94413, 'Inference time': 2.058, 'F1': 0.697434, 'AUC PR': 0.552218, 'Precision': [0.552952, 0.5], 'Learning time': 5.471, 'CLL': -0.685106}, 'Learning time': 13.218, 'CLL': -0.685046, 'Mapping results': {'Generating mappings time': 0.04255390167236328, 'Total time': 2.592618703842163, 'Possible mappings': 6, 'Finding best mapping': 0.0004706382751464844, 'Generating paths time': 2.452843427658081, 'Knowledge compiling time': 0.09674596786499023}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1767657562559589;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09343242292262556;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04145222490282319;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0407836356401828;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035145435603074086;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08456122020131618;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13600816553894218;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else return 0.030162840033145958;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227609856741153;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06524645676718943;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.024277074912212957;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686537616693756;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.021981257122151883;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767197749965988;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.01869017370393582;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325508628076832;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1251953462324977;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.048757997648091383;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.011304985884313902;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */


Results
   AUC ROC   = 0.545777
   AUC PR    = 0.552209
   CLL	      = -0.684934
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 9.019 seconds
Total inference time: 2.164 seconds
AUC ROC: 0.545777


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 01:59:42
{'AUC ROC': 0.545777, 'Recall': 0.94413, 'Inference time': 2.164, 'F1': 0.697434, 'AUC PR': 0.552209, 'Precision': [0.552952, 0.5], 'Learning time': 9.019, 'CLL': -0.684934}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.12473440170288086
   Generating paths time   = 2.350153923034668
   Generating mappings time   = 0.03446197509765625
   Possible mappings   = 6
   Finding best mapping   = 0.0003528594970703125
   Total time   = 2.5097084045410156


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.435093
   AUC PR    = 0.441949
   CLL	      = -0.710668
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 19.874 seconds
Total inference time: 1.968 seconds
AUC ROC: 0.435093


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4745508769183176;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7274409623947439;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24327375891060532;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.02255903760525626;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.5114542411698072;  // std dev = 1,549, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.03802377193610687;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.3069111610702269;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24439636455925307;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.31182419072389367;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5024600489120714;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1400045738536092;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06868094523057122;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18637353305196264;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14219125056450557;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700602378202484;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08035141058890025;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06033853793549219;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13870229389917096;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.2926585370897443;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.011371088997774295;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14206650841700608;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1914349698749885;  // std dev = 1,549, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13832149646381378;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04306208202999946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.43832
   AUC PR    = 0.45068
   CLL	      = -0.714205
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 20.693 seconds
Total inference time: 4.133 seconds
AUC ROC: 0.43832


Refined model AUC ROC: 0.43832


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 02:00:32
{'AUC ROC': 0.43832, 'Recall': 0.973731, 'Inference time': 4.133, 'F1': 0.665551, 'AUC PR': 0.45068, 'Precision': [0.505548, 0.5], 'Parameter Learning results': {'AUC ROC': 0.435093, 'Recall': 1.0, 'Inference time': 1.968, 'F1': 0.671651, 'AUC PR': 0.441949, 'Precision': [0.505628, 0.5], 'Learning time': 19.874, 'CLL': -0.710668}, 'Learning time': 40.567, 'CLL': -0.714205, 'Mapping results': {'Generating mappings time': 0.03446197509765625, 'Total time': 2.5097084045410156, 'Possible mappings': 6, 'Finding best mapping': 0.0003528594970703125, 'Generating paths time': 2.350153923034668, 'Knowledge compiling time': 0.12473440170288086}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18785338428611975;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14220525421365623;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692973234214886;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.24392383048793484;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.49742691014774915;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.01776353776950733;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2525730898522508;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.27180901631164345;  // std dev = 1,546, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17041157492744063;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07689710882323793;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06024088269586363;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04526569676849042;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437384
   AUC PR    = 0.448061
   CLL	      = -0.712099
   Precision = 0.506912 at threshold = 0.5
   Recall    = 0.979519
   F1        = 0.668084


Total learning time: 20.094 seconds
Total inference time: 2.989 seconds
AUC ROC: 0.437384


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 02:00:56
{'AUC ROC': 0.437384, 'Recall': 0.979519, 'Inference time': 2.989, 'F1': 0.668084, 'AUC PR': 0.448061, 'Precision': [0.506912, 0.5], 'Learning time': 20.094, 'CLL': -0.712099}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.07851386070251465
   Generating paths time   = 2.44052791595459
   Generating mappings time   = 0.04346942901611328
   Possible mappings   = 6
   Finding best mapping   = 0.0004858970642089844
   Total time   = 2.563002347946167


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.10989718684776263;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3381324625115332;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.09598593207565466;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792220410552898;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08294278301248605;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225960724865444;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.070983394688111;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17292314273443157;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.06023243295977683;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.132116822336117;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.05073254996009713;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997146552308236;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.0424607827785455;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526239702478985;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.035347369736667855;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652161392412218;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02929340425641169;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240424163714376;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.024185398482155205;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.548689
   AUC PR    = 0.556347
   CLL	      = -0.684209
   Precision = 0.557115 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700974


Total learning time: 13.685 seconds
Total inference time: 1.852 seconds
AUC ROC: 0.548689


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}]]
[{'': [0.2487863084225942, 0.1883710694899519]}, {'': [0.2487863084226126, 0.1883710694899506]}, {'': [0.24878630842260438, 0.18837106948995108]}, {'': [0.24878630842260832, 0.18837106948995117]}, {'': [0.2487863084225907, 0.18837106948995028]}, {'': [0.24878630842259658, 0.1883710694899514]}, {'': [0.2487863084225935, 0.18837106948995186]}, {'': [0.24878630842259572, 0.18837106948995172]}, {'': [0.24878630842260163, 0.1883710694899495]}, {'': [0.24878630842260596, 0.18837106948995072]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3429974199479972;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3381284605266535;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.09598026421012;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792188962358885;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08293775655172539;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22259419430554037;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.07097905262851112;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1343983155993791;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.17421184981666216;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0352388350839531;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0352388350839531;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.06382732179034596;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13211262079160913;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029822624039890357;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029822624039890357;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05372353176440805;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997024573785479;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0251461726814889;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.04358808958892185;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526305997769252;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021136785992441065;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.018157752839807154;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03756589048370492;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652333276360847;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017719697289989244;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01519267994652797;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031084827445468283;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240645550023299;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012687420604249901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024894354004327105;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */


Results
   AUC ROC   = 0.548159
   AUC PR    = 0.556031
   CLL	      = -0.684361
   Precision = 0.556773 at threshold = 0.5
   Recall    = 0.917898
   F1        = 0.693118


Total learning time: 12.318 seconds
Total inference time: 2.091 seconds
AUC ROC: 0.548159


Refined model AUC ROC: 0.548159


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 02:01:29
{'AUC ROC': 0.548159, 'Recall': 0.917898, 'Inference time': 2.091, 'F1': 0.693118, 'AUC PR': 0.556031, 'Precision': [0.556773, 0.5], 'Parameter Learning results': {'AUC ROC': 0.548689, 'Recall': 0.944992, 'Inference time': 1.852, 'F1': 0.700974, 'AUC PR': 0.556347, 'Precision': [0.557115, 0.5], 'Learning time': 13.685, 'CLL': -0.684209}, 'Learning time': 26.003, 'CLL': -0.684361, 'Mapping results': {'Generating mappings time': 0.04346942901611328, 'Total time': 2.563002347946167, 'Possible mappings': 6, 'Finding best mapping': 0.0004858970642089844, 'Generating paths time': 2.44052791595459, 'Knowledge compiling time': 0.07851386070251465}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.30642479716847787;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.10989718684776263;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2648901467342408;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.2845113657688984;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.34109036395373127;  // std dev = 0,499, 959,000 (wgt'ed) examples reached here.  /* #neg=443 #pos=516 */
%   else return 0.09598593207565466;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2791603757890744;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05341675348645571;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05341675348645571;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08719453126423428;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225576506337173;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04578870234279111;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04578870234279111;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07460465129700368;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.29315760810335045;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12241521764538635;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.13149770390433838;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.1750985618659168;  // std dev = 0,499, 959,000 (wgt'ed) examples reached here.  /* #neg=443 #pos=516 */
%   else return 0.06021280011517109;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2200119020099982;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.10102539246507238;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.1325875995903072;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.05071597780839058;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.16578313742105721;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.07694240243781322;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.1003342472420377;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.021852091488778883;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.04383026538076983;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07528207799591459;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0183279728943178;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014737221700475795;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03803391897722088;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05655305603396672;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.029258195533396966;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04244030288495949;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0074097182677225325;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.010494824974115703;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.026346106954690633;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.555264
   AUC PR    = 0.567544
   CLL	      = -0.683258
   Precision = 0.559817 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.691668


Total learning time: 20.165 seconds
Total inference time: 2.87 seconds
AUC ROC: 0.555264


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 02:01:52
{'AUC ROC': 0.555264, 'Recall': 0.904762, 'Inference time': 2.87, 'F1': 0.691668, 'AUC PR': 0.567544, 'Precision': [0.559817, 0.5], 'Learning time': 20.165, 'CLL': -0.683258}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.07107686996459961
   Generating paths time   = 2.451604127883911
   Generating mappings time   = 0.043920040130615234
   Possible mappings   = 6
   Finding best mapping   = 0.00046944618225097656
   Total time   = 2.5670762062072754


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1659690293797968;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12746201339668561;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09685618727552187;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314632774922773;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505128868533588;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135677853271354;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.561798
   AUC PR    = 0.566326
   CLL	      = -0.685519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 10.048 seconds
Total inference time: 2.03 seconds
AUC ROC: 0.561798


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}]]
[{'': [0.24982563183941908, 0.2104289513238537]}, {'': [0.24982563183938786, 0.21042895132385236]}, {'': [0.24982563183939718, 0.2104289513238527]}, {'': [0.24982563183938641, 0.2104289513238534]}, {'': [0.24982563183940412, 0.2104289513238524]}, {'': [0.2498256318393981, 0.21042895132385156]}, {'': [0.2498256318394109, 0.21042895132385186]}, {'': [0.24982563183940082, 0.21042895132385175]}, {'': [0.24982563183940212, 0.2104289513238521]}, {'': [0.2498256318394016, 0.21042895132385186]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6527641757038541;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3472358242961459;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6527641757038541;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1643415997270059;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12737984073327474;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09681638853854796;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0731348740327195;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505719613004574;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04137229106312238;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.569676
   AUC PR    = 0.576697
   CLL	      = -0.683374
   Precision = 0.641026 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.06284


Total learning time: 15.214 seconds
Total inference time: 2.508 seconds
AUC ROC: 0.569676


Refined model AUC ROC: 0.569676


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 02:02:25
{'AUC ROC': 0.569676, 'Recall': 0.03304, 'Inference time': 2.508, 'F1': 0.06284, 'AUC PR': 0.576697, 'Precision': [0.641026, 0.5], 'Parameter Learning results': {'AUC ROC': 0.561798, 'Recall': 0.0, 'Inference time': 2.03, 'F1': nan, 'AUC PR': 0.566326, 'Precision': [nan, 0.5], 'Learning time': 10.048, 'CLL': -0.685519}, 'Learning time': 25.262, 'CLL': -0.683374, 'Mapping results': {'Generating mappings time': 0.043920040130615234, 'Total time': 2.5670762062072754, 'Possible mappings': 6, 'Finding best mapping': 0.00046944618225097656, 'Generating paths time': 2.451604127883911, 'Knowledge compiling time': 0.07107686996459961}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1659690293797968;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12746201339668561;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09685618727552187;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314632774922773;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505128868533588;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135677853271354;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.561798
   AUC PR    = 0.566326
   CLL	      = -0.685519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 18.236 seconds
Total inference time: 1.501 seconds
AUC ROC: 0.561798


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 02:02:45
{'AUC ROC': 0.561798, 'Recall': 0.0, 'Inference time': 1.501, 'F1': nan, 'AUC PR': 0.566326, 'Precision': [nan, 0.5], 'Learning time': 18.236, 'CLL': -0.685519}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.11443424224853516
   Generating paths time   = 2.4405179023742676
   Generating mappings time   = 0.04380679130554199
   Possible mappings   = 6
   Finding best mapping   = 0.0004696846008300781
   Total time   = 2.5992345809936523


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.537245
   AUC PR    = 0.543881
   CLL	      = -0.684587
   Precision = 0.54438 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.692716


Total learning time: 12.844 seconds
Total inference time: 2.159 seconds
AUC ROC: 0.537245


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7408691022790583;  // std dev = 0,973, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.08149931877357294;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7025915903173362;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848496;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07238614830967727;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3175365585151411;  // std dev = 0,486, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5430848233865555;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13446575074522374;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1350404857202739;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1194474132805591;  // std dev = 2,890, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.032703826961374624;  // std dev = 0,803, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13202271980812302;  // std dev = 2,944, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.035420645028606604;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.595124565617062;  // std dev = 0,053, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.07745231716723609;  // std dev = 0,408, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.1527726327538059;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.08406947250935196;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.269852522560961;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.1536720506296132;  // std dev = 0,393, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08658114793543216;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.10233198697768191;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.030661823183272242;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12489152853160793;  // std dev = 0,399, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.11738804490287365;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.06526680719450262;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.2064583483500989;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.12680793729021866;  // std dev = 0,386, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07316105815973088;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.13997495828884343;  // std dev = 1,224, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0739628038626309;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.026449368820450337;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.4193612251639881;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.07715036359329902;  // std dev = 2,764, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.061611366503699236;  // std dev = 1,930, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.04685335878202591;  // std dev = 0,406, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15573713904375958;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.10348503070394388;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.1379517527011974;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07584436091443877;  // std dev = 2,887, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.03648078137111467;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10851048862023698;  // std dev = 0,480, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.18159714510814523;  // std dev = 0,699, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13306553219547604;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.05524238530725826;  // std dev = 0,910, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06271452632575165;  // std dev = 2,886, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.010186861660143053;  // std dev = 0,781, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07301558950714858;  // std dev = 2,936, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017530454095307138;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0817208284844826;  // std dev = 0,480, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.14546944018952276;  // std dev = 0,680, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11849027968845563;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.04387965573670811;  // std dev = 0,907, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05144431365724679;  // std dev = 2,885, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.09920287928176207;  // std dev = 1,210, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.04206086899622794;  // std dev = 2,786, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01497990191503203;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.43902545302808677;  // std dev = 1,004, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.4678282419295216;  // std dev = 0,127, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.0027272363781613677;  // std dev = 0,403, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.06463982204330311;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.004384726525027024;  // std dev = 0,261, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.034758009933852405;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04192264690702847;  // std dev = 2,885, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.04208790211611117;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012777495846156983;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04646043586139664;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.1145443741173334;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1071096112069658;  // std dev = 0,031, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.02747625183046818;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.033980905915692076;  // std dev = 2,885, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.07131909681726398;  // std dev = 1,201, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.026073855876907786;  // std dev = 2,785, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.010882142947462495;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.544414
   AUC PR    = 0.5607
   CLL	      = -0.686345
   Precision = 0.54693 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.69217


Total learning time: 24.771 seconds
Total inference time: 4.052 seconds
AUC ROC: 0.544414


Refined model AUC ROC: 0.544414


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 02:03:32
{'AUC ROC': 0.544414, 'Recall': 0.94244, 'Inference time': 4.052, 'F1': 0.69217, 'AUC PR': 0.5607, 'Precision': [0.54693, 0.5], 'Parameter Learning results': {'AUC ROC': 0.537245, 'Recall': 0.952169, 'Inference time': 2.159, 'F1': 0.692716, 'AUC PR': 0.543881, 'Precision': [0.54438, 0.5], 'Learning time': 12.844, 'CLL': -0.684587}, 'Learning time': 37.615, 'CLL': -0.686345, 'Mapping results': {'Generating mappings time': 0.04380679130554199, 'Total time': 2.5992345809936523, 'Possible mappings': 6, 'Finding best mapping': 0.0004696846008300781, 'Generating paths time': 2.4405179023742676, 'Knowledge compiling time': 0.11443424224853516}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38894034888452006;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1139451882512657;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.22272278883431917;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13719647304484542;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31802153688618584;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6179115185525579;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18208848144744208;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.17297320076329933;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11917766121275879;  // std dev = 2,866, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.028067997970922944;  // std dev = 0,687, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12977816119346758;  // std dev = 2,919, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03537595553139093;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5852045368902884;  // std dev = 0,970, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3422559002782757;  // std dev = 0,073, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.22650384091802958;  // std dev = 1,260, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.5103931117901411;  // std dev = 0,911, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.25947151394225343;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5077288968023255;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15652122465269686;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0844190358267198;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05065625228646201;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4442600775045801;  // std dev = 0,057, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.10110946089623335;  // std dev = 2,223, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08963937019521104;  // std dev = 1,704, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.19882169514455492;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4032199053637527;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1276588311229137;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06912093410345732;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.043301955824096995;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14451872476133235;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3813305888747796;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1427692012556116;  // std dev = 0,002, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.16782444508259833;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07915555011241564;  // std dev = 2,847, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.07530094001749063;  // std dev = 0,437, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.017435214943501486;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10881260500925741;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.28673084690500433;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12617101605819286;  // std dev = 0,002, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.14567610046560386;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06575694058033307;  // std dev = 2,846, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.058614813719179745;  // std dev = 1,010, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06311743800845497;  // std dev = 2,784, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.014897517961301347;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0154171640204894;  // std dev = 0,381, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.009847144715203152;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.1689479120915316;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.0969392118955852;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.01380414707363952;  // std dev = 0,233, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04870494934147216;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return -0.02054886455382941;  // std dev = 0,576, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05998777519874909;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012706490869684223;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2834686093701936;  // std dev = 0,052, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.0028639442703255543;  // std dev = 2,756, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.1355242786596578;  // std dev = 1,925, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.06624430607109351;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.011863254729099389;  // std dev = 0,232, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03985041597496365;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.017467984819580534;  // std dev = 0,578, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04877080326181991;  // std dev = 2,897, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010821135570596434;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2302027453357483;  // std dev = 0,047, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.055763342530767736;  // std dev = 0,393, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.050817340915702676;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.010187620152861059;  // std dev = 0,231, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.012692431874038452;  // std dev = 0,841, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03796751773761088;  // std dev = 2,844, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.014871962584493146;  // std dev = 0,580, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.03942681951512088;  // std dev = 2,896, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.00920347025267926;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.543928
   AUC PR    = 0.559721
   CLL	      = -0.686924
   Precision = 0.546031 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.69145


Total learning time: 26.197 seconds
Total inference time: 4.126 seconds
AUC ROC: 0.543928


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 02:04:03
{'AUC ROC': 0.543928, 'Recall': 0.94244, 'Inference time': 4.126, 'F1': 0.69145, 'AUC PR': 0.559721, 'Precision': [0.546031, 0.5], 'Learning time': 26.197, 'CLL': -0.686924}


Starting experiment #3 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'actor(person).', 'director(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.10241293907165527
   Generating paths time   = 2.4478776454925537
   Generating mappings time   = 0.04297208786010742
   Possible mappings   = 6
   Finding best mapping   = 0.0004622936248779297
   Total time   = 2.5937304496765137


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713612662632881;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04081037392942105;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035168675979243974;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03018284839116349;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.025811541495858664;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02200525834155446;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767193453249417;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018710481180709487;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325496383829088;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0158728462379152;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545842
   AUC PR    = 0.552218
   CLL	      = -0.685106
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 8.254 seconds
Total inference time: 2.336 seconds
AUC ROC: 0.545842


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}]]
[{'': [0.2474035457827825, 0.16220850480109833]}, {'': [0.24740354578278867, 0.16220850480109672]}, {'': [0.24740354578278376, 0.162208504801097]}, {'': [0.24740354578279572, 0.16220850480109708]}, {'': [0.2474035457827851, 0.16220850480109775]}, {'': [0.24740354578278675, 0.16220850480109666]}, {'': [0.2474035457827889, 0.16220850480109694]}, {'': [0.24740354578278811, 0.16220850480109822]}, {'': [0.24740354578279392, 0.16220850480109725]}, {'': [0.24740354578279258, 0.16220850480109716]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.060072012022589036;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.05415160427918019;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17700123868430692;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04342233408114913;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.17908130156757932;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.23052824690519874;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.1522129457929909;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.037602123272063734;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17798931076361696;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03509198193213304;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551628215971048;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.030116779225816077;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227637455511952;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11770951784376114;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.023127826609849734;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686558553297991;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06280470199369181;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.02031173621282924;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.057672135059805195;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09345236088070237;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.01646187693358551;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.07557710541212799;  // std dev = 0,499, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.044594699087665675;  // std dev = 0,497, 621,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=343 */
%   else return 0.015705029941818473;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.547583
   AUC PR    = 0.553326
   CLL	      = -0.685069
   Precision = 0.552968 at threshold = 0.5
   Recall    = 0.914307
   F1        = 0.689145


Total learning time: 7.82 seconds
Total inference time: 2.532 seconds
AUC ROC: 0.547583


Refined model AUC ROC: 0.547583


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 03:59:53
{'AUC ROC': 0.547583, 'Recall': 0.914307, 'Inference time': 2.532, 'F1': 0.689145, 'AUC PR': 0.553326, 'Precision': [0.552968, 0.5], 'Parameter Learning results': {'AUC ROC': 0.545842, 'Recall': 0.94413, 'Inference time': 2.336, 'F1': 0.697434, 'AUC PR': 0.552218, 'Precision': [0.552952, 0.5], 'Learning time': 8.254, 'CLL': -0.685106}, 'Learning time': 16.073999999999998, 'CLL': -0.685069, 'Mapping results': {'Generating mappings time': 0.04297208786010742, 'Total time': 2.5937304496765137, 'Possible mappings': 6, 'Finding best mapping': 0.0004622936248779297, 'Generating paths time': 2.4478776454925537, 'Knowledge compiling time': 0.10241293907165527}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.05814893509951211;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054133610070535396;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.23869659017859288;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.290143535516212;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.15887936681234446;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04392374707627684;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003572431765;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.040738054806141476;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17798954258129907;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03510602562133965;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551646658938946;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03012910007712179;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06389049947932002;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10264679991878378;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else return 0.025765824945611023;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686524416008546;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.021966666755984684;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0576721260861384;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018678120944951897;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325538460947414;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.015845870858509668;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545816
   AUC PR    = 0.552219
   CLL	      = -0.685055
   Precision = 0.552968 at threshold = 0.5
   Recall    = 0.914307
   F1        = 0.689145


Total learning time: 9.738 seconds
Total inference time: 2.003 seconds
AUC ROC: 0.545816


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 04:00:05
{'AUC ROC': 0.545816, 'Recall': 0.914307, 'Inference time': 2.003, 'F1': 0.689145, 'AUC PR': 0.552219, 'Precision': [0.552968, 0.5], 'Learning time': 9.738, 'CLL': -0.685055}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.058861732482910156
   Generating paths time   = 2.451704502105713
   Generating mappings time   = 0.043512582778930664
   Possible mappings   = 6
   Finding best mapping   = 0.0005326271057128906
   Total time   = 2.554616689682007


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.435093
   AUC PR    = 0.441949
   CLL	      = -0.710668
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 9.452 seconds
Total inference time: 2.154 seconds
AUC ROC: 0.435093


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869756838500584;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.4745707005583654;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7274606653472347;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.2432927212252934;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.022539334652765343;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.308335913968302;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24454302018828433;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18787112413723794;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26463182311573386;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4557171903896266;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09566787686634326;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11068242918718019;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14081272651723512;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697556229553719;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08030398864702114;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060284724680229426;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13855500416240343;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.2929958630228659;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.011051819225574966;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14280860011636534;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04411958212383705;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.43732
   AUC PR    = 0.448175
   CLL	      = -0.713428
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 38.52 seconds
Total inference time: 4.01 seconds
AUC ROC: 0.43732


Refined model AUC ROC: 0.43732


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 04:01:02
{'AUC ROC': 0.43732, 'Recall': 0.973731, 'Inference time': 4.01, 'F1': 0.665551, 'AUC PR': 0.448175, 'Precision': [0.505548, 0.5], 'Parameter Learning results': {'AUC ROC': 0.435093, 'Recall': 1.0, 'Inference time': 2.154, 'F1': 0.671651, 'AUC PR': 0.441949, 'Precision': [0.505628, 0.5], 'Learning time': 9.452, 'CLL': -0.710668}, 'Learning time': 47.972, 'CLL': -0.713428, 'Mapping results': {'Generating mappings time': 0.043512582778930664, 'Total time': 2.554616689682007, 'Possible mappings': 6, 'Finding best mapping': 0.0005326271057128906, 'Generating paths time': 2.451704502105713, 'Knowledge compiling time': 0.058861732482910156}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024251324982943;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24459794993772643;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3141971185441284;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5020534027148095;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.12438762070657328;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.10282216099917285;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1190342261827654;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1864946722403047;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3036488551998581;  // std dev = 1,489, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5597980430449544;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09479556393619903;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1902019569550456;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2830526945337595;  // std dev = 1,520, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.0450138731090994;  // std dev = 1,224, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.13926824172045835;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15765084547124125;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698302211259143;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.1184096008057685;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08033510226858304;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08929950297101424;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1209679802238451;  // std dev = 1,499, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.2760359621912758;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.025406187677231018;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07544639833211673;  // std dev = 1,224, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2537878367198863;  // std dev = 1,545, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.18949143385764478;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05792257809082702;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.06768489277035551;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045458520851238686;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05155003361021215;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.448838
   AUC PR    = 0.455374
   CLL	      = -0.713442
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 28.652 seconds
Total inference time: 3.915 seconds
AUC ROC: 0.448838


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 04:01:35
{'AUC ROC': 0.448838, 'Recall': 0.973731, 'Inference time': 3.915, 'F1': 0.665551, 'AUC PR': 0.455374, 'Precision': [0.505548, 0.5], 'Learning time': 28.652, 'CLL': -0.713442}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.06107783317565918
   Generating paths time   = 2.219587802886963
   Generating mappings time   = 0.0439143180847168
   Possible mappings   = 6
   Finding best mapping   = 0.00047588348388671875
   Total time   = 2.325061082839966


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.10989718684776263;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3381324625115332;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.09598593207565466;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792220410552898;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08294278301248605;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225960724865444;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.070983394688111;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17292314273443157;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.06023243295977683;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.132116822336117;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.05073254996009713;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997146552308236;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.0424607827785455;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526239702478985;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.035347369736667855;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652161392412218;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02929340425641169;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240424163714376;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.024185398482155205;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.548689
   AUC PR    = 0.556347
   CLL	      = -0.684209
   Precision = 0.557115 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700974


Total learning time: 16.792 seconds
Total inference time: 1.922 seconds
AUC ROC: 0.548689


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}]]
[{'': [0.2487863084225942, 0.1883710694899519]}, {'': [0.2487863084226126, 0.1883710694899506]}, {'': [0.24878630842260438, 0.18837106948995108]}, {'': [0.24878630842260832, 0.18837106948995117]}, {'': [0.2487863084225907, 0.18837106948995028]}, {'': [0.24878630842259658, 0.1883710694899514]}, {'': [0.2487863084225935, 0.18837106948995186]}, {'': [0.24878630842259572, 0.18837106948995172]}, {'': [0.24878630842260163, 0.1883710694899495]}, {'': [0.24878630842260596, 0.18837106948995072]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3429974199479972;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.10989718684776263;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3201968410334073;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.338691092312373;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.09598593207565466;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792181628190341;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05341675348645571;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.08492587454781637;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22259371122460747;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.07098063117443515;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17292227028833493;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03039958704018058;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03523696934738653;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.06417736481795783;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11890458163020111;  // std dev = 0,501, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.13253164965125364;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.02564264006411888;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.052404923666020176;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997203178548542;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02156121085881084;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.0438468392865831;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526358428585606;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.03532515279396741;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652308752829413;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.0292751733436132;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005630998564568591;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.04363658462767256;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.007384357349843147;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.025298013648213387;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */


Results
   AUC ROC   = 0.550227
   AUC PR    = 0.557304
   CLL	      = -0.684309
   Precision = 0.558193 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.688385


Total learning time: 13.064 seconds
Total inference time: 2.413 seconds
AUC ROC: 0.550227


Refined model AUC ROC: 0.550227


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 04:02:13
{'AUC ROC': 0.550227, 'Recall': 0.897783, 'Inference time': 2.413, 'F1': 0.688385, 'AUC PR': 0.557304, 'Precision': [0.558193, 0.5], 'Parameter Learning results': {'AUC ROC': 0.548689, 'Recall': 0.944992, 'Inference time': 1.922, 'F1': 0.700974, 'AUC PR': 0.556347, 'Precision': [0.557115, 0.5], 'Learning time': 16.792, 'CLL': -0.684209}, 'Learning time': 29.856, 'CLL': -0.684309, 'Mapping results': {'Generating mappings time': 0.0439143180847168, 'Total time': 2.325061082839966, 'Possible mappings': 6, 'Finding best mapping': 0.00047588348388671875, 'Generating paths time': 2.219587802886963, 'Knowledge compiling time': 0.06107783317565918}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.553294385965907;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.3372845337491515;  // std dev = 0,499, 1.015,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=542 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27921377579935713;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08292326596942692;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.38980198925105003;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16942331289944673;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.22336693263253443;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.049492349460222976;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.049492349460222976;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.074058708500753;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11179448251505394;  // std dev = 0,495, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.17495444031547203;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04230523123044961;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.04230523123044961;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0627752851924111;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321119725270787;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03597849900251927;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.05167065981517243;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2352034172411391;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.059348882741398726;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.10053510408776625;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.028020199521793267;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.030464050771478006;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04430614799503348;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526573738650454;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.03528604518610173;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056529508190082706;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017921428588203434;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.030003760552449563;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042414190186904406;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01499264340775487;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01518413120910002;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.025439572714734744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.555292
   AUC PR    = 0.567553
   CLL	      = -0.683602
   Precision = 0.559817 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.691668


Total learning time: 19.578 seconds
Total inference time: 2.338 seconds
AUC ROC: 0.555292


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 04:02:35
{'AUC ROC': 0.555292, 'Recall': 0.904762, 'Inference time': 2.338, 'F1': 0.691668, 'AUC PR': 0.567553, 'Precision': [0.559817, 0.5], 'Learning time': 19.578, 'CLL': -0.683602}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.11281347274780273
   Generating paths time   = 2.4067301750183105
   Generating mappings time   = 0.03442978858947754
   Possible mappings   = 6
   Finding best mapping   = 0.0003814697265625
   Total time   = 2.5543601512908936


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1659690293797968;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12746201339668561;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09685618727552187;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314632774922773;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505128868533588;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135677853271354;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.561798
   AUC PR    = 0.566326
   CLL	      = -0.685519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.779 seconds
Total inference time: 1.702 seconds
AUC ROC: 0.561798


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}]]
[{'': [0.24982563183941908, 0.2104289513238537]}, {'': [0.24982563183938786, 0.21042895132385236]}, {'': [0.24982563183939718, 0.2104289513238527]}, {'': [0.24982563183938641, 0.2104289513238534]}, {'': [0.24982563183940412, 0.2104289513238524]}, {'': [0.2498256318393981, 0.21042895132385156]}, {'': [0.2498256318394109, 0.21042895132385186]}, {'': [0.24982563183940082, 0.21042895132385175]}, {'': [0.24982563183940212, 0.2104289513238521]}, {'': [0.2498256318394016, 0.21042895132385186]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.36898708538852476;  // std dev = 0,500, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7961108807445803;  // std dev = 0,082, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19294090946490175;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7947991515567874;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.41223048466937423;  // std dev = 1,348, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.5080193346218546;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3169347306228834;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26481962579386586;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.576327188058275;  // std dev = 0,113, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20438105378157226;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5739834798541117;  // std dev = 0,062, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21122115503351377;  // std dev = 0,499, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.434147129628085;  // std dev = 0,108, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1731428097637512;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4320141649878252;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1650928970274485;  // std dev = 0,499, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12723041263636437;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09682290273097456;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07323420023024889;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.055203890097911414;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3709391815896272;  // std dev = 0,198, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.3691196225224965;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.013402419796782286;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04040435151460191;  // std dev = 0,498, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   else return 0.029974347592586485;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.575425
   AUC PR    = 0.588729
   CLL	      = -0.679784
   Precision = 0.658291 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.106116


Total learning time: 32.589 seconds
Total inference time: 3.628 seconds
AUC ROC: 0.575425


Refined model AUC ROC: 0.575425


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 04:03:26
{'AUC ROC': 0.575425, 'Recall': 0.057709, 'Inference time': 3.628, 'F1': 0.106116, 'AUC PR': 0.588729, 'Precision': [0.658291, 0.5], 'Parameter Learning results': {'AUC ROC': 0.561798, 'Recall': 0.0, 'Inference time': 1.702, 'F1': nan, 'AUC PR': 0.566326, 'Precision': [nan, 0.5], 'Learning time': 9.779, 'CLL': -0.685519}, 'Learning time': 42.367999999999995, 'CLL': -0.679784, 'Mapping results': {'Generating mappings time': 0.03442978858947754, 'Total time': 2.5543601512908936, 'Possible mappings': 6, 'Finding best mapping': 0.0003814697265625, 'Generating paths time': 2.4067301750183105, 'Knowledge compiling time': 0.11281347274780273}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6527641757038541;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.34723582429614586;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.45276417570385413;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1527641757038541;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.6527641757038541;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16263981579163453;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12739558371924842;  // std dev = 0,499, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0968260880754233;  // std dev = 0,499, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314018447789652;  // std dev = 0,499, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0550595388197295;  // std dev = 0,499, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5159794452175493;  // std dev = 0,116, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.41917654444764396;  // std dev = 0,171, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.4685350855219861;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41983984998904567;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.40758116039429737;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.3329498891095505;  // std dev = 0,069, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2066159187732907;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.03888067745036253;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   | | else return 0.03659138646768987;  // std dev = 0,462, 91,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=28 */


Results
   AUC ROC   = 0.575845
   AUC PR    = 0.579293
   CLL	      = -0.681558
   Precision = 0.620853 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.105603


Total learning time: 23.473 seconds
Total inference time: 2.877 seconds
AUC ROC: 0.575845


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 04:03:52
{'AUC ROC': 0.575845, 'Recall': 0.057709, 'Inference time': 2.877, 'F1': 0.105603, 'AUC PR': 0.579293, 'Precision': [0.620853, 0.5], 'Learning time': 23.473, 'CLL': -0.681558}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.12064814567565918
   Generating paths time   = 2.3717634677886963
   Generating mappings time   = 0.03439521789550781
   Possible mappings   = 6
   Finding best mapping   = 0.00036454200744628906
   Total time   = 2.5271759033203125


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.537245
   AUC PR    = 0.543881
   CLL	      = -0.684587
   Precision = 0.54438 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.692716


Total learning time: 19.102 seconds
Total inference time: 2.218 seconds
AUC ROC: 0.537245


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8055173561521439;  // std dev = 0,973, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.0168510649004878;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.15444523139580865;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.7474809064030066;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.2838028748560067;  // std dev = 2,409, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.07950355285970692;  // std dev = 1,770, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.39586522947349734;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6458361029231807;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1541638970768193;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.15542168768424494;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13925529742508846;  // std dev = 2,915, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.07001067783705696;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.317054602281415;  // std dev = 0,483, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6265604494408239;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1734395505591761;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17478093529555216;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11982977904762943;  // std dev = 2,888, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.04227666042875018;  // std dev = 0,785, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.14162478099178044;  // std dev = 2,946, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0314460184682569;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5079505845370549;  // std dev = 0,057, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.11361799290177058;  // std dev = 0,408, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.2551095603882212;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5180822147380465;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14996635510020753;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.084804179064784;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.16367717207405386;  // std dev = 1,233, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10014213386207137;  // std dev = 2,785, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.02714143330673669;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19115352795759943;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.40275940839024865;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13183656314500067;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07155499339225058;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.016867384357854908;  // std dev = 0,768, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1026106197486677;  // std dev = 2,940, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.023352617448854;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1448009522430668;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06675108734542416;  // std dev = 0,434, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return -0.012526950448787572;  // std dev = 0,583, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0872009823024716;  // std dev = 2,900, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02003784869413433;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3100132642149947;  // std dev = 0,056, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.024439752151737423;  // std dev = 2,755, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.15157423444993742;  // std dev = 1,925, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.03247206598776993;  // std dev = 0,400, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.12227652836842898;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.13520560993473088;  // std dev = 0,430, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.17066820034508892;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05189465965293173;  // std dev = 2,843, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.03032295937734612;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.43729620834763455;  // std dev = 1,020, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.458870831440807;  // std dev = 0,186, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.02538711888795209;  // std dev = 0,401, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.025213941886164003;  // std dev = 0,400, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09172933902364784;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.006350313689163386;  // std dev = 0,276, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return 0.0351557273987468;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0562859374276187;  // std dev = 2,877, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.024690959241404704;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.37351927793841255;  // std dev = 1,034, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.2997128768353994;  // std dev = 0,046, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.18153396284001191;  // std dev = 1,085, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.2811478148779416;  // std dev = 0,908, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06291781369583481;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.039228127656074106;  // std dev = 0,431, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.016100063991709622;  // std dev = 0,581, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05663597971168101;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.009037995895824314;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.12663239374366442;  // std dev = 0,150, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.007237162213088768;  // std dev = 2,186, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.11702951652009741;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.05063601991657524;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4081192411812794;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21841676452080824;  // std dev = 0,033, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.01750953670826724;  // std dev = 0,431, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.039465856019037;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00767743511957353;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.552273
   AUC PR    = 0.572375
   CLL	      = -0.685736
   Precision = 0.546802 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.692067


Total learning time: 26.836 seconds
Total inference time: 5.159 seconds
AUC ROC: 0.552273


Refined model AUC ROC: 0.552273


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 04:04:49
{'AUC ROC': 0.552273, 'Recall': 0.94244, 'Inference time': 5.159, 'F1': 0.692067, 'AUC PR': 0.572375, 'Precision': [0.546802, 0.5], 'Parameter Learning results': {'AUC ROC': 0.537245, 'Recall': 0.952169, 'Inference time': 2.218, 'F1': 0.692716, 'AUC PR': 0.543881, 'Precision': [0.54438, 0.5], 'Learning time': 19.102, 'CLL': -0.684587}, 'Learning time': 45.938, 'CLL': -0.685736, 'Mapping results': {'Generating mappings time': 0.03439521789550781, 'Total time': 2.5271759033203125, 'Possible mappings': 6, 'Finding best mapping': 0.00036454200744628906, 'Generating paths time': 2.3717634677886963, 'Knowledge compiling time': 0.12064814567565918}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.15444523139580865;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.5708687584530676;  // std dev = 0,332, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.31122354149151127;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.10762533257259761;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39586522947349756;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6382893592786268;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1617106407213732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11101663200589931;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.14154274242296505;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3174933837535504;  // std dev = 0,487, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.532484644543276;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14096895064493492;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539660047640662;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.016971225506402992;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1340443962381104;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5133690433504484;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.15886939453484608;  // std dev = 2,780, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.030087079213268718;  // std dev = 1,949, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.19619910886242714;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.043340761490434934;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.2653428489695291;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.20402576474777906;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06846474700005736;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05342020497514703;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19099646974843074;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.40308785938223257;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13104029678065027;  // std dev = 0,002, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.20089797469613588;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09118518560888833;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.009505794805823564;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09890376589298659;  // std dev = 2,977, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02661684760780873;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.34279202687885596;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.0923653473833496;  // std dev = 2,784, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.01891400793708492;  // std dev = 1,957, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.09354180985221487;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.04592183477244615;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.15577069620890777;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.017820044364337387;  // std dev = 0,281, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07394496946155737;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.03696545787696663;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2701880663436769;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.05612114567705356;  // std dev = 2,775, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.05547042719191518;  // std dev = 1,956, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11296680180525094;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.015060071664751824;  // std dev = 0,280, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.04191319673828321;  // std dev = 0,871, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0633109980694829;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.0651858689184586;  // std dev = 0,459, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.017610723711346404;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2203107001041844;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.040874369017314276;  // std dev = 2,802, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.07191573679591377;  // std dev = 1,907, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.084687240230833;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07964173614575212;  // std dev = 0,351, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0364400490257995;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.11356644762063789;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.040411417356419094;  // std dev = 2,788, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01504934565549432;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.08523109054338661;  // std dev = 0,223, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.04207814643206863;  // std dev = 2,729, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.09535121055092698;  // std dev = 1,904, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.056105828053090195;  // std dev = 2,725, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.055553753090593155;  // std dev = 1,901, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.06765395820928846;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.002479254910697948;  // std dev = 0,273, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.042273974994222904;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.021487190791548382;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.17230216089025605;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.019698347512106282;  // std dev = 2,728, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.06352981111361473;  // std dev = 1,998, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.049022054041905815;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.508150752955433;  // std dev = 0,910, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2827222797824923;  // std dev = 0,046, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.010869180977559763;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.03850092785448994;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009642012124864489;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.536445
   AUC PR    = 0.547276
   CLL	      = -0.690694
   Precision = 0.54294 at threshold = 0.5
   Recall    = 0.914876
   F1        = 0.681461


Total learning time: 33.03 seconds
Total inference time: 5.34 seconds
AUC ROC: 0.536445


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 04:05:28
{'AUC ROC': 0.536445, 'Recall': 0.914876, 'Inference time': 5.34, 'F1': 0.681461, 'AUC PR': 0.547276, 'Precision': [0.54294, 0.5], 'Learning time': 33.03, 'CLL': -0.690694}


Starting experiment #4 for imdb->cora(samevenue)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'actor(person).', 'director(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 0.0977776050567627
   Generating paths time   = 2.460468053817749
   Generating mappings time   = 0.04256081581115723
   Possible mappings   = 6
   Finding best mapping   = 0.0004734992980957031
   Total time   = 2.601285219192505


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713612662632881;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04081037392942105;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.035168675979243974;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.03018284839116349;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.025811541495858664;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.02200525834155446;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767193453249417;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.018710481180709487;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325496383829088;  // std dev = 12,465, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.0158728462379152;  // std dev = 4,186, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.545842
   AUC PR    = 0.552218
   CLL	      = -0.685106
   Precision = 0.552952 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697434


Total learning time: 5.571 seconds
Total inference time: 1.69 seconds
AUC ROC: 0.545842


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.186, 86, 22], 'true': [12.465, 282, 346]}]]
[{'': [0.2474035457827825, 0.16220850480109833]}, {'': [0.24740354578278867, 0.16220850480109672]}, {'': [0.24740354578278376, 0.162208504801097]}, {'': [0.24740354578279572, 0.16220850480109708]}, {'': [0.2474035457827851, 0.16220850480109775]}, {'': [0.24740354578278675, 0.16220850480109666]}, {'': [0.2474035457827889, 0.16220850480109694]}, {'': [0.24740354578278811, 0.16220850480109822]}, {'': [0.24740354578279392, 0.16220850480109725]}, {'': [0.24740354578279258, 0.16220850480109716]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.18378492633025587;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.10045159299692252;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04847139497712036;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.15887624348659743;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04391638399653036;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.17908130156757932;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.23052824690519874;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else return 0.04073164739501389;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17798931076361696;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07535348390914609;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03355222176418631;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551628215971048;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12271500539131136;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06422405859369085;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.026013683060615234;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227637455511952;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.10158890960710916;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.023497545725551423;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.04198142175950069;  // std dev = 0,499, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.07820524584062456;  // std dev = 0,497, 621,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=343 */
%   else return 0.021805300824006304;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05767121716663475;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04708389965412654;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.017443391448624505;  // std dev = 0,401, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04325522449617834;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.015716638607664438;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.547583
   AUC PR    = 0.553326
   CLL	      = -0.685038
   Precision = 0.552968 at threshold = 0.5
   Recall    = 0.914307
   F1        = 0.689145


Total learning time: 7.997 seconds
Total inference time: 2.353 seconds
AUC ROC: 0.547583


Refined model AUC ROC: 0.547583


Dataset: imdb->cora(samevenue), Fold: 1, Type: transfer, Time: 06:08:22
{'AUC ROC': 0.547583, 'Recall': 0.914307, 'Inference time': 2.353, 'F1': 0.689145, 'AUC PR': 0.553326, 'Precision': [0.552968, 0.5], 'Parameter Learning results': {'AUC ROC': 0.545842, 'Recall': 0.94413, 'Inference time': 1.69, 'F1': 0.697434, 'AUC PR': 0.552218, 'Precision': [0.552952, 0.5], 'Learning time': 5.571, 'CLL': -0.685106}, 'Learning time': 13.568, 'CLL': -0.685038, 'Mapping results': {'Generating mappings time': 0.04256081581115723, 'Total time': 2.601285219192505, 'Possible mappings': 6, 'Finding best mapping': 0.0004734992980957031, 'Generating paths time': 2.460468053817749, 'Knowledge compiling time': 0.0977776050567627}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40910434911224663;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.06185263880321571;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35169060423151866;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.054155296700626035;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2896520041913303;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04713612662632881;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23003671558031702;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.04081037392942105;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17799007442126974;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1647983056088734;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.03146497227554025;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13551663421406046;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else return 0.030160190705987907;  // std dev = 0,403, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10227644162143934;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07265215129115699;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.13568966644260835;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.020671953271355046;  // std dev = 0,399, 101,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07686547840949136;  // std dev = 0,497, 628,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11328717423661379;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.019318420922694625;  // std dev = 0,400, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006716520519758351;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05816346585737599;  // std dev = 0,497, 622,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=343 */
%   else return 0.018574000902870137;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005037623956814831;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.3078233033918945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04647167229692678;  // std dev = 0,497, 617,000 (wgt'ed) examples reached here.  /* #neg=275 #pos=342 */
%   else return 0.015757258891458133;  // std dev = 0,402, 108,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=22 */


Results
   AUC ROC   = 0.547766
   AUC PR    = 0.55338
   CLL	      = -0.685198
   Precision = 0.554225 at threshold = 0.5
   Recall    = 0.89128
   F1        = 0.683456


Total learning time: 10.396 seconds
Total inference time: 1.807 seconds
AUC ROC: 0.547766


Dataset: imdb->cora(samevenue), Fold: 1, Type: scratch, Time: 06:08:34
{'AUC ROC': 0.547766, 'Recall': 0.89128, 'Inference time': 1.807, 'F1': 0.683456, 'AUC PR': 0.55338, 'Precision': [0.554225, 0.5], 'Learning time': 10.396, 'CLL': -0.685198}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 0.1023099422454834
   Generating paths time   = 2.445235252380371
   Generating mappings time   = 0.044100046157836914
   Possible mappings   = 6
   Finding best mapping   = 0.00047135353088378906
   Total time   = 2.5921220779418945


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.435093
   AUC PR    = 0.441949
   CLL	      = -0.710668
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 18.802 seconds
Total inference time: 1.49 seconds
AUC ROC: 0.435093


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5170719622367218;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.09446743783575556;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37721333137930785;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.41257245288266015;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08165239320886175;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.5698600964098005;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.02224516674809409;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.307225031927384;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3151786576185066;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.06990902274840138;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24374108086073518;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2876841046514939;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5423135601775986;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06826312297685466;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18619608645869715;  // std dev = 0,491, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14222767640907868;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1808242891006053;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3740499575820837;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09066228529007293;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08452248630008727;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.170631141465126;  // std dev = 1,715, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.0464941634873521;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10541471095041291;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1371864800265475;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.2913304485236379;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06857550736133977;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06597675849076132;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07960084502064346;  // std dev = 0,491, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06060295058668723;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.08049448697707014;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.19944590369613202;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.036649938578186894;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.030927156976055803;  // std dev = 1,217, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04480985696560114;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.438383
   AUC PR    = 0.451598
   CLL	      = -0.717304
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 37.699 seconds
Total inference time: 5.443 seconds
AUC ROC: 0.438383


Refined model AUC ROC: 0.438383


Dataset: imdb->cora(samevenue), Fold: 2, Type: transfer, Time: 06:09:41
{'AUC ROC': 0.438383, 'Recall': 0.973731, 'Inference time': 5.443, 'F1': 0.665551, 'AUC PR': 0.451598, 'Precision': [0.505548, 0.5], 'Parameter Learning results': {'AUC ROC': 0.435093, 'Recall': 1.0, 'Inference time': 1.49, 'F1': 0.671651, 'AUC PR': 0.441949, 'Precision': [0.505628, 0.5], 'Learning time': 18.802, 'CLL': -0.710668}, 'Learning time': 56.501, 'CLL': -0.717304, 'Mapping results': {'Generating mappings time': 0.044100046157836914, 'Total time': 2.5921220779418945, 'Possible mappings': 6, 'Finding best mapping': 0.00047135353088378906, 'Generating paths time': 2.445235252380371, 'Knowledge compiling time': 0.1023099422454834}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5016174308657163;  // std dev = 1,503, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7502124734683522;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.09446743783575556;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3770802781211923;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31000903572142974;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24448070632409638;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.31213692602159177;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5025702385439899;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.14074984963662718;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.10248542996286672;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11858525146769057;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.32692122617559227;  // std dev = 1,545, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.010592002924368925;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.18553747302775214;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422602167076988;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15764912714796145;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10709531102434265;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11840827959193852;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.12200514718321769;  // std dev = 1,504, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3140541710688977;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.046989625654744405;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.059142688752263695;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07954191976082149;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08929849048752991;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06048328938802405;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0676841144557611;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04549205817392187;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05154943213314377;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.447679
   AUC PR    = 0.453078
   CLL	      = -0.713552
   Precision = 0.505548 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665551


Total learning time: 26.494 seconds
Total inference time: 3.342 seconds
AUC ROC: 0.447679


Dataset: imdb->cora(samevenue), Fold: 2, Type: scratch, Time: 06:10:11
{'AUC ROC': 0.447679, 'Recall': 0.973731, 'Inference time': 3.342, 'F1': 0.665551, 'AUC PR': 0.453078, 'Precision': [0.505548, 0.5], 'Learning time': 26.494, 'CLL': -0.713552}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 0.06097984313964844
   Generating paths time   = 2.460503578186035
   Generating mappings time   = 0.044097185134887695
   Possible mappings   = 6
   Finding best mapping   = 0.0004711151123046875
   Total time   = 2.566056728363037


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3929870116451405;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.10989718684776263;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3381324625115332;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.09598593207565466;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792220410552898;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.08294278301248605;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2225960724865444;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.070983394688111;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17292314273443157;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.06023243295977683;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.132116822336117;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.05073254996009713;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09997146552308236;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.0424607827785455;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526239702478985;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.035347369736667855;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652161392412218;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.02929340425641169;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240424163714376;  // std dev = 15,922, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else return 0.024185398482155205;  // std dev = 5,190, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */


Results
   AUC ROC   = 0.548689
   AUC PR    = 0.556347
   CLL	      = -0.684209
   Precision = 0.557115 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700974


Total learning time: 12.591 seconds
Total inference time: 2.006 seconds
AUC ROC: 0.548689


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.19, 107, 36], 'true': [15.922, 474, 545]}]]
[{'': [0.2487863084225942, 0.1883710694899519]}, {'': [0.2487863084226126, 0.1883710694899506]}, {'': [0.24878630842260438, 0.18837106948995108]}, {'': [0.24878630842260832, 0.18837106948995117]}, {'': [0.2487863084225907, 0.18837106948995028]}, {'': [0.24878630842259658, 0.1883710694899514]}, {'': [0.2487863084225935, 0.18837106948995186]}, {'': [0.24878630842259572, 0.18837106948995172]}, {'': [0.24878630842260163, 0.1883710694899495]}, {'': [0.24878630842260596, 0.18837106948995072]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3429974199479972;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.10989718684776263;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3201968410334073;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.338691092312373;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06645990254962432;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.06645990254962432;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.10023768032740289;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.264837208584946;  // std dev = 0,500, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.27966938709156175;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.05751914137229815;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.08464412829501126;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22259260046213117;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.045541352714984724;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.07267953609202804;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13508320696065945;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.17418803613318817;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.060215709783285956;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13211223757641827;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029626080946493785;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.05213514978322811;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09131710132428125;  // std dev = 0,501, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return 0.10024181814398093;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else return 0.04244048509871134;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07526310072208378;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014492716230544834;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.018170703547013903;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.038066554346219104;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652369406534942;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012097430572718377;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.030413798978034017;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04240697717184499;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010082550328351465;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.02509486544235546;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */


Results
   AUC ROC   = 0.550224
   AUC PR    = 0.557303
   CLL	      = -0.684343
   Precision = 0.558193 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.688385


Total learning time: 13.861 seconds
Total inference time: 1.974 seconds
AUC ROC: 0.550224


Refined model AUC ROC: 0.550224


Dataset: imdb->cora(samevenue), Fold: 3, Type: transfer, Time: 06:10:45
{'AUC ROC': 0.550224, 'Recall': 0.897783, 'Inference time': 1.974, 'F1': 0.688385, 'AUC PR': 0.557303, 'Precision': [0.558193, 0.5], 'Parameter Learning results': {'AUC ROC': 0.548689, 'Recall': 0.944992, 'Inference time': 2.006, 'F1': 0.700974, 'AUC PR': 0.556347, 'Precision': [0.557115, 0.5], 'Learning time': 12.591, 'CLL': -0.684209}, 'Learning time': 26.451999999999998, 'CLL': -0.684343, 'Mapping results': {'Generating mappings time': 0.044097185134887695, 'Total time': 2.566056728363037, 'Possible mappings': 6, 'Finding best mapping': 0.0004711151123046875, 'Generating paths time': 2.460503578186035, 'Knowledge compiling time': 0.06097984313964844}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3396304165809938;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else return 0.39357403631408244;  // std dev = 0,499, 988,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33812010694463035;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.09770806818533286;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2792126197535834;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05289623415914891;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08667401193692732;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22259077390099516;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04532547220032468;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05259950478597565;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07413127060990078;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3370849300650318;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.08623160778183807;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else return 0.17480547671401248;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else return 0.06019728557069638;  // std dev = 0,434, 143,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,492, 1.162,000 (wgt'ed) examples reached here.  /* #neg=581 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13210741567464265;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03611515744107154;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051682743695114074;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0999710380288362;  // std dev = 0,499, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021262992017195958;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.04384806893469043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19590361833356007;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.010007401492837919;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else return 0.07669735235894085;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0236979753471323;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.036090917606420726;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05652868417041055;  // std dev = 0,498, 1.019,000 (wgt'ed) examples reached here.  /* #neg=474 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011895311071346877;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.019900380640170343;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031178636577149744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.555261
   AUC PR    = 0.567544
   CLL	      = -0.685924
   Precision = 0.894737 at threshold = 0.5
   Recall    = 0.006979
   F1        = 0.013849


Total learning time: 17.773 seconds
Total inference time: 2.506 seconds
AUC ROC: 0.555261


Dataset: imdb->cora(samevenue), Fold: 3, Type: scratch, Time: 06:11:05
{'AUC ROC': 0.555261, 'Recall': 0.006979, 'Inference time': 2.506, 'F1': 0.013849, 'AUC PR': 0.567544, 'Precision': [0.894737, 0.5], 'Learning time': 17.773, 'CLL': -0.685924}


Starting fold 4

Mapping Results
   Knowledge compiling time   = 0.06959199905395508
   Generating paths time   = 2.487689733505249
   Generating mappings time   = 0.04372119903564453
   Possible mappings   = 6
   Finding best mapping   = 0.0004725456237792969
   Total time   = 2.601480722427368


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1659690293797968;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12746201339668561;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0693477229627287;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09685618727552187;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07314632774922773;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505128868533588;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04135677853271354;  // std dev = 18,708, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 4,424, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.561798
   AUC PR    = 0.566326
   CLL	      = -0.685519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.916 seconds
Total inference time: 1.786 seconds
AUC ROC: 0.561798


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.424, 65, 28], 'true': [18.708, 682, 719]}]]
[{'': [0.24982563183941908, 0.2104289513238537]}, {'': [0.24982563183938786, 0.21042895132385236]}, {'': [0.24982563183939718, 0.2104289513238527]}, {'': [0.24982563183938641, 0.2104289513238534]}, {'': [0.24982563183940412, 0.2104289513238524]}, {'': [0.2498256318393981, 0.21042895132385156]}, {'': [0.2498256318394109, 0.21042895132385186]}, {'': [0.24982563183940082, 0.21042895132385175]}, {'': [0.24982563183940212, 0.2104289513238521]}, {'': [0.2498256318394016, 0.21042895132385186]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3198951458276634;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26510105178702253;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212438247410349;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6527641757038541;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.34723582429614586;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.45276417570385413;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1636023259928684;  // std dev = 0,500, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5997920769901688;  // std dev = 0,112, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.38518221289431354;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.597236812824959;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12590692878422777;  // std dev = 0,499, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.0693477229627287;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09677324953847302;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.056772850555511;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07311772949324985;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046140020427228916;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05505628423311076;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.0372773941237735;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04138070752703065;  // std dev = 0,497, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.029974347592586485;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */


Results
   AUC ROC   = 0.575478
   AUC PR    = 0.592589
   CLL	      = -0.681161
   Precision = 0.620853 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.105603


Total learning time: 16.338 seconds
Total inference time: 2.27 seconds
AUC ROC: 0.575478


Refined model AUC ROC: 0.575478


Dataset: imdb->cora(samevenue), Fold: 4, Type: transfer, Time: 06:11:39
{'AUC ROC': 0.575478, 'Recall': 0.057709, 'Inference time': 2.27, 'F1': 0.105603, 'AUC PR': 0.592589, 'Precision': [0.620853, 0.5], 'Parameter Learning results': {'AUC ROC': 0.561798, 'Recall': 0.0, 'Inference time': 1.786, 'F1': nan, 'AUC PR': 0.566326, 'Precision': [nan, 0.5], 'Learning time': 9.916, 'CLL': -0.685519}, 'Learning time': 26.254, 'CLL': -0.681161, 'Mapping results': {'Generating mappings time': 0.04372119903564453, 'Total time': 2.601480722427368, 'Possible mappings': 6, 'Finding best mapping': 0.0004725456237792969, 'Generating paths time': 2.487689733505249, 'Knowledge compiling time': 0.06959199905395508}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37135378877545316;  // std dev = 0,500, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.15922420391671543;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8066902921517024;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19330970784829754;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.8066902921517024;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.31826771617487015;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.138715741297837;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6506632610253725;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1649353016551636;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.6506632610253724;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2637770919056738;  // std dev = 0,500, 1.382,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=707 */
%   else return 0.11895679388681245;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21206820119419187;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.10056420395773388;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16576761608843402;  // std dev = 0,498, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.08395693893803027;  // std dev = 0,459, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( author(F, D) )
%   | | | then return 0.5612539830635936;  // std dev = 0,186, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6150915455367147;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.35427227274152323;  // std dev = 0,137, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.37202149555821784;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.10167910442678532;  // std dev = 1,115, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3997412956442303;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12496718562449444;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   | else return 0.07262028023248092;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( author(F, D) )
%   | | | then return 0.4265007257982396;  // std dev = 0,175, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4634836420255417;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.27903022762948915;  // std dev = 0,117, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.28225960467672817;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.09531371157711586;  // std dev = 0,498, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   | else return 0.05944072695542907;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07317779638442574;  // std dev = 0,496, 1.401,000 (wgt'ed) examples reached here.  /* #neg=682 #pos=719 */
%   else return 0.046279402385994504;  // std dev = 0,458, 93,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( author(F, D) )
%   | | | then return 0.31393501368124677;  // std dev = 0,146, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36895823133193123;  // std dev = 0,116, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.2393619174409074;  // std dev = 0,107, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.038264396323521854;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05400378911737573;  // std dev = 0,498, 1.384,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=707 */
%   | else return 0.039367504751242094;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( author(F, D) )
%   | | | then return 0.2518808809343197;  // std dev = 0,124, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25885166162490114;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.19896654468193123;  // std dev = 0,092, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1570269509121958;  // std dev = 0,828, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.03622691961745404;  // std dev = 1,081, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.2633207430838034;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.040164284937909904;  // std dev = 0,500, 1.367,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=697 */
%   | else return 0.031629469103176266;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */


Results
   AUC ROC   = 0.576898
   AUC PR    = 0.586817
   CLL	      = -0.680926
   Precision = 0.62212 at threshold = 0.5
   Recall    = 0.059471
   F1        = 0.108565


Total learning time: 28.638 seconds
Total inference time: 3.394 seconds
AUC ROC: 0.576898


Dataset: imdb->cora(samevenue), Fold: 4, Type: scratch, Time: 06:12:11
{'AUC ROC': 0.576898, 'Recall': 0.059471, 'Inference time': 3.394, 'F1': 0.108565, 'AUC PR': 0.586817, 'Precision': [0.62212, 0.5], 'Learning time': 28.638, 'CLL': -0.680926}


Starting fold 5

Mapping Results
   Knowledge compiling time   = 0.12379574775695801
   Generating paths time   = 2.4560019969940186
   Generating mappings time   = 0.04392838478088379
   Possible mappings   = 6
   Finding best mapping   = 0.00045990943908691406
   Total time   = 2.6241912841796875


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.537245
   AUC PR    = 0.543881
   CLL	      = -0.684587
   Precision = 0.54438 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.692716


Total learning time: 8.365 seconds
Total inference time: 1.465 seconds
AUC ROC: 0.537245


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.27737164896836203;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.04350068122642711;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( author(J, H), venue(J, A) )
%   | | | then return 0.3448503113621537;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15211382806214607;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return 0.23545300620524684;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12831696247257257;  // std dev = 2,888, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.07238614830967727;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31797061987021175;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5423383573441687;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13492522656875455;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.135806278759492;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11969981305762586;  // std dev = 2,907, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.184380525759484;  // std dev = 1,352, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10926503814753422;  // std dev = 2,786, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.035420645028606604;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.250032725773129;  // std dev = 0,489, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.56894978571009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2155743788961515;  // std dev = 0,070, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07572524660259453;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.030805197530344573;  // std dev = 0,669, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11824508212636868;  // std dev = 2,918, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030661823183272242;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19160042251099435;  // std dev = 0,488, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4043304612051692;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1281207292911321;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12564799378986688;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08261462317273136;  // std dev = 2,878, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04359537955077806;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.3078065428811769;  // std dev = 0,315, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.047154912129882626;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.18968719313327526;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.15426187927694446;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4415229687846078;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.189341897653934;  // std dev = 0,064, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05472881259745948;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.07340086208581434;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.020310059452329467;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10880653232045077;  // std dev = 0,487, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.17734271622352588;  // std dev = 0,708, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1580305825798722;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.05348881637422154;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.061404012751153925;  // std dev = 2,841, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.007853633746651895;  // std dev = 0,555, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06716215939059791;  // std dev = 2,898, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017389315768198937;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4305150508926289;  // std dev = 0,980, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.49014475433087806;  // std dev = 0,022, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.32739651609114073;  // std dev = 1,201, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.35721584210414015;  // std dev = 0,895, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.08872617445131001;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.00167220466424204;  // std dev = 0,282, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.049589977683144305;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.04957745511365036;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014857818196730495;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061392280193879545;  // std dev = 0,481, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03459012669404097;  // std dev = 0,420, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 1.5375365111802984E-4;  // std dev = 0,548, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.045413820863343744;  // std dev = 2,897, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012672277460921413;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3941900982819558;  // std dev = 0,993, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.5216086214127142;  // std dev = 0,063, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.35399465532746965;  // std dev = 1,147, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.2933177855809298;  // std dev = 0,902, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.053477387545261344;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.01987867870124578;  // std dev = 0,410, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.552285
   AUC PR    = 0.572378
   CLL	      = -0.684946
   Precision = 0.546111 at threshold = 0.5
   Recall    = 0.950547
   F1        = 0.693684


Total learning time: 25.723 seconds
Total inference time: 3.925 seconds
AUC ROC: 0.552285


Refined model AUC ROC: 0.552285


Dataset: imdb->cora(samevenue), Fold: 5, Type: transfer, Time: 06:12:54
{'AUC ROC': 0.552285, 'Recall': 0.950547, 'Inference time': 3.925, 'F1': 0.693684, 'AUC PR': 0.572378, 'Precision': [0.546111, 0.5], 'Parameter Learning results': {'AUC ROC': 0.537245, 'Recall': 0.952169, 'Inference time': 1.465, 'F1': 0.692716, 'AUC PR': 0.543881, 'Precision': [0.54438, 0.5], 'Learning time': 8.365, 'CLL': -0.684587}, 'Learning time': 34.088, 'CLL': -0.684946, 'Mapping results': {'Generating mappings time': 0.04392838478088379, 'Total time': 2.6241912841796875, 'Possible mappings': 6, 'Finding best mapping': 0.00045990943908691406, 'Generating paths time': 2.4560019969940186, 'Knowledge compiling time': 0.12379574775695801}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.34201990284144784;  // std dev = 2,782, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38878895395576785;  // std dev = 0,488, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450593;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1187902078280254;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.19873365448410585;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13093264915071987;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04070524497467004;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31790572238828546;  // std dev = 0,488, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5955652675691097;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20443473243089025;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1762116199644667;  // std dev = 0,001, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1147931067324234;  // std dev = 2,889, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.18058586670840526;  // std dev = 1,241, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12122087285604505;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03537595553139093;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2500178235287616;  // std dev = 0,487, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.27804147700478316;  // std dev = 0,865, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17996251273768882;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.11127171136105589;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.004515567984555563;  // std dev = 0,754, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11454623287904814;  // std dev = 2,938, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03062212191614032;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4962847096372821;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.10466928874787593;  // std dev = 2,773, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.07947126753302369;  // std dev = 1,944, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.198172926188528;  // std dev = 0,488, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.08502884741757549;  // std dev = 0,438, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.003822851944930472;  // std dev = 0,754, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09555622302017697;  // std dev = 2,936, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02641435365441102;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.37492488093757315;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.06120010330661393;  // std dev = 2,772, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.117819254127972;  // std dev = 1,934, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.15186492968538307;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4523753176870257;  // std dev = 0,879, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18538815811388148;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05641815094438282;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.07055886585547001;  // std dev = 0,447, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022715063354753682;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.29192129478443624;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.04470678380103913;  // std dev = 2,764, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09457648427567522;  // std dev = 1,941, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.06018048276351516;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.07875418941771167;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.12158497272569764;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.0017595709948375407;  // std dev = 0,300, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06453071713935805;  // std dev = 0,446, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.03050370631679452;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2354133743838977;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.03368836428229466;  // std dev = 2,764, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.0735457069901926;  // std dev = 1,940, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.04041184140363264;  // std dev = 2,770, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.09689703676052241;  // std dev = 1,861, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09121196793642866;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.08592387112708658;  // std dev = 0,374, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03593883795838564;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.025731845540934023;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061595816861273515;  // std dev = 0,483, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1531805211974345;  // std dev = 0,691, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17394568941052443;  // std dev = 0,049, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.04230088717849272;  // std dev = 0,910, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04530823489150764;  // std dev = 2,878, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.07516896171678651;  // std dev = 1,200, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.041479074348070175;  // std dev = 2,781, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011269182863522204;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.18618359886839375;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.016841461052837212;  // std dev = 2,715, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08981924980954721;  // std dev = 1,981, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.02817181422960642;  // std dev = 2,729, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.10925711932783745;  // std dev = 1,904, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.05333566417604348;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return -0.014416259059097776;  // std dev = 0,276, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03643708740438378;  // std dev = 0,445, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.01781834046669282;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.536413
   AUC PR    = 0.547267
   CLL	      = -0.689841
   Precision = 0.54307 at threshold = 0.5
   Recall    = 0.914876
   F1        = 0.681564


Total learning time: 31.079 seconds
Total inference time: 4.457 seconds
AUC ROC: 0.536413


Dataset: imdb->cora(samevenue), Fold: 5, Type: scratch, Time: 06:13:30
{'AUC ROC': 0.536413, 'Recall': 0.914876, 'Inference time': 4.457, 'F1': 0.681564, 'AUC PR': 0.547267, 'Precision': [0.54307, 0.5], 'Learning time': 31.079, 'CLL': -0.689841}


