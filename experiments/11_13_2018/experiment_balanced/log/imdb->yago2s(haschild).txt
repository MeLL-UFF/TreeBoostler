Starting experiment #1 for imdb->yago2s(haschild)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'director(person).', 'movie(movie,person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 19.82807946205139
   Generating paths time   = 2.5230462551116943
   Generating mappings time   = 0.05382680892944336
   Possible mappings   = 56
   Finding best mapping   = 0.008430004119873047
   Total time   = 22.413389444351196


Best mapping found: ['workedunder(A,B) -> haschild(A,B)', 'movie(A,B) -> created(B,A)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- created(A, C), created(B, C).;false;false
1;;haschild(A, B) :- created(A, C), created(B, C).;false;false
2;;haschild(A, B) :- created(A, C), created(B, C).;false;false
3;;haschild(A, B) :- created(A, C), created(B, C).;false;false
4;;haschild(A, B) :- created(A, C), created(B, C).;false;false
5;;haschild(A, B) :- created(A, C), created(B, C).;false;false
6;;haschild(A, B) :- created(A, C), created(B, C).;false;false
7;;haschild(A, B) :- created(A, C), created(B, C).;false;false
8;;haschild(A, B) :- created(A, C), created(B, C).;false;false
9;;haschild(A, B) :- created(A, C), created(B, C).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.3574479537255837;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.3081485579819255;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.2559496500907847;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.20580073458004333;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.1613959973242757;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.12440014188863636;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.09482486767590843;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.07179256953792754;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.0541374159907033;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.04072933530261746;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */


Results
   AUC ROC   = 0.50075
   AUC PR    = 0.502983
   CLL	      = -0.694681
   Precision = 0.941176 at threshold = 0.5
   Recall    = 0.0016
   F1        = 0.003195


Total learning time: 223.605 seconds
Total inference time: 60.048 seconds
AUC ROC: 0.50075


Structure after Parameter Learning
[['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [5.16e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [4.21e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [2.11e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}]]
[{'': [-2.5376526277146434e-16, 0.24999950862519496]}, {'': [1.9032394707859825e-16, 0.24999950862509313]}, {'': [-2.5376526277146434e-16, 0.24999950862515574]}, {'': [1.2688263138573217e-16, 0.24999950862518813]}, {'': [-3.172065784643304e-17, 0.24999950862516682]}, {'': [3.172065784643304e-17, 0.24999950862506412]}, {'': [-3.172065784643304e-17, 0.24999950862509496]}, {'': [0.0, 0.24999950862512552]}, {'': [-1.9825411154020653e-17, 0.24999950862508025]}, {'': [0.0, 0.24999950862511172]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '1;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '2;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '3;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '4;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '5;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '6;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '7;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '8;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '9;;haschild(A, B) :- created(A, C), created(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.762910839861417;  // std dev = 1,345, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.1232091760633673;  // std dev = 4,021, 83,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | else if ( diedin(A, G), wasbornin(B, H) )
%   | | | then return 0.7152917922423668;  // std dev = 4,440, 161,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=138 */
%   | | | else return 0.4498519918680665;  // std dev = 21,038, 1.832,000 (wgt'ed) examples reached here.  /* #neg=748 #pos=1.084 */
%   | else if ( actedin(A, I), actedin(B, J) )
%   | | then if ( edited(K, I), directed(L, J) )
%   | | | then return 0.8581489350995115;  // std dev = 2,60e-07, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.7299438068943833;  // std dev = 2,088, 39,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=34 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.2834983633078935;  // std dev = 27,739, 3.148,000 (wgt'ed) examples reached here.  /* #neg=1.809 #pos=1.339 */
%   | | | else return 0.353860770433984;  // std dev = 34,145, 4.664,000 (wgt'ed) examples reached here.  /* #neg=2.352 #pos=2.312 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( diedin(A, F), wasbornin(B, F) )
%   | | then return 0.7473839334745785;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( diedin(E, G), diedin(D, G) )
%   | | | then return 0.7847998464260113;  // std dev = 0,084, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.3790958098872182;  // std dev = 22,004, 2.013,000 (wgt'ed) examples reached here.  /* #neg=834 #pos=1.179 */
%   | else if ( ismarriedto(B, H) )
%   | | then if ( wasbornin(A, I), wasbornin(B, I) )
%   | | | then return 0.8094035464243597;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.20944296111813296;  // std dev = 16,803, 1.180,000 (wgt'ed) examples reached here.  /* #neg=707 #pos=473 */
%   | | else if ( ismarriedto(A, J) )
%   | | | then return 0.250851129418209;  // std dev = 27,926, 3.192,000 (wgt'ed) examples reached here.  /* #neg=1.813 #pos=1.379 */
%   | | | else return 0.3386428821072749;  // std dev = 29,506, 3.500,000 (wgt'ed) examples reached here.  /* #neg=1.646 #pos=1.854 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( livesin(F, D), wasbornin(F, E) )
%   | | then if ( diedin(F, E) )
%   | | | then return 0.7339885009702968;  // std dev = 0,377, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.6346650718424349;  // std dev = 3,007, 121,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=111 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.6984279923721214;  // std dev = 0,587, 48,000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.27641407818832153;  // std dev = 11,263, 521,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=273 */
%   | else if ( diedin(A, G), wasbornin(B, G) )
%   | | then if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | | then return 0.5835404111048876;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.7634277857730293;  // std dev = 0,125, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( ismarriedto(B, J), ismarriedto(A, K) )
%   | | | then return 0.306201716114167;  // std dev = 21,225, 1.873,000 (wgt'ed) examples reached here.  /* #neg=784 #pos=1.089 */
%   | | | else return 0.222842238038504;  // std dev = 42,368, 7.290,000 (wgt'ed) examples reached here.  /* #neg=3.958 #pos=3.332 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then return 0.4270810557365515;  // std dev = 0,101, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.6074248145809584;  // std dev = 0,380, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else if ( ismarriedto(B, G), ismarriedto(A, H) )
%   | | then if ( isaffiliatedto(A, I) )
%   | | | then return 0.0927576832227561;  // std dev = 4,689, 104,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=41 */
%   | | | else return 0.2555451196473286;  // std dev = 21,404, 1.929,000 (wgt'ed) examples reached here.  /* #neg=771 #pos=1.158 */
%   | | else if ( diedin(A, J), diedin(B, J) )
%   | | | then return 0.6858035270030526;  // std dev = 0,970, 34,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.1832744520465776;  // std dev = 43,565, 7.735,000 (wgt'ed) examples reached here.  /* #neg=4.165 #pos=3.570 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then return 0.3272642645336039;  // std dev = 0,091, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.45813743697115394;  // std dev = 0,384, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else if ( actedin(B, G), actedin(A, H) )
%   | | then if ( directed(A, I), ismarriedto(B, J) )
%   | | | then return 0.22641204725267805;  // std dev = 1,373, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5158208894323638;  // std dev = 2,345, 103,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=97 */
%   | | else if ( actedin(B, K), directed(L, K) )
%   | | | then return -0.02061597940294923;  // std dev = 7,779, 285,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=91 */
%   | | | else return 0.15702141322601101;  // std dev = 47,924, 9.406,000 (wgt'ed) examples reached here.  /* #neg=4.797 #pos=4.609 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( haswonprize(B, D), haswonprize(A, D) )
%   | then if ( actedin(A, E) )
%   | | then if ( actedin(B, E), created(B, F) )
%   | | | then return 0.5197696119631661;  // std dev = 0,174, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3703061693069246;  // std dev = 0,194, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( diedin(A, G), wasbornin(A, H) )
%   | | | then return 0.45706291533583404;  // std dev = 0,130, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5887397725691611;  // std dev = 0,203, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( wasbornin(B, I), wasbornin(A, I) )
%   | | then if ( diedin(A, I) )
%   | | | then return 0.3124850280600188;  // std dev = 0,394, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.5250870508071734;  // std dev = 0,870, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( wasbornin(A, J), diedin(K, J) )
%   | | | then return 0.075820808892969;  // std dev = 20,854, 1.860,000 (wgt'ed) examples reached here.  /* #neg=1.016 #pos=844 */
%   | | | else return 0.12656722121805325;  // std dev = 43,779, 7.929,000 (wgt'ed) examples reached here.  /* #neg=3.984 #pos=3.945 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then return 0.2292751799994191;  // std dev = 0,150, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( wasbornin(A, D) )
%   | | | then return 0.2803980893018875;  // std dev = 0,235, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.3238145180100739;  // std dev = 0,244, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else if ( wasbornin(B, G), wasbornin(A, G) )
%   | | then if ( ismarriedto(B, H), diedin(I, G) )
%   | | | then return 0.33798698464246796;  // std dev = 0,352, 48,000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.43758136645580886;  // std dev = 0,553, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( wasbornin(B, J), hascapital(K, J) )
%   | | | then return 0.001714407583032936;  // std dev = 14,313, 889,000 (wgt'ed) examples reached here.  /* #neg=531 #pos=358 */
%   | | | else return 0.0963807279176722;  // std dev = 46,240, 8.792,000 (wgt'ed) examples reached here.  /* #neg=4.469 #pos=4.323 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( isaffiliatedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(B, D) )
%   | | then if ( graduatedfrom(A, F), owns(F, G) )
%   | | | then return 0.10201883342966414;  // std dev = 1,031, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.44728880076247457;  // std dev = 1,209, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else if ( ispoliticianof(E, H), diedin(A, I) )
%   | | | then return 0.6273317720036368;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.17184320863787078;  // std dev = 4,872, 151,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=31 */
%   | else if ( wasbornin(B, J), diedin(A, J) )
%   | | then if ( ismarriedto(B, K) )
%   | | | then return 0.19503508096600763;  // std dev = 0,244, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | | else return 0.253934218635922;  // std dev = 0,233, 108,000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( diedin(A, L), wasbornin(M, L) )
%   | | | then return 0.02430906090430667;  // std dev = 19,631, 1.666,000 (wgt'ed) examples reached here.  /* #neg=920 #pos=746 */
%   | | | else return 0.08221076888333884;  // std dev = 43,862, 7.949,000 (wgt'ed) examples reached here.  /* #neg=3.957 #pos=3.992 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, D), created(A, E) )
%   | then if ( graduatedfrom(B, F), worksat(G, F) )
%   | | then if ( diedin(A, H), diedin(G, I) )
%   | | | then return 0.340581214075039;  // std dev = 0,151, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5673273744588051;  // std dev = 0,099, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( actedin(B, J), wrotemusicfor(K, E) )
%   | | | then return 0.371887868087289;  // std dev = 0,884, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.11145645625801964;  // std dev = 6,215, 193,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=67 */
%   | else if ( graduatedfrom(A, L), graduatedfrom(B, M) )
%   | | then if ( isaffiliatedto(B, N), isaffiliatedto(A, N) )
%   | | | then return 0.5189925898948047;  // std dev = 0,669, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2443094140969731;  // std dev = 3,566, 63,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=43 */
%   | | else if ( ismarriedto(B, P), ismarriedto(A, Q) )
%   | | | then return 0.09127667130663934;  // std dev = 20,880, 1.947,000 (wgt'ed) examples reached here.  /* #neg=756 #pos=1.191 */
%   | | | else return 0.04634161398837711;  // std dev = 42,914, 7.736,000 (wgt'ed) examples reached here.  /* #neg=4.097 #pos=3.639 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( graduatedfrom(B, D), livesin(A, E) )
%   | then if ( dealswith(F, E), dealswith(E, G) )
%   | | then return -0.22225413807142252;  // std dev = 0,880, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( owns(D, H), diedin(I, E) )
%   | | | then return 0.19269808594123633;  // std dev = 1,344, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.4480658332196213;  // std dev = 0,954, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( ismarriedto(B, J), iscitizenof(A, K) )
%   | | then if ( isaffiliatedto(B, L) )
%   | | | then return 0.34093190341059165;  // std dev = 0,902, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.2983758374280395;  // std dev = 3,116, 98,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=12 */
%   | | else if ( iscitizenof(A, M), hascapital(M, N) )
%   | | | then return 0.12982946397981213;  // std dev = 9,386, 377,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=219 */
%   | | | else return 0.040945155147626665;  // std dev = 47,128, 9.471,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.723 */


Results
   AUC ROC   = 0.6376
   AUC PR    = 0.660038
   CLL	      = -0.663752
   Precision = 0.676017 at threshold = 0.5
   Recall    = 0.3109
   F1        = 0.42592


Total learning time: 532.435 seconds
Total inference time: 70.825 seconds
AUC ROC: 0.6376


Refined model AUC ROC: 0.6376


Dataset: imdb->yago2s(haschild), Fold: 1, Type: transfer, Time: 00:15:46
{'F1': 0.42592, 'Recall': 0.3109, 'Mapping results': {'Knowledge compiling time': 19.82807946205139, 'Generating paths time': 2.5230462551116943, 'Generating mappings time': 0.05382680892944336, 'Possible mappings': 56, 'Total time': 22.413389444351196, 'Finding best mapping': 0.008430004119873047}, 'Precision': [0.676017, 0.5], 'Inference time': 70.825, 'Learning time': 756.04, 'Parameter Learning results': {'F1': 0.003195, 'Recall': 0.0016, 'Precision': [0.941176, 0.5], 'Inference time': 60.048, 'Learning time': 223.605, 'AUC ROC': 0.50075, 'AUC PR': 0.502983, 'CLL': -0.694681}, 'AUC ROC': 0.6376, 'AUC PR': 0.660038, 'CLL': -0.663752}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.8581489350995096;  // std dev = 1,03e-06, 165,000 (wgt'ed) examples reached here.  /* #pos=165 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( actedin(A, F), actedin(B, G) )
%   | | then if ( edited(H, G), actedin(D, G) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.8248156017661789;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( haswonprize(A, I), haswonprize(B, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4421088348488812;  // std dev = 22,016, 1.995,000 (wgt'ed) examples reached here.  /* #neg=830 #pos=1.165 */
%   | else if ( ismarriedto(A, J) )
%   | | then if ( graduatedfrom(J, K) )
%   | | | then return 0.3860992456585165;  // std dev = 6,334, 161,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=85 */
%   | | | else return 0.2756539652805937;  // std dev = 26,930, 2.982,000 (wgt'ed) examples reached here.  /* #neg=1.737 #pos=1.245 */
%   | | else if ( isaffiliatedto(B, L), isaffiliatedto(A, L) )
%   | | | then return 0.8268989350995126;  // std dev = 1,392, 64,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | | else return 0.3450542166359543;  // std dev = 33,834, 4.582,000 (wgt'ed) examples reached here.  /* #neg=2.351 #pos=2.231 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( isaffiliatedto(A, E) )
%   | then return 0.18825127742182066;  // std dev = 0,487, 104,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=41 */
%   | else return 0.4054261417213225;  // std dev = 0,484, 1.995,000 (wgt'ed) examples reached here.  /* #neg=771 #pos=1.224 */
%   else if ( ismarriedto(B, F) )
%   | then if ( iscitizenof(A, G) )
%   | | then return -0.043792038792719756;  // std dev = 0,351, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( livesin(B, H), livesin(A, I) )
%   | | | then return 0.785252051890611;  // std dev = 0,123, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23119355024923083;  // std dev = 16,417, 1.113,000 (wgt'ed) examples reached here.  /* #neg=643 #pos=470 */
%   | else if ( ismarriedto(A, J) )
%   | | then if ( isaffiliatedto(A, K) )
%   | | | then return 0.3587515948816765;  // std dev = 7,951, 256,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=139 */
%   | | | else return 0.24186082443120072;  // std dev = 26,680, 2.939,000 (wgt'ed) examples reached here.  /* #neg=1.696 #pos=1.243 */
%   | | else if ( iscitizenof(A, L), iscitizenof(B, L) )
%   | | | then return 0.7562922371045295;  // std dev = 1,688, 63,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.33148846194164644;  // std dev = 29,199, 3.445,000 (wgt'ed) examples reached here.  /* #neg=1.643 #pos=1.802 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( livesin(E, D), wasbornin(E, C) )
%   | then if ( ismarriedto(A, F) )
%   | | then return 0.6462047348265643;  // std dev = 0,154, 110,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | | else return 0.5595993905905411;  // std dev = 0,306, 56,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=49 */
%   | else if ( diedin(A, D) )
%   | | then return 0.7287762738452955;  // std dev = 0,317, 48,000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( livesin(G, C), hascapital(H, D) )
%   | | | then return 0.10593192961284875;  // std dev = 5,580, 147,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=52 */
%   | | | else return 0.33582806674922655;  // std dev = 9,303, 374,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=221 */
%   else if ( wasbornin(B, I), diedin(A, I) )
%   | then return 0.7394689475504721;  // std dev = 0,393, 90,000 (wgt'ed) examples reached here.  /* #pos=90 */
%   | else if ( isaffiliatedto(B, J), isaffiliatedto(A, J) )
%   | | then return 0.6561059259395501;  // std dev = 0,195, 83,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | | else if ( iscitizenof(B, K), iscitizenof(A, K) )
%   | | | then return 0.6502268576681444;  // std dev = 1,725, 61,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | | | else return 0.2341929252350997;  // std dev = 47,151, 9.031,000 (wgt'ed) examples reached here.  /* #neg=4.736 #pos=4.295 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.4892423756344044;  // std dev = 0,261, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( diedin(A, F), wasbornin(B, G) )
%   | | then return 0.4180034265336077;  // std dev = 0,387, 150,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=118 */
%   | | else if ( wasbornin(B, H), wasbornin(D, H) )
%   | | | then return 0.6679780147289002;  // std dev = 0,174, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.24209820658253253;  // std dev = 21,276, 1.869,000 (wgt'ed) examples reached here.  /* #neg=802 #pos=1.067 */
%   else if ( wasbornin(A, I), wasbornin(B, J) )
%   | then return 0.2802597886877589;  // std dev = 0,449, 541,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=333 */
%   | else if ( ismarriedto(A, K), diedin(A, L) )
%   | | then if ( wasbornin(B, L) )
%   | | | then return 0.6301837077293387;  // std dev = 0,036, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.07268104085217085;  // std dev = 11,097, 558,000 (wgt'ed) examples reached here.  /* #neg=369 #pos=189 */
%   | | else if ( wasbornin(B, M), livesin(N, M) )
%   | | | then return 0.11342381618383895;  // std dev = 14,399, 902,000 (wgt'ed) examples reached here.  /* #neg=543 #pos=359 */
%   | | | else return 0.2009374214676345;  // std dev = 37,988, 5.877,000 (wgt'ed) examples reached here.  /* #neg=3.046 #pos=2.831 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( created(A, E), influences(F, A) )
%   | then return -0.1930653482268392;  // std dev = 0,378, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | else if ( wasbornin(B, G), diedin(A, G) )
%   | | then return 0.42421788712448133;  // std dev = 0,342, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( diedin(D, H), wasbornin(B, H) )
%   | | | then return 0.521991977269762;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.19735581986240827;  // std dev = 21,633, 1.982,000 (wgt'ed) examples reached here.  /* #neg=816 #pos=1.166 */
%   else if ( graduatedfrom(B, I), isaffiliatedto(A, J) )
%   | then return 0.37396568210949727;  // std dev = 0,364, 89,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=71 */
%   | else if ( ismarriedto(B, K), wasbornin(A, L) )
%   | | then if ( wasbornin(B, M), happenedin(N, L) )
%   | | | then return 0.2779769594831498;  // std dev = 2,500, 36,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=24 */
%   | | | else return -0.025687030930299653;  // std dev = 6,359, 206,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=60 */
%   | | else if ( wasbornin(B, P), diedin(A, P) )
%   | | | then return 0.5064317608071779;  // std dev = 0,625, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return 0.14510249911650236;  // std dev = 42,533, 7.461,000 (wgt'ed) examples reached here.  /* #neg=3.990 #pos=3.471 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | then return 0.3459314904128875;  // std dev = 0,279, 37,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=33 */
%   | else return 0.5706759483944835;  // std dev = 0,246, 77,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=72 */
%   else if ( actedin(B, G), directed(H, G) )
%   | then if ( ismarriedto(A, I), actedin(I, J) )
%   | | then if ( wasbornin(A, K), happenedin(L, K) )
%   | | | then return 0.1720108382542464;  // std dev = 1,013, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5156995859684097;  // std dev = 0,961, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( wasbornin(A, M), isleaderof(N, M) )
%   | | | then return 0.31728735213745074;  // std dev = 2,269, 30,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return -0.13323608284522695;  // std dev = 6,478, 239,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=55 */
%   | else if ( isaffiliatedto(B, P), isaffiliatedto(A, P) )
%   | | then return 0.4052105741943362;  // std dev = 0,207, 126,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | | else if ( wasbornin(A, Q), wasbornin(B, Q) )
%   | | | then return 0.37505788676837437;  // std dev = 0,959, 145,000 (wgt'ed) examples reached here.  /* #pos=145 */
%   | | | else return 0.11690267282353786;  // std dev = 47,343, 9.322,000 (wgt'ed) examples reached here.  /* #neg=4.792 #pos=4.530 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), iscitizenof(A, C) )
%   then return 0.3731839140340917;  // std dev = 0,224, 87,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=83 */
%   else if ( isaffiliatedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(B, D) )
%   | | then if ( graduatedfrom(A, F), owns(F, G) )
%   | | | then return 0.028742354684262027;  // std dev = 1,190, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.33082919332668015;  // std dev = 1,007, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( isaffiliatedto(E, H) )
%   | | | then return 0.32113206864035126;  // std dev = 1,490, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return -0.19367831048810732;  // std dev = 4,534, 144,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=27 */
%   | else if ( ismarriedto(A, I), isaffiliatedto(B, J) )
%   | | then if ( isaffiliatedto(I, J) )
%   | | | then return 0.393081148012475;  // std dev = 1,396, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return -0.1754330419836754;  // std dev = 4,654, 150,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.3792841868770191;  // std dev = 2,873, 113,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=104 */
%   | | | else return 0.09590541393208465;  // std dev = 47,235, 9.429,000 (wgt'ed) examples reached here.  /* #neg=4.746 #pos=4.683 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( actedin(A, E) )
%   | then if ( actedin(D, F) )
%   | | then return 0.23146636949075744;  // std dev = 0,276, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else return -0.26604237136113845;  // std dev = 0,374, 55,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
%   | else if ( iscitizenof(A, G), hascurrency(G, H) )
%   | | then return -0.29570356735998576;  // std dev = 0,322, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( iscitizenof(D, I), happenedin(J, I) )
%   | | | then return -0.17663170291266506;  // std dev = 2,320, 29,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.12014225767963232;  // std dev = 20,854, 1.961,000 (wgt'ed) examples reached here.  /* #neg=752 #pos=1.209 */
%   else if ( livesin(B, K), livesin(A, K) )
%   | then return 0.43759992962151095;  // std dev = 0,160, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | then return 0.30006684263537026;  // std dev = 0,062, 110,000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( ismarriedto(A, M), diedin(M, N) )
%   | | | then return -0.007392990691296059;  // std dev = 12,279, 691,000 (wgt'ed) examples reached here.  /* #neg=429 #pos=262 */
%   | | | else return 0.0657896612771803;  // std dev = 41,005, 7.062,000 (wgt'ed) examples reached here.  /* #neg=3.737 #pos=3.325 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then return 0.27675864629441127;  // std dev = 0,080, 186,000 (wgt'ed) examples reached here.  /* #pos=186 */
%   else if ( diedin(A, D), diedin(B, D) )
%   | then if ( participatedin(D, E), ismarriedto(B, F) )
%   | | then if ( hascapital(G, D), happenedin(E, G) )
%   | | | then return 0.5393758204270448;  // std dev = 0,157, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13918321368800796;  // std dev = 0,674, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( wasbornin(A, H), wasbornin(B, I) )
%   | | | then return 0.43618018784703966;  // std dev = 0,335, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5318590186384058;  // std dev = 0,521, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( wasbornin(B, J) )
%   | | then if ( wasbornin(A, J) )
%   | | | then return 0.24298252413783522;  // std dev = 0,520, 118,000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | | else return -0.009514584205312844;  // std dev = 20,753, 1.939,000 (wgt'ed) examples reached here.  /* #neg=1.103 #pos=836 */
%   | | else if ( wasbornin(A, K) )
%   | | | then return -1.4621346496100686E-4;  // std dev = 19,006, 1.577,000 (wgt'ed) examples reached here.  /* #neg=903 #pos=674 */
%   | | | else return 0.07614230599078019;  // std dev = 38,362, 6.129,000 (wgt'ed) examples reached here.  /* #neg=2.993 #pos=3.136 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), created(A, D) )
%   then if ( actedin(E, D), haswonprize(E, F) )
%   | then return -0.23508950976488913;  // std dev = 0,366, 39,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | else if ( directed(B, G), wasbornin(B, H) )
%   | | then return 0.49899020050818504;  // std dev = 0,204, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( isaffiliatedto(B, I), ismarriedto(A, J) )
%   | | | then return 0.42115096358080706;  // std dev = 0,149, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.06461975170954393;  // std dev = 5,753, 163,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=66 */
%   else if ( isaffiliatedto(A, K), ismarriedto(B, L) )
%   | then if ( isaffiliatedto(B, K) )
%   | | then return 0.1823275113264805;  // std dev = 0,295, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | else return -0.14539774023566723;  // std dev = 0,393, 125,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=29 */
%   | else if ( created(A, M), created(B, N) )
%   | | then return 0.3653410120056179;  // std dev = 0,381, 58,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=48 */
%   | | else if ( wasbornin(B, P), diedin(A, P) )
%   | | | then return 0.2276990885002867;  // std dev = 0,912, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return 0.04153620980390491;  // std dev = 46,866, 9.398,000 (wgt'ed) examples reached here.  /* #neg=4.764 #pos=4.634 */


Results
   AUC ROC   = 0.662911
   AUC PR    = 0.689357
   CLL	      = -0.652782
   Precision = 0.710488 at threshold = 0.5
   Recall    = 0.3394
   F1        = 0.459363


Total learning time: 435.622 seconds
Total inference time: 61.359 seconds
AUC ROC: 0.662911


Dataset: imdb->yago2s(haschild), Fold: 1, Type: scratch, Time: 00:24:06
{'F1': 0.459363, 'Recall': 0.3394, 'Precision': [0.710488, 0.5], 'Inference time': 61.359, 'Learning time': 435.622, 'AUC ROC': 0.662911, 'AUC PR': 0.689357, 'CLL': -0.652782}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 19.332360982894897
   Generating paths time   = 3.8492512702941895
   Generating mappings time   = 0.044267892837524414
   Possible mappings   = 56
   Finding best mapping   = 0.006218433380126953
   Total time   = 23.232104539871216


Best mapping found: ['workedunder(A,B) -> haschild(A,B)', 'movie(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.357297487638824;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109542;  // std dev = 7,30e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.30802135467096964;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.2558503077525586;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.4175135841583098;  // std dev = 5,16e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.20572843844479388;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.32071184716014967;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.16134604512539077;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.12436666994436057;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.09480271677999828;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.07177790262822667;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.05412762018298815;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.04072270773623892;  // std dev = 49,957, 9.983,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.983 */


Results
   AUC ROC   = 0.5012
   AUC PR    = 0.504636
   CLL	      = -0.694372
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0024
   F1        = 0.004789


Total learning time: 268.713 seconds
Total inference time: 84.502 seconds
AUC ROC: 0.5012


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [7.3e-08, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [5.16e-08, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [1.49e-08, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [2.11e-08, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 17], 'false': [49.957, 5000, 4983]}]]
[{'': [-2.0898315757650005e-16, 0.24999927503716615]}, {'': [3.134747363647501e-16, 0.24999927503727049]}, {'': [-2.0898315757650005e-16, 0.24999927503716443]}, {'': [1.5673736818237505e-16, 0.24999927503719904]}, {'': [1.3061447348531253e-17, 0.24999927503716543]}, {'': [2.6122894697062506e-17, 0.24999927503726382]}, {'': [-3.2653618371328135e-17, 0.24999927503723826]}, {'': [-1.959217102279688e-17, 0.24999927503723038]}, {'': [-2.6122894697062506e-17, 0.2499992750372182]}, {'': [0.0, 0.2499992750372018]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( actedin(B, D), actedin(A, E) )
%   | then if ( diedin(A, F), ismarriedto(A, G) )
%   | | then if ( ismarriedto(B, H), wasbornin(I, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( edited(J, D), ismarriedto(A, K) )
%   | | | then return 0.8581489350995115;  // std dev = 2,60e-07, 37,000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.7609267128772902;  // std dev = 2,514, 72,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=65 */
%   | else if ( iscitizenof(B, L), ismarriedto(A, M) )
%   | | then if ( created(A, N), exports(L, P) )
%   | | | then return 0.5854216623722396;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.14595381314829395;  // std dev = 6,482, 205,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=59 */
%   | | else if ( ismarriedto(Q, B), ismarriedto(A, R) )
%   | | | then return 0.4445526714772966;  // std dev = 21,619, 1.927,000 (wgt'ed) examples reached here.  /* #neg=797 #pos=1.130 */
%   | | | else return 0.33353534891948383;  // std dev = 43,819, 7.699,000 (wgt'ed) examples reached here.  /* #neg=4.039 #pos=3.660 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109542;  // std dev = 7,30e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( wasbornin(B, D), wasbornin(A, D) )
%   | then if ( ismarriedto(A, E), haswonprize(A, F) )
%   | | then if ( wasbornin(E, G) )
%   | | | then return 0.8072692367950906;  // std dev = 0,025, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5305075984211818;  // std dev = 0,831, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8084042489816048;  // std dev = 0,160, 151,000 (wgt'ed) examples reached here.  /* #pos=151 */
%   | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | then if ( graduatedfrom(A, J) )
%   | | | then return 0.13658680226496217;  // std dev = 4,286, 82,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
%   | | | else return 0.38713322539698125;  // std dev = 21,296, 1.891,000 (wgt'ed) examples reached here.  /* #neg=770 #pos=1.121 */
%   | | else if ( isaffiliatedto(A, K), isaffiliatedto(B, K) )
%   | | | then return 0.7792829013832482;  // std dev = 1,703, 94,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=91 */
%   | | | else return 0.27398337067083667;  // std dev = 43,813, 7.751,000 (wgt'ed) examples reached here.  /* #neg=4.172 #pos=3.579 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( diedin(D, F), wasbornin(B, F) )
%   | | then if ( haswonprize(A, G), diedin(E, H) )
%   | | | then return 0.39145000194513163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7127787473510641;  // std dev = 0,267, 63,000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( graduatedfrom(D, I) )
%   | | | then return 0.07968969844597731;  // std dev = 4,407, 86,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=29 */
%   | | | else return 0.3112535008782205;  // std dev = 21,056, 1.856,000 (wgt'ed) examples reached here.  /* #neg=766 #pos=1.090 */
%   | else if ( ismarriedto(B, J) )
%   | | then if ( iscitizenof(A, K) )
%   | | | then return -0.007463341817381377;  // std dev = 3,521, 71,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | | | else return 0.184031219325155;  // std dev = 16,877, 1.181,000 (wgt'ed) examples reached here.  /* #neg=686 #pos=495 */
%   | | else if ( isaffiliatedto(A, L), isaffiliatedto(B, L) )
%   | | | then return 0.6331363985261067;  // std dev = 1,705, 101,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=98 */
%   | | | else return 0.24695146257946382;  // std dev = 40,444, 6.622,000 (wgt'ed) examples reached here.  /* #neg=3.432 #pos=3.190 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.4175135841583098;  // std dev = 5,16e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( iscitizenof(B, D), iscitizenof(A, D) )
%   | then if ( livesin(A, E), diedin(F, E) )
%   | | then if ( livesin(F, D) )
%   | | | then return 0.6425400220911015;  // std dev = 0,238, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.013944129078522003;  // std dev = 0,615, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( isleaderof(G, D), livesin(G, H) )
%   | | | then return 0.6379656979927019;  // std dev = 1,420, 41,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.7115198656225524;  // std dev = 0,386, 39,000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( actedin(A, I), actedin(B, J) )
%   | | then if ( ismarriedto(A, K), directed(A, L) )
%   | | | then return 0.5995147841550825;  // std dev = 0,180, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5031158012871358;  // std dev = 3,101, 110,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=98 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.18516141412435624;  // std dev = 35,587, 5.238,000 (wgt'ed) examples reached here.  /* #neg=2.675 #pos=2.563 */
%   | | | else return 0.20972547968313107;  // std dev = 33,337, 4.527,000 (wgt'ed) examples reached here.  /* #neg=2.309 #pos=2.218 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.32071184716014967;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( diedin(A, D), wasbornin(B, E) )
%   | then if ( livesin(F, E), wasbornin(F, D) )
%   | | then if ( influences(G, B), diedin(G, H) )
%   | | | then return -0.008885138990038788;  // std dev = 0,847, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5801528624383472;  // std dev = 2,113, 142,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=138 */
%   | | else if ( livesin(I, D), wasbornin(I, D) )
%   | | | then return 0.07122064342662206;  // std dev = 6,813, 205,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=86 */
%   | | | else return 0.2969982781607454;  // std dev = 7,030, 234,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=153 */
%   | else if ( diedin(A, J), wasbornin(K, J) )
%   | | then if ( diedin(B, L) )
%   | | | then return 0.20991864120002768;  // std dev = 6,616, 182,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=101 */
%   | | | else return 0.07696913416721712;  // std dev = 16,062, 1.097,000 (wgt'ed) examples reached here.  /* #neg=644 #pos=453 */
%   | | else if ( ismarriedto(B, M), iscitizenof(A, N) )
%   | | | then return -0.05028951011808519;  // std dev = 4,133, 95,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.16451772473667925;  // std dev = 44,083, 8.025,000 (wgt'ed) examples reached here.  /* #neg=3.999 #pos=4.026 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then if ( haswonprize(B, G), happenedin(H, D) )
%   | | | then return 0.0945869065208083;  // std dev = 0,763, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.42012795008479653;  // std dev = 0,479, 47,000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( wasbornin(A, D) )
%   | | | then return 0.40659530615773354;  // std dev = 0,241, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.5536513792230306;  // std dev = 0,552, 90,000 (wgt'ed) examples reached here.  /* #pos=90 */
%   | else if ( graduatedfrom(B, I), isaffiliatedto(A, J) )
%   | | then if ( graduatedfrom(A, K), ismarriedto(A, L) )
%   | | | then return 0.47993140585316224;  // std dev = 1,675, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | | else return 0.27504483412073755;  // std dev = 3,238, 69,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=51 */
%   | | else if ( graduatedfrom(B, M), ismarriedto(A, N) )
%   | | | then return -0.11769175768804739;  // std dev = 5,690, 178,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=44 */
%   | | | else return 0.11988636967428253;  // std dev = 47,964, 9.533,000 (wgt'ed) examples reached here.  /* #neg=4.844 #pos=4.689 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( actedin(A, F), wrotemusicfor(G, F) )
%   | | then if ( actedin(B, H) )
%   | | | then return 0.3475840759801371;  // std dev = 0,878, 36,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return -0.29177181672416286;  // std dev = 2,456, 53,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
%   | | else if ( diedin(A, I), diedin(E, I) )
%   | | | then return 0.4916004641471436;  // std dev = 0,468, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13719745456587026;  // std dev = 20,949, 1.898,000 (wgt'ed) examples reached here.  /* #neg=778 #pos=1.120 */
%   | else if ( diedin(A, J), wasbornin(B, J) )
%   | | then if ( livesin(K, J), wasbornin(A, J) )
%   | | | then return 0.311893632315161;  // std dev = 0,200, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.41755879324086526;  // std dev = 0,520, 91,000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( wasbornin(B, L), wasbornin(A, L) )
%   | | | then return 0.45360309319419934;  // std dev = 1,050, 98,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | | else return 0.07573267905462557;  // std dev = 43,341, 7.755,000 (wgt'ed) examples reached here.  /* #neg=4.175 #pos=3.580 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( diedin(A, D), diedin(B, D) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( wasbornin(A, E), hascapital(F, D) )
%   | | | then return 0.2573177134815671;  // std dev = 0,147, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3373015312176368;  // std dev = 0,108, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( ismarriedto(A, G), hascapital(H, D) )
%   | | | then return 0.451651157302373;  // std dev = 0,938, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5515264539034799;  // std dev = 0,457, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( ismarriedto(A, I), ismarriedto(J, B) )
%   | | then if ( ismarriedto(I, J) )
%   | | | then return 0.48579815189934267;  // std dev = 0,304, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.09277340066211472;  // std dev = 21,167, 1.964,000 (wgt'ed) examples reached here.  /* #neg=824 #pos=1.140 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.032617815238952054;  // std dev = 27,906, 3.323,000 (wgt'ed) examples reached here.  /* #neg=1.860 #pos=1.463 */
%   | | | else return 0.0838839987927802;  // std dev = 33,178, 4.597,000 (wgt'ed) examples reached here.  /* #neg=2.315 #pos=2.282 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( ismarriedto(A, F), diedin(A, G) )
%   | | then if ( ismarriedto(B, H), wasbornin(I, G) )
%   | | | then return 0.28089305422201766;  // std dev = 0,162, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12309624854520679;  // std dev = 1,283, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( wasbornin(B, J), hascapital(K, J) )
%   | | | then return 0.14959716496174216;  // std dev = 1,473, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.3188569389124749;  // std dev = 1,957, 94,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=90 */
%   | else if ( wasbornin(B, L), diedin(M, L) )
%   | | then if ( wasbornin(A, N), diedin(P, N) )
%   | | | then return 0.1122334856678115;  // std dev = 10,137, 578,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=368 */
%   | | | else return -0.009934546293788479;  // std dev = 18,576, 1.544,000 (wgt'ed) examples reached here.  /* #neg=859 #pos=685 */
%   | | else if ( actedin(A, Q) )
%   | | | then return -0.1295127306325942;  // std dev = 6,353, 205,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=57 */
%   | | | else return 0.06501739477576594;  // std dev = 42,684, 7.526,000 (wgt'ed) examples reached here.  /* #neg=3.771 #pos=3.755 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( wasbornin(A, D), livesin(E, D) )
%   | | then if ( participatedin(D, F), isleaderof(G, D) )
%   | | | then return 0.16993924857330506;  // std dev = 0,086, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2088979667656384;  // std dev = 0,171, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( livesin(H, D), wasbornin(H, I) )
%   | | | then return 0.27200739492841614;  // std dev = 0,981, 102,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | | | else return 0.32840183703532333;  // std dev = 0,246, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( ismarriedto(B, J), isaffiliatedto(A, K) )
%   | | then if ( isaffiliatedto(J, L) )
%   | | | then return 0.2850381709547279;  // std dev = 1,975, 28,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | else return -0.22694551173075234;  // std dev = 5,043, 165,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=36 */
%   | | else if ( wasbornin(B, M), livesin(N, M) )
%   | | | then return 9.173355047257951E-6;  // std dev = 19,587, 1.731,000 (wgt'ed) examples reached here.  /* #neg=930 #pos=801 */
%   | | | else return 0.05057512942354451;  // std dev = 43,496, 7.887,000 (wgt'ed) examples reached here.  /* #neg=3.934 #pos=3.953 */


Results
   AUC ROC   = 0.654873
   AUC PR    = 0.68264
   CLL	      = -0.659349
   Precision = 0.704633 at threshold = 0.5
   Recall    = 0.3285
   F1        = 0.448097


Total learning time: 596.233 seconds
Total inference time: 67.82300000000001 seconds
AUC ROC: 0.654873


Refined model AUC ROC: 0.654873


Dataset: imdb->yago2s(haschild), Fold: 2, Type: transfer, Time: 00:41:48
{'F1': 0.448097, 'Recall': 0.3285, 'Mapping results': {'Knowledge compiling time': 19.332360982894897, 'Generating paths time': 3.8492512702941895, 'Generating mappings time': 0.044267892837524414, 'Possible mappings': 56, 'Total time': 23.232104539871216, 'Finding best mapping': 0.006218433380126953}, 'Precision': [0.704633, 0.5], 'Inference time': 67.82300000000001, 'Learning time': 864.9459999999999, 'Parameter Learning results': {'F1': 0.004789, 'Recall': 0.0024, 'Precision': [1.0, 0.5], 'Inference time': 84.502, 'Learning time': 268.713, 'AUC ROC': 0.5012, 'AUC PR': 0.504636, 'CLL': -0.694372}, 'AUC ROC': 0.654873, 'AUC PR': 0.68264, 'CLL': -0.659349}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( diedin(C, E), wasbornin(B, F) )
%   | then return 0.5581489350995096;  // std dev = 0,458, 170,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=119 */
%   | else if ( graduatedfrom(C, G) )
%   | | then return 0.16983724678782322;  // std dev = 0,463, 77,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
%   | | else if ( graduatedfrom(B, H) )
%   | | | then return 0.12345505754849195;  // std dev = 3,090, 49,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return 0.4625445394951117;  // std dev = 20,332, 1.729,000 (wgt'ed) examples reached here.  /* #neg=684 #pos=1.045 */
%   else if ( wasbornin(A, I), wasbornin(B, J) )
%   | then if ( diedin(A, J) )
%   | | then return 0.8581489350995126;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.42502791599122774;  // std dev = 0,496, 471,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=267 */
%   | else if ( wasbornin(B, K), diedin(A, K) )
%   | | then return 0.8581489350995125;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.27993755298568607;  // std dev = 27,385, 3.075,000 (wgt'ed) examples reached here.  /* #neg=1.778 #pos=1.297 */
%   | | | else return 0.3487456381410674;  // std dev = 32,808, 4.307,000 (wgt'ed) examples reached here.  /* #neg=2.194 #pos=2.113 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( haswonprize(B, E), haswonprize(D, E) )
%   | then return 0.7877551475829011;  // std dev = 0,028, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actedin(D, F), actedin(B, G) )
%   | | then return 0.7914030322720262;  // std dev = 0,085, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.3747898834877948;  // std dev = 0,491, 1.967,000 (wgt'ed) examples reached here.  /* #neg=824 #pos=1.143 */
%   else if ( ismarriedto(B, H) )
%   | then if ( iscitizenof(A, I), hascurrency(I, J) )
%   | | then return 2.9263248095850905E-4;  // std dev = 0,391, 52,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | | else if ( wasbornin(A, K), isleaderof(L, K) )
%   | | | then return 0.08030258610356811;  // std dev = 4,122, 87,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=24 */
%   | | | else return 0.2373914967612593;  // std dev = 16,482, 1.113,000 (wgt'ed) examples reached here.  /* #neg=636 #pos=477 */
%   | else if ( actedin(B, M), actedin(A, N) )
%   | | then return 0.6878165970459654;  // std dev = 0,326, 82,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=72 */
%   | | else if ( ismarriedto(A, P) )
%   | | | then return 0.25539959328626827;  // std dev = 28,364, 3.296,000 (wgt'ed) examples reached here.  /* #neg=1.853 #pos=1.443 */
%   | | | else return 0.33811115208267245;  // std dev = 28,789, 3.345,000 (wgt'ed) examples reached here.  /* #neg=1.572 #pos=1.773 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( isaffiliatedto(A, E) )
%   | then if ( isaffiliatedto(D, F) )
%   | | then return 0.5866981740427191;  // std dev = 0,367, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return 0.044525902168084386;  // std dev = 0,464, 85,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | else return 0.32544040881833786;  // std dev = 0,485, 1.921,000 (wgt'ed) examples reached here.  /* #neg=762 #pos=1.159 */
%   else if ( ismarriedto(B, G) )
%   | then if ( iscitizenof(A, H) )
%   | | then return 0.023601042550591863;  // std dev = 0,414, 71,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | | else if ( isaffiliatedto(A, I) )
%   | | | then return 0.005749151491304418;  // std dev = 3,774, 81,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
%   | | | else return 0.2037380875400184;  // std dev = 16,383, 1.100,000 (wgt'ed) examples reached here.  /* #neg=624 #pos=476 */
%   | else if ( wasbornin(B, J), diedin(A, J) )
%   | | then return 0.652897019218849;  // std dev = 0,184, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.21177390384757414;  // std dev = 28,365, 3.293,000 (wgt'ed) examples reached here.  /* #neg=1.861 #pos=1.432 */
%   | | | else return 0.2775448024139458;  // std dev = 28,747, 3.323,000 (wgt'ed) examples reached here.  /* #neg=1.574 #pos=1.749 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( actedin(C, E), actedin(B, F) )
%   | then return 0.5558848341266938;  // std dev = 0,149, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( diedin(C, G), wasbornin(B, G) )
%   | | then return 0.6159019485950213;  // std dev = 0,124, 66,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else if ( actedin(C, H) )
%   | | | then return -0.19418416865823562;  // std dev = 2,803, 63,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | | else return 0.2434134257063411;  // std dev = 21,028, 1.853,000 (wgt'ed) examples reached here.  /* #neg=769 #pos=1.084 */
%   else if ( isaffiliatedto(A, I), isaffiliatedto(B, I) )
%   | then return 0.6707429449702744;  // std dev = 0,173, 108,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=105 */
%   | else if ( diedin(A, J), diedin(B, K) )
%   | | then if ( wasbornin(L, J), diedin(L, K) )
%   | | | then return 0.5447693919785038;  // std dev = 2,757, 97,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=88 */
%   | | | else return 0.16083949320480392;  // std dev = 6,456, 172,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=75 */
%   | | else if ( wasbornin(B, M), wasbornin(A, M) )
%   | | | then return 0.6503435000753311;  // std dev = 1,245, 98,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | | else return 0.17712304113340546;  // std dev = 42,796, 7.500,000 (wgt'ed) examples reached here.  /* #neg=4.066 #pos=3.434 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, C) )
%   then if ( diedin(A, C) )
%   | then return 0.41228889513617023;  // std dev = 0,096, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.5470478194968798;  // std dev = 0,099, 121,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=120 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0.6365854097271192;  // std dev = 0,072, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( diedin(B, F), wasbornin(A, G) )
%   | | | then return 0.1427079724785577;  // std dev = 0,750, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5239946061965247;  // std dev = 1,458, 86,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else if ( ismarriedto(A, H), graduatedfrom(B, I) )
%   | | then if ( graduatedfrom(A, J) )
%   | | | then return 0.4970555747340914;  // std dev = 2,046, 26,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | | else return -0.08648140445253302;  // std dev = 5,434, 179,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=40 */
%   | | else if ( wasbornin(B, K), diedin(A, K) )
%   | | | then return 0.46099024127282723;  // std dev = 1,216, 120,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | | | else return 0.15002709943745282;  // std dev = 47,797, 9.404,000 (wgt'ed) examples reached here.  /* #neg=4.851 #pos=4.553 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), ismarriedto(A, D) )
%   then if ( iscitizenof(A, C) )
%   | then return 0.5711300601710233;  // std dev = 0,206, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( graduatedfrom(D, E), owns(E, F) )
%   | | then return 0.5525910148302582;  // std dev = 0,278, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( created(A, G), wasbornin(A, H) )
%   | | | then return 0.3898935744261661;  // std dev = 1,174, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.13958740990084947;  // std dev = 5,242, 185,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=37 */
%   else if ( graduatedfrom(A, I), ismarriedto(B, J) )
%   | then if ( graduatedfrom(J, K) )
%   | | then return 0.4486378108937361;  // std dev = 0,358, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return -0.13962556320556369;  // std dev = 0,391, 125,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=27 */
%   | else if ( livesin(B, L), livesin(A, M) )
%   | | then return 0.4973878824783516;  // std dev = 0,297, 74,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=67 */
%   | | else if ( actedin(A, N), actedin(B, P) )
%   | | | then return 0.41470432015514685;  // std dev = 3,265, 127,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=115 */
%   | | | else return 0.12327258743912435;  // std dev = 47,297, 9.429,000 (wgt'ed) examples reached here.  /* #neg=4.729 #pos=4.700 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, C) )
%   then if ( diedin(A, C) )
%   | then return 0.29577198359086476;  // std dev = 0,089, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.37851635528667577;  // std dev = 0,103, 121,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=120 */
%   else if ( isaffiliatedto(A, D), isaffiliatedto(B, D) )
%   | then if ( haswonprize(A, E), livesin(A, F) )
%   | | then return -0.024976027085327052;  // std dev = 0,829, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( diedin(B, G), diedin(A, H) )
%   | | | then return 0.27969468110707746;  // std dev = 0,913, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.384252033757257;  // std dev = 1,147, 93,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=92 */
%   | else if ( wasbornin(B, I), livesin(J, I) )
%   | | then if ( ismarriedto(A, K), diedin(K, I) )
%   | | | then return 0.4653856312561097;  // std dev = 1,644, 94,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | | | else return 0.012733152881099262;  // std dev = 19,166, 1.661,000 (wgt'ed) examples reached here.  /* #neg=954 #pos=707 */
%   | | else if ( iscitizenof(B, L), iscitizenof(A, L) )
%   | | | then return 0.5043198942741877;  // std dev = 1,755, 57,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.09574009864328861;  // std dev = 43,641, 7.917,000 (wgt'ed) examples reached here.  /* #neg=4.038 #pos=3.879 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.2797651749308937;  // std dev = 0,098, 165,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=164 */
%   else if ( wasbornin(A, D), diedin(E, D) )
%   | then if ( diedin(A, D), hascapital(F, D) )
%   | | then if ( diedin(B, G), participatedin(F, H) )
%   | | | then return 0.19683249731592922;  // std dev = 2,037, 19,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return -0.13583817050261562;  // std dev = 4,179, 94,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=27 */
%   | | else if ( actedin(B, I), actedin(A, J) )
%   | | | then return 0.26623185660857257;  // std dev = 2,208, 41,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=35 */
%   | | | else return 0.03402702606699949;  // std dev = 19,979, 1.738,000 (wgt'ed) examples reached here.  /* #neg=944 #pos=794 */
%   | else if ( wasbornin(B, K), diedin(L, K) )
%   | | then if ( ismarriedto(A, L) )
%   | | | then return 0.3584701990083699;  // std dev = 1,574, 81,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.01197076925464816;  // std dev = 18,258, 1.512,000 (wgt'ed) examples reached here.  /* #neg=862 #pos=650 */
%   | | else if ( diedin(A, M), wasbornin(N, M) )
%   | | | then return 0.02332345677613019;  // std dev = 13,855, 835,000 (wgt'ed) examples reached here.  /* #neg=459 #pos=376 */
%   | | | else return 0.0999834800052238;  // std dev = 36,386, 5.515,000 (wgt'ed) examples reached here.  /* #neg=2.653 #pos=2.862 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), iscitizenof(B, D) )
%   then if ( graduatedfrom(A, E), worksat(F, E) )
%   | then return 0.3161724001028292;  // std dev = 0,354, 16,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | else if ( iscitizenof(A, G), hascapital(G, H) )
%   | | then return 0.28948670831762213;  // std dev = 0,262, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return -0.13405339362513888;  // std dev = 0,385, 185,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=40 */
%   else if ( wasbornin(B, I), happenedin(J, I) )
%   | then if ( ismarriedto(A, K), wasbornin(K, I) )
%   | | then return 0.37823838224361145;  // std dev = 0,214, 67,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | else if ( diedin(L, I), ismarriedto(A, L) )
%   | | | then return 0.28730522180414675;  // std dev = 1,409, 72,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return -3.104862155912068E-4;  // std dev = 15,794, 1.195,000 (wgt'ed) examples reached here.  /* #neg=660 #pos=535 */
%   | else if ( isaffiliatedto(A, M), isaffiliatedto(B, N) )
%   | | then return 0.26696528789048674;  // std dev = 0,254, 122,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=112 */
%   | | else if ( isaffiliatedto(B, P) )
%   | | | then return -0.11264453803527677;  // std dev = 6,877, 239,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=72 */
%   | | | else return 0.06360636435200168;  // std dev = 43,832, 8.075,000 (wgt'ed) examples reached here.  /* #neg=4.008 #pos=4.067 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( livesin(B, C), livesin(A, D) )
%   then if ( isaffiliatedto(A, E) )
%   | then if ( ismarriedto(B, F) )
%   | | then return -0.32900249094446105;  // std dev = 0,596, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( created(B, G) )
%   | | | then return -0.37561743642825013;  // std dev = 0,688, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.20715837997816713;  // std dev = 0,896, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.3872065023683622;  // std dev = 0,252, 55,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   else if ( isaffiliatedto(A, H), isaffiliatedto(B, H) )
%   | then return 0.24103831024568922;  // std dev = 0,144, 109,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( isaffiliatedto(B, I), ismarriedto(A, J) )
%   | | then if ( isaffiliatedto(J, I) )
%   | | | then return 0.42822376775592375;  // std dev = 1,306, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.18829650567839382;  // std dev = 4,704, 173,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=31 */
%   | | else if ( diedin(A, K), diedin(B, K) )
%   | | | then return 0.3791534784466591;  // std dev = 1,531, 72,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.03907477576560335;  // std dev = 47,107, 9.556,000 (wgt'ed) examples reached here.  /* #neg=4.843 #pos=4.713 */


Results
   AUC ROC   = 0.66985
   AUC PR    = 0.696687
   CLL	      = -0.650413
   Precision = 0.727608 at threshold = 0.5
   Recall    = 0.3355
   F1        = 0.459243


Total learning time: 895.97 seconds
Total inference time: 70.907 seconds
AUC ROC: 0.66985


Dataset: imdb->yago2s(haschild), Fold: 2, Type: scratch, Time: 00:57:58
{'F1': 0.459243, 'Recall': 0.3355, 'Precision': [0.727608, 0.5], 'Inference time': 70.907, 'Learning time': 895.97, 'AUC ROC': 0.66985, 'AUC PR': 0.696687, 'CLL': -0.650413}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 23.240694046020508
   Generating paths time   = 2.7646782398223877
   Generating mappings time   = 0.05414152145385742
   Possible mappings   = 56
   Finding best mapping   = 0.008437156677246094
   Total time   = 26.067957401275635


Best mapping found: ['workedunder(A,B) -> haschild(A,B)', 'movie(A,B) -> ismarriedto(B,A)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.3574479537255837;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.3081485579819319;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.25594965009078463;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.2058007345801658;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.16139599732429255;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.12440014188862282;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.09482486767578095;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.07179256953790934;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.054137415990710834;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.04072933530257651;  // std dev = 49,965, 9.986,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.986 */


Results
   AUC ROC   = 0.50135
   AUC PR    = 0.505136
   CLL	      = -0.694259
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0027
   F1        = 0.005385


Total learning time: 255.394 seconds
Total inference time: 62.203 seconds
AUC ROC: 0.50135


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [5.16e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [4.21e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [2.11e-08, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'true': [0.0, 0, 14], 'false': [49.965, 5000, 4986]}]]
[{'': [-2.5376526277146434e-16, 0.24999950862505785]}, {'': [1.9032394707859825e-16, 0.24999950862512046]}, {'': [-2.5376526277146434e-16, 0.2499995086251527]}, {'': [1.2688263138573217e-16, 0.24999950862512962]}, {'': [-3.172065784643304e-17, 0.24999950862515494]}, {'': [3.172065784643304e-17, 0.24999950862514217]}, {'': [-3.172065784643304e-17, 0.24999950862513298]}, {'': [0.0, 0.24999950862512252]}, {'': [-1.9825411154020653e-17, 0.2499995086251209]}, {'': [0.0, 0.2499995086250975]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( wasbornin(A, F), wasbornin(B, F) )
%   | | then return 0.8581489350995123;  // std dev = 8,43e-08, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( wasbornin(A, G), diedin(H, G) )
%   | | | then return 0.3534977723088104;  // std dev = 10,368, 430,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=213 */
%   | | | else return 0.46034539635637145;  // std dev = 19,815, 1.639,000 (wgt'ed) examples reached here.  /* #neg=652 #pos=987 */
%   | else if ( wasbornin(A, I), wasbornin(B, J) )
%   | | then if ( livesin(K, J), wasbornin(K, I) )
%   | | | then return 0.814353314661554;  // std dev = 2,395, 137,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=131 */
%   | | | else return 0.3626943896449634;  // std dev = 10,488, 440,000 (wgt'ed) examples reached here.  /* #neg=218 #pos=222 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.2838450102420768;  // std dev = 26,996, 2.981,000 (wgt'ed) examples reached here.  /* #neg=1.712 #pos=1.269 */
%   | | | else return 0.34839510323698974;  // std dev = 32,804, 4.306,000 (wgt'ed) examples reached here.  /* #neg=2.195 #pos=2.111 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( diedin(B, F), diedin(E, G) )
%   | | then if ( wasbornin(B, G) )
%   | | | then return 0.7791335716156909;  // std dev = 0,182, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.49533532461944535;  // std dev = 4,632, 103,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=72 */
%   | | else if ( wasbornin(D, H), hascapital(I, H) )
%   | | | then return 0.4779164723444909;  // std dev = 7,240, 244,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=167 */
%   | | | else return 0.35767881229822424;  // std dev = 20,626, 1.743,000 (wgt'ed) examples reached here.  /* #neg=761 #pos=982 */
%   | else if ( actedin(A, J), actedin(B, K) )
%   | | then if ( wasbornin(A, L), wrotemusicfor(M, K) )
%   | | | then return 0.6661563083718358;  // std dev = 2,050, 40,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=35 */
%   | | | else return 0.7947847672535113;  // std dev = 0,998, 53,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( wasbornin(B, N), wasbornin(A, P) )
%   | | | then return 0.3858340879487692;  // std dev = 11,241, 552,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=329 */
%   | | | else return 0.2736950765710494;  // std dev = 42,317, 7.219,000 (wgt'ed) examples reached here.  /* #neg=3.902 #pos=3.317 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( graduatedfrom(E, F) )
%   | | then if ( graduatedfrom(B, G), isaffiliatedto(E, H) )
%   | | | then return 0.43295149216139733;  // std dev = 1,433, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.04922096713782131;  // std dev = 2,995, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( graduatedfrom(B, I), worksat(J, I) )
%   | | | then return 0.09361037075396834;  // std dev = 3,530, 55,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
%   | | | else return 0.3297651055800622;  // std dev = 21,696, 2.003,000 (wgt'ed) examples reached here.  /* #neg=789 #pos=1.214 */
%   | else if ( ismarriedto(A, K) )
%   | | then if ( diedin(B, L), diedin(K, M) )
%   | | | then return 0.42308238705249124;  // std dev = 5,217, 123,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   | | | else return 0.20053791009928737;  // std dev = 27,516, 3.131,000 (wgt'ed) examples reached here.  /* #neg=1.784 #pos=1.347 */
%   | | else if ( ismarriedto(B, N) )
%   | | | then return 0.17929296825490013;  // std dev = 16,896, 1.185,000 (wgt'ed) examples reached here.  /* #neg=689 #pos=496 */
%   | | | else return 0.2885797862194091;  // std dev = 29,083, 3.425,000 (wgt'ed) examples reached here.  /* #neg=1.616 #pos=1.809 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, E) )
%   | then if ( isaffiliatedto(A, D) )
%   | | then if ( isleaderof(B, F), diedin(A, G) )
%   | | | then return 0.33233271889931804;  // std dev = 0,797, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6836806669644429;  // std dev = 1,077, 95,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else if ( ismarriedto(A, H), haswonprize(H, I) )
%   | | | then return -0.3058156598425847;  // std dev = 0,051, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.39030483521653125;  // std dev = 3,443, 57,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=39 */
%   | else if ( diedin(B, J), diedin(A, K) )
%   | | then if ( isleaderof(L, J), livesin(L, J) )
%   | | | then return -0.05190767264193587;  // std dev = 1,746, 16,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.346217782655542;  // std dev = 8,715, 361,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=241 */
%   | | else if ( wasbornin(B, M), wasbornin(A, M) )
%   | | | then return 0.5953873839241978;  // std dev = 0,664, 157,000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | | else return 0.18729805704225744;  // std dev = 47,745, 9.294,000 (wgt'ed) examples reached here.  /* #neg=4.845 #pos=4.449 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( diedin(A, D), diedin(B, E) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( ismarriedto(B, F), ismarriedto(A, G) )
%   | | | then return 0.4641275111861136;  // std dev = 0,996, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.57089005785679;  // std dev = 1,026, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( wasbornin(B, E), isleaderof(H, D) )
%   | | | then return -0.36787433023099025;  // std dev = 0,076, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.2258133888722203;  // std dev = 8,359, 310,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=190 */
%   | else if ( actedin(B, I), actedin(A, J) )
%   | | then if ( directed(B, I), haswonprize(A, K) )
%   | | | then return -0.04781399111297657;  // std dev = 0,841, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4877689748999325;  // std dev = 2,991, 120,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=110 */
%   | | else if ( isaffiliatedto(A, L), graduatedfrom(B, M) )
%   | | | then return 0.38808739045991875;  // std dev = 3,886, 101,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=79 */
%   | | | else return 0.14978326530887529;  // std dev = 47,698, 9.374,000 (wgt'ed) examples reached here.  /* #neg=4.834 #pos=4.540 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( iscitizenof(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(A, F), happenedin(G, D) )
%   | | then if ( diedin(E, H) )
%   | | | then return -0.0601759919916679;  // std dev = 1,136, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.4912752714838011;  // std dev = 1,310, 23,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( diedin(A, I), isleaderof(J, I) )
%   | | | then return 0.28446326281434536;  // std dev = 1,959, 19,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return -0.1368879099856589;  // std dev = 4,914, 150,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=32 */
%   | else if ( isaffiliatedto(B, K), ismarriedto(A, L) )
%   | | then if ( isaffiliatedto(L, K) )
%   | | | then return 0.5100737053304005;  // std dev = 0,673, 47,000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.16323509118452414;  // std dev = 4,664, 157,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=34 */
%   | | else if ( wasbornin(B, M), diedin(A, M) )
%   | | | then return 0.4926964735065145;  // std dev = 2,114, 179,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=177 */
%   | | | else return 0.1229216561740656;  // std dev = 47,672, 9.405,000 (wgt'ed) examples reached here.  /* #neg=4.745 #pos=4.660 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( actedin(B, D), actedin(A, E) )
%   | then if ( diedin(B, F), ismarriedto(A, G) )
%   | | then return -0.022823121146160596;  // std dev = 1,103, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( created(B, H), edited(I, D) )
%   | | | then return 0.22268745671048662;  // std dev = 1,666, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.362979028723245;  // std dev = 2,223, 103,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=98 */
%   | else if ( wasbornin(B, J) )
%   | | then if ( diedin(A, J) )
%   | | | then return 0.3838555097295841;  // std dev = 2,055, 179,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=177 */
%   | | | else return 0.03206865679521227;  // std dev = 21,999, 2.159,000 (wgt'ed) examples reached here.  /* #neg=1.188 #pos=971 */
%   | | else if ( ismarriedto(B, K), graduatedfrom(A, L) )
%   | | | then return -0.2098390345593323;  // std dev = 3,465, 80,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return 0.10551978517821994;  // std dev = 42,604, 7.443,000 (wgt'ed) examples reached here.  /* #neg=3.734 #pos=3.709 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.3480529464685103;  // std dev = 0,343, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.17008844088761685;  // std dev = 3,701, 79,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=20 */
%   | | else if ( actedin(A, G), directed(H, G) )
%   | | | then return -0.09788213943025798;  // std dev = 3,952, 79,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=33 */
%   | | | else return 0.12430106214533415;  // std dev = 20,988, 1.948,000 (wgt'ed) examples reached here.  /* #neg=764 #pos=1.184 */
%   | else if ( wasbornin(B, I), diedin(A, I) )
%   | | then if ( wasbornin(A, I) )
%   | | | then return 0.21440809475566083;  // std dev = 0,220, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.35787240694870365;  // std dev = 1,292, 95,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else if ( wasbornin(B, J), wasbornin(A, J) )
%   | | | then return 0.38908086358727906;  // std dev = 0,768, 116,000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | | else return 0.05385841781775857;  // std dev = 42,879, 7.624,000 (wgt'ed) examples reached here.  /* #neg=4.130 #pos=3.494 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( wasbornin(B, D) )
%   | then if ( wasbornin(A, D) )
%   | | then if ( diedin(A, D) )
%   | | | then return 0.1745953050111773;  // std dev = 0,239, 51,000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.30326497663333063;  // std dev = 0,705, 147,000 (wgt'ed) examples reached here.  /* #pos=147 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.2727336410243356;  // std dev = 1,683, 135,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=133 */
%   | | | else return -0.010362030044485285;  // std dev = 21,657, 2.060,000 (wgt'ed) examples reached here.  /* #neg=1.191 #pos=869 */
%   | else if ( wasbornin(A, E) )
%   | | then if ( graduatedfrom(B, F) )
%   | | | then return 0.20041549355730537;  // std dev = 3,956, 75,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=49 */
%   | | | else return 5.830171830997009E-5;  // std dev = 19,097, 1.537,000 (wgt'ed) examples reached here.  /* #neg=877 #pos=660 */
%   | | else if ( ismarriedto(A, G), diedin(G, H) )
%   | | | then return 0.0033210934340612125;  // std dev = 11,434, 566,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=254 */
%   | | | else return 0.0856778517895559;  // std dev = 36,204, 5.415,000 (wgt'ed) examples reached here.  /* #neg=2.592 #pos=2.823 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( wasbornin(A, E) )
%   | | then if ( graduatedfrom(A, F), diedin(A, G) )
%   | | | then return 0.04489786343520361;  // std dev = 1,124, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2925391230767112;  // std dev = 0,531, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( ismarriedto(A, H), isaffiliatedto(H, D) )
%   | | | then return 0.3128038204865386;  // std dev = 0,265, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4171711926168028;  // std dev = 0,495, 39,000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( isaffiliatedto(B, I) )
%   | | then if ( ismarriedto(A, J), isaffiliatedto(J, K) )
%   | | | then return 0.2805539367087836;  // std dev = 2,059, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | | else return -0.1317779384935279;  // std dev = 8,197, 378,000 (wgt'ed) examples reached here.  /* #neg=267 #pos=111 */
%   | | else if ( diedin(A, L), livesin(M, L) )
%   | | | then return 0.011878904892777365;  // std dev = 17,718, 1.471,000 (wgt'ed) examples reached here.  /* #neg=739 #pos=732 */
%   | | | else return 0.05138119548169421;  // std dev = 43,653, 8.006,000 (wgt'ed) examples reached here.  /* #neg=3.984 #pos=4.022 */


Results
   AUC ROC   = 0.65076
   AUC PR    = 0.675981
   CLL	      = -0.659086
   Precision = 0.709523 at threshold = 0.5
   Recall    = 0.2958
   F1        = 0.417531


Total learning time: 427.381 seconds
Total inference time: 71.002 seconds
AUC ROC: 0.65076


Refined model AUC ROC: 0.65076


Dataset: imdb->yago2s(haschild), Fold: 3, Type: transfer, Time: 01:12:24
{'F1': 0.417531, 'Recall': 0.2958, 'Mapping results': {'Knowledge compiling time': 23.240694046020508, 'Generating paths time': 2.7646782398223877, 'Generating mappings time': 0.05414152145385742, 'Possible mappings': 56, 'Total time': 26.067957401275635, 'Finding best mapping': 0.008437156677246094}, 'Precision': [0.709523, 0.5], 'Inference time': 71.002, 'Learning time': 682.775, 'Parameter Learning results': {'F1': 0.005385, 'Recall': 0.0027, 'Precision': [1.0, 0.5], 'Inference time': 62.203, 'Learning time': 255.394, 'AUC ROC': 0.50135, 'AUC PR': 0.505136, 'CLL': -0.694259}, 'AUC ROC': 0.65076, 'AUC PR': 0.675981, 'CLL': -0.659086}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.8581489350995123;  // std dev = 8,43e-08, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( wasbornin(A, F), diedin(G, F) )
%   | | then if ( wasbornin(D, H), livesin(I, H) )
%   | | | then return 0.5413172519311964;  // std dev = 4,676, 101,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=69 */
%   | | | else return 0.2975428744934483;  // std dev = 9,016, 330,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=145 */
%   | | else return 0.4634758116128247;  // std dev = 0,489, 1.652,000 (wgt'ed) examples reached here.  /* #neg=652 #pos=1.000 */
%   else if ( wasbornin(A, J), wasbornin(B, K) )
%   | then return 0.46993403042013177;  // std dev = 0,487, 577,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=353 */
%   | else if ( ismarriedto(A, L) )
%   | | then if ( iscitizenof(B, M), dealswith(N, M) )
%   | | | then return 0.11865313678018337;  // std dev = 4,788, 119,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=31 */
%   | | | else return 0.2907135752113172;  // std dev = 26,504, 2.862,000 (wgt'ed) examples reached here.  /* #neg=1.624 #pos=1.238 */
%   | | else if ( isaffiliatedto(B, P), isaffiliatedto(A, Q) )
%   | | | then return 0.7114822684328462;  // std dev = 3,064, 75,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=64 */
%   | | | else return 0.3419589091009255;  // std dev = 32,506, 4.231,000 (wgt'ed) examples reached here.  /* #neg=2.184 #pos=2.047 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then return 0.7601181302543059;  // std dev = 0,146, 98,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( wasbornin(B, G), isleaderof(H, G) )
%   | | | then return 0.33836987915558575;  // std dev = 1,774, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.0030312909493848197;  // std dev = 3,224, 66,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | else if ( diedin(E, I), wasbornin(B, I) )
%   | | | then return 0.7762904357124925;  // std dev = 0,274, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.3823616802771921;  // std dev = 21,739, 1.968,000 (wgt'ed) examples reached here.  /* #neg=810 #pos=1.158 */
%   | else if ( wasbornin(B, J), wasbornin(A, K) )
%   | | then if ( livesin(L, J), wasbornin(L, K) )
%   | | | then return 0.7443399188126042;  // std dev = 2,392, 129,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=123 */
%   | | | else return 0.2802633114254632;  // std dev = 10,305, 425,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=208 */
%   | | else if ( isaffiliatedto(B, M) )
%   | | | then return 0.118479699020968;  // std dev = 8,004, 309,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=96 */
%   | | | else return 0.28100921211996543;  // std dev = 41,466, 6.919,000 (wgt'ed) examples reached here.  /* #neg=3.693 #pos=3.226 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.6024153989761236;  // std dev = 0,330, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( graduatedfrom(A, F) )
%   | | then return 0.06301168072707498;  // std dev = 0,445, 76,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | else if ( wasbornin(A, G), isleaderof(H, G) )
%   | | | then return 0.14888204501662924;  // std dev = 4,761, 99,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=40 */
%   | | | else return 0.3265273362926393;  // std dev = 21,224, 1.908,000 (wgt'ed) examples reached here.  /* #neg=757 #pos=1.151 */
%   else if ( actedin(A, I), actedin(B, J) )
%   | then return 0.6857323519453425;  // std dev = 0,244, 93,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=87 */
%   | else if ( actedin(B, K) )
%   | | then if ( created(A, L) )
%   | | | then return 0.45573324774905477;  // std dev = 2,771, 37,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=26 */
%   | | | else return 0.03444322145674273;  // std dev = 7,395, 286,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=78 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.21026913362683713;  // std dev = 27,391, 3.092,000 (wgt'ed) examples reached here.  /* #neg=1.732 #pos=1.360 */
%   | | | else return 0.2614052975573446;  // std dev = 32,789, 4.356,000 (wgt'ed) examples reached here.  /* #neg=2.174 #pos=2.182 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, D) )
%   then if ( wasbornin(B, D) )
%   | then return 0.6016647449937577;  // std dev = 0,184, 68,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( wasbornin(A, E), happenedin(F, C) )
%   | | then if ( livesin(G, E), wasbornin(H, D) )
%   | | | then return 0.04565972826444414;  // std dev = 3,570, 60,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
%   | | | else return 0.4622811742626647;  // std dev = 1,742, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else return 0.3377413676656449;  // std dev = 0,470, 242,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=155 */
%   else if ( diedin(A, I), wasbornin(B, I) )
%   | then return 0.6357141627951315;  // std dev = 0,097, 119,000 (wgt'ed) examples reached here.  /* #pos=119 */
%   | else if ( diedin(A, J) )
%   | | then if ( wasbornin(B, K), hascapital(L, K) )
%   | | | then return 0.003936669130969279;  // std dev = 5,503, 149,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=47 */
%   | | | else return 0.14117412654932046;  // std dev = 17,819, 1.334,000 (wgt'ed) examples reached here.  /* #neg=761 #pos=573 */
%   | | else if ( isaffiliatedto(B, M), isaffiliatedto(A, N) )
%   | | | then return 0.4898920975416091;  // std dev = 3,217, 112,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=98 */
%   | | | else return 0.20204650629774515;  // std dev = 43,847, 7.898,000 (wgt'ed) examples reached here.  /* #neg=3.991 #pos=3.907 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(D, E), hascapital(F, E) )
%   | then return 0.2921611268561181;  // std dev = 0,445, 276,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=194 */
%   | else if ( created(C, G), isaffiliatedto(C, H) )
%   | | then return -0.21558986893369983;  // std dev = 0,303, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( graduatedfrom(B, I), worksat(J, I) )
%   | | | then return -0.0199562480072549;  // std dev = 3,602, 58,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | | else return 0.19714399093773008;  // std dev = 20,270, 1.784,000 (wgt'ed) examples reached here.  /* #neg=734 #pos=1.050 */
%   else if ( wasbornin(B, K), wasbornin(A, K) )
%   | then return 0.5358833075598154;  // std dev = 0,080, 145,000 (wgt'ed) examples reached here.  /* #pos=145 */
%   | else if ( wasbornin(B, L) )
%   | | then if ( isaffiliatedto(B, M), isaffiliatedto(A, N) )
%   | | | then return 0.3641820187233733;  // std dev = 2,426, 49,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=41 */
%   | | | else return 0.08626800295183934;  // std dev = 19,423, 1.640,000 (wgt'ed) examples reached here.  /* #neg=959 #pos=681 */
%   | | else if ( ismarriedto(A, P), diedin(P, Q) )
%   | | | then return 0.06744447991833342;  // std dev = 11,123, 541,000 (wgt'ed) examples reached here.  /* #neg=342 #pos=199 */
%   | | | else return 0.16515901180157253;  // std dev = 36,733, 5.489,000 (wgt'ed) examples reached here.  /* #neg=2.822 #pos=2.667 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(B, C), diedin(A, C) )
%   then return 0.4290728782334029;  // std dev = 0,151, 187,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=185 */
%   else if ( wasbornin(B, D) )
%   | then if ( actedin(A, E), isleaderof(F, D) )
%   | | then if ( wasbornin(F, G), wrotemusicfor(H, E) )
%   | | | then return 0.1691647790419175;  // std dev = 2,305, 27,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return 0.4785915468325399;  // std dev = 2,043, 52,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=47 */
%   | | else if ( wasbornin(A, D) )
%   | | | then return 0.4192098796983956;  // std dev = 0,773, 140,000 (wgt'ed) examples reached here.  /* #pos=140 */
%   | | | else return 0.04295378221711259;  // std dev = 21,293, 1.988,000 (wgt'ed) examples reached here.  /* #neg=1.175 #pos=813 */
%   | else if ( ismarriedto(A, I), wasbornin(I, J) )
%   | | then if ( isleaderof(B, K) )
%   | | | then return 0.4107952222875025;  // std dev = 1,149, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.06522510547463242;  // std dev = 15,171, 983,000 (wgt'ed) examples reached here.  /* #neg=563 #pos=420 */
%   | | else if ( ismarriedto(B, L), ismarriedto(A, M) )
%   | | | then return 0.18012648093693912;  // std dev = 16,837, 1.228,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=755 */
%   | | | else return 0.12939927772042073;  // std dev = 36,368, 5.384,000 (wgt'ed) examples reached here.  /* #neg=2.769 #pos=2.615 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), ismarriedto(B, D) )
%   then if ( happenedin(E, C), ismarriedto(A, F) )
%   | then if ( isaffiliatedto(D, G) )
%   | | then return -0.3812223350231404;  // std dev = 0,096, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.14076533831457588;  // std dev = 0,451, 330,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=202 */
%   | else if ( wasbornin(D, H) )
%   | | then return 0.11784397251681542;  // std dev = 0,448, 131,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=78 */
%   | | else return -0.06020959074223008;  // std dev = 0,449, 322,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=116 */
%   else if ( ismarriedto(A, I), iscitizenof(B, J) )
%   | then return -0.028276071316705426;  // std dev = 0,445, 184,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=60 */
%   | else if ( wasbornin(B, K) )
%   | | then if ( wasbornin(A, K) )
%   | | | then return 0.31703515776081864;  // std dev = 0,793, 127,000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return 0.06409683761476485;  // std dev = 20,603, 1.904,000 (wgt'ed) examples reached here.  /* #neg=1.037 #pos=867 */
%   | | else if ( wasbornin(A, L), hascapital(M, L) )
%   | | | then return 0.013950823205957915;  // std dev = 9,543, 391,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=150 */
%   | | | else return 0.11327567180735373;  // std dev = 40,010, 6.603,000 (wgt'ed) examples reached here.  /* #neg=3.203 #pos=3.400 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( ismarriedto(A, D) )
%   | then return 0.395661186421253;  // std dev = 0,088, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.2596914149210025;  // std dev = 0,186, 48,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   else if ( ismarriedto(B, E), isaffiliatedto(A, F) )
%   | then if ( livesin(E, G), ispoliticianof(A, H) )
%   | | then return 0.6409774787443;  // std dev = 0,046, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( graduatedfrom(B, I), livesin(B, J) )
%   | | | then return 0.6361884243485307;  // std dev = 0,077, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1902803187901349;  // std dev = 4,451, 143,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=27 */
%   | else if ( ismarriedto(A, K), isaffiliatedto(B, L) )
%   | | then if ( isaffiliatedto(K, L) )
%   | | | then return 0.5907281745087987;  // std dev = 0,514, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.23715960299161562;  // std dev = 4,152, 162,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=22 */
%   | | else if ( ismarriedto(A, M), ismarriedto(B, N) )
%   | | | then return 0.1047875279511965;  // std dev = 21,058, 1.985,000 (wgt'ed) examples reached here.  /* #neg=773 #pos=1.212 */
%   | | | else return 0.0702814236568991;  // std dev = 42,445, 7.584,000 (wgt'ed) examples reached here.  /* #neg=3.969 #pos=3.615 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, D) )
%   then if ( wasbornin(E, C), diedin(E, D) )
%   | then return 0.3296283043894939;  // std dev = 0,297, 119,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=105 */
%   | else if ( wasbornin(B, C), livesin(F, D) )
%   | | then return -0.35585628577086176;  // std dev = 0,233, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( wasbornin(G, C), holdspoliticalposition(G, H) )
%   | | | then return -0.04751192831118377;  // std dev = 4,470, 95,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=40 */
%   | | | else return 0.1959188771452753;  // std dev = 5,421, 157,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=110 */
%   else if ( wasbornin(A, I), actedin(B, J) )
%   | then return 0.17869666804609666;  // std dev = 0,408, 163,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=110 */
%   | else if ( wasbornin(A, K), ismarriedto(B, L) )
%   | | then if ( hascapital(M, K), ismarriedto(A, N) )
%   | | | then return 0.08122723890342728;  // std dev = 6,876, 228,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=136 */
%   | | | else return -0.05689019346642195;  // std dev = 9,112, 418,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=163 */
%   | | else if ( diedin(B, P), happenedin(Q, P) )
%   | | | then return 0.013799461504221639;  // std dev = 11,651, 583,000 (wgt'ed) examples reached here.  /* #neg=314 #pos=269 */
%   | | | else return 0.05578627822862438;  // std dev = 43,938, 8.220,000 (wgt'ed) examples reached here.  /* #neg=4.154 #pos=4.066 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( diedin(B, E), ismarriedto(B, F) )
%   | then return -0.03253592480080956;  // std dev = 1,149, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( wasbornin(A, G), wrotemusicfor(H, C) )
%   | | then if ( wasbornin(H, I), ismarriedto(A, J) )
%   | | | then return 0.3532335756405005;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1796561500635109;  // std dev = 1,882, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | else if ( ismarriedto(B, K), created(K, L) )
%   | | | then return 0.15087064235724756;  // std dev = 1,146, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.42508751271538314;  // std dev = 1,075, 64,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   else if ( wasbornin(A, M), wasbornin(B, M) )
%   | then return 0.219342267039855;  // std dev = 0,064, 189,000 (wgt'ed) examples reached here.  /* #pos=189 */
%   | else if ( wasbornin(B, N), diedin(A, N) )
%   | | then return 0.3240373755428472;  // std dev = 0,143, 131,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=129 */
%   | | else if ( actedin(A, P) )
%   | | | then return -0.1037674303394496;  // std dev = 8,441, 328,000 (wgt'ed) examples reached here.  /* #neg=218 #pos=110 */
%   | | | else return 0.035653575243723735;  // std dev = 46,698, 9.227,000 (wgt'ed) examples reached here.  /* #neg=4.768 #pos=4.459 */


Results
   AUC ROC   = 0.654504
   AUC PR    = 0.676516
   CLL	      = -0.656722
   Precision = 0.697961 at threshold = 0.5
   Recall    = 0.3115
   F1        = 0.430754


Total learning time: 565.452 seconds
Total inference time: 61.038 seconds
AUC ROC: 0.654504


Dataset: imdb->yago2s(haschild), Fold: 3, Type: scratch, Time: 01:22:54
{'F1': 0.430754, 'Recall': 0.3115, 'Precision': [0.697961, 0.5], 'Inference time': 61.038, 'Learning time': 565.452, 'AUC ROC': 0.654504, 'AUC PR': 0.676516, 'CLL': -0.656722}


Starting experiment #2 for imdb->yago2s(haschild)

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 2,98e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839205;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936068;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783653;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109141;  // std dev = 5,16e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420312;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202607;  // std dev = 8,69e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'director(person).', 'movie(movie,person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 19.904551029205322
   Generating paths time   = 2.6263508796691895
   Generating mappings time   = 0.05422687530517578
   Possible mappings   = 56
   Finding best mapping   = 0.008546829223632812
   Total time   = 22.593682050704956


Best mapping found: ['workedunder(A,B) -> haschild(A,B)', 'movie(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false
9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.35764843459900664;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.30831804019497583;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.25608200302530515;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.20589704588635258;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.16146253756368428;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.12444472796965553;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.09485437518787389;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.07181211048303207;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.05415047045537571;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.04073817078421051;  // std dev = 49,975, 9.990,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.990 */


Results
   AUC ROC   = 0.50155
   AUC PR    = 0.50579
   CLL	      = -0.694109
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0031
   F1        = 0.006181


Total learning time: 211.044 seconds
Total inference time: 60.869 seconds
AUC ROC: 0.50155


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [2.98e-08, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [3.65e-08, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [1.83e-08, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [7.45e-09, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)'}, {'true': [0.0, 0, 10], 'false': [49.975, 5000, 4990]}]]
[{'': [-8.881784197001253e-17, 0.24999974949919337]}, {'': [8.881784197001253e-17, 0.24999974949917808]}, {'': [-1.7763568394002506e-16, 0.2499997494992058]}, {'': [1.3322676295501878e-16, 0.24999974949928896]}, {'': [-4.4408920985006264e-17, 0.2499997494992812]}, {'': [3.3306690738754695e-17, 0.24999974949921905]}, {'': [-2.7755575615628914e-17, 0.24999974949924528]}, {'': [5.551115123125783e-18, 0.24999974949926917]}, {'': [0.0, 0.24999974949923498]}, {'': [0.0, 0.24999974949927528]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.762910839861417;  // std dev = 1,345, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.1232091760633673;  // std dev = 4,021, 83,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | else if ( actedin(B, G), actedin(D, H) )
%   | | | then return 0.7470378239884004;  // std dev = 1,886, 36,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   | | | else return 0.4646137888706722;  // std dev = 21,568, 1.949,000 (wgt'ed) examples reached here.  /* #neg=767 #pos=1.182 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( actedin(A, J), actedin(B, K) )
%   | | | then return 0.767239844190421;  // std dev = 1,907, 44,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=40 */
%   | | | else return 0.28404547588021206;  // std dev = 27,757, 3.151,000 (wgt'ed) examples reached here.  /* #neg=1.809 #pos=1.342 */
%   | | else if ( ismarriedto(B, L) )
%   | | | then return 0.26799868468214516;  // std dev = 17,022, 1.198,000 (wgt'ed) examples reached here.  /* #neg=707 #pos=491 */
%   | | | else return 0.388935708189587;  // std dev = 29,558, 3.508,000 (wgt'ed) examples reached here.  /* #neg=1.646 #pos=1.862 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( wasbornin(B, D), wasbornin(A, D) )
%   | then return 0.805321848105882;  // std dev = 0,207, 165,000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then if ( diedin(A, G), wasbornin(B, H) )
%   | | | then return 0.576551115281896;  // std dev = 4,924, 149,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=117 */
%   | | | else return 0.36748082161562684;  // std dev = 21,401, 1.887,000 (wgt'ed) examples reached here.  /* #neg=802 #pos=1.085 */
%   | | else if ( ismarriedto(A, I) )
%   | | | then return 0.24200224050377683;  // std dev = 27,643, 3.143,000 (wgt'ed) examples reached here.  /* #neg=1.813 #pos=1.330 */
%   | | | else return 0.30214496670075097;  // std dev = 34,024, 4.646,000 (wgt'ed) examples reached here.  /* #neg=2.353 #pos=2.293 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.6493510536089679;  // std dev = 0,294, 165,000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( diedin(A, E), wasbornin(B, E) )
%   | | then return 0.734235235361968;  // std dev = 0,529, 142,000 (wgt'ed) examples reached here.  /* #pos=142 */
%   | | else if ( graduatedfrom(B, F), isaffiliatedto(A, G) )
%   | | | then return 0.5330790975264652;  // std dev = 3,987, 95,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=74 */
%   | | | else return 0.2385596938511613;  // std dev = 48,605, 9.588,000 (wgt'ed) examples reached here.  /* #neg=4.979 #pos=4.609 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( diedin(D, F), wasbornin(B, F) )
%   | | then if ( diedin(A, F) )
%   | | | then return 0.4994948372115833;  // std dev = 0,073, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.6179072073658834;  // std dev = 0,463, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( isaffiliatedto(A, G) )
%   | | | then return 0.07683320101410064;  // std dev = 4,520, 101,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=38 */
%   | | | else return 0.26554796983274304;  // std dev = 21,294, 1.931,000 (wgt'ed) examples reached here.  /* #neg=771 #pos=1.160 */
%   | else if ( ismarriedto(B, H) )
%   | | then if ( graduatedfrom(A, I) )
%   | | | then return -0.05359747457152828;  // std dev = 3,550, 76,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | | | else return 0.14801123833324803;  // std dev = 16,424, 1.122,000 (wgt'ed) examples reached here.  /* #neg=648 #pos=474 */
%   | | else if ( ismarriedto(A, J) )
%   | | | then return 0.16363032022713084;  // std dev = 27,652, 3.195,000 (wgt'ed) examples reached here.  /* #neg=1.813 #pos=1.382 */
%   | | | else return 0.23062065666400686;  // std dev = 29,343, 3.508,000 (wgt'ed) examples reached here.  /* #neg=1.646 #pos=1.862 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( wasbornin(E, F), wasbornin(B, F) )
%   | | then if ( happenedin(G, F), diedin(A, H) )
%   | | | then return 0.3163256173590041;  // std dev = 1,178, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.5556391231251216;  // std dev = 0,506, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( wasbornin(B, I), diedin(A, I) )
%   | | | then return 0.40567426819795627;  // std dev = 0,209, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.1909291966320226;  // std dev = 21,680, 1.985,000 (wgt'ed) examples reached here.  /* #neg=832 #pos=1.153 */
%   | else if ( diedin(A, J), diedin(B, J) )
%   | | then if ( hascapital(K, J), ismarriedto(B, L) )
%   | | | then return 0.29355002316026735;  // std dev = 0,744, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6035067563406937;  // std dev = 0,614, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( ismarriedto(A, M), diedin(M, N) )
%   | | | then return 0.07984839301442909;  // std dev = 12,598, 695,000 (wgt'ed) examples reached here.  /* #neg=429 #pos=266 */
%   | | | else return 0.15239538494814503;  // std dev = 41,726, 7.150,000 (wgt'ed) examples reached here.  /* #neg=3.736 #pos=3.414 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(B, D), graduatedfrom(A, E) )
%   | then if ( created(B, F), worksat(G, E) )
%   | | then if ( actedin(D, H), haswonprize(B, I) )
%   | | | then return -0.06895110121203064;  // std dev = 0,723, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5234160272841335;  // std dev = 0,928, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( graduatedfrom(B, J), diedin(A, K) )
%   | | | then return 0.46787981020667807;  // std dev = 0,336, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11024987907130755;  // std dev = 4,605, 133,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=29 */
%   | else if ( wasbornin(B, L), diedin(A, L) )
%   | | then if ( ismarriedto(A, M), ismarriedto(B, N) )
%   | | | then return 0.31300718643412934;  // std dev = 0,214, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.4842735772478783;  // std dev = 0,751, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( diedin(A, P), wasbornin(Q, P) )
%   | | | then return 0.07169035847354949;  // std dev = 19,722, 1.676,000 (wgt'ed) examples reached here.  /* #neg=928 #pos=748 */
%   | | | else return 0.13094867412065542;  // std dev = 44,050, 7.973,000 (wgt'ed) examples reached here.  /* #neg=3.965 #pos=4.008 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then return 0.25004442025206675;  // std dev = 0,187, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( diedin(B, D) )
%   | | | then return 0.28314129572501073;  // std dev = 0,198, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3886666162507639;  // std dev = 0,495, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | else if ( isaffiliatedto(B, G), isaffiliatedto(A, G) )
%   | | then if ( ispoliticianof(A, H), ismarriedto(B, I) )
%   | | | then return -0.14279854067517997;  // std dev = 0,680, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5181104225740014;  // std dev = 1,937, 115,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=112 */
%   | | else if ( isaffiliatedto(A, J), ismarriedto(B, K) )
%   | | | then return -0.10586403406315006;  // std dev = 5,080, 155,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=35 */
%   | | | else return 0.08857992368754522;  // std dev = 47,988, 9.531,000 (wgt'ed) examples reached here.  /* #neg=4.875 #pos=4.656 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then if ( diedin(A, D) )
%   | | then return 0.21503891375116665;  // std dev = 0,194, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | | then return 0.29086329298340724;  // std dev = 0,219, 37,000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.36146478435075174;  // std dev = 0,432, 84,000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else if ( actedin(B, G), actedin(A, H) )
%   | | then if ( ismarriedto(A, I), created(J, G) )
%   | | | then return 0.36128615282472537;  // std dev = 2,674, 69,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=61 */
%   | | | else return 0.544573053938573;  // std dev = 1,027, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( wasbornin(B, K), livesin(L, K) )
%   | | | then return 0.013372839812851582;  // std dev = 19,175, 1.663,000 (wgt'ed) examples reached here.  /* #neg=904 #pos=759 */
%   | | | else return 0.07492013334143045;  // std dev = 44,149, 8.053,000 (wgt'ed) examples reached here.  /* #neg=4.087 #pos=3.966 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then if ( wasbornin(A, D) )
%   | | | then return 0.16416878616882943;  // std dev = 0,050, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2037595727419389;  // std dev = 0,174, 49,000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( wasbornin(A, D) )
%   | | | then return 0.19079495150143133;  // std dev = 0,139, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.302495497399086;  // std dev = 0,386, 93,000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | else if ( isaffiliatedto(B, G), isaffiliatedto(A, G) )
%   | | then if ( ismarriedto(B, H), ispoliticianof(A, I) )
%   | | | then return -0.14910519630101043;  // std dev = 0,624, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.37779027654174363;  // std dev = 1,923, 115,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=112 */
%   | | else if ( livesin(B, J), livesin(A, J) )
%   | | | then return 0.5237067003956213;  // std dev = 0,444, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.04592491174358986;  // std dev = 48,068, 9.652,000 (wgt'ed) examples reached here.  /* #neg=4.995 #pos=4.657 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(B, D), iscitizenof(A, E) )
%   | then if ( graduatedfrom(D, F) )
%   | | then if ( wasbornin(B, G), hascurrency(E, H) )
%   | | | then return -0.12739742129398865;  // std dev = 0,528, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6010296602046231;  // std dev = 0,151, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( isaffiliatedto(B, I) )
%   | | | then return 0.32968302589916343;  // std dev = 0,800, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2996305393409644;  // std dev = 2,864, 94,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=10 */
%   | else if ( actedin(A, J), actedin(B, K) )
%   | | then if ( ismarriedto(A, L), directed(M, K) )
%   | | | then return 0.27092625724446595;  // std dev = 2,522, 74,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=67 */
%   | | | else return 0.3948087998757094;  // std dev = 1,033, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( graduatedfrom(A, N), graduatedfrom(B, P) )
%   | | | then return 0.2533225808276908;  // std dev = 3,415, 93,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=76 */
%   | | | else return 0.039819291630625975;  // std dev = 47,725, 9.677,000 (wgt'ed) examples reached here.  /* #neg=4.888 #pos=4.789 */


Results
   AUC ROC   = 0.641603
   AUC PR    = 0.672436
   CLL	      = -0.659854
   Precision = 0.680074 at threshold = 0.5
   Recall    = 0.3314
   F1        = 0.44564


Total learning time: 355.871 seconds
Total inference time: 59.4 seconds
AUC ROC: 0.641603


Refined model AUC ROC: 0.641603


Dataset: imdb->yago2s(haschild), Fold: 1, Type: transfer, Time: 04:12:27
{'F1': 0.44564, 'Recall': 0.3314, 'Mapping results': {'Knowledge compiling time': 19.904551029205322, 'Generating paths time': 2.6263508796691895, 'Generating mappings time': 0.05422687530517578, 'Possible mappings': 56, 'Total time': 22.593682050704956, 'Finding best mapping': 0.008546829223632812}, 'Precision': [0.680074, 0.5], 'Inference time': 59.4, 'Learning time': 566.915, 'Parameter Learning results': {'F1': 0.006181, 'Recall': 0.0031, 'Precision': [1.0, 0.5], 'Inference time': 60.869, 'Learning time': 211.044, 'AUC ROC': 0.50155, 'AUC PR': 0.50579, 'CLL': -0.694109}, 'AUC ROC': 0.641603, 'AUC PR': 0.672436, 'CLL': -0.659854}


Start learning from scratch in target domain

