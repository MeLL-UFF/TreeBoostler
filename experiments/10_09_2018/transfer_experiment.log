

Start learning from source dataset


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995096;  // std dev = 1,07e-06, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.8581489350995091;  // std dev = 1,08e-06, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048774;  // std dev = 1,55e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.7194734122109571;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1254446385283919;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.5553664367462832;  // std dev = 6,31e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360667;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830936;  // std dev = 4,13e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4175135841583103;  // std dev = 1,88e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.10159632948783658;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601492;  // std dev = 3,82e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.3207118471601493;  // std dev = 3,77e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.09269127618926053;  // std dev = 1,80e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694907;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.2551722425694883;  // std dev = 2,60e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.20975771563253495;  // std dev = 3,01e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109147;  // std dev = 4,21e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.1770964977452769;  // std dev = 2,46e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   else return -0.07324622576333703;  // std dev = 8,43e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.1527438580936717;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420299;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13400703000801098;  // std dev = 1,40e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.06419184008202594;  // std dev = 1,30e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'female(person).', 'actor(person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'director(A)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'director(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'director(A)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 



Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'movie(A,B) -> publication(A,B)', 'female(A) -> student(A)', 'actor(A) -> student(A)', 'director(A) -> professor(A)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '0;true;student(A).;false;true', '0;true,false;student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '1;true;student(A).;false;true', '1;true,false;student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '2;true;student(A).;false;true', '2;true,false;student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '3;true;student(A).;false;true', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '4;true;student(A).;false;true', '4;true,false;student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '5;true;student(A).;false;true', '5;true,false;student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '6;true;student(A).;false;true', '6;true,false;student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '8;true;student(A).;false;true', '8;true,false;student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '9;true;student(A).;false;true', '9;true,false;professor(A).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.7914822684328456;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.23996711691769412;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.6660633000779167;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20817625325674943;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.5181199435476403;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17625118051724167;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.38952954024068537;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14597491387976175;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.2956796123843447;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.11866244296850938;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.23048996886792547;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09501640537516494;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.18469472944075366;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07519450237440004;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.15155508707642015;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.0589795913101071;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.1268039860284982;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.045953504105397225;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.1077823579283239;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.035627063054396224;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
Results
   AUC ROC   = 0.7
   AUC PR    = 0.779088
   CLL	      = -0.564737
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total learning time: 3.752 seconds
Total inference time: 0.552 seconds
AUC ROC: 0.7


Results in test set
   AUC ROC   = 0.7
   AUC PR    = 0.779088
   CLL	      = -0.564737
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total inference time: 0.552 seconds
AUC ROC: 0.7
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.966, 1, 14], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false': [3.603, 34, 21]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #2: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #3: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #4: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #5: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #6: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #7: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #8: [('true,true', 0), ('false', 0.6181818181818182), ('true,false', 0.9333333333333333)]
Tree #9: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]
Tree #10: [('true,false', 0), ('false', 0.6181818181818182), ('true,true', 0.9333333333333333)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7914822684328456;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.23996711691769412;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.6660633000779167;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.20817625325674943;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5181199435476403;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.17625118051724167;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.38952954024068537;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.14597491387976175;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2956796123843447;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.11866244296850938;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.23048996886792547;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.09501640537516494;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.18469472944075366;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.07519450237440004;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15155508707642015;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.0589795913101071;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1268039860284982;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.045953504105397225;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1077823579283239;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.035627063054396224;  // std dev = 3,603, 55,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
Results
   AUC ROC   = 0.7
   AUC PR    = 0.779088
   CLL	      = -0.564737
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total learning time: 4.01 seconds
Total inference time: 0.522 seconds
AUC ROC: 0.7


Best model AUC ROC so far: 0.7


******************************************
Best model found
******************************************
Total revision time: 8.836
Best validation AUC ROC: 0.7


Results
   AUC ROC   = 0.68146
   AUC PR    = 0.753614
   CLL	      = -0.584349
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.346154
   F1        = 0.514286


Total inference time: 0.69 seconds
AUC ROC: 0.68146
Dataset: imdb->uwcse, Fold: 1, Type: transfer, Time: 00:00:30
{'AUC ROC': 0.68146, 'AUC PR': 0.753614, 'CLL': -0.584349, 'Precision': [1.0, 0.5], 'Recall': 0.346154, 'F1': 0.514286, 'Learning time': 8.836, 'Inference time': 0.69, 'Mapping results': {'Knowledge compiling time': 0.029799222946166992, 'Generating paths time': 4.276075124740601, 'Generating mappings time': 0.21536946296691895, 'Possible mappings': 864, 'Finding best mapping': 0.16623616218566895, 'Total time': 4.687499761581421}, 'Parameter Learning results': {'AUC ROC': 0.68146, 'AUC PR': 0.753614, 'CLL': -0.584349, 'Precision': [1.0, 0.5], 'Recall': 0.346154, 'F1': 0.514286, 'Learning time': 3.752, 'Inference time': 0.687}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( publication(E, A) )
%   | | then if ( projectmember(F, B), publication(E, G), tempadvisedby(G, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( publication(E, A) )
%   | | then if ( projectmember(F, B), publication(E, G), tempadvisedby(G, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(I, B) )
%   | | | | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(K, B) )
%   | | | | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D), publication(E, B) )
%   | | then return 0.41061411892853833;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(F, A) )
%   | | then if ( projectmember(G, B), publication(F, H), tempadvisedby(H, I) )
%   | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | else return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(L, B) )
%   | | | | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D), publication(E, B) )
%   | | then return 0.3152134384484254;  // std dev = 0,832, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4175135841583099;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(F, A), publication(F, G), tempadvisedby(H, G) )
%   | | then if ( publication(F, H) )
%   | | | then return 0.476151599322315;  // std dev = 0,203, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.058098675670086454;  // std dev = 0,823, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | then return 0.2959131107208691;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else if ( tempadvisedby(L, B), publication(M, B) )
%   | | | | then return 0.3136916014290807;  // std dev = 0,464, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | | else if ( publication(N, B) )
%   | | | | | then return 0.5610305431791159;  // std dev = 0,111, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.3491337189274477;  // std dev = 0,833, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.19191049359147963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3253800491938533;  // std dev = 0,054, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( publication(E, A), tempadvisedby(F, B) )
%   | | then if ( projectmember(G, B), publication(E, H), tempadvisedby(H, I) )
%   | | | then return 0.30807370503344733;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1058147112799788;  // std dev = 0,033, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.34125934858700147;  // std dev = 0,013, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(K, A), publication(K, L), tempadvisedby(M, L) )
%   | | | | then return 0.13332632215816803;  // std dev = 0,941, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( publication(N, B), publication(N, P), tempadvisedby(P, Q) )
%   | | | | | then return 0.19180463903775613;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.3097979434273282;  // std dev = 0,871, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926094;  // std dev = 1,18e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), tempadvisedby(D, E) )
%   | then if ( publication(F, A), publication(F, E) )
%   | | then return 0.07412228653684896;  // std dev = 0,963, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.18179942490064507;  // std dev = 0,367, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( publication(G, B) )
%   | | then if ( tempadvisedby(H, B), publication(I, A) )
%   | | | then if ( publication(J, H) )
%   | | | | then return 0.25428602151195334;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else return 0.19153791255031408;  // std dev = 0,344, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2994369641341663;  // std dev = 0,056, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(K, A), publication(K, L), tempadvisedby(L, M) )
%   | | | then return 0.24652840712161872;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( publication(N, A) )
%   | | | | then return 0.0236136217520333;  // std dev = 0,741, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.19129339320196537;  // std dev = 0,836, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839683;  // std dev = 1,49e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.1662488452348134;  // std dev = 0,829, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20913150480549514;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21670960399980022;  // std dev = 0,016, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( publication(F, A), tempadvisedby(G, B) )
%   | | then return 0.02634348070663631;  // std dev = 0,154, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.2239930487546105;  // std dev = 0,024, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | | then return 0.08122209561629291;  // std dev = 1,053, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else if ( publication(L, B) )
%   | | | | | then return 0.2880356422845371;  // std dev = 0,098, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else return 0.09457878916637097;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.16571281817544478;  // std dev = 0,216, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( publication(D, A), publication(D, E), tempadvisedby(E, F) )
%   | | then return 0.25934807386942804;  // std dev = 0,208, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.09590518703116789;  // std dev = 0,141, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else if ( publication(I, A), publication(I, J), tempadvisedby(K, J) )
%   | | | | then return -0.07424333123588311;  // std dev = 0,821, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else if ( tempadvisedby(L, B) )
%   | | | | | then return 0.19175165565120544;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | else if ( publication(M, B) )
%   | | | | | | then if ( publication(M, N), tempadvisedby(N, P) )
%   | | | | | | | then return 0.0843295870346926;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | | | else return 0.23347983912492412;  // std dev = 0,086, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.04885305417026157;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then if ( publication(D, C) )
%   | | then return 0.04492831295548908;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16363927871526573;  // std dev = 0,066, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(E, A), publication(E, F), tempadvisedby(F, G) )
%   | | then return 0.21505603267991555;  // std dev = 0,187, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(H, A) )
%   | | | then if ( tempadvisedby(I, B) )
%   | | | | then return -0.11161956976113;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | | else return 0.05372383434072062;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.16823099294634353;  // std dev = 0,020, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | | else if ( publication(K, B) )
%   | | | | | then return 0.09851084738838227;  // std dev = 0,873, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else return 0.03738615221725986;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06842697784420274;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then if ( publication(D, C) )
%   | | then return 0.034421317851786405;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.14251124858202735;  // std dev = 0,059, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(E, A), publication(E, F), tempadvisedby(G, F) )
%   | | then if ( publication(E, G) )
%   | | | then return 0.18255127161477494;  // std dev = 0,168, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07201107503760819;  // std dev = 0,821, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.11359318661988632;  // std dev = 0,092, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else if ( publication(I, B) )
%   | | | | then if ( publication(I, J), tempadvisedby(J, K) )
%   | | | | | then return 0.04494065434906225;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.17214768552927273;  // std dev = 0,086, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.028707423558508898;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
Results
   AUC ROC   = 0.966716
   AUC PR    = 0.958328
   CLL	      = -0.2552
   Precision = 0.934211 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.922078


Total learning time: 23.466 seconds
Total inference time: 0.825 seconds
AUC ROC: 0.966716


Dataset: imdb->uwcse, Fold: 1, Type: scratch, Time: 00:00:54
{'AUC ROC': 0.966716, 'AUC PR': 0.958328, 'CLL': -0.2552, 'Precision': [0.934211, 0.5], 'Recall': 0.910256, 'F1': 0.922078, 'Learning time': 23.466, 'Inference time': 0.825}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'movie(A,B) -> publication(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.21298764477693158;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.18503405676511187;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.15733633666574967;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.13120969089740755;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.10760714862133709;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.08704103420637156;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.06963300017480042;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.055227743148638625;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.043511837032673945;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.0341070677108096;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
Results
   AUC ROC   = 0.833333
   AUC PR    = 0.895833
   CLL	      = -0.426897
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.666667
   F1        = 0.8


Total learning time: 1.999 seconds
Total inference time: 0.491 seconds
AUC ROC: 0.833333


Results in test set
   AUC ROC   = 0.833333
   AUC PR    = 0.895833
   CLL	      = -0.426897
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.666667
   F1        = 0.8


Total inference time: 0.491 seconds
AUC ROC: 0.833333
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [2.98e-08, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [3.33e-08, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [1.83e-08, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [0.0, 0, 0], 'true,false': [7.45e-09, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 9], 'false': [2.664, 20, 11]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.6451612903225806)]
Tree #2: [('false', 0.6451612903225806)]
Tree #3: [('false', 0.6451612903225806)]
Tree #4: [('false', 0.6451612903225806)]
Tree #5: [('false', 0.6451612903225806)]
Tree #6: [('false', 0.6451612903225806)]
Tree #7: [('false', 0.6451612903225806)]
Tree #8: [('true,true', 0), ('false', 0.6451612903225806)]
Tree #9: [('false', 0.6451612903225806)]
Tree #10: [('false', 0.6451612903225806)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11231637819360633;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return 0.015585063223590646;  // std dev = 0,667, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.17483665295723486;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07431122051609755;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.15102736736369304;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06935837585182555;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.099643
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.664 seconds
Total inference time: 0.543 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '0;false;professor(B), student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '1;false;professor(B), student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '2;false;professor(B), student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '3;false;professor(B), student(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '4;false;professor(B), student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '5;false;professor(B), student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '6;false;professor(B), student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '8;false;professor(B), student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '9;false;professor(B), student(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: [('false', 0.6451612903225806)]
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11231637819360633;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( professor(B), student(A) )
%   | then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.326 seconds
Total inference time: 0.509 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 6.532
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.902763
   AUC PR    = 0.863302
   CLL	      = -0.345316
   Precision = 0.801724 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.889952


Total inference time: 0.685 seconds
AUC ROC: 0.902763
Dataset: imdb->uwcse, Fold: 2, Type: transfer, Time: 00:01:08
{'AUC ROC': 0.902763, 'AUC PR': 0.863302, 'CLL': -0.345316, 'Precision': [0.801724, 0.5], 'Recall': 1.0, 'F1': 0.889952, 'Learning time': 6.532, 'Inference time': 0.685, 'Mapping results': {'Knowledge compiling time': 0.03768658638000488, 'Generating paths time': 3.938552141189575, 'Generating mappings time': 0.21670794486999512, 'Possible mappings': 864, 'Finding best mapping': 0.1656200885772705, 'Total time': 4.358601808547974}, 'Parameter Learning results': {'AUC ROC': 0.659614, 'AUC PR': 0.728259, 'CLL': -0.61235, 'Precision': [0.914286, 0.5], 'Recall': 0.344086, 'F1': 0.5, 'Learning time': 1.999, 'Inference time': 0.726}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360633;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
Results
   AUC ROC   = 0.887097
   AUC PR    = 0.815789
   CLL	      = -0.327735
   Precision = 0.815789 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.898551


Total learning time: 1.78 seconds
Total inference time: 0.673 seconds
AUC ROC: 0.887097


Dataset: imdb->uwcse, Fold: 2, Type: scratch, Time: 00:01:11
{'AUC ROC': 0.887097, 'AUC PR': 0.815789, 'CLL': -0.327735, 'Precision': [0.815789, 0.5], 'Recall': 1.0, 'F1': 0.898551, 'Learning time': 1.78, 'Inference time': 0.673}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'movie(A,B) -> publication(A,B)', 'female(A) -> student(A)', 'actor(A) -> student(A)', 'director(A) -> professor(A)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '0;true;student(A).;false;true', '0;true,false;student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '1;true;student(A).;false;true', '1;true,false;student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '2;true;student(A).;false;true', '2;true,false;student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '3;true;student(A).;false;true', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '4;true;student(A).;false;true', '4;true,false;student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '5;true;student(A).;false;true', '5;true,false;student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '6;true;student(A).;false;true', '6;true,false;student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '8;true;student(A).;false;true', '8;true,false;student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '9;true;student(A).;false;true', '9;true,false;professor(A).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.3914822684328456;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.33686537905126746;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.2782443538996073;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( professor(A) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2218959584738568;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.17244533059929623;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.13179673974618208;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.09975589749696735;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07511419612884154;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( student(A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.05641688127395624;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( professor(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04232811156004838;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 0.75
   AUC PR    = 0.875
   CLL	      = -0.55239
   Precision = 0.5 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.666667


Total learning time: 1.668 seconds
Total inference time: 0.497 seconds
AUC ROC: 0.75


Results in test set
   AUC ROC   = 0.75
   AUC PR    = 0.875
   CLL	      = -0.55239
   Precision = 0.5 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.666667


Total inference time: 0.497 seconds
AUC ROC: 0.75
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 1], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'false': [1.932, 7, 8]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [0.0, 0, 1], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false': [1.932, 7, 8]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '0;true;student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '1;true;student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '2;true;student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '3;true;student(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '4;true;student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '5;true;student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '6;true;student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '8;true;student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '9;true;student(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #2: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #3: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #4: [('true,false,false', 0), ('false', 0.5333333333333333)]
Tree #5: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #6: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #7: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #8: [('false', 0.5333333333333333)]
Tree #9: [('true,false,true', 0), ('false', 0.5333333333333333)]
Tree #10: [('true,false,false', 0), ('false', 0.5333333333333333)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.3914822684328456;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.33686537905126746;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.2782443538996073;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.2218959584738568;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.17244533059929623;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.13179673974618208;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.09975589749696735;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( professor(B) )
%   | then return 0.5417808627955082;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.4582191372044918;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.05471552068308556;  // std dev = 1,461, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.04186271719421235;  // std dev = 1,460, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.384613
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.585 seconds
Total inference time: 0.477 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '0;true;student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '1;true;student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '2;true;student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '3;true;student(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '4;true;student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '5;true;student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '6;true;student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '7;true;professor(A).;false;false', '7;false;professor(B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '8;true;student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;true', '9;true;student(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.5333333333333333)]
Tree #2: [('false', 0.5333333333333333)]
Tree #3: [('false', 0.5333333333333333)]
Tree #4: [('false', 0.5333333333333333)]
Tree #5: [('false', 0.5333333333333333)]
Tree #6: [('false', 0.5333333333333333)]
Tree #7: [('false', 0.5333333333333333)]
Tree #8: []
Tree #9: [('false', 0.5333333333333333)]
Tree #10: [('false', 0.5333333333333333)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( student(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( professor(B) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( professor(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.497 seconds
Total inference time: 0.476 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 6.2
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.900518
   AUC PR    = 0.885969
   CLL	      = -0.486735
   Precision = 0.764706 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.866667


Total inference time: 0.719 seconds
AUC ROC: 0.900518
Dataset: imdb->uwcse, Fold: 3, Type: transfer, Time: 00:01:24
{'AUC ROC': 0.900518, 'AUC PR': 0.885969, 'CLL': -0.486735, 'Precision': [0.764706, 0.5], 'Recall': 1.0, 'F1': 0.866667, 'Learning time': 6.2, 'Inference time': 0.719, 'Mapping results': {'Knowledge compiling time': 0.01963496208190918, 'Generating paths time': 3.7149531841278076, 'Generating mappings time': 0.21165156364440918, 'Possible mappings': 864, 'Finding best mapping': 0.16497182846069336, 'Total time': 4.111237525939941}, 'Parameter Learning results': {'AUC ROC': 0.6875, 'AUC PR': 0.756441, 'CLL': -0.591751, 'Precision': [0.5, 0.5], 'Recall': 1.0, 'F1': 0.666667, 'Learning time': 1.668, 'Inference time': 0.711}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839687;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109175;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202618;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
Results
   AUC ROC   = 0.899038
   AUC PR    = 0.832
   CLL	      = -0.30308
   Precision = 0.832 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.908297


Total learning time: 1.597 seconds
Total inference time: 0.674 seconds
AUC ROC: 0.899038


Dataset: imdb->uwcse, Fold: 3, Type: scratch, Time: 00:01:27
{'AUC ROC': 0.899038, 'AUC PR': 0.832, 'CLL': -0.30308, 'Precision': [0.832, 0.5], 'Recall': 1.0, 'F1': 0.908297, 'Learning time': 1.597, 'Inference time': 0.674}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'movie(A,B) -> publication(A,B)', 'female(A) -> student(A)', 'actor(A) -> student(A)', 'director(A) -> professor(A)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'student(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)', 'true,false': 'professor(A)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '0;true;student(A).;false;true', '0;true,false;student(A).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '1;true;student(A).;false;true', '1;true,false;student(A).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '2;true;student(A).;false;true', '2;true,false;student(A).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '3;true;student(A).;false;true', '3;true,false;professor(A).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '4;true;student(A).;false;true', '4;true,false;student(A).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '5;true;student(A).;false;true', '5;true,false;student(A).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '6;true;student(A).;false;true', '6;true,false;student(A).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '8;true;student(A).;false;true', '8;true,false;student(A).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '9;true;student(A).;false;true', '9;true,false;professor(A).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.23550742566555002;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20435555384358778;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17314045679934378;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1435619623169689;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.11687066144162574;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09373615430537581;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07431100858215692;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.05839011401356756;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.045574344960651395;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( student(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03539407322634257;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
Results
   AUC ROC   = 0.666667
   AUC PR    = 0.747588
   CLL	      = -0.586492
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total learning time: 5.462 seconds
Total inference time: 0.564 seconds
AUC ROC: 0.666667


Results in test set
   AUC ROC   = 0.666667
   AUC PR    = 0.747588
   CLL	      = -0.586492
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total inference time: 0.564 seconds
AUC ROC: 0.666667
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [4.21e-08, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [4.21e-08, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [2.11e-08, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 13], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'student(A)'}, {'true,true': [0.0, 0, 13], 'true,false': [0.0, 0, 0], 'false': [3.529, 33, 20]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #2: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #3: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #4: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #5: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #6: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #7: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #8: [('true,true', 0), ('false', 0.6226415094339622)]
Tree #9: [('true,false', 0), ('false', 0.6226415094339622)]
Tree #10: [('true,false', 0), ('false', 0.6226415094339622)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.23550742566555002;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.20435555384358778;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.17314045679934378;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.1435619623169689;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.11687066144162574;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.09373615430537581;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.07431100858215692;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.05839011401356756;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.045574344960651395;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.03539407322634257;  // std dev = 3,529, 53,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
Results
   AUC ROC   = 0.666667
   AUC PR    = 0.747588
   CLL	      = -0.586492
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total learning time: 8.521 seconds
Total inference time: 0.542 seconds
AUC ROC: 0.666667


Best model AUC ROC so far: 0.666667


******************************************
Best model found
******************************************
Total revision time: 15.089
Best validation AUC ROC: 0.666667


Results
   AUC ROC   = 0.676875
   AUC PR    = 0.739319
   CLL	      = -0.58593
   Precision = 0.965517 at threshold = 0.5
   Recall    = 0.35
   F1        = 0.513761


Total inference time: 0.662 seconds
AUC ROC: 0.676875
Dataset: imdb->uwcse, Fold: 4, Type: transfer, Time: 00:01:49
{'AUC ROC': 0.676875, 'AUC PR': 0.739319, 'CLL': -0.58593, 'Precision': [0.965517, 0.5], 'Recall': 0.35, 'F1': 0.513761, 'Learning time': 15.089, 'Inference time': 0.662, 'Mapping results': {'Knowledge compiling time': 0.0325624942779541, 'Generating paths time': 4.144447326660156, 'Generating mappings time': 0.21719574928283691, 'Possible mappings': 864, 'Finding best mapping': 0.1655726432800293, 'Total time': 4.559796333312988}, 'Parameter Learning results': {'AUC ROC': 0.676875, 'AUC PR': 0.739319, 'CLL': -0.58593, 'Precision': [0.965517, 0.5], 'Recall': 0.35, 'F1': 0.513761, 'Learning time': 5.462, 'Inference time': 0.666}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, A), publication(E, B) )
%   | then if ( publication(D, B) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(D, F), publication(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(H, A), publication(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | else return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, A), publication(E, B) )
%   | then if ( publication(D, B) )
%   | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(D, F), publication(E, F) )
%   | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( publication(H, A), publication(H, I), professor(I) )
%   | | | then return 0.510105724767919;  // std dev = 0,858, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | else return 0.6419935073490319;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, A), publication(E, B) )
%   | then if ( publication(D, B) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(D, F), publication(E, F) )
%   | | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.4943031353569233;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else if ( publication(I, A), publication(I, J), professor(J) )
%   | | | | then return 0.33079479451491084;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.5021983469365157;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(E, A) )
%   | then if ( publication(D, A) )
%   | | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(D, F), publication(E, F) )
%   | | | then return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.06990902274840138;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.3730808576992209;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else if ( publication(I, A), publication(I, J), professor(J) )
%   | | | | then return 0.2535147314259623;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.37818465390573175;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, A), publication(E, B) )
%   | then if ( publication(D, B) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(D, F), publication(E, F) )
%   | | | then return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.059354635365447495;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.28095070250333487;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else if ( publication(I, A), publication(I, J), professor(J) )
%   | | | | then return 0.19100636703283427;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | | else return 0.28572652943591187;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.09269127618926093;  // std dev = 1,29e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tempadvisedby(E, B), publication(F, B), publication(G, A) )
%   | | then if ( publication(F, H), publication(G, H) )
%   | | | then return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.05002771289938789;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(I, A) )
%   | | | then if ( publication(I, B) )
%   | | | | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else return 0.22621303018406325;  // std dev = 0,847, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else if ( tempadvisedby(J, B) )
%   | | | | then return 0.19605333304636297;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | else return 0.2061793258350158;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.08518475138839683;  // std dev = 1,58e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B) )
%   | then if ( publication(D, A) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( publication(E, A), publication(E, F), professor(F) )
%   | | | then return -0.07165010768032516;  // std dev = 0,882, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.23339154570827902;  // std dev = 0,389, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( publication(G, A), publication(G, H), tempadvisedby(I, H) )
%   | | then return 0.15457761739838913;  // std dev = 0,839, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( publication(J, A) )
%   | | | then return 0.22800934850871477;  // std dev = 0,082, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16328504705962799;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109179;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, B), publication(D, A) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tempadvisedby(E, B), publication(F, B), publication(G, A) )
%   | | then if ( publication(F, H), publication(G, H) )
%   | | | then return 0.07863437260762425;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.04030608842553193;  // std dev = 0,820, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(I, A), publication(I, B) )
%   | | | then return 0.1766181960436541;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( tempadvisedby(J, B), publication(K, B) )
%   | | | | then return 0.10733305500312575;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | | else if ( publication(L, A), publication(M, B) )
%   | | | | | then return 0.10151661660264172;  // std dev = 0,836, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.14574262725952108;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15260533651347682;  // std dev = 0,009, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), publication(G, B) )
%   | | | then return -0.06977815700185293;  // std dev = 0,879, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.08034811977415948;  // std dev = 0,837, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(H, B) )
%   | | | then return 0.1696760302015964;  // std dev = 0,393, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.11922130841294018;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06842697784420274;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13389962375625958;  // std dev = 0,008, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( publication(F, A) )
%   | | | then if ( publication(E, G), publication(F, G) )
%   | | | | then return 0.07694957110780391;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.033438257169900974;  // std dev = 0,781, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.05901935403507424;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( publication(H, A), publication(I, B) )
%   | | | then return 0.06010285630978682;  // std dev = 0,836, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10066998892325371;  // std dev = 0,301, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06419184008202622;  // std dev = 3,73e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
Results
   AUC ROC   = 0.962266
   AUC PR    = 0.942359
   CLL	      = -0.243001
   Precision = 0.876404 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.923077


Total learning time: 13.891 seconds
Total inference time: 0.779 seconds
AUC ROC: 0.962266


Dataset: imdb->uwcse, Fold: 4, Type: scratch, Time: 00:02:04
{'AUC ROC': 0.962266, 'AUC PR': 0.942359, 'CLL': -0.243001, 'Precision': [0.876404, 0.5], 'Recall': 0.975, 'F1': 0.923077, 'Learning time': 13.891, 'Inference time': 0.779}


Best mapping found: ['workedunder(A,B) -> advisedby(A,B)', 'movie(A,B) -> publication(A,B)', 'actor(A) -> student(A)', 'director(A) -> professor(A)'] 

Tranferred structured tree: [['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [1.07e-06, 0, 170], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.55e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [5.72e-07, 0, 170], 'true,false,true': [6.31e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [4.13e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.88e-07, 0, 212], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [3.82e-07, 0, 170], 'true,false,true': [3.77e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.8e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [2.6e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [3.01e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [4.21e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [2.46e-07, 0, 382], 'false': [8.43e-08, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true,true': [7.6e-08, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [1.4e-07, 0, 212], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: advisedby 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;true;false', '7;true;professor(A).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false']
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.28672036367094084;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.24811816884741322;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.20848477447886868;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.17062637354018523;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.13664585375352217;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.10762034996184411;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08372807955323866;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then if ( professor(A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06457405393631674;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.04949778322519462;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03777940363354094;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
Results
   AUC ROC   = 0.625
   AUC PR    = 0.719853
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total learning time: 3.407 seconds
Total inference time: 0.499 seconds
AUC ROC: 0.625


Results in test set
   AUC ROC   = 0.625
   AUC PR    = 0.719853
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total inference time: 0.499 seconds
AUC ROC: 0.625
Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)', 'true': 'professor(A)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}], ['advisedby(A, B)', {'': 'professor(B), publication(C, A), publication(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.619, 16, 12]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;false', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.5714285714285714)]
Tree #2: [('false', 0.5714285714285714)]
Tree #3: [('false', 0.5714285714285714)]
Tree #4: [('false', 0.5714285714285714)]
Tree #5: [('false', 0.5714285714285714)]
Tree #6: [('false', 0.5714285714285714)]
Tree #7: [('false', 0.5714285714285714)]
Tree #8: [('true,true', 0), ('false', 0.5714285714285714)]
Tree #9: [('false', 0.5714285714285714)]
Tree #10: [('false', 0.5714285714285714)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.6914822684328454;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.585186000855536;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.6279265057734222;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A) )
%   | | then return -0.1556092308657683;  // std dev = 0,237, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( publication(J, B) )
%   | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03573219859979933;  // std dev = 0,662, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.3630905912593825;  // std dev = 0,777, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10475544031338437;  // std dev = 0,028, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B) )
%   | | then return 0.28155411371729666;  // std dev = 0,838, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2616017936598001;  // std dev = 0,404, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( publication(F, A), student(A) )
%   | | then return -0.17206527070950903;  // std dev = 0,288, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( student(A), student(B) )
%   | | | then return -0.10034033748376281;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.031065747732789684;  // std dev = 0,559, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.14224049553967358;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1611020494825118;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.23927258768021087;  // std dev = 0,702, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.0893589304798385;  // std dev = 0,034, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.10694734515937925;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.12170494105418662;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.27318687020216703;  // std dev = 0,004, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A), student(A) )
%   | | then return -0.16192255270982478;  // std dev = 0,319, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( student(A), student(B) )
%   | | | then return -0.0844730909017658;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.02144413019197876;  // std dev = 0,495, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03235502949134926;  // std dev = 1,670, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.0729562812932582;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0851048162045809;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.15185768162020433;  // std dev = 0,646, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.08021067353576525;  // std dev = 0,045, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.055485081611628385;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.06547645438802539;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1921803065994933;  // std dev = 0,003, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A), student(A) )
%   | | then return -0.15395228431946612;  // std dev = 0,335, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( professor(A) )
%   | | | then return -0.08697734321731279;  // std dev = 0,013, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0065125480697243955;  // std dev = 0,445, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Results
   AUC ROC   = 0.6875
   AUC PR    = 0.733333
   CLL	      = -0.485247
   Precision = 0.666667 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.8


Total learning time: 6.386 seconds
Total inference time: 0.551 seconds
AUC ROC: 0.6875


Best model AUC ROC so far: 0.6875


Refining iteration 2
********************************
Candidate for revision
['0;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '0;false;professor(B), student(A).;true;false', '0;false,true;tempadvisedby(D, B), publication(E, B).;false;false', '1;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '1;false;professor(B), student(A).;true;false', '1;false,true;tempadvisedby(D, B), publication(E, B).;false;false', '2;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '2;false;hasposition(B, D), student(A).;true;true', '2;false,true;projectmember(E, B), publication(F, B).;true;true', '2;false,true,false;tempadvisedby(G, B), publication(H, B).;false;false', '2;false,false;publication(I, A).;false;true', '2;false,false,false;publication(J, B).;false;false', '3;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '3;false;professor(B), student(A).;true;false', '3;false,true;tempadvisedby(D, B), publication(E, B).;false;false', '4;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '4;false;hasposition(B, D), student(A).;false;true', '4;false,false;publication(F, A), student(A).;false;true', '4;false,false,false;student(A), student(B).;false;false', '5;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '5;false;professor(B), student(A).;true;false', '5;false,true;tempadvisedby(D, B), publication(E, B).;false;false', '6;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '6;false;hasposition(B, D), student(A).;true;true', '6;false,true;projectmember(E, B), publication(F, B).;true;true', '6;false,true,false;tempadvisedby(G, B), publication(H, B).;false;false', '6;false,false;publication(I, A), student(A).;false;true', '6;false,false,false;student(A), student(B).;false;false', '7;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '8;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '8;false;professor(B), student(A).;true;false', '8;false,true;tempadvisedby(D, B), publication(E, B).;false;false', '9;;advisedby(A, B) :- professor(B), publication(C, A), publication(C, B).;false;true', '9;false;hasposition(B, D), student(A).;true;true', '9;false,true;projectmember(E, B), publication(F, B).;true;true', '9;false,true,false;tempadvisedby(G, B), publication(H, B).;false;false', '9;false,false;publication(I, A), student(A).;false;true', '9;false,false,false;professor(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,true,true,true', 0.6666666666666666), ('false,true,true,false', 0.7142857142857143), ('false,true,false', 0.8333333333333334)]
Tree #2: [('false,true,true,true', 0.6666666666666666), ('false,true,true,false', 0.7142857142857143), ('false,true,false', 0.8333333333333334)]
Tree #3: [('false,true,true', 0.6666666666666666), ('false,true,false,true', 0.7142857142857143), ('false,false,false,false', 0.8)]
Tree #4: [('false,true,true,true', 0.6666666666666666), ('false,true,true,false', 0.7142857142857143), ('false,true,false', 0.8333333333333334)]
Tree #5: [('false,true,false', 0.7777777777777778), ('false,true,true', 0.8), ('false,false,false,false', 0.8)]
Tree #6: [('false,true,true,true', 0.6666666666666666), ('false,true,true,false', 0.7142857142857143), ('false,true,false', 0.8333333333333334)]
Tree #7: [('false,true,true', 0.6666666666666666), ('false,true,false,true', 0.7142857142857143), ('false,false,false,false', 0.8)]
Tree #8: [('false', 0.5714285714285714)]
Tree #9: [('false,true,true,true', 0.6666666666666666), ('false,true,true,false', 0.7142857142857143), ('false,true,false', 0.8333333333333334)]
Tree #10: [('false,true,true', 0.6666666666666666), ('false,true,false,true', 0.7142857142857143), ('false,false,false,false', 0.8333333333333334)]


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then return 0.5581489350995124;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.6914822684328454;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then return 0.47588605454691735;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.585186000855536;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.34931406547140575;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.3969331130904535;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.6279265057734222;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A) )
%   | | then return -0.1556092308657683;  // std dev = 0,237, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( publication(J, B) )
%   | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03573219859979933;  // std dev = 0,662, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then return 0.29466199297978857;  // std dev = 1,448, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.3630905912593825;  // std dev = 0,777, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10475544031338437;  // std dev = 0,028, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then return 0.26872305232581134;  // std dev = 1,474, 14,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else if ( publication(E, A), student(A) )
%   | | then return -0.17206527070950903;  // std dev = 0,288, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( student(A), student(B) )
%   | | | then return -0.10034033748376281;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.031065747732789684;  // std dev = 0,559, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then return 0.15510950306531138;  // std dev = 1,448, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.23968653210217172;  // std dev = 0,702, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.0893589304798385;  // std dev = 0,034, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.0917735276308687;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.1277984471370395;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.2736673175983717;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A), student(A) )
%   | | then return -0.16194802910617098;  // std dev = 0,319, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( student(A), student(B) )
%   | | | then return -0.0844730909017658;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.021423542930345662;  // std dev = 0,494, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.06951352078805066;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0971847995221022;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.15837945505997755;  // std dev = 0,646, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.07786018976714801;  // std dev = 0,044, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( professor(B), student(A) )
%   | then if ( tempadvisedby(D, B), publication(E, B) )
%   | | then return 0.06802113677465546;  // std dev = 1,448, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.12798852095802915;  // std dev = 0,651, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.07246193167946391;  // std dev = 0,041, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), publication(C, A), publication(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( hasposition(B, D), student(A) )
%   | then if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.03691495836264006;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.05897479026254832;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.17709852770478662;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(I, A), student(A) )
%   | | then return -0.1563367728531219;  // std dev = 0,361, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( professor(A) )
%   | | | then return -0.07917942068890202;  // std dev = 0,012, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.008064471742072544;  // std dev = 0,417, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Results
   AUC ROC   = 0.6875
   AUC PR    = 0.733333
   CLL	      = -0.478191
   Precision = 0.666667 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.8


Total learning time: 3.885 seconds
Total inference time: 0.538 seconds
AUC ROC: 0.6875


Best model AUC ROC so far: 0.6875


******************************************
Best model found
******************************************
Total revision time: 15.266
Best validation AUC ROC: 0.6875


Results
   AUC ROC   = 0.928845
   AUC PR    = 0.893418
   CLL	      = -0.288756
   Precision = 0.836207 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.910798


Total inference time: 0.75 seconds
AUC ROC: 0.928845
Dataset: imdb->uwcse, Fold: 5, Type: transfer, Time: 00:02:27
{'AUC ROC': 0.928845, 'AUC PR': 0.893418, 'CLL': -0.288756, 'Precision': [0.836207, 0.5], 'Recall': 1.0, 'F1': 0.910798, 'Learning time': 15.266, 'Inference time': 0.75, 'Mapping results': {'Knowledge compiling time': 0.02260112762451172, 'Generating paths time': 3.9771482944488525, 'Generating mappings time': 0.21326732635498047, 'Possible mappings': 864, 'Finding best mapping': 0.165269136428833, 'Total time': 4.378293752670288}, 'Parameter Learning results': {'AUC ROC': 0.67919, 'AUC PR': 0.74825, 'CLL': -0.586405, 'Precision': [0.925, 0.5], 'Recall': 0.381443, 'F1': 0.540146, 'Learning time': 3.407, 'Inference time': 0.671}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), inphase(D, E) )
%   | then if ( inphase(A, E), tempadvisedby(F, B) )
%   | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( projectmember(G, B) )
%   | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), inphase(D, E) )
%   | then if ( publication(F, A) )
%   | | then return 0.7437578536943907;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( inphase(A, E) )
%   | | | then return 0.41851933418886933;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(G, B) )
%   | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), inphase(D, E) )
%   | then if ( publication(F, A) )
%   | | then return 0.579984629664779;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( inphase(A, E) )
%   | | | then return 0.33263323690721186;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(G, B) )
%   | | then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.43621811320401743;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(D, B), tempadvisedby(E, B) )
%   | | then if ( publication(D, F), inphase(F, G) )
%   | | | then return 0.32004691230635857;  // std dev = 0,836, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.20370179990838175;  // std dev = 1,080, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.3863541288179309;  // std dev = 0,782, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3335396238071234;  // std dev = 0,032, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(D, B), tempadvisedby(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.1512169166047104;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2195634659696716;  // std dev = 0,416, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2956366213258225;  // std dev = 0,778, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A) )
%   | then return 0.2639751980890228;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tempadvisedby(E, B), publication(F, B) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.11360828351613143;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16800437512433167;  // std dev = 0,416, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.31708451225480394;  // std dev = 0,102, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( publication(H, A), student(A) )
%   | then return -0.1767576879178085;  // std dev = 0,317, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( student(A), student(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04155689938807385;  // std dev = 0,567, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then return 0.0911606259930547;  // std dev = 0,559, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( publication(D, B) )
%   | | then if ( projectmember(E, B) )
%   | | | then return 0.08572410893806053;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1468246668515053;  // std dev = 0,369, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.3780218198688656;  // std dev = 0,196, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08041240916281615;  // std dev = 0,022, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), publication(E, B) )
%   | then if ( publication(E, A) )
%   | | then return 0.2074906027222413;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( projectmember(F, B) )
%   | | | then return 0.0650111246961828;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.095902106723317;  // std dev = 0,417, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.20062934747087907;  // std dev = 0,045, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( publication(G, A) )
%   | then return -0.13271431173063147;  // std dev = 0,326, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( publication(H, B) )
%   | | then return -0.07615858399601598;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.028481341103418954;  // std dev = 0,465, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A) )
%   | then return 0.16994876009998636;  // std dev = 0,019, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(E, B), publication(F, B) )
%   | | then return 0.049537866794944575;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.0747388208510997;  // std dev = 0,418, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.174674578730331;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( publication(I, A), student(A) )
%   | then return -0.14403181996524028;  // std dev = 0,293, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( student(A), student(B) )
%   | | then return -0.07230878435963181;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.026103327340293192;  // std dev = 0,459, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.14731252561725966;  // std dev = 0,017, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(D, B), tempadvisedby(E, B) )
%   | | then if ( projectmember(F, B) )
%   | | | then return 0.037902906714553354;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05858814863158517;  // std dev = 0,419, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1116921530884294;  // std dev = 0,579, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0672739146711305;  // std dev = 0,037, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
Results
   AUC ROC   = 0.929801
   AUC PR    = 0.909389
   CLL	      = -0.282305
   Precision = 0.850877 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.919431


Total learning time: 7.574 seconds
Total inference time: 0.804 seconds
AUC ROC: 0.929801


Dataset: imdb->uwcse, Fold: 5, Type: scratch, Time: 00:02:36
{'AUC ROC': 0.929801, 'AUC PR': 0.909389, 'CLL': -0.282305, 'Precision': [0.850877, 0.5], 'Recall': 1.0, 'F1': 0.919431, 'Learning time': 7.574, 'Inference time': 0.804}


Start learning from source dataset


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.834339411289988;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B) )
%   | | | | | then if ( publication(I, E) )
%   | | | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7566996597371937;  // std dev = 0,302, 69,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=62 */
%   else return -0.14185106490048768;  // std dev = 7,45e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.7004441928528997;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B) )
%   | | | | | then if ( publication(I, E) )
%   | | | | | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6380370314373341;  // std dev = 0,302, 69,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=62 */
%   else return -0.12544463852839147;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.542108638524146;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( projectmember(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B), publication(I, B) )
%   | | | | then if ( publication(I, E) )
%   | | | | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( publication(K, A) )
%   | | | then return 0.5999515671949478;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4870483413884969;  // std dev = 0,316, 62,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=55 */
%   else return -0.11231637819360625;  // std dev = 6,66e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.40740632446069325;  // std dev = 0,152, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B), publication(I, B) )
%   | | | | then if ( publication(I, E) )
%   | | | | | then return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return 0.11914890490746428;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( projectmember(K, B), publication(L, B) )
%   | | | then return 0.14623179763792385;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3856774298459784;  // std dev = 0,287, 66,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=60 */
%   else return -0.10159632948783617;  // std dev = 5,67e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), publication(E, A), publication(E, D) )
%   | then return 0.0853025832133123;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( publication(F, B), publication(F, A) )
%   | | then return 0.3353025832133126;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( publication(G, A), hasposition(H, C), publication(G, H) )
%   | | | then if ( publication(I, B), publication(I, J), tempadvisedby(J, K) )
%   | | | | then return -0.2131895059423058;  // std dev = 0,295, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | | else if ( publication(L, B), tempadvisedby(M, B) )
%   | | | | | then return 0.021971531194706788;  // std dev = 0,843, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | | else if ( projectmember(N, B), publication(G, P), tempadvisedby(P, H) )
%   | | | | | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | | | else return 0.15544705200114503;  // std dev = 1,163, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else if ( publication(Q, A), hasposition(R, C), projectmember(S, R) )
%   | | | | then return 0.38221915082789254;  // std dev = 0,062, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | | else return 0.2716245316344575;  // std dev = 0,324, 65,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=56 */
%   else return -0.08912021616656213;  // std dev = 0,051, 94,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.2461965553571734;  // std dev = 0,146, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), publication(G, B) )
%   | | | then if ( publication(G, E) )
%   | | | | then return 0.0944414294666774;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09196307830647746;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else if ( publication(H, B), hasposition(B, I), hasposition(E, I) )
%   | | | | then return 0.029799824397670344;  // std dev = 0,957, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | else if ( projectmember(J, B) )
%   | | | | | then return 0.12537955555824132;  // std dev = 0,450, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | | else return 0.22956553786862852;  // std dev = 0,433, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( publication(K, A) )
%   | | | then return 0.2763609656271657;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21427779866007077;  // std dev = 0,315, 62,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=55 */
%   else return -0.0854634506085405;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, D), inphase(D, E) )
%   | then return 0.1811911542804809;  // std dev = 0,244, 99,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=86 */
%   | else if ( publication(F, B), tempadvisedby(G, B) )
%   | | then if ( projectmember(H, B) )
%   | | | then return -0.004599905290283719;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0936789381345254;  // std dev = 0,895, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then if ( publication(J, A) )
%   | | | | then return 0.13088229311425023;  // std dev = 0,845, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | else return 0.2782086387063787;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( publication(K, A), hasposition(B, L) )
%   | | | | then return 0.19412841475937612;  // std dev = 0,710, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else if ( publication(M, B) )
%   | | | | | then return 0.11154197203971201;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | | else return -0.014086824229249884;  // std dev = 0,933, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07901601616945345;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.17061264445773872;  // std dev = 0,147, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.20957716027928552;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B), publication(I, E) )
%   | | | | | then return 0.04080408749377773;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.06179108314885436;  // std dev = 0,290, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else if ( publication(J, B), hasposition(B, K), hasposition(E, K) )
%   | | | | | then return -0.022565289841077044;  // std dev = 0,956, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | | | else return 0.14195506147171902;  // std dev = 0,872, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( projectmember(L, B), publication(M, B) )
%   | | | then return -0.0035840559824990756;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15195171550680459;  // std dev = 0,285, 66,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=60 */
%   else return -0.07345374408019724;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), publication(E, A), publication(F, D) )
%   | then return 0.0686557049135194;  // std dev = 0,257, 14,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then return 0.16553591771497098;  // std dev = 3,33e-08, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( publication(H, A), hasposition(I, C), publication(H, I) )
%   | | | then if ( publication(J, B) )
%   | | | | then if ( publication(J, I) )
%   | | | | | then return 0.021774266074216307;  // std dev = 1,039, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | | else return -0.06375450937653969;  // std dev = 0,709, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | | else return 0.0959252522624948;  // std dev = 0,832, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else if ( publication(K, B), publication(K, L), inphase(L, M) )
%   | | | | then return 0.14604640144644498;  // std dev = 0,252, 46,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=42 */
%   | | | | else if ( publication(N, A), hasposition(P, C), tempadvisedby(Q, P) )
%   | | | | | then return 0.1774110157741346;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | | else return 0.05285305844700834;  // std dev = 0,396, 23,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   else return -0.06673836741892174;  // std dev = 0,450, 94,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.12705087357899567;  // std dev = 0,147, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( publication(D, A), publication(D, E), professor(E) )
%   | | then if ( tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E) )
%   | | | then return 0.16342274822630087;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else if ( tempadvisedby(H, B) )
%   | | | | then if ( publication(I, B), publication(I, E) )
%   | | | | | then return 0.0276871090909578;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | | else return -0.06349645824308334;  // std dev = 0,289, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | | else if ( publication(J, B) )
%   | | | | | then return 0.09259948076122322;  // std dev = 1,022, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | | | else return -0.04292262061130533;  // std dev = 0,761, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( publication(K, B), publication(K, L), inphase(L, M) )
%   | | | then return 0.12010177527244305;  // std dev = 0,254, 43,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | else return 0.06920494218318306;  // std dev = 0,353, 26,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   else return -0.06446475344082259;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */


Predicates from source: ['advisedby(person,person).', 'projectmember(project,person).', 'tempadvisedby(person,person).', 'student(person).', 'publication(title,person).', 'inphase(person,prequals).', 'hasposition(person,faculty).', 'professor(person).'] 

Source structured tree: [['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'projectmember(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B)', 'true,false,true,false,true': 'publication(I, B)', 'true,false,true,false,true,true': 'publication(I, E)', 'true,false,true,false,false': 'publication(J, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'projectmember(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B)', 'true,false,true,false,true': 'publication(I, B)', 'true,false,true,false,true,true': 'publication(I, E)', 'true,false,true,false,false': 'publication(J, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'projectmember(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B), publication(I, B)', 'true,false,true,false,true': 'publication(I, E)', 'true,false,true,false,false': 'publication(J, B)', 'true,false,false': 'publication(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B), publication(I, B)', 'true,false,true,false,true': 'publication(I, E)', 'true,false,true,false,false': 'publication(J, B)', 'true,false,false': 'projectmember(K, B), publication(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A), hasposition(B, C)', 'true': 'tempadvisedby(D, B), publication(E, A), publication(E, D)', 'true,false': 'publication(F, B), publication(F, A)', 'true,false,false': 'publication(G, A), hasposition(H, C), publication(G, H)', 'true,false,false,true': 'publication(I, B), publication(I, J), tempadvisedby(J, K)', 'true,false,false,true,false': 'publication(L, B), tempadvisedby(M, B)', 'true,false,false,true,false,false': 'projectmember(N, B), publication(G, P), tempadvisedby(P, H)', 'true,false,false,false': 'publication(Q, A), hasposition(R, C), projectmember(S, R)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'tempadvisedby(F, B), publication(G, B)', 'true,false,true,true': 'publication(G, E)', 'true,false,true,false': 'publication(H, B), hasposition(B, I), hasposition(E, I)', 'true,false,true,false,false': 'projectmember(J, B)', 'true,false,false': 'publication(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, D), inphase(D, E)', 'true,false': 'publication(F, B), tempadvisedby(G, B)', 'true,false,true': 'projectmember(H, B)', 'true,false,false': 'tempadvisedby(I, B)', 'true,false,false,true': 'publication(J, A)', 'true,false,false,false': 'publication(K, A), hasposition(B, L)', 'true,false,false,false,false': 'publication(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B)', 'true,false,true,false,true': 'publication(I, B), publication(I, E)', 'true,false,true,false,false': 'publication(J, B), hasposition(B, K), hasposition(E, K)', 'true,false,false': 'projectmember(L, B), publication(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A), hasposition(B, C)', 'true': 'tempadvisedby(D, B), publication(E, A), publication(F, D)', 'true,false': 'publication(G, A), publication(G, B)', 'true,false,false': 'publication(H, A), hasposition(I, C), publication(H, I)', 'true,false,false,true': 'publication(J, B)', 'true,false,false,true,true': 'publication(J, I)', 'true,false,false,false': 'publication(K, B), publication(K, L), inphase(L, M)', 'true,false,false,false,false': 'publication(N, A), hasposition(P, C), tempadvisedby(Q, P)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, B), publication(C, A)', 'true,false': 'publication(D, A), publication(D, E), professor(E)', 'true,false,true': 'tempadvisedby(F, B), publication(D, G), tempadvisedby(G, E)', 'true,false,true,false': 'tempadvisedby(H, B)', 'true,false,true,false,true': 'publication(I, B), publication(I, E)', 'true,false,true,false,false': 'publication(J, B)', 'true,false,false': 'publication(K, B), publication(K, L), inphase(L, M)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 



Best mapping found: ['advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'student(A) -> female(A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> movie(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'genre(B, K), movie(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(E, D)', 'true,false': 'movie(F, B), movie(F, A)', 'true,false,false': 'movie(G, A), genre(H, C), movie(G, H)', 'true,false,false,true': 'movie(I, B), movie(I, J)', 'true,false,false,true,false': 'movie(L, B)', 'true,false,false,true,false,false': 'genre(B, N), movie(G, P)', 'true,false,false,false': 'movie(Q, A), genre(R, C), genre(R, S)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(G, B)', 'true,false,true,true': 'movie(G, E)', 'true,false,true,false': 'movie(H, B), genre(B, I), genre(E, I)', 'true,false,true,false,false': 'genre(B, J)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)', 'true,false': 'movie(F, B)', 'true,false,true': 'genre(B, H)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'genre(B, L), movie(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(F, D)', 'true,false': 'movie(G, A), movie(G, B)', 'true,false,false': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true': 'movie(J, B)', 'true,false,false,true,true': 'movie(J, I)', 'true,false,false,false': 'movie(K, B), movie(K, L), movie(M, L)', 'true,false,false,false,false': 'movie(N, A), genre(P, C)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(K, B), movie(K, L), movie(M, L)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true;genre(B, F), movie(D, G).;false;false', '0;true,false,true,false,true,true;movie(I, E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true;genre(B, F), movie(D, G).;false;false', '1;true,false,true,false,true,true;movie(I, E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,true;genre(B, F), movie(D, G).;false;true', '2;true,false,true,false;movie(I, B).;true;true', '2;true,false,true,false,true;movie(I, E).;false;false', '2;true,false,true,false,false;movie(J, B).;false;false', '2;true,false,false;movie(K, A).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true,false,true;movie(D, G).;false;true', '3;true,false,true,false;movie(I, B).;true;true', '3;true,false,true,false,true;movie(I, E).;false;false', '3;true,false,true,false,false;movie(J, B).;false;false', '3;true,false,false;genre(B, K), movie(L, B).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '4;true;movie(E, A), movie(E, D).;false;true', '4;true,false;movie(F, B), movie(F, A).;false;true', '4;true,false,false;movie(G, A), genre(H, C), movie(G, H).;true;true', '4;true,false,false,true;movie(I, B), movie(I, J).;false;true', '4;true,false,false,true,false;movie(L, B).;false;true', '4;true,false,false,true,false,false;genre(B, N), movie(G, P).;false;false', '4;true,false,false,false;movie(Q, A), genre(R, C), genre(R, S).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;true', '5;true,false,true;movie(G, B).;true;true', '5;true,false,true,true;movie(G, E).;false;false', '5;true,false,true,false;movie(H, B), genre(B, I), genre(E, I).;false;true', '5;true,false,true,false,false;genre(B, J).;false;false', '5;true,false,false;movie(K, A).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;true;false', '6;true;movie(C, B), movie(C, D), movie(E, D).;false;true', '6;true,false;movie(F, B).;true;false', '6;true,false,true;genre(B, H).;false;false', '6;true,false,false,false,false;movie(M, B).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,true;movie(D, G).;false;false', '7;true,false,false;genre(B, L), movie(M, B).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '8;true;movie(E, A), movie(F, D).;false;true', '8;true,false;movie(G, A), movie(G, B).;false;true', '8;true,false,false;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true;movie(J, B).;true;false', '8;true,false,false,true,true;movie(J, I).;false;false', '8;true,false,false,false;movie(K, B), movie(K, L), movie(M, L).;false;true', '8;true,false,false,false,false;movie(N, A), genre(P, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;true;true', '9;true,false,true;movie(D, G).;false;false', '9;true,false,false;movie(K, B), movie(K, L), movie(M, L).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1,58e-07, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2033870303376073;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17678256367567988;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.15054992327889943;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1258576487751469;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(D, E) )
%   | then return 0.3059474498976705;  // std dev = 0,406, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.10354561627013024;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.257988483403377;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then if ( movie(F, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.1218249294400807;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0840644096927381;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, D), movie(E, D) )
%   | then return 0.20027633614404955;  // std dev = 0,315, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.067520772026225;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18024113485450133;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.13046999614283816;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05377567826958109;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(E, F) )
%   | then return 0.1454290196132051;  // std dev = 0,267, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.042547137405687566;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13700579024476364;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.13217646229430532;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03349209912266345;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
Results
   AUC ROC   = 0.8125
   AUC PR    = 0.872701
   CLL	      = -0.44684
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.625
   F1        = 0.769231


Total learning time: 2.287 seconds
Total inference time: 0.606 seconds
AUC ROC: 0.8125


Results in test set
   AUC ROC   = 0.8125
   AUC PR    = 0.872701
   CLL	      = -0.44684
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.625
   F1        = 0.769231


Total inference time: 0.606 seconds
AUC ROC: 0.8125
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)'}, {'true,true': [1.58e-07, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(D, E)'}, {'true,true': [0.406, 1, 27], 'true,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(F, B)', 'true,false,true,true': 'movie(F, E)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,true,false': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)'}, {'true,true': [0.315, 1, 27], 'true,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(E, F)'}, {'true,true': [0.267, 1, 27], 'true,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 27], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.358, 55, 29]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #4: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #5: [('true,false', 0), ('false', 0.6547619047619048), ('true,true', 0.9642857142857143)]
Tree #6: [('true,false,true,true,true', 0), ('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #7: [('true,false', 0), ('false', 0.6547619047619048), ('true,true', 0.9642857142857143)]
Tree #8: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]
Tree #9: [('true,false', 0), ('false', 0.6547619047619048), ('true,true', 0.9642857142857143)]
Tree #10: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.6547619047619048)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1,58e-07, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2033870303376073;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17678256367567988;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.15054992327889943;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415831;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1258576487751469;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.3059474498976705;  // std dev = 0,406, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else return 0.10354561627013024;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.257988483403377;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then return -0.1218249294400807;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0840644096927381;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.20027633614404955;  // std dev = 0,315, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else return 0.067520772026225;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18024113485450133;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.13046999614283816;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05377567826958109;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.1454290196132051;  // std dev = 0,267, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else return 0.042547137405687566;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13700579024476364;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.13217646229430532;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03349209912266345;  // std dev = 4,358, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
Results
   AUC ROC   = 0.8125
   AUC PR    = 0.872701
   CLL	      = -0.44684
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.625
   F1        = 0.769231


Total learning time: 2.65 seconds
Total inference time: 0.532 seconds
AUC ROC: 0.8125


Best model AUC ROC so far: 0.8125


******************************************
Best model found
******************************************
Total revision time: 6.074999999999999
Best validation AUC ROC: 0.8125


Results
   AUC ROC   = 0.735684
   AUC PR    = 0.80099
   CLL	      = -0.536961
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.43865
   F1        = 0.609808


Total inference time: 0.861 seconds
AUC ROC: 0.735684
Dataset: uwcse->imdb, Fold: 1, Type: transfer, Time: 00:03:24
{'AUC ROC': 0.735684, 'AUC PR': 0.80099, 'CLL': -0.536961, 'Precision': [1.0, 0.5], 'Recall': 0.43865, 'F1': 0.609808, 'Learning time': 6.074999999999999, 'Inference time': 0.861, 'Mapping results': {'Knowledge compiling time': 0.028110980987548828, 'Generating paths time': 4.307417631149292, 'Generating mappings time': 0.3462519645690918, 'Possible mappings': 2592, 'Finding best mapping': 1.1503081321716309, 'Total time': 5.832096338272095}, 'Parameter Learning results': {'AUC ROC': 0.735684, 'AUC PR': 0.80099, 'CLL': -0.536961, 'Precision': [1.0, 0.5], 'Recall': 0.43865, 'F1': 0.609808, 'Learning time': 2.287, 'Inference time': 0.876}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839155;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.1123163781936063;  // std dev = 3,65e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783626;  // std dev = 3,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 2,11e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109179;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.0684269778442027;  // std dev = 1,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
Results
   AUC ROC   = 0.989264
   AUC PR    = 0.978979
   CLL	      = -0.116803
   Precision = 0.978979 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989378


Total learning time: 1.78 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.989264


Dataset: uwcse->imdb, Fold: 1, Type: scratch, Time: 00:03:27
{'AUC ROC': 0.989264, 'AUC PR': 0.978979, 'CLL': -0.116803, 'Precision': [0.978979, 0.5], 'Recall': 1.0, 'F1': 0.989378, 'Learning time': 1.78, 'Inference time': 0.769}


Best mapping found: ['advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'student(A) -> female(A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> movie(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'genre(B, K), movie(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(E, D)', 'true,false': 'movie(F, B), movie(F, A)', 'true,false,false': 'movie(G, A), genre(H, C), movie(G, H)', 'true,false,false,true': 'movie(I, B), movie(I, J)', 'true,false,false,true,false': 'movie(L, B)', 'true,false,false,true,false,false': 'genre(B, N), movie(G, P)', 'true,false,false,false': 'movie(Q, A), genre(R, C), genre(R, S)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(G, B)', 'true,false,true,true': 'movie(G, E)', 'true,false,true,false': 'movie(H, B), genre(B, I), genre(E, I)', 'true,false,true,false,false': 'genre(B, J)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)', 'true,false': 'movie(F, B)', 'true,false,true': 'genre(B, H)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'genre(B, L), movie(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(F, D)', 'true,false': 'movie(G, A), movie(G, B)', 'true,false,false': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true': 'movie(J, B)', 'true,false,false,true,true': 'movie(J, I)', 'true,false,false,false': 'movie(K, B), movie(K, L), movie(M, L)', 'true,false,false,false,false': 'movie(N, A), genre(P, C)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(K, B), movie(K, L), movie(M, L)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true;genre(B, F), movie(D, G).;false;false', '0;true,false,true,false,true,true;movie(I, E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true;genre(B, F), movie(D, G).;false;false', '1;true,false,true,false,true,true;movie(I, E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,true;genre(B, F), movie(D, G).;false;true', '2;true,false,true,false;movie(I, B).;true;true', '2;true,false,true,false,true;movie(I, E).;false;false', '2;true,false,true,false,false;movie(J, B).;false;false', '2;true,false,false;movie(K, A).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true,false,true;movie(D, G).;false;true', '3;true,false,true,false;movie(I, B).;true;true', '3;true,false,true,false,true;movie(I, E).;false;false', '3;true,false,true,false,false;movie(J, B).;false;false', '3;true,false,false;genre(B, K), movie(L, B).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '4;true;movie(E, A), movie(E, D).;false;true', '4;true,false;movie(F, B), movie(F, A).;false;true', '4;true,false,false;movie(G, A), genre(H, C), movie(G, H).;true;true', '4;true,false,false,true;movie(I, B), movie(I, J).;false;true', '4;true,false,false,true,false;movie(L, B).;false;true', '4;true,false,false,true,false,false;genre(B, N), movie(G, P).;false;false', '4;true,false,false,false;movie(Q, A), genre(R, C), genre(R, S).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;true', '5;true,false,true;movie(G, B).;true;true', '5;true,false,true,true;movie(G, E).;false;false', '5;true,false,true,false;movie(H, B), genre(B, I), genre(E, I).;false;true', '5;true,false,true,false,false;genre(B, J).;false;false', '5;true,false,false;movie(K, A).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;true;false', '6;true;movie(C, B), movie(C, D), movie(E, D).;false;true', '6;true,false;movie(F, B).;true;false', '6;true,false,true;genre(B, H).;false;false', '6;true,false,false,false,false;movie(M, B).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,true;movie(D, G).;false;false', '7;true,false,false;genre(B, L), movie(M, B).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '8;true;movie(E, A), movie(F, D).;false;true', '8;true,false;movie(G, A), movie(G, B).;false;true', '8;true,false,false;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true;movie(J, B).;true;false', '8;true,false,false,true,true;movie(J, I).;false;false', '8;true,false,false,false;movie(K, B), movie(K, L), movie(M, L).;false;true', '8;true,false,false,false,false;movie(N, A), genre(P, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;true;true', '9;true,false,true;movie(D, G).;false;false', '9;true,false,false;movie(K, B), movie(K, L), movie(M, L).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2539822684328454;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2201711574887626;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.18598611284323355;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.15348735193068483;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(D, E) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.12420428193002182;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09894691861641987;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, D), movie(E, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07788616929143673;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06076187015651028;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(E, F) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04709142101413066;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03632124555603703;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
Results
   AUC ROC   = 0.647059
   AUC PR    = 0.724297
   CLL	      = -0.600938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.294118
   F1        = 0.454545


Total learning time: 2.678 seconds
Total inference time: 0.551 seconds
AUC ROC: 0.647059


Results in test set
   AUC ROC   = 0.647059
   AUC PR    = 0.724297
   CLL	      = -0.600938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.294118
   F1        = 0.454545


Total inference time: 0.551 seconds
AUC ROC: 0.647059
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [7.3e-08, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [5.16e-08, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(D, E)'}, {'true,true': [2.11e-08, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [1.49e-08, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(E, F)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)'}, {'true,true': [0.0, 0, 20], 'true,false': [0.0, 0, 0], 'false': [4.791, 58, 38]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), female(A).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #2: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #3: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #4: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #5: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #6: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #7: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #8: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #9: [('true,false', 0), ('false', 0.6041666666666666)]
Tree #10: [('true,false', 0), ('false', 0.6041666666666666)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.2539822684328454;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.2201711574887626;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.18598611284323355;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.15348735193068483;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.12420428193002182;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.09894691861641987;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.07788616929143673;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.06076187015651028;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.04709142101413066;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.03632124555603703;  // std dev = 4,791, 96,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
Results
   AUC ROC   = 0.647059
   AUC PR    = 0.724297
   CLL	      = -0.600938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.294118
   F1        = 0.454545


Total learning time: 1.891 seconds
Total inference time: 0.534 seconds
AUC ROC: 0.647059


Best model AUC ROC so far: 0.647059


******************************************
Best model found
******************************************
Total revision time: 5.654
Best validation AUC ROC: 0.647059


Results
   AUC ROC   = 0.748057
   AUC PR    = 0.811928
   CLL	      = -0.523744
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.462963
   F1        = 0.632911


Total inference time: 0.828 seconds
AUC ROC: 0.748057
Dataset: uwcse->imdb, Fold: 2, Type: transfer, Time: 00:03:41
{'AUC ROC': 0.748057, 'AUC PR': 0.811928, 'CLL': -0.523744, 'Precision': [1.0, 0.5], 'Recall': 0.462963, 'F1': 0.632911, 'Learning time': 5.654, 'Inference time': 0.828, 'Mapping results': {'Knowledge compiling time': 0.03207850456237793, 'Generating paths time': 4.3497374057769775, 'Generating mappings time': 0.31006860733032227, 'Possible mappings': 2592, 'Finding best mapping': 1.1664457321166992, 'Total time': 5.858338117599487}, 'Parameter Learning results': {'AUC ROC': 0.748057, 'AUC PR': 0.811928, 'CLL': -0.523744, 'Precision': [1.0, 0.5], 'Recall': 0.462963, 'F1': 0.632911, 'Learning time': 2.678, 'Inference time': 0.799}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839158;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.1123163781936063;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783623;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.09269127618926107;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07877675473109176;  // std dev = 1,83e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.0684269778442027;  // std dev = 1,67e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
Results
   AUC ROC   = 0.989198
   AUC PR    = 0.978852
   CLL	      = -0.11694
   Precision = 0.978852 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989313


Total learning time: 1.652 seconds
Total inference time: 0.767 seconds
AUC ROC: 0.989198


Dataset: uwcse->imdb, Fold: 2, Type: scratch, Time: 00:03:44
{'AUC ROC': 0.989198, 'AUC PR': 0.978852, 'CLL': -0.11694, 'Precision': [0.978852, 0.5], 'Recall': 1.0, 'F1': 0.989313, 'Learning time': 1.652, 'Inference time': 0.767}


Best mapping found: ['advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> genre(B,A)', 'student(A) -> actor(A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> movie(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'genre(B, K), movie(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true': 'movie(E, A), movie(E, D)', 'true,false': 'movie(F, B), movie(F, A)', 'true,false,false': 'movie(G, A), genre(H, C), movie(G, H)', 'true,false,false,true': 'movie(I, B), movie(I, J)', 'true,false,false,true,false': 'movie(L, B)', 'true,false,false,true,false,false': 'genre(B, N), movie(G, P)', 'true,false,false,false': 'movie(Q, A), genre(R, C), genre(R, S)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(G, B)', 'true,false,true,true': 'movie(G, E)', 'true,false,true,false': 'movie(H, B), genre(B, I), genre(E, I)', 'true,false,true,false,false': 'genre(B, J)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)', 'true,false': 'movie(F, B)', 'true,false,true': 'genre(B, H)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'genre(B, L), movie(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true': 'movie(E, A), movie(F, D)', 'true,false': 'movie(G, A), movie(G, B)', 'true,false,false': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true': 'movie(J, B)', 'true,false,false,true,true': 'movie(J, I)', 'true,false,false,false': 'movie(K, B), movie(K, L), movie(M, L)', 'true,false,false,false,false': 'movie(N, A), genre(P, C)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(K, B), movie(K, L), movie(M, L)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true;genre(B, F), movie(D, G).;false;false', '0;true,false,true,false,true,true;movie(I, E).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true;genre(B, F), movie(D, G).;false;false', '1;true,false,true,false,true,true;movie(I, E).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,true;genre(B, F), movie(D, G).;false;true', '2;true,false,true,false;movie(I, B).;true;true', '2;true,false,true,false,true;movie(I, E).;false;false', '2;true,false,true,false,false;movie(J, B).;false;false', '2;true,false,false;movie(K, A).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true,false,true;movie(D, G).;false;true', '3;true,false,true,false;movie(I, B).;true;true', '3;true,false,true,false,true;movie(I, E).;false;false', '3;true,false,true,false,false;movie(J, B).;false;false', '3;true,false,false;genre(B, K), movie(L, B).;false;false', '4;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '4;true;movie(E, A), movie(E, D).;false;true', '4;true,false;movie(F, B), movie(F, A).;false;true', '4;true,false,false;movie(G, A), genre(H, C), movie(G, H).;true;true', '4;true,false,false,true;movie(I, B), movie(I, J).;false;true', '4;true,false,false,true,false;movie(L, B).;false;true', '4;true,false,false,true,false,false;genre(B, N), movie(G, P).;false;false', '4;true,false,false,false;movie(Q, A), genre(R, C), genre(R, S).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;true', '5;true,false,true;movie(G, B).;true;true', '5;true,false,true,true;movie(G, E).;false;false', '5;true,false,true,false;movie(H, B), genre(B, I), genre(E, I).;false;true', '5;true,false,true,false,false;genre(B, J).;false;false', '5;true,false,false;movie(K, A).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;true;false', '6;true;movie(C, B), movie(C, D), movie(E, D).;false;true', '6;true,false;movie(F, B).;true;false', '6;true,false,true;genre(B, H).;false;false', '6;true,false,false,false,false;movie(M, B).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,true;movie(D, G).;false;false', '7;true,false,false;genre(B, L), movie(M, B).;false;false', '8;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;true;false', '8;true;movie(E, A), movie(F, D).;false;true', '8;true,false;movie(G, A), movie(G, B).;false;true', '8;true,false,false;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true;movie(J, B).;true;false', '8;true,false,false,true,true;movie(J, I).;false;false', '8;true,false,false,false;movie(K, B), movie(K, L), movie(M, L).;false;true', '8;true,false,false,false,false;movie(N, A), genre(P, C).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;true;true', '9;true,false,true;movie(D, G).;false;false', '9;true,false,false;movie(K, B), movie(K, L), movie(M, L).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839108;  // std dev = 8,43e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else if ( movie(H, B) )
%   | | | | then if ( movie(H, E) )
%   | | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 8,94e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.10159632948783634;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783638;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, A), movie(D, E) )
%   | then return 0.2725758670441222;  // std dev = 1,602, 146,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0037694525922683467;  // std dev = 2,534, 210,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2796961288959727;  // std dev = 0,331, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then if ( movie(F, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10565415413930802;  // std dev = 0,074, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09300877274405467;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, D), movie(E, D) )
%   | then return 0.17525181712611504;  // std dev = 1,752, 212,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08545414196626154;  // std dev = 5,58e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19786931317898795;  // std dev = 0,263, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.11240123404056322;  // std dev = 0,078, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07900802645877542;  // std dev = 5,67e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then if ( movie(D, A), movie(E, F) )
%   | then return 0.12602124172481274;  // std dev = 1,052, 146,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.011710383950949517;  // std dev = 1,667, 210,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15729034961241914;  // std dev = 0,339, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.10788496760287992;  // std dev = 0,113, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07265386607949177;  // std dev = 6,91e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111282
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.364 seconds
Total inference time: 0.634 seconds
AUC ROC: 1.0


Results in test set
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111282
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.634 seconds
AUC ROC: 1.0
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)'}, {'true,true': [1.09e-06, 0, 178], 'true,false,true,true': [0.0, 17, 0], 'true,false,true,false': [0.0, 17, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)'}, {'true,true': [0.0, 0, 178], 'true,false,true,true': [0.0, 17, 0], 'true,false,true,false': [0.0, 17, 0], 'true,false,false': [0.0, 0, 0], 'false': [8.43e-08, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'genre(B, F), movie(D, G)', 'true,false,true,false': 'movie(H, B)', 'true,false,true,false,true': 'movie(H, E)'}, {'true,true': [5.9e-07, 0, 178], 'true,false,true,true': [1.49e-08, 17, 0], 'true,false,true,false,true,true': [0.0, 0, 0], 'true,false,true,false,true,false': [1.49e-08, 17, 0], 'true,false,true,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [8.94e-08, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [3.77e-07, 0, 178], 'true,false,true,true': [0.0, 34, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true': 'movie(D, A), movie(D, E)'}, {'true,true': [1.602, 17, 129], 'true,false': [0.0, 0, 0], 'false': [2.534, 161, 49]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(F, B)', 'true,false,true,true': 'movie(F, E)'}, {'true,true': [0.331, 0, 178], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,true,false': [0.074, 34, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)'}, {'true,true': [1.752, 34, 178], 'true,false': [0.0, 0, 0], 'false': [5.58e-08, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.263, 0, 178], 'true,false,true,true': [0.078, 34, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [5.67e-08, 144, 0]}], ['workedunder(A, B)', {'': 'director(B), actor(A), genre(B, C)', 'true': 'movie(D, A), movie(E, F)'}, {'true,true': [1.052, 17, 129], 'true,false': [0.0, 0, 0], 'false': [1.667, 161, 49]}], ['workedunder(A, B)', {'': 'director(B), actor(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.339, 0, 178], 'true,false,true,true': [0.113, 34, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [6.91e-08, 144, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), actor(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;false', '1;;workedunder(A, B) :- director(B), actor(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;false', '2;;workedunder(A, B) :- director(B), actor(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;false', '2;true,false,true;genre(B, F), movie(D, G).;false;true', '2;true,false,true,false;movie(H, B).;false;false', '3;;workedunder(A, B) :- director(B), actor(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;false;false', '4;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;false;false', '5;;workedunder(A, B) :- director(B), actor(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- director(B), actor(A).;false;false', '7;;workedunder(A, B) :- director(B), actor(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;false;false', '8;;workedunder(A, B) :- director(B), actor(A), genre(B, C).;false;false', '9;;workedunder(A, B) :- director(B), actor(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false', 0)]
Tree #2: [('true,false,false', 0)]
Tree #3: [('true,false,true,false,true,true', 0), ('true,false,true,false,false', 0), ('true,false,false', 0)]
Tree #4: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #5: [('true,false', 0), ('false', 0.7666666666666667), ('true,true', 0.8835616438356164)]
Tree #6: [('true,false,true,true,true', 0), ('true,false,true,false', 0), ('true,false,false', 0)]
Tree #7: [('true,false', 0), ('true,true', 0.839622641509434)]
Tree #8: [('true,false,true,false', 0), ('true,false,false', 0)]
Tree #9: [('true,false', 0), ('false', 0.7666666666666667), ('true,true', 0.8835616438356164)]
Tree #10: [('true,false,true,false', 0), ('true,false,false', 0)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1418510649004878;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839136;  // std dev = 1,05e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.12544463852839108;  // std dev = 8,43e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( genre(B, F), movie(D, G) )
%   | | | then return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else if ( movie(H, B) )
%   | | | | then return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 8,94e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783638;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then return 0.2725758670441222;  // std dev = 1,602, 146,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=129 */
%   else return 0.0037694525922683467;  // std dev = 2,534, 210,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.2796961288959727;  // std dev = 0,331, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then return -0.10565415413930802;  // std dev = 0,074, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09300877274405467;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17525181712611504;  // std dev = 1,752, 212,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=178 */
%   else return -0.08545414196626154;  // std dev = 5,58e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.19786931317898795;  // std dev = 0,263, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11240123404056322;  // std dev = 0,078, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07900802645877542;  // std dev = 5,67e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A), genre(B, C) )
%   then return 0.12602124172481274;  // std dev = 1,052, 146,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=129 */
%   else return -0.011710383950949517;  // std dev = 1,667, 210,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.15729034961241914;  // std dev = 0,339, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.10788496760287992;  // std dev = 0,113, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07265386607949177;  // std dev = 6,91e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111282
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.906 seconds
Total inference time: 0.589 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 17.493000000000002
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103835
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total inference time: 0.812 seconds
AUC ROC: 1.0
Dataset: uwcse->imdb, Fold: 3, Type: transfer, Time: 00:04:10
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.103835, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 17.493000000000002, 'Inference time': 0.812, 'Mapping results': {'Knowledge compiling time': 0.030481815338134766, 'Generating paths time': 4.359213352203369, 'Generating mappings time': 0.31580424308776855, 'Possible mappings': 2592, 'Finding best mapping': 1.1591782569885254, 'Total time': 5.864686012268066}, 'Parameter Learning results': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.103835, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.364, 'Inference time': 0.786}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048777;  // std dev = 3,65e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1254446385283911;  // std dev = 9,42e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360625;  // std dev = 8,94e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783635;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926087;  // std dev = 7,60e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 6,99e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109162;  // std dev = 7,15e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333716;  // std dev = 3,16e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   else return -0.06842697784420265;  // std dev = 6,05e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202626;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.62 seconds
Total inference time: 0.77 seconds
AUC ROC: 1.0


Dataset: uwcse->imdb, Fold: 3, Type: scratch, Time: 00:04:17
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.62, 'Inference time': 0.77}


Best mapping found: ['advisedby(A,B) -> workedunder(A,B)', 'student(A) -> female(A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> movie(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(E, D)', 'true,false': 'movie(F, B), movie(F, A)', 'true,false,false': 'movie(G, A), genre(H, C), movie(G, H)', 'true,false,false,true': 'movie(I, B), movie(I, J)', 'true,false,false,true,false': 'movie(L, B)', 'true,false,false,true,false,false': 'movie(G, P)', 'true,false,false,false': 'movie(Q, A), genre(R, C)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(G, B)', 'true,false,true,true': 'movie(G, E)', 'true,false,true,false': 'movie(H, B), genre(B, I), genre(E, I)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)', 'true,false': 'movie(F, B)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(F, D)', 'true,false': 'movie(G, A), movie(G, B)', 'true,false,false': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true': 'movie(J, B)', 'true,false,false,true,true': 'movie(J, I)', 'true,false,false,false': 'movie(K, B), movie(K, L), movie(M, L)', 'true,false,false,false,false': 'movie(N, A), genre(P, C)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(K, B), movie(K, L), movie(M, L)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true;movie(D, G).;false;false', '0;true,false,true,false,true,true;movie(I, E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true;movie(D, G).;false;false', '1;true,false,true,false,true,true;movie(I, E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,true;movie(D, G).;false;true', '2;true,false,true,false;movie(I, B).;true;true', '2;true,false,true,false,true;movie(I, E).;false;false', '2;true,false,true,false,false;movie(J, B).;false;false', '2;true,false,false;movie(K, A).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true,false,true;movie(D, G).;false;true', '3;true,false,true,false;movie(I, B).;true;true', '3;true,false,true,false,true;movie(I, E).;false;false', '3;true,false,true,false,false;movie(J, B).;false;false', '3;true,false,false;movie(L, B).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '4;true;movie(E, A), movie(E, D).;false;true', '4;true,false;movie(F, B), movie(F, A).;false;true', '4;true,false,false;movie(G, A), genre(H, C), movie(G, H).;true;true', '4;true,false,false,true;movie(I, B), movie(I, J).;false;true', '4;true,false,false,true,false;movie(L, B).;false;true', '4;true,false,false,true,false,false;movie(G, P).;false;false', '4;true,false,false,false;movie(Q, A), genre(R, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;true', '5;true,false,true;movie(G, B).;true;true', '5;true,false,true,true;movie(G, E).;false;false', '5;true,false,true,false;movie(H, B), genre(B, I), genre(E, I).;false;false', '5;true,false,false;movie(K, A).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;true;false', '6;true;movie(C, B), movie(C, D), movie(E, D).;false;true', '6;true,false;movie(F, B).;false;false', '6;true,false,false,false,false;movie(M, B).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,true;movie(D, G).;false;false', '7;true,false,false;movie(M, B).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '8;true;movie(E, A), movie(F, D).;false;true', '8;true,false;movie(G, A), movie(G, B).;false;true', '8;true,false,false;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true;movie(J, B).;true;false', '8;true,false,false,true,true;movie(J, I).;false;false', '8;true,false,false,false;movie(K, B), movie(K, L), movie(M, L).;false;true', '8;true,false,false,false,false;movie(N, A), genre(P, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;true;true', '9;true,false,true;movie(D, G).;false;false', '9;true,false,false;movie(K, B), movie(K, L), movie(M, L).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2940463709969478;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2543581963999045;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2134733519041872;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17438493369240765;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(D, E) )
%   | then return 0.28626158688103215;  // std dev = 0,396, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.13933829554119992;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.26177487340535865;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then if ( movie(F, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.11973449480355627;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.10947237357134884;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, D), movie(E, D) )
%   | then return 0.18757027618536962;  // std dev = 0,308, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08496121346096704;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18450644787330425;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.12707068892181092;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06537244630887117;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(E, F) )
%   | then return 0.13567773954926537;  // std dev = 0,260, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05000058900615107;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1410867119290704;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.1280284835093115;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03808593228008606;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
Results
   AUC ROC   = 0.692308
   AUC PR    = 0.770541
   CLL	      = -0.563519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.384615
   F1        = 0.555556


Total learning time: 2.303 seconds
Total inference time: 0.531 seconds
AUC ROC: 0.692308


Results in test set
   AUC ROC   = 0.692308
   AUC PR    = 0.770541
   CLL	      = -0.563519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.384615
   F1        = 0.555556


Total inference time: 0.531 seconds
AUC ROC: 0.692308
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(D, E)'}, {'true,true': [0.396, 1, 11], 'true,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(F, B)', 'true,false,true,true': 'movie(F, E)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,true,false': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)'}, {'true,true': [0.308, 1, 11], 'true,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(E, F)'}, {'true,true': [0.26, 1, 11], 'true,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [7.45e-09, 0, 11], 'true,false,true,true': [0.0, 1, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [4.379, 44, 34]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #4: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #5: [('true,false', 0), ('false', 0.5641025641025641), ('true,true', 0.9166666666666666)]
Tree #6: [('true,false,true,true,true', 0), ('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #7: [('true,false', 0), ('false', 0.5641025641025641), ('true,true', 0.9166666666666666)]
Tree #8: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]
Tree #9: [('true,false', 0), ('false', 0.5641025641025641), ('true,true', 0.9166666666666666)]
Tree #10: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.5641025641025641)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2940463709969478;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2543581963999045;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2134733519041872;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.17438493369240765;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.28626158688103215;  // std dev = 0,396, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return 0.13933829554119992;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.26177487340535865;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then return -0.11973449480355627;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.10947237357134884;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.18757027618536962;  // std dev = 0,308, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return 0.08496121346096704;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18450644787330425;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12707068892181092;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06537244630887117;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.13567773954926537;  // std dev = 0,260, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return 0.05000058900615107;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.1410867119290704;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.1280284835093115;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03808593228008606;  // std dev = 4,379, 78,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=34 */
Results
   AUC ROC   = 0.692308
   AUC PR    = 0.770541
   CLL	      = -0.563519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.384615
   F1        = 0.555556


Total learning time: 2.044 seconds
Total inference time: 0.52 seconds
AUC ROC: 0.692308


Best model AUC ROC so far: 0.692308


******************************************
Best model found
******************************************
Total revision time: 5.398
Best validation AUC ROC: 0.692308


Results
   AUC ROC   = 0.750795
   AUC PR    = 0.81505
   CLL	      = -0.520732
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.47181
   F1        = 0.641129


Total inference time: 0.902 seconds
AUC ROC: 0.750795
Dataset: uwcse->imdb, Fold: 4, Type: transfer, Time: 00:04:31
{'AUC ROC': 0.750795, 'AUC PR': 0.81505, 'CLL': -0.520732, 'Precision': [1.0, 0.5], 'Recall': 0.47181, 'F1': 0.641129, 'Learning time': 5.398, 'Inference time': 0.902, 'Mapping results': {'Knowledge compiling time': 0.027340173721313477, 'Generating paths time': 4.227182388305664, 'Generating mappings time': 0.3107459545135498, 'Possible mappings': 2592, 'Finding best mapping': 1.1608824729919434, 'Total time': 5.7261645793914795}, 'Parameter Learning results': {'AUC ROC': 0.750795, 'AUC PR': 0.81505, 'CLL': -0.520732, 'Precision': [1.0, 0.5], 'Recall': 0.47181, 'F1': 0.641129, 'Learning time': 2.303, 'Inference time': 0.962}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8295775065280829;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.1418510649004877;  // std dev = 4,21e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6966322731191457;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.1254446385283913;  // std dev = 2,98e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5394517322900432;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.11231637819360639;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4054010674051154;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.10159632948783635;  // std dev = 7,45e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.3096875237807659;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.09269127618926105;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.26844790492761644;  // std dev = 0,051, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.2135992066784919;  // std dev = 0,574, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21910550787549699;  // std dev = 0,044, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.19253870399952272;  // std dev = 0,548, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1839306619392597;  // std dev = 0,039, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.17469533646557917;  // std dev = 0,520, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15791380784201497;  // std dev = 0,034, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.15934417351799451;  // std dev = 0,491, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1380337676083142;  // std dev = 0,031, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.1459952012707622;  // std dev = 0,463, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098904
   Precision = 0.982507 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.991176


Total learning time: 3.254 seconds
Total inference time: 0.85 seconds
AUC ROC: 1.0


Dataset: uwcse->imdb, Fold: 4, Type: scratch, Time: 00:04:36
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.098904, 'Precision': [0.982507, 0.5], 'Recall': 1.0, 'F1': 0.991176, 'Learning time': 3.254, 'Inference time': 0.85}


Best mapping found: ['advisedby(A,B) -> workedunder(A,B)', 'student(A) -> female(A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> movie(B,A)', 'hasposition(A,B) -> genre(A,B)', 'professor(A) -> director(A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [7.45e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false,true,true': 'movie(I, E)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true,true': [0.816, 2, 1], 'true,false,true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false,true,false': [0.816, 2, 1], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [0.816, 2, 1], 'true,false,false': [0.302, 7, 62], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [1.05e-08, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.316, 7, 55], 'false': [6.66e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,true,false': 'movie(I, B)', 'true,false,true,false,true': 'movie(I, E)', 'true,false,true,false,false': 'movie(J, B)', 'true,false,false': 'movie(L, B)'}, {'true,true': [0.152, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.0, 5, 0], 'true,false,true,false,false,true': [1.155, 2, 4], 'true,false,true,false,false,false': [1.155, 4, 2], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.287, 6, 60], 'false': [5.67e-08, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(E, D)', 'true,false': 'movie(F, B), movie(F, A)', 'true,false,false': 'movie(G, A), genre(H, C), movie(G, H)', 'true,false,false,true': 'movie(I, B), movie(I, J)', 'true,false,false,true,false': 'movie(L, B)', 'true,false,false,true,false,false': 'movie(G, P)', 'true,false,false,false': 'movie(Q, A), genre(R, C)'}, {'true,true': [0.866, 1, 3], 'true,false,true': [0.0, 0, 38], 'true,false,false,true,true': [0.295, 3, 0], 'true,false,false,true,false,true': [0.843, 4, 1], 'true,false,false,true,false,false,true': [0.0, 0, 3], 'true,false,false,true,false,false,false': [1.163, 3, 3], 'true,false,false,false,true': [0.062, 0, 8], 'true,false,false,false,false': [0.324, 9, 56], 'false': [0.051, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(G, B)', 'true,false,true,true': 'movie(G, E)', 'true,false,true,false': 'movie(H, B), genre(B, I), genre(E, I)', 'true,false,false': 'movie(K, A)'}, {'true,true': [0.146, 1, 41], 'true,false,true,true,true': [0.816, 2, 1], 'true,false,true,true,false': [0.035, 5, 0], 'true,false,true,false,true': [0.957, 2, 2], 'true,false,true,false,false,true': [0.45, 1, 3], 'true,false,true,false,false,false': [0.433, 3, 4], 'true,false,false,true': [0.0, 0, 7], 'true,false,false,false': [0.315, 7, 55], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)', 'true,false': 'movie(F, B)', 'true,false,false,false,false': 'movie(M, B)'}, {'true,true': [0.244, 13, 86], 'true,false,true,true': [0.816, 1, 2], 'true,false,true,false': [0.895, 1, 5], 'true,false,false,true,true': [0.845, 2, 4], 'true,false,false,true,false': [7.45e-09, 0, 5], 'true,false,false,false,true': [0.71, 1, 3], 'true,false,false,false,false,true': [0.913, 1, 5], 'true,false,false,false,false,false': [0.933, 2, 3], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(M, B)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [5.27e-09, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.29, 7, 1], 'true,false,true,false,false,true': [0.956, 2, 2], 'true,false,true,false,false,false': [0.872, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.285, 6, 60], 'false': [0.0, 92, 0]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(E, A), movie(F, D)', 'true,false': 'movie(G, A), movie(G, B)', 'true,false,false': 'movie(H, A), genre(I, C), movie(H, I)', 'true,false,false,true': 'movie(J, B)', 'true,false,false,true,true': 'movie(J, I)', 'true,false,false,false': 'movie(K, B), movie(K, L), movie(M, L)', 'true,false,false,false,false': 'movie(N, A), genre(P, C)'}, {'true,true': [0.257, 3, 11], 'true,false,true': [3.33e-08, 0, 30], 'true,false,false,true,true,true': [1.039, 3, 2], 'true,false,false,true,true,false': [0.709, 3, 1], 'true,false,false,true,false': [0.832, 2, 4], 'true,false,false,false,true': [0.252, 4, 42], 'true,false,false,false,false,true': [0.015, 0, 4], 'true,false,false,false,false,false': [0.396, 5, 18], 'false': [0.45, 93, 1]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, G)', 'true,false,false': 'movie(K, B), movie(K, L), movie(M, L)'}, {'true,true': [0.147, 1, 41], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false,true,true': [0.816, 2, 1], 'true,false,true,false,true,false': [0.289, 7, 1], 'true,false,true,false,false,true': [1.022, 2, 4], 'true,false,true,false,false,false': [0.761, 2, 1], 'true,false,false,true': [0.254, 3, 40], 'true,false,false,false': [0.353, 4, 22], 'false': [0.0, 92, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;true;false', '0;true,false,true;movie(D, G).;false;false', '0;true,false,true,false,true,true;movie(I, E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;true;false', '1;true,false,true;movie(D, G).;false;false', '1;true,false,true,false,true,true;movie(I, E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;true;true', '2;true,false,true;movie(D, G).;false;true', '2;true,false,true,false;movie(I, B).;true;true', '2;true,false,true,false,true;movie(I, E).;false;false', '2;true,false,true,false,false;movie(J, B).;false;false', '2;true,false,false;movie(K, A).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;true;true', '3;true,false,true;movie(D, G).;false;true', '3;true,false,true,false;movie(I, B).;true;true', '3;true,false,true,false,true;movie(I, E).;false;false', '3;true,false,true,false,false;movie(J, B).;false;false', '3;true,false,false;movie(L, B).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '4;true;movie(E, A), movie(E, D).;false;true', '4;true,false;movie(F, B), movie(F, A).;false;true', '4;true,false,false;movie(G, A), genre(H, C), movie(G, H).;true;true', '4;true,false,false,true;movie(I, B), movie(I, J).;false;true', '4;true,false,false,true,false;movie(L, B).;false;true', '4;true,false,false,true,false,false;movie(G, P).;false;false', '4;true,false,false,false;movie(Q, A), genre(R, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;true', '5;true,false,true;movie(G, B).;true;true', '5;true,false,true,true;movie(G, E).;false;false', '5;true,false,true,false;movie(H, B), genre(B, I), genre(E, I).;false;false', '5;true,false,false;movie(K, A).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;true;false', '6;true;movie(C, B), movie(C, D), movie(E, D).;false;true', '6;true,false;movie(F, B).;false;false', '6;true,false,false,false,false;movie(M, B).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;true;true', '7;true,false,true;movie(D, G).;false;false', '7;true,false,false;movie(M, B).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;true;false', '8;true;movie(E, A), movie(F, D).;false;true', '8;true,false;movie(G, A), movie(G, B).;false;true', '8;true,false,false;movie(H, A), genre(I, C), movie(H, I).;true;true', '8;true,false,false,true;movie(J, B).;true;false', '8;true,false,false,true,true;movie(J, I).;false;false', '8;true,false,false,false;movie(K, B), movie(K, L), movie(M, L).;false;true', '8;true,false,false,false,false;movie(N, A), genre(P, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;true;true', '9;true,false,true;movie(D, G).;false;false', '9;true,false,false;movie(K, B), movie(K, L), movie(M, L).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20189893509951223;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109543;  // std dev = 5,96e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1755028154068204;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14949541683718404;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583099;  // std dev = 4,21e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1250234389860588;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(D, E) )
%   | then return 0.32071184716014967;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.11277305655364855;  // std dev = 3,851, 73,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=28 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.26599395410385696;  // std dev = 0,087, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then if ( movie(F, E) )
%   | | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | | else return -0.10262103201229515;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08169334588924021;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, D), movie(E, D) )
%   | then return 0.18156201174251424;  // std dev = 0,512, 26,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06559119894604351;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18817444467868666;  // std dev = 0,069, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.11012211345269024;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05223177130669435;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then if ( movie(D, A), movie(E, F) )
%   | then return 0.1535604319131818;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04713791558799315;  // std dev = 3,823, 73,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=28 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.145339777035757;  // std dev = 0,086, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(D, F) )
%   | | | then return -0.10409983690997593;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03129183822309345;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
Results
   AUC ROC   = 0.786982
   AUC PR    = 0.846285
   CLL	      = -0.480443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.538462
   F1        = 0.7


Total learning time: 1.921 seconds
Total inference time: 0.575 seconds
AUC ROC: 0.786982


Results in test set
   AUC ROC   = 0.786982
   AUC PR    = 0.846285
   CLL	      = -0.480443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.538462
   F1        = 0.7


Total inference time: 0.575 seconds
AUC ROC: 0.786982
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true,true': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true,true': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.0, 0, 23], 'true,false,true,true': [2.63e-09, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [4.21e-08, 0, 23], 'true,false,true,true': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(D, E)'}, {'true,true': [1.49e-08, 0, 17], 'true,false': [0.0, 0, 0], 'false': [3.851, 45, 28]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(F, B)', 'true,false,true,true': 'movie(F, E)'}, {'true,true': [0.087, 0, 23], 'true,false,true,true,true': [0.0, 0, 0], 'true,false,true,true,false': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, D), movie(E, D)'}, {'true,true': [0.512, 3, 23], 'true,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.069, 0, 23], 'true,false,true,true': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}], ['workedunder(A, B)', {'': 'director(B), female(A), genre(B, C)', 'true': 'movie(D, A), movie(E, F)'}, {'true,true': [0.0, 0, 17], 'true,false': [0.0, 0, 0], 'false': [3.823, 45, 28]}], ['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(C, B), movie(C, A)', 'true,false': 'movie(D, A), movie(D, E), director(E)', 'true,false,true': 'movie(D, F)'}, {'true,true': [0.086, 0, 23], 'true,false,true,true': [0.0, 3, 0], 'true,false,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [3.8, 42, 22]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), female(A).;true;false', '0;true;movie(C, B), movie(C, A).;false;true', '0;true,false;movie(D, A), movie(D, E), director(E).;false;false', '1;;workedunder(A, B) :- director(B), female(A).;true;false', '1;true;movie(C, B), movie(C, A).;false;true', '1;true,false;movie(D, A), movie(D, E), director(E).;false;false', '2;;workedunder(A, B) :- director(B), female(A).;true;false', '2;true;movie(C, B), movie(C, A).;false;true', '2;true,false;movie(D, A), movie(D, E), director(E).;false;false', '3;;workedunder(A, B) :- director(B), female(A).;true;false', '3;true;movie(C, B), movie(C, A).;false;true', '3;true,false;movie(D, A), movie(D, E), director(E).;false;false', '4;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '5;;workedunder(A, B) :- director(B), female(A).;true;false', '5;true;movie(C, B), movie(C, A).;false;true', '5;true,false;movie(D, A), movie(D, E), director(E).;true;false', '5;true,false,true;movie(F, B).;false;false', '6;;workedunder(A, B) :- director(B), female(A).;false;false', '7;;workedunder(A, B) :- director(B), female(A).;true;false', '7;true;movie(C, B), movie(C, A).;false;true', '7;true,false;movie(D, A), movie(D, E), director(E).;false;false', '8;;workedunder(A, B) :- director(B), female(A), genre(B, C).;false;false', '9;;workedunder(A, B) :- director(B), female(A).;true;false', '9;true;movie(C, B), movie(C, A).;false;true', '9;true,false;movie(D, A), movie(D, E), director(E).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #2: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #3: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #4: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #5: [('true,false', 0), ('false', 0.6164383561643836)]
Tree #6: [('true,false,true,true,true', 0), ('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #7: [('true,false', 0), ('false', 0.65625), ('true,true', 0.8846153846153846)]
Tree #8: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]
Tree #9: [('true,false', 0), ('false', 0.6164383561643836)]
Tree #10: [('true,false,true,false', 0), ('true,false,false', 0), ('false', 0.65625)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20189893509951223;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.7194734122109543;  // std dev = 5,96e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1755028154068204;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14949541683718404;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.4175135841583099;  // std dev = 4,21e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1250234389860588;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.32071184716014967;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.11277305655364855;  // std dev = 3,851, 73,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=28 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.26599395410385696;  // std dev = 0,087, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then if ( movie(F, B) )
%   | | | then return -0.10262103201229515;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08169334588924021;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.18156201174251424;  // std dev = 0,512, 26,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   else return 0.06559119894604351;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.18817444467868666;  // std dev = 0,069, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.11012211345269024;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05223177130669435;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), female(A), genre(B, C) )
%   then return 0.1535604319131818;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return 0.04713791558799315;  // std dev = 3,823, 73,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=28 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(C, B), movie(C, A) )
%   | then return 0.145339777035757;  // std dev = 0,086, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(D, A), movie(D, E), director(E) )
%   | | then return -0.10409983690997593;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03129183822309345;  // std dev = 3,800, 64,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
Results
   AUC ROC   = 0.786982
   AUC PR    = 0.846285
   CLL	      = -0.480443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.538462
   F1        = 0.7


Total learning time: 2.156 seconds
Total inference time: 0.547 seconds
AUC ROC: 0.786982


Best model AUC ROC so far: 0.786982


******************************************
Best model found
******************************************
Total revision time: 5.199
Best validation AUC ROC: 0.786982


Results
   AUC ROC   = 0.732321
   AUC PR    = 0.798914
   CLL	      = -0.537627
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.436202
   F1        = 0.607438


Total inference time: 0.919 seconds
AUC ROC: 0.732321
Dataset: uwcse->imdb, Fold: 5, Type: transfer, Time: 00:04:50
{'AUC ROC': 0.732321, 'AUC PR': 0.798914, 'CLL': -0.537627, 'Precision': [1.0, 0.5], 'Recall': 0.436202, 'F1': 0.607438, 'Learning time': 5.199, 'Inference time': 0.919, 'Mapping results': {'Knowledge compiling time': 0.027113676071166992, 'Generating paths time': 4.230339050292969, 'Generating mappings time': 0.30987024307250977, 'Possible mappings': 2592, 'Finding best mapping': 1.1525700092315674, 'Total time': 5.719899892807007}, 'Parameter Learning results': {'AUC ROC': 0.732321, 'AUC PR': 0.798914, 'CLL': -0.537627, 'Precision': [1.0, 0.5], 'Recall': 0.436202, 'F1': 0.607438, 'Learning time': 1.921, 'Inference time': 0.881}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1418510649004877;  // std dev = 4,34e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283913;  // std dev = 3,49e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360636;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783631;  // std dev = 1,83e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.0851847513883968;  // std dev = 2,11e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07877675473109179;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 1,18e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420272;  // std dev = 5,27e-09, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202623;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
Results
   AUC ROC   = 0.989614
   AUC PR    = 0.979651
   CLL	      = -0.11608
   Precision = 0.979651 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989721


Total learning time: 1.65 seconds
Total inference time: 0.792 seconds
AUC ROC: 0.989614


Dataset: uwcse->imdb, Fold: 5, Type: scratch, Time: 00:04:52
{'AUC ROC': 0.989614, 'AUC PR': 0.979651, 'CLL': -0.11608, 'Precision': [0.979651, 0.5], 'Recall': 1.0, 'F1': 0.989721, 'Learning time': 1.65, 'Inference time': 0.792}


Start learning from source dataset


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   else return -0.14185106490048774;  // std dev = 1,55e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.7194734122109571;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1254446385283919;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462838;  // std dev = 4,69e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.5553664367462832;  // std dev = 6,42e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360667;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583126;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.4175135841583129;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783658;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014917;  // std dev = 3,26e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3207118471601492;  // std dev = 3,67e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.09269127618926053;  // std dev = 1,80e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948884;  // std dev = 1,69e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.2551722425694883;  // std dev = 2,53e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253512;  // std dev = 2,76e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( director(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.20975771563253495;  // std dev = 2,89e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   else return -0.07877675473109147;  // std dev = 4,21e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527775;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.17709649774527772;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333703;  // std dev = 8,43e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.15274385809367155;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420299;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1340070300080108;  // std dev = 9,66e-08, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( actor(A) )
%   | | then return 0.13400703000801079;  // std dev = 1,10e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202594;  // std dev = 1,30e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'female(person).', 'actor(person).', 'director(person).'] 

Source structured tree: [['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'director(A)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'director(A)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'director(A)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['workedunder(A, B)', {'': 'director(B), movie(C, A), movie(C, B)', 'true': 'female(A)', 'true,false': 'actor(A)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 



Best mapping found: ['workedunder(A,B) -> sameauthor(A,B)', 'movie(A,B) -> haswordauthor(B,A)'] 

Tranferred structured tree: [['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false']
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.7870378239883978;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.662488340457355;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.5156213669758928;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.3876955880049945;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.2940939243456708;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.22896466584551245;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.18317125213999816;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.15002240685857746;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.12526566858187835;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.10624539867445687;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.5
   AUC PR    = 0.939394
   CLL	      = -0.276624
   Precision = 0.939394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.96875


Total learning time: 3.902 seconds
Total inference time: 0.768 seconds
AUC ROC: 0.5


Results in test set
   AUC ROC   = 0.5
   AUC PR    = 0.939394
   CLL	      = -0.276624
   Precision = 0.939394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.96875


Total inference time: 0.768 seconds
AUC ROC: 0.5
Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.855, 16, 209], 'false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
[]
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0), ('true', 0.9288888888888889)]
Tree #2: [('false', 0), ('true', 0.9288888888888889)]
Tree #3: [('false', 0), ('true', 0.9288888888888889)]
Tree #4: [('false', 0), ('true', 0.9288888888888889)]
Tree #5: [('false', 0), ('true', 0.9288888888888889)]
Tree #6: [('false', 0), ('true', 0.9288888888888889)]
Tree #7: [('false', 0), ('true', 0.9288888888888889)]
Tree #8: [('false', 0), ('true', 0.9288888888888889)]
Tree #9: [('false', 0), ('true', 0.9288888888888889)]
Tree #10: [('false', 0), ('true', 0.9288888888888889)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995091;  // std dev = 1,08e-06, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.7194734122109571;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462832;  // std dev = 6,42e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415831025;  // std dev = 2,23e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601492;  // std dev = 3,86e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.25517224256948834;  // std dev = 2,56e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253495;  // std dev = 3,01e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1770964977452778;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1527438580936717;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801092;  // std dev = 8,94e-08, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123015
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.07 seconds
Total inference time: 0.782 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '1;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '2;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '3;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '4;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '5;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '6;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '7;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '8;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '9;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: []
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: []
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995091;  // std dev = 1,08e-06, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.7194734122109571;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462832;  // std dev = 6,42e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415831025;  // std dev = 2,23e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601492;  // std dev = 3,86e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.25517224256948834;  // std dev = 2,56e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253495;  // std dev = 3,01e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1770964977452778;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1527438580936717;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801092;  // std dev = 8,94e-08, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123015
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.811 seconds
Total inference time: 0.797 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 17.13
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.886601
   AUC PR    = 0.979404
   CLL	      = -0.207381
   Precision = 0.9801 at threshold = 0.5
   Recall    = 0.9801
   F1        = 0.9801


Total inference time: 1.881 seconds
AUC ROC: 0.886601
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 00:05:34
{'AUC ROC': 0.886601, 'AUC PR': 0.979404, 'CLL': -0.207381, 'Precision': [0.9801, 0.5], 'Recall': 0.9801, 'F1': 0.9801, 'Learning time': 17.13, 'Inference time': 1.881, 'Mapping results': {'Knowledge compiling time': 0.148514986038208, 'Generating paths time': 4.746149063110352, 'Generating mappings time': 0.0943765640258789, 'Possible mappings': 26, 'Finding best mapping': 0.003712177276611328, 'Total time': 4.992760419845581}, 'Parameter Learning results': {'AUC ROC': 0.724138, 'AUC PR': 0.949606, 'CLL': -0.255665, 'Precision': [0.949606, 0.5], 'Recall': 1.0, 'F1': 0.974152, 'Learning time': 3.902, 'Inference time': 1.265}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995091;  // std dev = 1,08e-06, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.7194734122109571;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462832;  // std dev = 6,42e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415831025;  // std dev = 2,23e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601492;  // std dev = 3,86e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.25517224256948834;  // std dev = 2,56e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253495;  // std dev = 3,01e-07, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1770964977452778;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.1527438580936717;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801092;  // std dev = 8,94e-08, 209,000 (wgt'ed) examples reached here.  /* #pos=209 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
Results
   AUC ROC   = 0.886601
   AUC PR    = 0.979404
   CLL	      = -0.207381
   Precision = 0.9801 at threshold = 0.5
   Recall    = 0.9801
   F1        = 0.9801


Total learning time: 5.917 seconds
Total inference time: 1.873 seconds
AUC ROC: 0.886601


Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 00:05:43
{'AUC ROC': 0.886601, 'AUC PR': 0.979404, 'CLL': -0.207381, 'Precision': [0.9801, 0.5], 'Recall': 0.9801, 'F1': 0.9801, 'Learning time': 5.917, 'Inference time': 1.873}


Best mapping found: ['workedunder(A,B) -> sameauthor(A,B)', 'movie(A,B) -> haswordauthor(B,A)'] 

Tranferred structured tree: [['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false']
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.7966104735610489;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6701860162815748;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.521000173904994;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.3916498696084713;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.2975214947349439;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.23226801019815924;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.18647488053184677;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.15334928569517428;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.12860778205329093;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1095875440488626;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
Results
   AUC ROC   = 0.833333
   AUC PR    = 0.947368
   CLL	      = -0.23988
   Precision = 0.947368 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972973


Total learning time: 4.475 seconds
Total inference time: 0.725 seconds
AUC ROC: 0.833333


Results in test set
   AUC ROC   = 0.833333
   AUC PR    = 0.947368
   CLL	      = -0.23988
   Precision = 0.947368 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972973


Total inference time: 0.725 seconds
AUC ROC: 0.833333
Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [9.13e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [3.73e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [3.73e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [2.63e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.74, 8, 122], 'false': [5.89e-09, 12, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.9384615384615385)]
Tree #2: [('true', 0.9384615384615385)]
Tree #3: [('true', 0.9384615384615385)]
Tree #4: [('true', 0.9384615384615385)]
Tree #5: [('true', 0.9384615384615385)]
Tree #6: [('true', 0.9384615384615385)]
Tree #7: [('true', 0.9384615384615385)]
Tree #8: [('true', 0.9384615384615385)]
Tree #9: [('true', 0.9384615384615385)]
Tree #10: [('true', 0.9384615384615385)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995106;  // std dev = 6,64e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462834;  // std dev = 4,46e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830936;  // std dev = 3,42e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.32071184716014994;  // std dev = 2,06e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.03315494592188567;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.028495105925721142;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.2097577156325354;  // std dev = 1,91e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.024408230135271977;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.020846889108740274;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.017760671541598494;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.015098879183171265;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
Results
   AUC ROC   = 0.99537
   AUC PR    = 0.999269
   CLL	      = -0.161477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.972222
   F1        = 0.985915


Total learning time: 7.616 seconds
Total inference time: 0.806 seconds
AUC ROC: 0.99537


Best model AUC ROC so far: 0.99537


Refining iteration 2
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '0;true;author(D, A), samebib(D, E), author(E, B).;false;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;true;author(D, A), samebib(D, E), author(E, B).;false;true', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;true;author(D, A), samebib(D, E), author(E, B).;false;true', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;true;author(D, A), samebib(D, E), author(E, B).;false;true', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;true;author(D, A), samebib(D, E), author(E, B).;false;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;true;author(D, A), samebib(D, E), author(E, B).;false;true', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;true;author(D, A), samebib(D, E), author(E, B).;false;true', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;true;author(D, A), samebib(D, E), author(E, B).;false;true', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;true;author(D, A), samebib(D, E), author(E, B).;false;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;true;author(D, A), samebib(D, E), author(E, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.8)]
Tree #2: [('true,false', 0.8)]
Tree #3: [('true,false', 0.8)]
Tree #4: [('true,false', 0.8)]
Tree #5: [('true,false', 0.8)]
Tree #6: [('true,false', 0.8)]
Tree #7: [('true,false', 0.8)]
Tree #8: [('true,false', 0.8)]
Tree #9: [('true,false', 0.8)]
Tree #10: [('true,false', 0.8)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995106;  // std dev = 6,64e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462834;  // std dev = 4,46e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830936;  // std dev = 3,42e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.32071184716014994;  // std dev = 2,06e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.03315494592188567;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.028495105925721142;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.2097577156325354;  // std dev = 1,91e-07, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.024408230135271977;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.020846889108740274;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.017760671541598494;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else return 0.015098879183171265;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
Results
   AUC ROC   = 0.99537
   AUC PR    = 0.999269
   CLL	      = -0.161477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.972222
   F1        = 0.985915


Total learning time: 5.471 seconds
Total inference time: 0.82 seconds
AUC ROC: 0.99537


Best model AUC ROC so far: 0.99537


******************************************
Best model found
******************************************
Total revision time: 19.913
Best validation AUC ROC: 0.99537


Results
   AUC ROC   = 0.994632
   AUC PR    = 0.999594
   CLL	      = -0.150848
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.985507
   F1        = 0.992701


Total inference time: 2.338 seconds
AUC ROC: 0.994632
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 00:06:13
{'AUC ROC': 0.994632, 'AUC PR': 0.999594, 'CLL': -0.150848, 'Precision': [1.0, 0.5], 'Recall': 0.985507, 'F1': 0.992701, 'Learning time': 19.913, 'Inference time': 2.338, 'Mapping results': {'Knowledge compiling time': 0.15804338455200195, 'Generating paths time': 4.750812768936157, 'Generating mappings time': 0.09541821479797363, 'Possible mappings': 26, 'Finding best mapping': 0.003755331039428711, 'Total time': 5.008037567138672}, 'Parameter Learning results': {'AUC ROC': 0.62963, 'AUC PR': 0.945205, 'CLL': -0.258457, 'Precision': [0.945205, 0.5], 'Recall': 1.0, 'F1': 0.971831, 'Learning time': 4.475, 'Inference time': 1.288}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.8581489350995115;  // std dev = 2,38e-07, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.7194734122109548;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.7194734122109543;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.7194734122109541;  // std dev = 1,88e-07, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.5553664367462844;  // std dev = 7,30e-08, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.5553664367462836;  // std dev = 3,04e-07, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.4175135841583102;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.41751358415831025;  // std dev = 1,19e-07, 86,000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.3207118471601495;  // std dev = 2,11e-08, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.3207118471601497;  // std dev = 2,98e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.32071184716015005;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.03315494592188567;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.2551722425694896;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.028495105925721142;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.20975771563253542;  // std dev = 4,94e-08, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.20975771563253573;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else return 0.024408230135271977;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.1770964977452775;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.17709649774527714;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.17709649774527725;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.020846889108740274;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.1527438580936709;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.15274385809367091;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.15274385809367105;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.017760671541598494;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.13400703000801115;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.13400703000801095;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.13400703000801098;  // std dev = 4,94e-08, 70,000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.015098879183171265;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
Results
   AUC ROC   = 0.813258
   AUC PR    = 0.978088
   CLL	      = -0.19843
   Precision = 0.966292 at threshold = 0.5
   Recall    = 0.997101
   F1        = 0.981455


Total learning time: 9.897 seconds
Total inference time: 2.007 seconds
AUC ROC: 0.813258


Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 00:06:26
{'AUC ROC': 0.813258, 'AUC PR': 0.978088, 'CLL': -0.19843, 'Precision': [0.966292, 0.5], 'Recall': 0.997101, 'F1': 0.981455, 'Learning time': 9.897, 'Inference time': 2.007}


Best mapping found: ['workedunder(A,B) -> sameauthor(A,B)', 'movie(A,B) -> haswordauthor(B,A)'] 

Tranferred structured tree: [['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false']
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.8323424834866066;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.698845893395818;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.5409946853316354;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.40656478352990505;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.31073437611251203;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.2452079090461179;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.19955514587821926;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1666316310048982;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.14205263897659914;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1231347582007454;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Results
   AUC ROC   = 0.5
   AUC PR    = 0.978261
   CLL	      = -0.184434
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 3.05 seconds
Total inference time: 0.735 seconds
AUC ROC: 0.5


Results in test set
   AUC ROC   = 0.5
   AUC PR    = 0.978261
   CLL	      = -0.184434
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total inference time: 0.735 seconds
AUC ROC: 0.5
Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [1.974, 4, 151], 'false': [0.0, 0, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
[]
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0), ('true', 0.9741935483870968)]
Tree #2: [('false', 0), ('true', 0.9741935483870968)]
Tree #3: [('false', 0), ('true', 0.9741935483870968)]
Tree #4: [('false', 0), ('true', 0.9741935483870968)]
Tree #5: [('false', 0), ('true', 0.9741935483870968)]
Tree #6: [('false', 0), ('true', 0.9741935483870968)]
Tree #7: [('false', 0), ('true', 0.9741935483870968)]
Tree #8: [('false', 0), ('true', 0.9741935483870968)]
Tree #9: [('false', 0), ('true', 0.9741935483870968)]
Tree #10: [('false', 0), ('true', 0.9741935483870968)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995101;  // std dev = 8,68e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.719473412210956;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.2879065490111784;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5274892556239501;  // std dev = 0,439, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462834;  // std dev = 5,13e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.23599504402972973;  // std dev = 0,952, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.42365261849625446;  // std dev = 0,441, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415830897;  // std dev = 4,30e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.16744879881102392;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.3351772730098081;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601499;  // std dev = 2,49e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.12970320602113894;  // std dev = 0,901, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.2529088311144688;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.2551722425694903;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.08517756742779621;  // std dev = 0,870, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.19757368956679572;  // std dev = 0,456, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253523;  // std dev = 2,35e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.06473218048355282;  // std dev = 0,868, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.15002649327143525;  // std dev = 0,455, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.17709649774527816;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.03857953457843864;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.12031899750890278;  // std dev = 0,459, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.15274385809367144;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.029208709198499494;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.09321027456596909;  // std dev = 0,458, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801104;  // std dev = 6,32e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.014504745102070948;  // std dev = 0,830, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.0766713071213352;  // std dev = 0,460, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
Results
   AUC ROC   = 0.955556
   AUC PR    = 0.999012
   CLL	      = -0.171103
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 5.557 seconds
Total inference time: 0.802 seconds
AUC ROC: 0.955556


Best model AUC ROC so far: 0.955556


Refining iteration 2
********************************
Candidate for revision
['0;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '1;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '2;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '3;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '4;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '5;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '6;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '7;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '8;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false', '9;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('false,true', 0.5), ('false,false', 0.75)]
Tree #2: [('false,true', 0.5), ('false,false', 0.75)]
Tree #3: [('false,true', 0.5), ('false,false', 0.75)]
Tree #4: [('false,true', 0.5), ('false,false', 0.75)]
Tree #5: [('false,true', 0.5), ('false,false', 0.75)]
Tree #6: [('false,true', 0.5), ('false,false', 0.75)]
Tree #7: [('false,true', 0.5), ('false,false', 0.75)]
Tree #8: [('false,true', 0.5), ('false,false', 0.75)]
Tree #9: [('false,true', 0.5), ('false,false', 0.75)]
Tree #10: [('false,true', 0.5), ('false,false', 0.75)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995101;  // std dev = 8,68e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.719473412210956;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462834;  // std dev = 5,13e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.36236334632262296;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415830897;  // std dev = 4,30e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.2807538536965853;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601499;  // std dev = 2,49e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.21248070121827137;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.2551722425694903;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.1594898822817116;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253523;  // std dev = 2,35e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.11975529938157481;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.17709649774527816;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.09028081829440963;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.15274385809367144;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.06840311429118522;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801104;  // std dev = 6,32e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else return 0.052078905701252655;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
Results
   AUC ROC   = 0.977778
   AUC PR    = 0.999509
   CLL	      = -0.160387
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 3.535 seconds
Total inference time: 0.792 seconds
AUC ROC: 0.977778


Best model AUC ROC so far: 0.977778


Refining iteration 3
********************************
Candidate for revision
['0;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '1;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '2;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '3;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '4;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '5;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '6;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '7;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '8;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true', '9;;sameauthor(A, B) :- author(C, A), samebib(C, D), author(D, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('false', 0.6666666666666666)]
Tree #2: [('false', 0.6666666666666666)]
Tree #3: [('false', 0.6666666666666666)]
Tree #4: [('false', 0.6666666666666666)]
Tree #5: [('false', 0.6666666666666666)]
Tree #6: [('false', 0.6666666666666666)]
Tree #7: [('false', 0.6666666666666666)]
Tree #8: [('false', 0.6666666666666666)]
Tree #9: [('false', 0.6666666666666666)]
Tree #10: [('false', 0.6666666666666666)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995101;  // std dev = 8,68e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.719473412210956;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.2879065490111784;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5274892556239501;  // std dev = 0,439, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462834;  // std dev = 5,13e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.23599504402972973;  // std dev = 0,952, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.42365261849625446;  // std dev = 0,441, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415830897;  // std dev = 4,30e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.16744879881102392;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.3351772730098081;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601499;  // std dev = 2,49e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.12970320602113894;  // std dev = 0,901, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.2529088311144688;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.2551722425694903;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.08517756742779621;  // std dev = 0,870, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.19757368956679572;  // std dev = 0,456, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253523;  // std dev = 2,35e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.06473218048355282;  // std dev = 0,868, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.15002649327143525;  // std dev = 0,455, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.17709649774527816;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.03857953457843864;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.12031899750890278;  // std dev = 0,459, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.15274385809367144;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.029208709198499494;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.09321027456596909;  // std dev = 0,458, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801104;  // std dev = 6,32e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.014504745102070948;  // std dev = 0,830, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.0766713071213352;  // std dev = 0,460, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
Results
   AUC ROC   = 0.955556
   AUC PR    = 0.999012
   CLL	      = -0.171103
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 4.657 seconds
Total inference time: 0.82 seconds
AUC ROC: 0.955556


Best model AUC ROC so far: 0.977778


******************************************
Best model found
******************************************
Total revision time: 19.948
Best validation AUC ROC: 0.977778


Results
   AUC ROC   = 0.906721
   AUC PR    = 0.981294
   CLL	      = -0.232557
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total inference time: 1.914 seconds
AUC ROC: 0.906721
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 00:06:56
{'AUC ROC': 0.906721, 'AUC PR': 0.981294, 'CLL': -0.232557, 'Precision': [0.904241, 0.5], 'Recall': 1.0, 'F1': 0.949713, 'Learning time': 19.948, 'Inference time': 1.914, 'Mapping results': {'Knowledge compiling time': 0.20687532424926758, 'Generating paths time': 4.798552989959717, 'Generating mappings time': 0.09513711929321289, 'Possible mappings': 26, 'Finding best mapping': 0.003812551498413086, 'Total time': 5.104386806488037}, 'Parameter Learning results': {'AUC ROC': 0.685714, 'AUC PR': 0.937589, 'CLL': -0.256513, 'Precision': [0.937589, 0.5], 'Recall': 1.0, 'F1': 0.967789, 'Learning time': 3.05, 'Inference time': 1.275}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.8581489350995101;  // std dev = 8,68e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.719473412210956;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.2879065490111784;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5274892556239501;  // std dev = 0,439, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.5553664367462834;  // std dev = 5,13e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.23599504402972973;  // std dev = 0,952, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.42365261849625446;  // std dev = 0,441, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.41751358415830897;  // std dev = 4,30e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.16744879881102392;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.3351772730098081;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.3207118471601499;  // std dev = 2,49e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.12970320602113894;  // std dev = 0,901, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.2529088311144688;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.2551722425694903;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.08517756742779621;  // std dev = 0,870, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.19757368956679572;  // std dev = 0,456, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.20975771563253523;  // std dev = 2,35e-07, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.06489439160443587;  // std dev = 0,868, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.14994538771099375;  // std dev = 0,455, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.17709649774527816;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.03840917342216571;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.12040338926360433;  // std dev = 0,459, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.15274385809367144;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | then return 0.029080115269668805;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.09327485541343976;  // std dev = 0,458, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), samebib(C, D), author(D, B) )
%   then return 0.13400703000801104;  // std dev = 6,32e-08, 143,000 (wgt'ed) examples reached here.  /* #pos=143 */
%   else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then return 0.01464203810161796;  // std dev = 0,830, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.07660423535201671;  // std dev = 0,460, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
Results
   AUC ROC   = 0.901578
   AUC PR    = 0.980816
   CLL	      = -0.245797
   Precision = 0.903448 at threshold = 0.5
   Recall    = 0.990923
   F1        = 0.945166


Total learning time: 5.406 seconds
Total inference time: 1.959 seconds
AUC ROC: 0.901578


Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 00:07:04
{'AUC ROC': 0.901578, 'AUC PR': 0.980816, 'CLL': -0.245797, 'Precision': [0.903448, 0.5], 'Recall': 0.990923, 'F1': 0.945166, 'Learning time': 5.406, 'Inference time': 1.959}


Best mapping found: ['workedunder(A,B) -> sameauthor(A,B)', 'movie(A,B) -> haswordauthor(B,A)'] 

Tranferred structured tree: [['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false']
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.8099561640151723;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6809038096058014;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.5284825663747693;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.39719039176974347;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.3023776209869051;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.23698715759628264;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.191220720417513;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.15814910131754492;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1334484328508451;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.11444708609402138;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
Results
   AUC ROC   = 0.875
   AUC PR    = 0.979167
   CLL	      = -0.188402
   Precision = 0.979167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989474


Total learning time: 5.693 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.875


Results in test set
   AUC ROC   = 0.875
   AUC PR    = 0.979167
   CLL	      = -0.188402
   Precision = 0.979167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989474


Total inference time: 0.752 seconds
AUC ROC: 0.875
Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [3.73e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [3.73e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [2.63e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [2.759, 8, 158], 'false': [0.0, 8, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.9518072289156626)]
Tree #2: [('true', 0.9518072289156626)]
Tree #3: [('true', 0.9518072289156626)]
Tree #4: [('true', 0.9518072289156626)]
Tree #5: [('true', 0.9518072289156626)]
Tree #6: [('true', 0.9518072289156626)]
Tree #7: [('true', 0.9518072289156626)]
Tree #8: [('true', 0.9518072289156626)]
Tree #9: [('true', 0.9518072289156626)]
Tree #10: [('true', 0.9518072289156626)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995098;  // std dev = 9,39e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109562;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462833;  // std dev = 5,33e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830886;  // std dev = 4,62e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.3207118471601498;  // std dev = 2,83e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.25517224256949045;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.20975771563253517;  // std dev = 2,49e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.134007030008011;  // std dev = 6,66e-08, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
Results
   AUC ROC   = 0.99734
   AUC PR    = 0.999778
   CLL	      = -0.146138
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.978723
   F1        = 0.989247


Total learning time: 7.092 seconds
Total inference time: 0.834 seconds
AUC ROC: 0.99734


Best model AUC ROC so far: 0.99734


Refining iteration 2
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '0;true;author(D, A), samebib(D, E), author(E, B).;false;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;true;author(D, A), samebib(D, E), author(E, B).;false;true', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;true;author(D, A), samebib(D, E), author(E, B).;false;true', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;true;author(D, A), samebib(D, E), author(E, B).;false;true', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;true;author(D, A), samebib(D, E), author(E, B).;false;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;true;author(D, A), samebib(D, E), author(E, B).;false;true', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;true;author(D, A), samebib(D, E), author(E, B).;false;true', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;true;author(D, A), samebib(D, E), author(E, B).;false;true', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;true;author(D, A), samebib(D, E), author(E, B).;false;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;true;author(D, A), samebib(D, E), author(E, B).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0.5714285714285714)]
Tree #2: [('true,false', 0.5714285714285714)]
Tree #3: [('true,false', 0.5714285714285714)]
Tree #4: [('true,false', 0.5714285714285714)]
Tree #5: [('true,false', 0.5714285714285714)]
Tree #6: [('true,false', 0.5714285714285714)]
Tree #7: [('true,false', 0.5714285714285714)]
Tree #8: [('true,false', 0.5714285714285714)]
Tree #9: [('true,false', 0.5714285714285714)]
Tree #10: [('true,false', 0.5714285714285714)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995098;  // std dev = 9,39e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109562;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462833;  // std dev = 5,33e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830886;  // std dev = 4,62e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.3207118471601498;  // std dev = 2,83e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.25517224256949045;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.20975771563253517;  // std dev = 2,49e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1770964977452782;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.134007030008011;  // std dev = 6,66e-08, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
Results
   AUC ROC   = 0.99734
   AUC PR    = 0.999778
   CLL	      = -0.146138
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.978723
   F1        = 0.989247


Total learning time: 4.379 seconds
Total inference time: 0.826 seconds
AUC ROC: 0.99734


Best model AUC ROC so far: 0.99734


******************************************
Best model found
******************************************
Total revision time: 19.575999999999997
Best validation AUC ROC: 0.99734


Results
   AUC ROC   = 0.996836
   AUC PR    = 0.99973
   CLL	      = -0.153503
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.990826
   F1        = 0.995392


Total inference time: 2.16 seconds
AUC ROC: 0.996836
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 00:07:34
{'AUC ROC': 0.996836, 'AUC PR': 0.99973, 'CLL': -0.153503, 'Precision': [1.0, 0.5], 'Recall': 0.990826, 'F1': 0.995392, 'Learning time': 19.575999999999997, 'Inference time': 2.16, 'Mapping results': {'Knowledge compiling time': 0.15027499198913574, 'Generating paths time': 4.858932256698608, 'Generating mappings time': 0.09608340263366699, 'Possible mappings': 26, 'Finding best mapping': 0.003765583038330078, 'Total time': 5.109067440032959}, 'Parameter Learning results': {'AUC ROC': 0.655172, 'AUC PR': 0.942363, 'CLL': -0.255786, 'Precision': [0.942363, 0.5], 'Recall': 1.0, 'F1': 0.970326, 'Learning time': 5.693, 'Inference time': 1.298}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(F, A), samebib(F, G), author(G, B) )
%   | | then return 0.858148935099511;  // std dev = 5,33e-07, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109562;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.5553664367462838;  // std dev = 5,96e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(F, A), samebib(F, G), author(G, B) )
%   | | then return 0.5553664367462834;  // std dev = 3,67e-07, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.4175135841583099;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.41751358415830914;  // std dev = 3,67e-07, 127,000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.3207118471601498;  // std dev = 1,46e-07, 127,000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.2551722425694891;  // std dev = 3,33e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.2551722425694896;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.2551722425694897;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.2097577156325355;  // std dev = 1,63e-07, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.1527438580936712;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.13400703000801092;  // std dev = 1,29e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( author(G, A), samebib(G, H), author(H, B) )
%   | | | then return 0.13400703000801087;  // std dev = 7,15e-08, 109,000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
Results
   AUC ROC   = 0.998102
   AUC PR    = 0.999835
   CLL	      = -0.191219
   Precision = 0.960352 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.979775


Total learning time: 9.839 seconds
Total inference time: 1.822 seconds
AUC ROC: 0.998102


Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 00:07:46
{'AUC ROC': 0.998102, 'AUC PR': 0.999835, 'CLL': -0.191219, 'Precision': [0.960352, 0.5], 'Recall': 1.0, 'F1': 0.979775, 'Learning time': 9.839, 'Inference time': 1.822}


Best mapping found: ['workedunder(A,B) -> sameauthor(A,B)', 'movie(A,B) -> haswordauthor(B,A)'] 

Tranferred structured tree: [['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 7, 0], 'true,false': [1.43e-06, 0, 382], 'false': [1.55e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [4.69e-07, 0, 170], 'true,false,true': [6.42e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [3.26e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [3.67e-07, 0, 212], 'false': [1.8e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [1.69e-07, 0, 170], 'true,false,true': [2.53e-07, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [1.1e-07, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [2.76e-07, 0, 170], 'true,false,true': [0.0, 7, 0], 'true,false,false': [2.89e-07, 0, 212], 'false': [4.21e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [8.43e-08, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [0.0, 0, 170], 'true,false,true': [0.0, 0, 212], 'true,false,false': [2.63e-09, 7, 0], 'false': [0.0, 375, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true,true': [9.66e-08, 0, 170], 'true,false,true': [1.1e-07, 0, 212], 'true,false,false': [0.0, 7, 0], 'false': [1.3e-07, 375, 0]}]] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;false;false']
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.7929315437951615;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6672286583325434;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.5189342160940956;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.3901282969327416;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.29619880730637854;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.2309904888781173;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.18519538758533224;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.15205934164006435;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1273106151181766;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.10828905626740594;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 0.7
   AUC PR    = 0.944444
   CLL	      = -0.258083
   Precision = 0.944444 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971429


Total learning time: 7.835 seconds
Total inference time: 0.748 seconds
AUC ROC: 0.7


Results in test set
   AUC ROC   = 0.7
   AUC PR    = 0.944444
   CLL	      = -0.258083
   Precision = 0.944444 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971429


Total inference time: 0.748 seconds
AUC ROC: 0.7
Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [2.63e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [2.63e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [1.86e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [3.349, 12, 172], 'false': [0.0, 6, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0.9347826086956522)]
Tree #2: [('true', 0.9347826086956522)]
Tree #3: [('true', 0.9347826086956522)]
Tree #4: [('true', 0.9347826086956522)]
Tree #5: [('true', 0.9347826086956522)]
Tree #6: [('true', 0.9347826086956522)]
Tree #7: [('true', 0.9347826086956522)]
Tree #8: [('true', 0.9347826086956522)]
Tree #9: [('true', 0.9347826086956522)]
Tree #10: [('true', 0.9347826086956522)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995096;  // std dev = 1,04e-06, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1555325621642444;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11703338056264537;  // std dev = 0,420, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462833;  // std dev = 5,59e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.1388567926136821;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.104982044330057;  // std dev = 0,418, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830925;  // std dev = 4,30e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1490081457378918;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11095564964003682;  // std dev = 0,405, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.3207118471601493;  // std dev = 3,72e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.13555399145688926;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10058153914391219;  // std dev = 0,401, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.25517224256949067;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.14297121506270585;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10435348183332357;  // std dev = 0,389, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.20975771563253512;  // std dev = 2,70e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.13193933869063665;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09530970628418417;  // std dev = 0,384, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1372300112486525;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09744649489783397;  // std dev = 0,372, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.12803873343643177;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0895080437317548;  // std dev = 0,366, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.13167701663235565;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09046520922670742;  // std dev = 0,355, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124642
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.317 seconds
Total inference time: 0.84 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '0;true;author(D, A), samebib(D, E), author(E, B).;false;true', '0;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '0;true,false,false;haswordauthor(A, H), haswordvenue(I, H).;false;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '1;true;author(D, A), samebib(D, E), author(E, B).;false;true', '1;true,false;haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F).;false;true', '1;true,false,false;haswordauthor(B, H), haswordvenue(I, H).;false;true', '2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '2;true;author(D, A), samebib(D, E), author(E, B).;false;true', '2;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '2;true,false,false;haswordauthor(A, H), haswordvenue(I, H).;false;true', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '3;true;author(D, A), samebib(D, E), author(E, B).;false;true', '3;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '3;true,false,false;haswordauthor(B, H), haswordvenue(I, H).;false;true', '4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '4;true;author(D, A), samebib(D, E), author(E, B).;false;true', '4;true,false;haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F).;false;true', '4;true,false,false;haswordauthor(A, H), haswordvenue(I, H).;false;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '5;true;author(D, A), samebib(D, E), author(E, B).;false;true', '5;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '5;true,false,false;haswordauthor(B, H), haswordvenue(I, H).;false;true', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '6;true;author(D, A), samebib(D, E), author(E, B).;false;true', '6;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '6;true,false,false;haswordauthor(A, H), haswordvenue(I, H).;false;true', '7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '7;true;author(D, A), samebib(D, E), author(E, B).;false;true', '7;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '7;true,false,false;haswordauthor(B, H), haswordvenue(I, H).;false;true', '8;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '8;true;author(D, A), samebib(D, E), author(E, B).;false;true', '8;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '8;true,false,false;haswordauthor(A, H), haswordvenue(I, H).;false;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;false', '9;true;author(D, A), samebib(D, E), author(E, B).;false;true', '9;true,false;haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F).;false;true', '9;true,false,false;haswordauthor(B, H), haswordvenue(I, H).;false;true']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false,false,false', 0.75)]
Tree #2: [('true,false,false,false', 0.75)]
Tree #3: [('true,false,false,false', 0.75)]
Tree #4: [('true,false,false,false', 0.75)]
Tree #5: [('true,false,false,false', 0.75)]
Tree #6: [('true,false,false,false', 0.75)]
Tree #7: [('true,false,false,false', 0.75)]
Tree #8: [('true,false,false,false', 0.75)]
Tree #9: [('true,false,false,false', 0.75)]
Tree #10: [('true,false,false,false', 0.75)]


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.8581489350995096;  // std dev = 1,04e-06, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.7194734122109565;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1555325621642444;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11703338056264537;  // std dev = 0,420, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.5553664367462833;  // std dev = 5,59e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.1388567926136821;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.104982044330057;  // std dev = 0,418, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.41751358415830925;  // std dev = 4,30e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1490081457378918;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11095564964003682;  // std dev = 0,405, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.3207118471601493;  // std dev = 3,72e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F), haswordauthor(A, F) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.13555399145688926;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10058153914391219;  // std dev = 0,401, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.25517224256949067;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.14297121506270585;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.10435348183332357;  // std dev = 0,389, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.20975771563253512;  // std dev = 2,70e-07, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.13193933869063665;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09530970628418417;  // std dev = 0,384, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.1372300112486525;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09744649489783397;  // std dev = 0,372, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return -0.12803873343643177;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0895080437317548;  // std dev = 0,366, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( author(D, A), samebib(D, E), author(E, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 166,000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F), haswordauthor(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return -0.13167701663235565;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09046520922670742;  // std dev = 0,355, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124642
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.066 seconds
Total inference time: 0.903 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 29.709000000000003
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.837891
   AUC PR    = 0.972489
   CLL	      = -0.18755
   Precision = 0.972561 at threshold = 0.5
   Recall    = 0.996875
   F1        = 0.984568


Total inference time: 1.908 seconds
AUC ROC: 0.837891
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 00:08:27
{'AUC ROC': 0.837891, 'AUC PR': 0.972489, 'CLL': -0.18755, 'Precision': [0.972561, 0.5], 'Recall': 0.996875, 'F1': 0.984568, 'Learning time': 29.709000000000003, 'Inference time': 1.908, 'Mapping results': {'Knowledge compiling time': 0.19809389114379883, 'Generating paths time': 4.7800116539001465, 'Generating mappings time': 0.09915351867675781, 'Possible mappings': 26, 'Finding best mapping': 0.0037841796875, 'Total time': 5.0810534954071045}, 'Parameter Learning results': {'AUC ROC': 0.678571, 'AUC PR': 0.946746, 'CLL': -0.255769, 'Precision': [0.946746, 0.5], 'Recall': 1.0, 'F1': 0.972644, 'Learning time': 7.835, 'Inference time': 1.264}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( author(G, B), venue(G, F) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, A), venue(H, F) )
%   | | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.6181489350995122;  // std dev = 0,427, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.8581489350995124;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.7194734122109543;  // std dev = 8,43e-08, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( author(G, A), venue(G, F) )
%   | | | then return 0.7194734122109543;  // std dev = 2,11e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, B), venue(H, F) )
%   | | | | then return 0.7194734122109543;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.5094719783609064;  // std dev = 0,374, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.730352587702985;  // std dev = 0,174, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.035077209644621216;  // std dev = 0,467, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.5553664367462837;  // std dev = 1,46e-07, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.5726202299973567;  // std dev = 0,277, 108,000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return -0.24107884481262157;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.03398258914132324;  // std dev = 0,465, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( author(G, A), venue(G, F) )
%   | | | then return 0.41332359795367946;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, B), venue(H, F) )
%   | | | | then return 0.41332359795367946;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.29561006668868417;  // std dev = 0,301, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.424716811952485;  // std dev = 0,225, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.05898184322094641;  // std dev = 0,448, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.3207118471601498;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( author(G, B), venue(G, F) )
%   | | | then return 0.31787251220120194;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( author(H, A), venue(H, F) )
%   | | | | then return 0.31787251220120194;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else return 0.22675110900022766;  // std dev = 0,295, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.3258326948188042;  // std dev = 0,205, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.0497151751925974;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( author(E, A), samebib(E, F), author(F, B) )
%   | | then return 0.2726519244120316;  // std dev = 0,371, 108,000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return -0.3484100592194617;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.041646310789508145;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( author(G, B), venue(G, F) )
%   | | | then return 0.20031557485587523;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, A), venue(H, F) )
%   | | | | then return 0.20031557485587526;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.1295921476101125;  // std dev = 0,199, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.22023213526853186;  // std dev = 0,308, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return -0.0021392042677529782;  // std dev = 0,471, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.1770964977452773;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( author(G, A), venue(G, F) )
%   | | | then return 0.17013952354371997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else if ( author(H, B), venue(H, F) )
%   | | | | then return 0.17013952354371997;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | | else return 0.10654443624540395;  // std dev = 0,199, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.18495845094723265;  // std dev = 0,272, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return -0.0017390995507071266;  // std dev = 0,471, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.15274385809367072;  // std dev = 3,65e-08, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( author(G, B), venue(G, F) )
%   | | | then return 0.14744552996496163;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, A), venue(H, F) )
%   | | | | then return 0.14744552996496163;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.08822954440479575;  // std dev = 0,201, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.15882633670492674;  // std dev = 0,243, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return -0.0014141359636318102;  // std dev = 0,471, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( author(G, A), venue(G, F) )
%   | | | then return 0.12807274942986646;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else if ( author(H, B), venue(H, F) )
%   | | | | then return 0.12807274942986646;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.07321951731912572;  // std dev = 0,195, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | else if ( author(I, A), samebib(I, J), author(J, B) )
%   | | | then return 0.14013251841088697;  // std dev = 0,235, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return -0.01121003876437935;  // std dev = 0,477, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
Results
   AUC ROC   = 0.875837
   AUC PR    = 0.986239
   CLL	      = -0.191953
   Precision = 0.972561 at threshold = 0.5
   Recall    = 0.996875
   F1        = 0.984568


Total learning time: 28.559 seconds
Total inference time: 3.344 seconds
AUC ROC: 0.875837


Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 00:08:59
{'AUC ROC': 0.875837, 'AUC PR': 0.986239, 'CLL': -0.191953, 'Precision': [0.972561, 0.5], 'Recall': 0.996875, 'F1': 0.984568, 'Learning time': 28.559, 'Inference time': 3.344}


Start learning from source dataset


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.6935858283033908;  // std dev = 0,371, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.6464984496626142;  // std dev = 0,408, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.14185106490048766;  // std dev = 6,50e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.09658118678093074;  // std dev = 0,208, 1.723,000 (wgt'ed) examples reached here.  /* #neg=1.645 #pos=78 */
%   | else return -0.14185106490048777;  // std dev = 1,40e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.5868968911826365;  // std dev = 0,371, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.5484994226835163;  // std dev = 0,408, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.08642624551955155;  // std dev = 0,205, 1.776,000 (wgt'ed) examples reached here.  /* #neg=1.698 #pos=78 */
%   | else return -0.12544463852839202;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.47753148562189;  // std dev = 0,357, 1.913,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=1.627 */
%   | | else return 0.44876617075504716;  // std dev = 0,399, 1.424,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=1.142 */
%   | else return -0.07816898859358122;  // std dev = 0,201, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.762 #pos=78 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return 0.26649066573929403;  // std dev = 0,480, 147,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=94 */
%   | | else return 0.2748990521739478;  // std dev = 0,483, 121,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=76 */
%   | else return -0.11231637819360675;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.3496729078872902;  // std dev = 0,369, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.3306815899914199;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.10475579165340519;  // std dev = 2,36e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.06887602951867344;  // std dev = 0,205, 1.776,000 (wgt'ed) examples reached here.  /* #neg=1.698 #pos=78 */
%   | else return -0.10159632948783663;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.26283965095162426;  // std dev = 0,369, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.2482439257901617;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.06331869186926053;  // std dev = 0,201, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.762 #pos=78 */
%   | else return -0.09269127618926043;  // std dev = 1,83e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.20011790827084608;  // std dev = 0,369, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.18753097410979228;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.09000784253063164;  // std dev = 2,11e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.09633378087354379;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.05507746599270512;  // std dev = 0,208, 1.723,000 (wgt'ed) examples reached here.  /* #neg=1.645 #pos=78 */
%   | else return -0.08518475138839678;  // std dev = 1,07e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.1551518130353048;  // std dev = 0,369, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.1435381878531086;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.08290261822617373;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.05134911110757814;  // std dev = 0,205, 1.776,000 (wgt'ed) examples reached here.  /* #neg=1.698 #pos=78 */
%   | else return -0.07877675473109143;  // std dev = 2,58e-08, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( venue(D, A), samebib(D, E), venue(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0.1342748963310739;  // std dev = 0,357, 1.913,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=1.627 */
%   | | else return 0.12196913868261465;  // std dev = 0,399, 1.424,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=1.142 */
%   | else return -0.04805083690581276;  // std dev = 0,201, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.762 #pos=78 */
%   else if ( venue(G, A), samebib(G, H), venue(H, B) )
%   | then if ( author(G, I), author(H, I) )
%   | | then return -0.03199535284984405;  // std dev = 0,480, 147,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=94 */
%   | | else return -0.012943290082212195;  // std dev = 0,483, 121,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=76 */
%   | else return -0.07324622576333702;  // std dev = 9,19e-08, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.09832368035747167;  // std dev = 0,368, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.08772933456664382;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04417544415443544;  // std dev = 0,201, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.762 #pos=78 */
%   | else return -0.06842697784420305;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), samebib(C, D), venue(D, B) )
%   then if ( author(C, E), author(D, E) )
%   | then return 0.07975695024895575;  // std dev = 0,368, 2.060,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=1.721 */
%   | else return 0.0696853830644047;  // std dev = 0,407, 1.545,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=1.218 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return -0.04074587113996822;  // std dev = 0,201, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.762 #pos=78 */
%   | else return -0.0641918400820259;  // std dev = 1,28e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */


Predicates from source: ['samevenue(venue,venue).', 'haswordvenue(venue,word).', 'haswordauthor(author,word).', 'venue(class,venue).', 'samebib(class,class).', 'author(class,author).'] 

Source structured tree: [['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'venue(D, A), samebib(D, E), venue(E, B)', 'true,true': 'author(D, F), author(E, F)', 'false': 'venue(G, A), samebib(G, H), venue(H, B)', 'false,true': 'author(G, I), author(H, I)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)', 'false,true': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'venue(D, A), samebib(D, E), venue(E, B)', 'true,true': 'author(D, F), author(E, F)', 'false': 'venue(G, A), samebib(G, H), venue(H, B)', 'false,true': 'author(G, I), author(H, I)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['samevenue(A, B)', {'': 'venue(C, A), samebib(C, D), venue(D, B)', 'true': 'author(C, E), author(D, E)', 'false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 



Best mapping found: ['samevenue(A,B) -> workedunder(A,B)', 'haswordvenue(A,B) -> movie(B,A)', 'haswordauthor(A,B) -> movie(B,A)', 'venue(A,B) -> genre(B,A)', 'author(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '0;true;genre(E, C), genre(E, D).;false;false', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;true', '0;false,true,false;movie(I, B), movie(I, J).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '1;true;genre(E, C), genre(E, D).;false;false', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;true;false', '2;true,true;genre(F, D), genre(F, E).;false;false', '2;false;genre(A, G), genre(B, H).;true;false', '2;false,true;genre(I, G), genre(I, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '3;true;genre(E, C), genre(E, D).;false;false', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '4;true;genre(E, C), genre(E, D).;false;false', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '5;true;genre(E, C), genre(E, D).;false;false', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;true', '5;false,true,false;movie(I, B), movie(I, J).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '6;true;genre(E, C), genre(E, D).;false;false', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;true;false', '7;true,true;genre(F, D), genre(F, E).;false;false', '7;false;genre(A, G), genre(B, H).;true;false', '7;false,true;genre(I, G), genre(I, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '8;true;genre(E, C), genre(E, D).;false;false', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '9;true;genre(E, C), genre(E, D).;false;false', '9;false;movie(F, A), movie(F, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.6252722227707457;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.5311218079290266;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839147;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.42269142706212637;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   else if ( genre(A, F), genre(B, G) )
%   | then if ( genre(H, F), genre(H, G) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936064;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.3221284026801432;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783634;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.24184140169727303;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.092691276189261;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.18219079646323655;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.13874963790552816;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.10696589343353989;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   else if ( genre(A, F), genre(B, G) )
%   | then if ( genre(H, F), genre(H, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.08339441943798527;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.06564317190298224;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
Results
   AUC ROC   = 0.90625
   AUC PR    = 0.842105
   CLL	      = -0.31073
   Precision = 0.842105 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914286


Total learning time: 2.705 seconds
Total inference time: 0.573 seconds
AUC ROC: 0.90625


Results in test set
   AUC ROC   = 0.90625
   AUC PR    = 0.842105
   CLL	      = -0.31073
   Precision = 0.842105 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914286


Total inference time: 0.573 seconds
AUC ROC: 0.90625
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.611, 17, 56], 'false,true,false': [0.0, 0, 0], 'false,false': [3.8e-08, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.611, 17, 56], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 37, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)', 'false,true': 'genre(H, F), genre(H, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.611, 17, 56], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.611, 17, 56], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.611, 17, 56], 'false,false': [0.0, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.611, 17, 56], 'false,true,false': [0.0, 0, 0], 'false,false': [2.24e-08, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.611, 17, 56], 'false,true,false': [0.0, 0, 0], 'false,false': [5.27e-09, 37, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)', 'false,true': 'genre(H, F), genre(H, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.611, 17, 56], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [7.45e-09, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.611, 17, 56], 'false,false': [0.0, 37, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.611, 17, 56], 'false,false': [0.0, 37, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '2;false;genre(A, F), genre(B, G).;true;false', '2;false,true;genre(H, F), genre(H, G).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '7;false;genre(A, F), genre(B, G).;true;false', '7;false,true;genre(H, F), genre(H, G).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '9;false;movie(F, A), movie(F, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7671232876712328)]
Tree #2: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7671232876712328)]
Tree #3: [('true,true', 0), ('false,true,false', 0), ('true,false', 0.7671232876712328)]
Tree #4: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7671232876712328)]
Tree #5: [('true,false', 0), ('false,true', 0.7671232876712328)]
Tree #6: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7671232876712328)]
Tree #7: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7671232876712328)]
Tree #8: [('true,true', 0), ('false,true,false', 0), ('true,false', 0.7671232876712328)]
Tree #9: [('true,false', 0), ('false,true', 0.7671232876712328)]
Tree #10: [('true,false', 0), ('false,true', 0.7671232876712328)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.6252722227707457;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.5311218079290266;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839147;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.42269142706212637;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   else if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936064;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.3221284026801432;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783634;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.24184140169727303;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.092691276189261;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.18219079646323655;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.13874963790552816;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10696589343353989;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   else if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.08339441943798527;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.06564317190298224;  // std dev = 3,611, 73,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=56 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
Results
   AUC ROC   = 0.90625
   AUC PR    = 0.842105
   CLL	      = -0.31073
   Precision = 0.842105 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914286


Total learning time: 2.873 seconds
Total inference time: 0.582 seconds
AUC ROC: 0.90625


Best model AUC ROC so far: 0.90625


******************************************
Best model found
******************************************
Total revision time: 6.7330000000000005
Best validation AUC ROC: 0.90625


Results
   AUC ROC   = 0.898773
   AUC PR    = 0.831633
   CLL	      = -0.319763
   Precision = 0.831633 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.908078


Total inference time: 0.929 seconds
AUC ROC: 0.898773
Dataset: cora->imdb, Fold: 1, Type: transfer, Time: 00:51:55
{'AUC ROC': 0.898773, 'AUC PR': 0.831633, 'CLL': -0.319763, 'Precision': [0.831633, 0.5], 'Recall': 1.0, 'F1': 0.908078, 'Learning time': 6.7330000000000005, 'Inference time': 0.929, 'Mapping results': {'Knowledge compiling time': 0.6766290664672852, 'Generating paths time': 6.127080202102661, 'Generating mappings time': 0.09365272521972656, 'Possible mappings': 126, 'Finding best mapping': 0.04099225997924805, 'Total time': 6.938363552093506}, 'Parameter Learning results': {'AUC ROC': 0.898773, 'AUC PR': 0.831633, 'CLL': -0.319763, 'Precision': [0.831633, 0.5], 'Recall': 1.0, 'F1': 0.908078, 'Learning time': 2.705, 'Inference time': 0.901}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048768;  // std dev = 5,37e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839155;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.1123163781936063;  // std dev = 3,65e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783626;  // std dev = 3,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 2,11e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109179;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.0684269778442027;  // std dev = 1,49e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
Results
   AUC ROC   = 0.989264
   AUC PR    = 0.978979
   CLL	      = -0.116803
   Precision = 0.978979 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989378


Total learning time: 1.703 seconds
Total inference time: 0.808 seconds
AUC ROC: 0.989264


Dataset: cora->imdb, Fold: 1, Type: scratch, Time: 00:51:58
{'AUC ROC': 0.989264, 'AUC PR': 0.978979, 'CLL': -0.116803, 'Precision': [0.978979, 0.5], 'Recall': 1.0, 'F1': 0.989378, 'Learning time': 1.703, 'Inference time': 0.808}


Best mapping found: ['samevenue(A,B) -> workedunder(A,B)', 'haswordvenue(A,B) -> movie(B,A)', 'haswordauthor(A,B) -> movie(B,A)', 'venue(A,B) -> genre(B,A)', 'author(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '0;true;genre(E, C), genre(E, D).;false;false', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;true', '0;false,true,false;movie(I, B), movie(I, J).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '1;true;genre(E, C), genre(E, D).;false;false', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;true;false', '2;true,true;genre(F, D), genre(F, E).;false;false', '2;false;genre(A, G), genre(B, H).;true;false', '2;false,true;genre(I, G), genre(I, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '3;true;genre(E, C), genre(E, D).;false;false', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '4;true;genre(E, C), genre(E, D).;false;false', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '5;true;genre(E, C), genre(E, D).;false;false', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;true', '5;false,true,false;movie(I, B), movie(I, J).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '6;true;genre(E, C), genre(E, D).;false;false', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;true;false', '7;true,true;genre(F, D), genre(F, E).;false;false', '7;false;genre(A, G), genre(B, H).;true;false', '7;false,true;genre(I, G), genre(I, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '8;true;genre(E, C), genre(E, D).;false;false', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '9;true;genre(E, C), genre(E, D).;false;false', '9;false;movie(F, A), movie(F, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.675050343550217;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.57180708071823;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.45176579324149735;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360636;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.34222392063374174;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878363;  // std dev = 1,05e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.25697900587735223;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.19495307730525124;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839679;  // std dev = 2,11e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.15031651551660505;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.11778459534750191;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.09360338078063743;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | else return -0.06842697784420271;  // std dev = 1,05e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.07526644324801013;  // std dev = 3,259, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
Results
   AUC ROC   = 0.882353
   AUC PR    = 0.809524
   CLL	      = -0.329684
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.913 seconds
Total inference time: 0.561 seconds
AUC ROC: 0.882353


Results in test set
   AUC ROC   = 0.882353
   AUC PR    = 0.809524
   CLL	      = -0.329684
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total inference time: 0.561 seconds
AUC ROC: 0.882353
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.259, 13, 58], 'false,true,false': [0.0, 0, 0], 'false,false': [4.71e-08, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.259, 13, 58], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 45, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.259, 13, 58], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.259, 13, 58], 'false,true,false': [0.0, 0, 0], 'false,false': [1.05e-08, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [3.259, 13, 58], 'false,false': [0.0, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.259, 13, 58], 'false,true,false': [0.0, 0, 0], 'false,false': [2.11e-08, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [3.259, 13, 58], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 45, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.259, 13, 58], 'false,true': [0.0, 0, 0], 'false,false': [1.18e-08, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [3.259, 13, 58], 'false,false': [1.05e-08, 45, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [3.259, 13, 58], 'false,false': [0.0, 45, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['2;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '2;false;genre(A, F), genre(B, G).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '7;false;genre(A, F), genre(B, G).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8169014084507042)]
Tree #2: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8169014084507042)]
Tree #3: [('true,true', 0), ('false,true', 0), ('true,false', 0.8169014084507042)]
Tree #4: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8169014084507042)]
Tree #5: [('true', 0), ('false,true', 0.8169014084507042)]
Tree #6: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8169014084507042)]
Tree #7: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8169014084507042)]
Tree #8: [('true,true', 0), ('false,true', 0), ('true,false', 0.8169014084507042)]
Tree #9: [('true', 0), ('false,true', 0.8169014084507042)]
Tree #10: [('true', 0), ('false,true', 0.8169014084507042)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839158;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4331146537291206;  // std dev = 2,176, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360636;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4475098637204161;  // std dev = 9,13e-09, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.4475098637204161;  // std dev = 1,18e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( actor(A), movie(D, B), movie(D, A) )
%   | then return -0.1632584040768232;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3411335389475677;  // std dev = 9,13e-09, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.341133538947568;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.10505921825083828;  // std dev = 0,043, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.14216304443557023;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.14216304443557023;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.26906325883360255;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.09562588651028989;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.12569153274834016;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.12569153274834013;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( actor(A) )
%   | | | | then return -0.08518475138839683;  // std dev = 3,09e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21952378779980158;  // std dev = 2,63e-09, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.2195237877998013;  // std dev = 9,86e-09, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08770296814390514;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then return -0.11251610268246719;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.07877675473109175;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13174018153675718;  // std dev = 0,934, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07310454116935601;  // std dev = 0,004, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16524519527459244;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.1652451952745925;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08085731869826;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06843601004218093;  // std dev = 1,61e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.11445009348616125;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11445009348616123;  // std dev = 3,23e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06843601004218097;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.14369263704728835;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07509372135029418;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419980913765833;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.10335224859934482;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1033522485993448;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A) )
%   | | | then if ( female(B) )
%   | | | | then return -0.06419980913765831;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | else return -0.06419980913765831;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.06419980913765831;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10369
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.671 seconds
Total inference time: 0.557 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;false', '3;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '3;true;female(A).;false;false', '3;false;actor(A), movie(D, B), movie(D, A).;false;false', '4;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '4;true;female(A).;false;false', '4;false;female(A).;true;true', '4;false,true;female(B).;false;false', '4;false,false;actor(A), movie(D, B), movie(D, A).;true;false', '4;false,false,true;female(B).;false;false', '5;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;true', '5;false;female(A).;true;true', '5;false,true;female(B).;false;false', '5;false,false;actor(A), movie(D, B), movie(D, A).;true;true', '5;false,false,true;female(B).;false;false', '5;false,false,false;female(B).;false;true', '5;false,false,false,false;actor(A).;false;false', '6;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '6;true;female(A).;false;false', '6;false;female(A).;true;true', '6;false,true;female(B).;false;false', '6;false,false;actor(A), movie(D, B), movie(D, A).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;false', '8;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '8;true;female(A).;false;false', '8;false;female(A).;true;true', '8;false,true;female(B).;false;false', '8;false,false;actor(A), movie(D, B), movie(D, A).;true;false', '8;false,false,true;female(B).;false;false', '9;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;true', '9;false;female(A).;true;true', '9;false,true;female(B).;false;false', '9;false,false;actor(A), movie(D, B), movie(D, A).;true;true', '9;false,false,true;female(B).;false;false', '9;false,false,false;actor(A).;true;false', '9;false,false,false,true;female(B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: [('false,true', 0), ('true', 0.8169014084507042)]
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: [('false,true', 0), ('true', 0.8169014084507042)]
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839158;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4331146537291206;  // std dev = 2,176, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else return -0.11231637819360635;  // std dev = 1,83e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4475098637204161;  // std dev = 2,98e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.4475098637204161;  // std dev = 7,30e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( actor(A), movie(D, B), movie(D, A) )
%   | then return -0.1632584040768232;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3411335389475677;  // std dev = 4,71e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.341133538947568;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.10505921825083828;  // std dev = 0,043, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.14216304443557023;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.14216304443557023;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.26906325883360255;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.09562588651028989;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.12569153274834016;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.12569153274834013;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else if ( actor(A) )
%   | | | | then return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21952378779980158;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.2195237877998013;  // std dev = 5,96e-08, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08770296814390514;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then return -0.11251610268246719;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.07877675473109175;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13174018153675718;  // std dev = 0,934, 71,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   else return -0.073104541169356;  // std dev = 0,004, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16524519527459244;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.1652451952745925;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08085731869826002;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06843601004218093;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.11445009348616125;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11445009348616123;  // std dev = 9,13e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06843601004218097;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.14369263704728835;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07509372135029418;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419980913765833;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(A), movie(D, B), movie(D, A) )
%   | | then if ( female(B) )
%   | | | then return -0.10335224859934482;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1033522485993448;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A) )
%   | | | then if ( female(B) )
%   | | | | then return -0.06419980913765831;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | else return -0.06419980913765831;  // std dev = 3,73e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.06419980913765831;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10369
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.182 seconds
Total inference time: 0.555 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 11.439
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.989198
   AUC PR    = 0.978852
   CLL	      = -0.125811
   Precision = 0.978852 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989313


Total inference time: 0.853 seconds
AUC ROC: 0.989198
Dataset: cora->imdb, Fold: 2, Type: transfer, Time: 00:52:20
{'AUC ROC': 0.989198, 'AUC PR': 0.978852, 'CLL': -0.125811, 'Precision': [0.978852, 0.5], 'Recall': 1.0, 'F1': 0.989313, 'Learning time': 11.439, 'Inference time': 0.853, 'Mapping results': {'Knowledge compiling time': 0.7521817684173584, 'Generating paths time': 6.064569711685181, 'Generating mappings time': 0.09304118156433105, 'Possible mappings': 126, 'Finding best mapping': 0.041525840759277344, 'Total time': 6.951328992843628}, 'Parameter Learning results': {'AUC ROC': 0.891975, 'AUC PR': 0.822335, 'CLL': -0.317837, 'Precision': [0.822335, 0.5], 'Recall': 1.0, 'F1': 0.902507, 'Learning time': 1.913, 'Inference time': 0.872}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839158;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.1123163781936063;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783623;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.09269127618926107;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07877675473109176;  // std dev = 1,83e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.0684269778442027;  // std dev = 1,67e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
Results
   AUC ROC   = 0.989198
   AUC PR    = 0.978852
   CLL	      = -0.11694
   Precision = 0.978852 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989313


Total learning time: 1.737 seconds
Total inference time: 0.771 seconds
AUC ROC: 0.989198


Dataset: cora->imdb, Fold: 2, Type: scratch, Time: 00:52:23
{'AUC ROC': 0.989198, 'AUC PR': 0.978852, 'CLL': -0.11694, 'Precision': [0.978852, 0.5], 'Recall': 1.0, 'F1': 0.989313, 'Learning time': 1.737, 'Inference time': 0.771}


Best mapping found: ['samevenue(A,B) -> workedunder(A,B)', 'haswordvenue(A,B) -> movie(B,A)', 'haswordauthor(A,B) -> movie(B,A)', 'venue(A,B) -> genre(B,A)', 'author(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '0;true;genre(E, C), genre(E, D).;false;false', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;true', '0;false,true,false;movie(I, B), movie(I, J).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '1;true;genre(E, C), genre(E, D).;false;false', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;true;false', '2;true,true;genre(F, D), genre(F, E).;false;false', '2;false;genre(A, G), genre(B, H).;true;false', '2;false,true;genre(I, G), genre(I, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '3;true;genre(E, C), genre(E, D).;false;false', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '4;true;genre(E, C), genre(E, D).;false;false', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '5;true;genre(E, C), genre(E, D).;false;false', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;true', '5;false,true,false;movie(I, B), movie(I, J).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '6;true;genre(E, C), genre(E, D).;false;false', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;true;false', '7;true,true;genre(F, D), genre(F, E).;false;false', '7;false;genre(A, G), genre(B, H).;true;false', '7;false,true;genre(I, G), genre(I, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '8;true;genre(E, C), genre(E, D).;false;false', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '9;true;genre(E, C), genre(E, D).;false;false', '9;false;movie(F, A), movie(F, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.7057679827185567;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.5967968476839474;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839122;  // std dev = 6,66e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.46947544511178246;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   else if ( genre(A, G), genre(B, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360622;  // std dev = 9,06e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.35460852341340243;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783644;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.266675292331555;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.09269127618926072;  // std dev = 7,30e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.20349156503593144;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 6,14e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.15832614022498712;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109153;  // std dev = 7,74e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.12547098936766085;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   else if ( genre(A, G), genre(B, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0732462257633371;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.1010091177582324;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.06842697784420264;  // std dev = 6,50e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.08237974658943102;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
Results
   AUC ROC   = 0.915094
   AUC PR    = 0.854839
   CLL	      = -0.278741
   Precision = 0.854839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.921739


Total learning time: 8.602 seconds
Total inference time: 0.612 seconds
AUC ROC: 0.915094


Results in test set
   AUC ROC   = 0.915094
   AUC PR    = 0.854839
   CLL	      = -0.278741
   Precision = 0.854839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.921739


Total inference time: 0.612 seconds
AUC ROC: 0.915094
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.208, 32, 178], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.208, 32, 178], 'false,true,false': [0.0, 0, 0], 'false,false': [6.66e-08, 141, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)'}, {'true,true,true': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [5.208, 32, 178], 'false,true': [0.0, 0, 0], 'false,false': [9.06e-08, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.208, 32, 178], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.208, 32, 178], 'false,false': [7.3e-08, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.208, 32, 178], 'false,true,false': [0.0, 0, 0], 'false,false': [6.14e-08, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.208, 32, 178], 'false,true,false': [0.0, 0, 0], 'false,false': [7.74e-08, 141, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)'}, {'true,true,true': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [5.208, 32, 178], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [1.86e-09, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.208, 32, 178], 'false,false': [6.5e-08, 141, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.208, 32, 178], 'false,false': [0.0, 141, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;false;false', '2;false;genre(A, G), genre(B, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;false;false', '7;false;genre(A, G), genre(B, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '9;false;movie(F, A), movie(F, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.8476190476190476)]
Tree #2: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.8476190476190476)]
Tree #3: [('true,true,false', 0), ('false,true', 0), ('true,false', 0.8476190476190476)]
Tree #4: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.8476190476190476)]
Tree #5: [('true,false', 0), ('false,true', 0.8476190476190476)]
Tree #6: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.8476190476190476)]
Tree #7: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.8476190476190476)]
Tree #8: [('true,true,false', 0), ('false,true', 0), ('true,false', 0.8476190476190476)]
Tree #9: [('true,false', 0), ('false,true', 0.8476190476190476)]
Tree #10: [('true,false', 0), ('false,true', 0.8476190476190476)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.7057679827185567;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.5967968476839474;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839122;  // std dev = 6,66e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.46947544511178246;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360622;  // std dev = 9,06e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.35460852341340243;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783644;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.266675292331555;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.09269127618926072;  // std dev = 7,30e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.20349156503593144;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 6,14e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.15832614022498712;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109153;  // std dev = 7,74e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.12547098936766085;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0732462257633371;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.1010091177582324;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.06842697784420264;  // std dev = 6,50e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.08237974658943102;  // std dev = 5,208, 210,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=178 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
Results
   AUC ROC   = 0.915094
   AUC PR    = 0.854839
   CLL	      = -0.278741
   Precision = 0.854839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.921739


Total learning time: 9.102 seconds
Total inference time: 0.621 seconds
AUC ROC: 0.915094


Best model AUC ROC so far: 0.915094


******************************************
Best model found
******************************************
Total revision time: 18.937
Best validation AUC ROC: 0.915094


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.336957
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total inference time: 0.769 seconds
AUC ROC: 0.875
Dataset: cora->imdb, Fold: 3, Type: transfer, Time: 00:52:52
{'AUC ROC': 0.875, 'AUC PR': 0.8, 'CLL': -0.336957, 'Precision': [0.8, 0.5], 'Recall': 1.0, 'F1': 0.888889, 'Learning time': 18.937, 'Inference time': 0.769, 'Mapping results': {'Knowledge compiling time': 0.7989804744720459, 'Generating paths time': 6.083596706390381, 'Generating mappings time': 0.09818577766418457, 'Possible mappings': 126, 'Finding best mapping': 0.041315555572509766, 'Total time': 7.022090196609497}, 'Parameter Learning results': {'AUC ROC': 0.875, 'AUC PR': 0.8, 'CLL': -0.336957, 'Precision': [0.8, 0.5], 'Recall': 1.0, 'F1': 0.888889, 'Learning time': 8.602, 'Inference time': 0.774}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048777;  // std dev = 3,65e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1254446385283911;  // std dev = 9,42e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360625;  // std dev = 8,94e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783635;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( director(A) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   else return -0.09269127618926087;  // std dev = 7,60e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 6,99e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109162;  // std dev = 7,15e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333716;  // std dev = 3,16e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420265;  // std dev = 6,05e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202626;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.683 seconds
Total inference time: 0.726 seconds
AUC ROC: 1.0


Dataset: cora->imdb, Fold: 3, Type: scratch, Time: 00:52:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.683, 'Inference time': 0.726}


Best mapping found: ['samevenue(A,B) -> workedunder(A,B)', 'haswordvenue(A,B) -> movie(B,A)', 'haswordauthor(A,B) -> movie(B,A)', 'venue(A,B) -> genre(B,A)', 'author(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '0;true;genre(E, C), genre(E, D).;false;false', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;true', '0;false,true,false;movie(I, B), movie(I, J).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '1;true;genre(E, C), genre(E, D).;false;false', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;true;false', '2;true,true;genre(F, D), genre(F, E).;false;false', '2;false;genre(A, G), genre(B, H).;true;false', '2;false,true;genre(I, G), genre(I, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '3;true;genre(E, C), genre(E, D).;false;false', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '4;true;genre(E, C), genre(E, D).;false;false', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '5;true;genre(E, C), genre(E, D).;false;false', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;true', '5;false,true,false;movie(I, B), movie(I, J).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '6;true;genre(E, C), genre(E, D).;false;false', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;true;false', '7;true,true;genre(F, D), genre(F, E).;false;false', '7;false;genre(A, G), genre(B, H).;true;false', '7;false,true;genre(I, G), genre(I, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '8;true;genre(E, C), genre(E, D).;false;false', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '9;true;genre(E, C), genre(E, D).;false;false', '9;false;movie(F, A), movie(F, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.6476226193100387;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.5494185715067312;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.43580662724469016;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   else if ( genre(A, G), genre(B, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936064;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.33116470478870363;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783635;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.24856222263410183;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.18776859068219579;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then if ( movie(G, A), movie(G, H) )
%   | | then return 0.14373883200944937;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then if ( genre(F, D), genre(F, E) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.11158581592814866;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   else if ( genre(A, G), genre(B, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 5,27e-09, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.08771890601691963;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then if ( genre(E, C), genre(E, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), movie(F, B) )
%   | then return 0.06969039872316497;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
Results
   AUC ROC   = 0.884615
   AUC PR    = 0.8125
   CLL	      = -0.331495
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total learning time: 2.343 seconds
Total inference time: 0.568 seconds
AUC ROC: 0.884615


Results in test set
   AUC ROC   = 0.884615
   AUC PR    = 0.8125
   CLL	      = -0.331495
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total inference time: 0.568 seconds
AUC ROC: 0.884615
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.078, 12, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [2.98e-08, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.078, 12, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)'}, {'true,true,true': [0.0, 1, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [3.078, 12, 45], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.078, 12, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.078, 12, 45], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.078, 12, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [2.17e-08, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.078, 12, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)'}, {'true,true,true': [0.0, 1, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [3.078, 12, 45], 'false,true': [0.0, 0, 0], 'false,false': [5.27e-09, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.078, 12, 45], 'false,false': [0.0, 32, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.078, 12, 45], 'false,false': [0.0, 32, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;false;false', '2;false;genre(A, G), genre(B, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;false;false', '7;false;genre(A, G), genre(B, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;false;true', '9;false;movie(F, A), movie(F, B).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7894736842105263)]
Tree #2: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7894736842105263)]
Tree #3: [('true,true,false', 0), ('false,true', 0), ('true,false', 0.7894736842105263)]
Tree #4: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7894736842105263)]
Tree #5: [('true,false', 0), ('false,true', 0.7894736842105263)]
Tree #6: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7894736842105263)]
Tree #7: [('true,false', 0), ('false,true,false', 0), ('false,true,true', 0.7894736842105263)]
Tree #8: [('true,true,false', 0), ('false,true', 0), ('true,false', 0.7894736842105263)]
Tree #9: [('true,false', 0), ('false,true', 0.7894736842105263)]
Tree #10: [('true,false', 0), ('false,true', 0.7894736842105263)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.6476226193100387;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.5494185715067312;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.43580662724469016;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936064;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.33116470478870363;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783635;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.24856222263410183;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.18776859068219579;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.14373883200944937;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.11158581592814866;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 5,27e-09, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.08771890601691963;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.06969039872316497;  // std dev = 3,078, 57,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=45 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
Results
   AUC ROC   = 0.884615
   AUC PR    = 0.8125
   CLL	      = -0.331495
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total learning time: 2.408 seconds
Total inference time: 0.523 seconds
AUC ROC: 0.884615


Best model AUC ROC so far: 0.884615


******************************************
Best model found
******************************************
Total revision time: 5.8420000000000005
Best validation AUC ROC: 0.884615


Results
   AUC ROC   = 0.894659
   AUC PR    = 0.82598
   CLL	      = -0.318872
   Precision = 0.82598 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.904698


Total inference time: 0.926 seconds
AUC ROC: 0.894659
Dataset: cora->imdb, Fold: 4, Type: transfer, Time: 00:53:14
{'AUC ROC': 0.894659, 'AUC PR': 0.82598, 'CLL': -0.318872, 'Precision': [0.82598, 0.5], 'Recall': 1.0, 'F1': 0.904698, 'Learning time': 5.8420000000000005, 'Inference time': 0.926, 'Mapping results': {'Knowledge compiling time': 0.7562808990478516, 'Generating paths time': 6.0005810260772705, 'Generating mappings time': 0.09343934059143066, 'Possible mappings': 126, 'Finding best mapping': 0.04112958908081055, 'Total time': 6.891439437866211}, 'Parameter Learning results': {'AUC ROC': 0.894659, 'AUC PR': 0.82598, 'CLL': -0.318872, 'Precision': [0.82598, 0.5], 'Recall': 1.0, 'F1': 0.904698, 'Learning time': 2.343, 'Inference time': 0.856}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8295775065280829;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.1418510649004877;  // std dev = 4,21e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6966322731191457;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.1254446385283913;  // std dev = 2,98e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5394517322900432;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.11231637819360639;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4054010674051154;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.10159632948783635;  // std dev = 7,45e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.3096875237807659;  // std dev = 0,167, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.09269127618926105;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.26844790492761644;  // std dev = 0,051, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.2135992066784919;  // std dev = 0,574, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21910550787549699;  // std dev = 0,044, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.19253870399952272;  // std dev = 0,548, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1839306619392597;  // std dev = 0,039, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.17469533646557917;  // std dev = 0,520, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15791380784201497;  // std dev = 0,034, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.15934417351799451;  // std dev = 0,491, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1380337676083142;  // std dev = 0,031, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.1459952012707622;  // std dev = 0,463, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098904
   Precision = 0.982507 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.991176


Total learning time: 3.411 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0


Dataset: cora->imdb, Fold: 4, Type: scratch, Time: 00:53:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.098904, 'Precision': [0.982507, 0.5], 'Recall': 1.0, 'F1': 0.991176, 'Learning time': 3.411, 'Inference time': 0.966}


Best mapping found: ['samevenue(A,B) -> workedunder(A,B)', 'haswordvenue(A,B) -> movie(B,A)', 'haswordauthor(A,B) -> movie(B,A)', 'venue(A,B) -> genre(B,A)', 'author(A,B) -> genre(B,A)'] 

Tranferred structured tree: [['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [6.5e-08, 64, 0], 'false,true,false,true': [5.58e-08, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.4e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.371, 339, 1721], 'true,false': [0.408, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.36e-08, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.83e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)', 'false,true,false': 'movie(I, B), movie(I, J)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [2.11e-08, 64, 0], 'false,true,false,true': [0.0, 53, 0], 'false,true,false,false': [0.208, 1645, 78], 'false,false': [1.07e-07, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)', 'false,true': 'movie(G, A), movie(G, H)'}, {'true,true': [0.369, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true,true': [0.0, 64, 0], 'false,true,false': [0.205, 1698, 78], 'false,false': [2.58e-08, 312, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'true,true': 'genre(F, D), genre(F, E)', 'false': 'genre(A, G), genre(B, H)', 'false,true': 'genre(I, G), genre(I, H)'}, {'true,true,true': [0.357, 286, 1627], 'true,true,false': [0.399, 282, 1142], 'true,false': [0.201, 1762, 78], 'false,true,true': [0.48, 53, 94], 'false,true,false': [0.483, 45, 76], 'false,false': [9.19e-08, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [0.0, 312, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'true': 'genre(E, C), genre(E, D)', 'false': 'movie(F, A), movie(F, B)'}, {'true,true': [0.368, 339, 1721], 'true,false': [0.407, 327, 1218], 'false,true': [0.201, 1762, 78], 'false,false': [1.28e-07, 312, 0]}]] 

Transferred target predicate: workedunder 

******************************************
Performing Parameter Learning
******************************************
Refine
['0;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '0;true;genre(E, C), genre(E, D).;false;false', '0;false;movie(F, A), movie(F, B).;true;false', '0;false,true;movie(G, A), movie(G, H).;false;true', '0;false,true,false;movie(I, B), movie(I, J).;false;false', '1;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '1;true;genre(E, C), genre(E, D).;false;false', '1;false;movie(F, A), movie(F, B).;true;false', '1;false,true;movie(G, A), movie(G, H).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '2;true;genre(A, D), genre(B, E).;true;false', '2;true,true;genre(F, D), genre(F, E).;false;false', '2;false;genre(A, G), genre(B, H).;true;false', '2;false,true;genre(I, G), genre(I, H).;false;false', '3;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '3;true;genre(E, C), genre(E, D).;false;false', '3;false;movie(F, A), movie(F, B).;true;false', '3;false,true;movie(G, A), movie(G, H).;false;false', '4;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '4;true;genre(E, C), genre(E, D).;false;false', '4;false;movie(F, A), movie(F, B).;false;false', '5;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '5;true;genre(E, C), genre(E, D).;false;false', '5;false;movie(F, A), movie(F, B).;true;false', '5;false,true;movie(G, A), movie(G, H).;false;true', '5;false,true,false;movie(I, B), movie(I, J).;false;false', '6;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '6;true;genre(E, C), genre(E, D).;false;false', '6;false;movie(F, A), movie(F, B).;true;false', '6;false,true;movie(G, A), movie(G, H).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true', '7;true;genre(A, D), genre(B, E).;true;false', '7;true,true;genre(F, D), genre(F, E).;false;false', '7;false;genre(A, G), genre(B, H).;true;false', '7;false,true;genre(I, G), genre(I, H).;false;false', '8;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '8;true;genre(E, C), genre(E, D).;false;false', '8;false;movie(F, A), movie(F, B).;false;false', '9;;workedunder(A, B) :- genre(A, C), genre(B, D).;true;true', '9;true;genre(E, C), genre(E, D).;false;false', '9;false;movie(F, A), movie(F, B).;false;false']
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.6914822684328457;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 3,65e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.5851860008555362;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839133;  // std dev = 1,83e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.4612598391067561;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.3488463256948414;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783635;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.26212705508354156;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.19945264276423463;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then if ( movie(F, A), movie(F, G) )
%   | | then return 0.15451336627983223;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.12179491558002803;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else if ( genre(A, F), genre(B, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.09745354768081677;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A), movie(E, B) )
%   | then return 0.07895233872555114;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
Results
   AUC ROC   = 0.884615
   AUC PR    = 0.8125
   CLL	      = -0.324432
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total learning time: 2.02 seconds
Total inference time: 0.533 seconds
AUC ROC: 0.884615


Results in test set
   AUC ROC   = 0.884615
   AUC PR    = 0.8125
   CLL	      = -0.324432
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total inference time: 0.533 seconds
AUC ROC: 0.884615
Structure after Parameter Learning
[['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.739, 9, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [3.65e-08, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.739, 9, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [1.83e-08, 36, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.739, 9, 45], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.739, 9, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [2.739, 9, 45], 'false,false': [0.0, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.739, 9, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [2.24e-08, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)', 'false,true': 'movie(F, A), movie(F, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.739, 9, 45], 'false,true,false': [0.0, 0, 0], 'false,false': [5.27e-09, 36, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D), genre(B, E)', 'false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.739, 9, 45], 'false,true': [0.0, 0, 0], 'false,false': [9.13e-09, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [2.739, 9, 45], 'false,false': [0.0, 36, 0]}], ['workedunder(A, B)', {'': 'genre(A, C), genre(B, D)', 'false': 'movie(E, A), movie(E, B)'}, {'true': [0.0, 0, 0], 'false,true': [2.739, 9, 45], 'false,false': [0.0, 36, 0]}]]
******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
['2;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '2;false;genre(A, F), genre(B, G).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;true', '7;false;genre(A, F), genre(B, G).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8333333333333334)]
Tree #2: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8333333333333334)]
Tree #3: [('true,true', 0), ('false,true', 0), ('true,false', 0.8333333333333334)]
Tree #4: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8333333333333334)]
Tree #5: [('true', 0), ('false,true', 0.8333333333333334)]
Tree #6: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8333333333333334)]
Tree #7: [('true', 0), ('false,true,false', 0), ('false,true,true', 0.8333333333333334)]
Tree #8: [('true,true', 0), ('false,true', 0), ('true,false', 0.8333333333333334)]
Tree #9: [('true', 0), ('false,true', 0.8333333333333334)]
Tree #10: [('true', 0), ('false,true', 0.8333333333333334)]


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1418510649004877;  // std dev = 4,34e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283913;  // std dev = 3,49e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4440859675896353;  // std dev = 1,829, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4447988520039282;  // std dev = 1,39e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.44479885200392827;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.1647626839467276;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.1647626839467276;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.10159632948783633;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3392793852013425;  // std dev = 1,24e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.3392793852013425;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then return -0.09269127618926101;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.14332149068065758;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926101;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.14332149068065758;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.26780523845758514;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( actor(B), movie(D, A), movie(D, B) )
%   | then return -0.1266074329627073;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else if ( actor(B) )
%   | | | | then return -0.08518475138839687;  // std dev = 1,61e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21864301681019252;  // std dev = 5,89e-09, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.21864301681019252;  // std dev = 5,89e-09, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07877675473109179;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.11325642590314075;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then if ( actor(B) )
%   | | | | then return -0.07877675473109179;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.07877675473109177;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.11325642590314075;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1359270106432662;  // std dev = 0,783, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else if ( genre(A, D), genre(B, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1640823293559173;  // std dev = 6,18e-09, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.1640823293559173;  // std dev = 5,89e-09, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.11555325888292106;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then if ( actor(B) )
%   | | | | then return -0.06842697784420272;  // std dev = 9,31e-10, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.11555325888292108;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14279780478548787;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.14279780478548787;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B), movie(D, A), movie(D, B) )
%   | | then return -0.10425798236511406;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then if ( female(A) )
%   | | | | then return -0.06419184008202619;  // std dev = 1,61e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102934
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.423 seconds
Total inference time: 0.571 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


Refining iteration 2
********************************
Candidate for revision
['0;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;false', '1;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;false', '2;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;false', '3;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '3;true;female(A).;false;false', '3;false;female(B).;false;true', '3;false,false;female(A), movie(D, B), movie(D, A).;false;true', '3;false,false,false;female(A).;false;true', '3;false,false,false,false;movie(E, A), movie(E, B).;false;false', '4;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '4;true;female(A).;false;false', '4;false;female(B).;false;true', '4;false,false;female(A), movie(D, B), movie(D, A).;false;true', '4;false,false,false;female(A).;false;true', '4;false,false,false,false;movie(E, A), movie(E, B).;false;false', '5;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;false;true', '5;false;actor(B), movie(D, A), movie(D, B).;false;true', '5;false,false;female(A).;true;true', '5;false,false,true;female(B).;false;true', '5;false,false,true,false;actor(B).;false;false', '5;false,false,false;female(B).;false;false', '6;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '6;true;female(A).;false;false', '6;false;female(B).;true;true', '6;false,true;female(A).;false;false', '6;false,false;female(A), movie(D, B), movie(D, A).;false;true', '6;false,false,false;female(A).;true;true', '6;false,false,false,true;actor(B).;false;false', '6;false,false,false,false;movie(E, A), movie(E, B).;false;false', '7;;workedunder(A, B) :- movie(C, A), movie(C, B).;false;false', '8;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '8;true;female(A).;false;false', '8;false;female(B).;true;true', '8;false,true;female(A).;false;false', '8;false,false;female(A), movie(D, B), movie(D, A).;false;true', '8;false,false,false;female(A).;true;true', '8;false,false,false,true;actor(B).;false;false', '8;false,false,false,false;movie(E, A), movie(E, B).;false;false', '9;;workedunder(A, B) :- director(B), movie(C, A), movie(C, B).;true;true', '9;true;female(A).;false;false', '9;false;female(B).;true;true', '9;false,true;female(A).;false;false', '9;false,false;actor(B), movie(D, A), movie(D, B).;false;true', '9;false,false,false;actor(B).;true;false', '9;false,false,false,true;female(A).;false;false']
Refining candidate
***************************
Revision points found
Tree #1: []
Tree #2: []
Tree #3: [('false,true', 0), ('true', 0.8333333333333334)]
Tree #4: []
Tree #5: []
Tree #6: []
Tree #7: []
Tree #8: [('false,true', 0), ('true', 0.8333333333333334)]
Tree #9: []
Tree #10: []


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1418510649004877;  // std dev = 4,34e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283913;  // std dev = 3,49e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4440859675896353;  // std dev = 1,829, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4447988520039282;  // std dev = 6,66e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.44479885200392827;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.1647626839467276;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.1647626839467276;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.10159632948783633;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3392793852013425;  // std dev = 5,96e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.3392793852013425;  // std dev = 5,58e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then return -0.09269127618926101;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.14332149068065758;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926101;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.14332149068065758;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.26780523845758514;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( actor(B), movie(D, A), movie(D, B) )
%   | then return -0.1266074329627073;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else if ( actor(B) )
%   | | | | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21864301681019252;  // std dev = 2,98e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.21864301681019252;  // std dev = 2,58e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07877675473109179;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.11325642590314075;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then if ( actor(B) )
%   | | | | then return -0.07877675473109179;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.07877675473109177;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.11325642590314075;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1359270106432662;  // std dev = 0,783, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   else return -0.07324622576333704;  // std dev = 9,13e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1640823293559173;  // std dev = 2,79e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.1640823293559173;  // std dev = 2,79e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A), movie(D, B), movie(D, A) )
%   | | then return -0.11555325888292106;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then if ( actor(B) )
%   | | | | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( movie(E, A), movie(E, B) )
%   | | | | then return -0.11555325888292108;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14279780478548787;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.14279780478548787;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B), movie(D, A), movie(D, B) )
%   | | then return -0.10425798236511406;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then if ( female(A) )
%   | | | | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102934
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.01 seconds
Total inference time: 0.515 seconds
AUC ROC: 1.0


Best model AUC ROC so far: 1.0


******************************************
Best model found
******************************************
Total revision time: 9.072
Best validation AUC ROC: 1.0


Results
   AUC ROC   = 0.989614
   AUC PR    = 0.979651
   CLL	      = -0.124812
   Precision = 0.979651 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989721


Total inference time: 0.877 seconds
AUC ROC: 0.989614
Dataset: cora->imdb, Fold: 5, Type: transfer, Time: 00:53:39
{'AUC ROC': 0.989614, 'AUC PR': 0.979651, 'CLL': -0.124812, 'Precision': [0.979651, 0.5], 'Recall': 1.0, 'F1': 0.989721, 'Learning time': 9.072, 'Inference time': 0.877, 'Mapping results': {'Knowledge compiling time': 0.780357837677002, 'Generating paths time': 6.136814594268799, 'Generating mappings time': 0.09701919555664062, 'Possible mappings': 126, 'Finding best mapping': 0.041086673736572266, 'Total time': 7.055290699005127}, 'Parameter Learning results': {'AUC ROC': 0.890208, 'AUC PR': 0.819951, 'CLL': -0.317668, 'Precision': [0.819951, 0.5], 'Recall': 1.0, 'F1': 0.90107, 'Learning time': 2.02, 'Inference time': 0.866}}


Start learning from scratch in target domain


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1418510649004877;  // std dev = 4,34e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283913;  // std dev = 3,49e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360636;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783631;  // std dev = 1,83e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.0851847513883968;  // std dev = 2,11e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07877675473109179;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 1,18e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420272;  // std dev = 5,27e-09, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), movie(C, A), movie(C, B) )
%   then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202623;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
Results
   AUC ROC   = 0.989614
   AUC PR    = 0.979651
   CLL	      = -0.11608
   Precision = 0.979651 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989721


Total learning time: 1.655 seconds
Total inference time: 0.821 seconds
AUC ROC: 0.989614


Dataset: cora->imdb, Fold: 5, Type: scratch, Time: 00:53:41
{'AUC ROC': 0.989614, 'AUC PR': 0.979651, 'CLL': -0.11608, 'Precision': [0.979651, 0.5], 'Recall': 1.0, 'F1': 0.989721, 'Learning time': 1.655, 'Inference time': 0.821}
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
Error in experiment of yeast->twitter
