% Running on host: rodrigo-ubuntu

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[nell_non_pre_computed/train/train_pos.txt, nell_non_pre_computed/train/train_neg.txt, nell_non_pre_computed/train/train_bk.txt, nell_non_pre_computed/train/train_facts.txt]
%  for N=0: args[N]=nell_non_pre_computed/train/train_pos.txt

% getInputArgWithDefaultValue: args=[nell_non_pre_computed/train/train_pos.txt, nell_non_pre_computed/train/train_neg.txt, nell_non_pre_computed/train/train_bk.txt, nell_non_pre_computed/train/train_facts.txt]
%  for N=1: args[N]=nell_non_pre_computed/train/train_neg.txt

% getInputArgWithDefaultValue: args=[nell_non_pre_computed/train/train_pos.txt, nell_non_pre_computed/train/train_neg.txt, nell_non_pre_computed/train/train_bk.txt, nell_non_pre_computed/train/train_facts.txt]
%  for N=2: args[N]=nell_non_pre_computed/train/train_bk.txt

% getInputArgWithDefaultValue: args=[nell_non_pre_computed/train/train_pos.txt, nell_non_pre_computed/train/train_neg.txt, nell_non_pre_computed/train/train_bk.txt, nell_non_pre_computed/train/train_facts.txt]
%  for N=3: args[N]=nell_non_pre_computed/train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 7.964 facts.
% Have read 517 examples from 'nell_non_pre_computed/train' [nell_non_pre_computed/train/train*].
% Have read 518 examples from 'nell_non_pre_computed/train' [nell_non_pre_computed/train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 athleteplaysforteam(D, E)
%  targetPred:                athleteplaysforteam/2
%  targetArgTypes:            signature = [const, const], types = [+athlete, +sportsteam]
%  targets:                   [athleteplaysforteam(D, E)]
%  targetPredicates:          [athleteplaysforteam/2]
%  targetArgSpecs:            [[D[+athlete], E[+sportsteam]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant 'cleveland_indians' is already marked as being of types = [athlete];
%          type = 'sportsteam' may be added if not already known.
%  PredicateName = 'teamalsoknownas', from 'teamalsoknownas(colorado_rockies, cleveland_indians)',
%  which has types = [signature = [const, const], types = [+sportsteam, +sportsteam], signature = [const, const], types = [+sportsteam, -sportsteam], signature = [const, const], types = [-sportsteam, +sportsteam]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant 'ncaa' is already marked as being of types = [sportsleague];
%          type = 'sportsteam' may be added if not already known.
%  PredicateName = 'teamplaysinleague', from 'teamplaysinleague(ncaa, ncaa)',
%  which has types = [signature = [const, const], types = [+sportsteam, +sportsleague], signature = [const, const], types = [+sportsteam, -sportsleague], signature = [const, const], types = [-sportsteam, +sportsleague]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 115 milliseconds
% Time to collect examples: 0 seconds

% Read 517 pos examples and 518 neg examples.
% Time to init learnOneClause: 124 milliseconds
% Old dirnull
Setting model dir

% Have 517 'raw' positive examples and kept 517.
% Have 518 'raw' negative examples and kept 518.

% processing backup's for athleteplaysforteam
%  POS EX = 517
%  NEG EX = 518

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
nell_non_pre_computed/train/models/
File: nell_non_pre_computed/train/advice.txt doesnt exist.Hence no advice loaded
% Learning 1 trees in this iteration for athleteplaysforteam

% Learn model for: athleteplaysforteam
% Kept 517 of the 517 positive examples.
% Kept 518 of the 518 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2499997666223249
Set score:0.0025
% Dataset size: 1.035
Computing probabilities
prob time:2 milliseconds
No hidden examples for : athleteplaysforteam
Time to build dataset: 5 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2499997666223166
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 168 209 241 421 525 845 980 996
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (3):
%    athleteplaysforteam(+athlete, +sportsteam),
%    athleteplaysforteam(+athlete, -sportsteam),
%    athleteplaysforteam(-athlete, +sportsteam)
%  Modes (58):
%    male(+name),
%    athleteledsportsteam(+athlete, +sportsteam),
%    athleteledsportsteam(-athlete, +sportsteam),
%    athleteledsportsteam(+athlete, -sportsteam),
%    athleteplaysinleague(+athlete, +sportsleague),
%    athleteplaysinleague(+athlete, -sportsleague),
%    athleteplaysinleague(-athlete, +sportsleague),
%    athleteplayssport(+athlete, +sport),
%    athleteplayssport(+athlete, -sport),
%    athleteplayssport(-athlete, +sport),
%    teamalsoknownas(+sportsteam, +sportsteam),
%    teamalsoknownas(+sportsteam, -sportsteam),
%    teamalsoknownas(-sportsteam, +sportsteam),
%    teamplaysagainstteam(+sportsteam, +sportsteam),
%    teamplaysagainstteam(+sportsteam, -sportsteam),
%    teamplaysagainstteam(-sportsteam, +sportsteam),
%    teamplaysinleague(+sportsteam, +sportsleague),
%    teamplaysinleague(+sportsteam, -sportsleague),
%    teamplaysinleague(-sportsteam, +sportsleague),
%    teamplayssport(+sportsteam, +sport),
%    teamplayssport(+sportsteam, -sport),
%    teamplayssport(-sportsteam, +sport),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = athleteplaysforteam(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]
% Most-general root: athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for athleteledsportsteam/2 with 246 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteledsportsteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteledsportsteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplaysinleague/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplayssport/2.
% [ LazyGroundClauseIndex ]  Building full index for teamalsoknownas/2 with 273 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamalsoknownas/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamalsoknownas/2.
% [ LazyGroundClauseIndex ]  Building full index for teamplaysagainstteam/2 with 2.780 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysinleague/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplayssport/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 6 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -250,038825 (regressionFit = 250,038824, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 605,0/1.035,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -250,038825): athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 605,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,749679 (regressionFit = 258,749678, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 258,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,486958 (regressionFit = 258,486956, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplaysinleague(A, _).  [covers 502,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,070700 (regressionFit = 258,070698, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplayssport(A, _).  [covers 490,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -242,401475 (regressionFit = 242,401474, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -242,401475): athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -251,310873 (regressionFit = 251,310872, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(_, A).  [covers 323,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -254,821889 (regressionFit = 254,821887, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(A, _).  [covers 970,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -252,698339 (regressionFit = 252,698337, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 988,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -255,948871 (regressionFit = 255,948870, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysinleague(A, _).  [covers 954,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -252,071485 (regressionFit = 252,071484, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 936,0/1.035,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
Comparing variance: 0.22636000680077026 to score=0.0025 #egs=413.0
Comparing variance: 0.239412847261714 to score=0.0025 #egs=622.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 413,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,226360)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,226360) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 622,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,239413)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,239413) into position #1 in the search queue (new size=2).

% Time for loop #1: 199 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
% This clause covers 413 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 79 108 126 204 267 362 377 418 442 500
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = athleteplaysforteam(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]
% Most-general root: athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 6 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -136,275978 (regressionFit = 136,275976, penalties=1.0200000000000002E-6) for clause:  athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -136,275978): athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]
%     Score = -145,476776 (regressionFit = 145,476775, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 317,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,747187 (regressionFit = 148,747186, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 160,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,775399 (regressionFit = 148,775398, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplaysinleague(A, _).  [covers 293,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,910528 (regressionFit = 148,910526, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplayssport(A, _).  [covers 280,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,903396 (regressionFit = 148,903395, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(_, A).  [covers 56,0/622,0 pos, 0,0/0,0 neg]
%     Score = -147,344806 (regressionFit = 147,344804, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(A, _).  [covers 570,0/622,0 pos, 0,0/0,0 neg]
%     Score = -145,695660 (regressionFit = 145,695659, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 578,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,289309 (regressionFit = 148,289308, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysinleague(A, _).  [covers 548,0/622,0 pos, 0,0/0,0 neg]
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,239.
% Will extend: athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]
Comparing variance: 0.027006172839507927 to score=0.0025 #egs=36.0
Comparing variance: 0.23089377861128535 to score=0.0025 #egs=586.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 36,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,027006)
%         ILP node to extend: athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,027006) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 586,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,230894)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,230894) into position #1 in the search queue (new size=3).

% Time for loop #2: 87 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      athleteplaysforteam(A, B) :- athleteledsportsteam(A, B).  [covers 36,0/622,0 pos, 0,0/0,0 neg]
% This clause covers 36 positive examples, of which 36 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 81 133 181 218 260 263 286 329 343 356
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = athleteplaysforteam(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  athleteplaysforteam(_, _).  [covers 586,0/586,0 pos, 0,0/0,0 neg]
% Most-general root: athleteplaysforteam(_, _).  [covers 586,0/586,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'athleteplaysforteam(_, _).  [covers 586,0/586,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 6 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -134,262366 (regressionFit = 134,262365, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 281,0/586,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -134,262366): athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 281,0/586,0 pos, 0,0/0,0 neg]
%     Score = -133,864929 (regressionFit = 133,864928, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 124,0/586,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -133,864929): athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 124,0/586,0 pos, 0,0/0,0 neg]
%     Score = -135,286277 (regressionFit = 135,286276, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplaysinleague(A, _).  [covers 267,0/586,0 pos, 0,0/0,0 neg]
%     Score = -135,194187 (regressionFit = 135,194186, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplayssport(A, _).  [covers 257,0/586,0 pos, 0,0/0,0 neg]
%     Score = -134,324403 (regressionFit = 134,324402, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(A, _).  [covers 534,0/586,0 pos, 0,0/0,0 neg]
%     Score = -132,886616 (regressionFit = 132,886615, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 542,0/586,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -132,886616): athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 542,0/586,0 pos, 0,0/0,0 neg]
%     Score = -134,785616 (regressionFit = 134,785615, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysinleague(A, _).  [covers 515,0/586,0 pos, 0,0/0,0 neg]
%     Score = -132,543606 (regressionFit = 132,543604, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -132,543606): athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,231.
% Will extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]
Comparing variance: 0.23719644280161484 to score=0.0025 #egs=517.0
Comparing variance: 0.14366729678638887 to score=0.0025 #egs=69.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 517,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,237196)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,237196) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 69,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,143667)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,143667) into position #3 in the search queue (new size=4).

% Time for loop #3: 48 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/586,0 pos, 0,0/0,0 neg]
% This clause covers 517 positive examples, of which 517 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/517,0 pos, 0,0/0,0 neg]'
%     Score = -132,543606 (regressionFit = 132,543604, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/517,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 67 84 180 276 362 405 453 473
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/517,0 pos, 0,0/0,0 neg]' score=-132.5436056366957
% [ LazyGroundClauseIndex ]  Building full index for athleteplayssport/2 with 1.899 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplayssport/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplayssport/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -122,328871 (regressionFit = 122,328868, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 276,0/517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -122,328871): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 276,0/517,0 pos, 0,0/0,0 neg]
%     Score = -121,429036 (regressionFit = 121,429034, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -121,429036): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,617046 (regressionFit = 122,617043, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 237,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,622042 (regressionFit = 122,622040, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 225,0/517,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 517,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,630312 (regressionFit = 122,630310, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamalsoknownas(_, A).  [covers 54,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,494360 (regressionFit = 122,494358, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 486,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,027293 (regressionFit = 122,027290, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 513,0/517,0 pos, 0,0/0,0 neg]
%     Score = -122,317697 (regressionFit = 122,317695, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 463,0/517,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 517,0/517,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,237.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]
Comparing variance: 0.20738995034088173 to score=0.0025 #egs=109.0
Comparing variance: 0.24221453287197606 to score=0.0025 #egs=408.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 109,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,207390)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,207390) into position #2 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 408,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,242215)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/517,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,242215) into position #1 in the search queue (new size=5).

% Time for loop #4: 128 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 109,0/517,0 pos, 0,0/0,0 neg]
% This clause covers 109 positive examples, of which 109 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 517,0/408,0 pos, 0,0/0,0 neg]'
%     Score = -132,543606 (regressionFit = 132,543604, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 408,0/408,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 1 7 25 37 130 172 259 303 307 308
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 408,0/408,0 pos, 0,0/0,0 neg]' score=-132.5436056366957
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -98,802268 (regressionFit = 98,802265, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 215,0/408,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -98,802268): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 215,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,601930 (regressionFit = 98,601927, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 142,0/408,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -98,601930): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 142,0/408,0 pos, 0,0/0,0 neg]
%     Score = -90,689263 (regressionFit = 90,689261, penalties=2.0300000000000005E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -90,689263): athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,823494 (regressionFit = 98,823492, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 141,0/408,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 408,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,779516 (regressionFit = 98,779513, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamalsoknownas(_, A).  [covers 47,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,683653 (regressionFit = 98,683650, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 379,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,311113 (regressionFit = 98,311111, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 405,0/408,0 pos, 0,0/0,0 neg]
%     Score = -98,703359 (regressionFit = 98,703356, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 369,0/408,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 408,0/408,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,242.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]
Comparing variance: 0.18311533888228354 to score=0.0025 #egs=58.0
Comparing variance: 0.22876734693877832 to score=0.0025 #egs=350.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 58,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,183115)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,183115) into position #3 in the search queue (new size=5).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 350,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,228767)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 408,0/408,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,228767) into position #1 in the search queue (new size=6).

% Time for loop #5: 89 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 58,0/408,0 pos, 0,0/0,0 neg]
% This clause covers 58 positive examples, of which 58 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 408,0/350,0 pos, 0,0/0,0 neg]'
%     Score = -132,543606 (regressionFit = 132,543604, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 350,0/350,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 86 100 131 142 177 219 220 334
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 350,0/350,0 pos, 0,0/0,0 neg]' score=-132.5436056366957
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -79,518424 (regressionFit = 79,518422, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 172,0/350,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -79,518424): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 172,0/350,0 pos, 0,0/0,0 neg]
%     Score = -78,790079 (regressionFit = 78,790076, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 88,0/350,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -78,790079): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 88,0/350,0 pos, 0,0/0,0 neg]
%     Score = -76,320204 (regressionFit = 76,320202, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -76,320204): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 350,0/350,0 pos, 0,0/0,0 neg]
%     Score = -78,216983 (regressionFit = 78,216981, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamalsoknownas(_, A).  [covers 32,0/350,0 pos, 0,0/0,0 neg]
%     Score = -80,055730 (regressionFit = 80,055728, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 323,0/350,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 348,0/350,0 pos, 0,0/0,0 neg]
%     Score = -80,068506 (regressionFit = 80,068503, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 316,0/350,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 350,0/350,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,229.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]
Comparing variance: 0.14022354478153523 to score=0.0025 #egs=83.0
Comparing variance: 0.24225336307144443 to score=0.0025 #egs=267.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,140224)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,140224) into position #5 in the search queue (new size=6).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 267,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,242253)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 350,0/350,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,242253) into position #1 in the search queue (new size=7).

% Time for loop #6: 48 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 83,0/350,0 pos, 0,0/0,0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 350,0/267,0 pos, 0,0/0,0 neg]'
%     Score = -132,543606 (regressionFit = 132,543604, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 267,0/267,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 48 107 112 141 155 181 189 212 218 228
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 267,0/267,0 pos, 0,0/0,0 neg]' score=-132.5436056366957
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -64,401127 (regressionFit = 64,401125, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -64,401127): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 267,0/267,0 pos, 0,0/0,0 neg]
%     Score = -64,645578 (regressionFit = 64,645576, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 243,0/267,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 265,0/267,0 pos, 0,0/0,0 neg]
%     Score = -64,638221 (regressionFit = 64,638219, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 245,0/267,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 267,0/267,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,242.
% Will extend: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 36 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 127,0/267,0 pos, 0,0/0,0 neg]
% This clause covers 127 positive examples, of which 127 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/413,0 pos, 0,0/0,0 neg]'
%     Score = -242,401475 (regressionFit = 242,401474, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/413,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 101 105 129 154 175 211 225 281 305 327
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #8, bodyLen=1] 'athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/413,0 pos, 0,0/0,0 neg]' score=-242.40147503550423
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 18 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -91,911113 (regressionFit = 91,911111, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 288,0/413,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -91,911113): athleteplaysforteam(_, A) :- teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 288,0/413,0 pos, 0,0/0,0 neg]
%     Score = -92,508229 (regressionFit = 92,508227, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), athleteledsportsteam(_, B).  [covers 345,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,360773 (regressionFit = 93,360771, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamalsoknownas(B, _), athleteledsportsteam(A, _).  [covers 98,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,468620 (regressionFit = 93,468618, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamalsoknownas(B, _), athleteplaysinleague(A, _).  [covers 209,0/413,0 pos, 0,0/0,0 neg]
%     Score = -92,751398 (regressionFit = 92,751396, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamalsoknownas(B, _), athleteplayssport(A, _).  [covers 210,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,297146 (regressionFit = 93,297144, penalties=2.0300000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 186,0/413,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 413,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,467418 (regressionFit = 93,467416, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 341,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,277079 (regressionFit = 93,277077, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 267,0/413,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 413,0/413,0 pos, 0,0/0,0 neg]
%     Score = -88,673477 (regressionFit = 88,673474, penalties=2.1300000000000004E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -88,673477): athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]
%     Score = -88,931136 (regressionFit = 88,931134, penalties=2.1300000000000004E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(B, A).  [covers 388,0/413,0 pos, 0,0/0,0 neg]
%     Score = -92,514425 (regressionFit = 92,514423, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 400,0/413,0 pos, 0,0/0,0 neg]
%     Score = -91,471947 (regressionFit = 91,471945, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 401,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,176425 (regressionFit = 93,176423, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 410,0/413,0 pos, 0,0/0,0 neg]
%     Score = -91,471947 (regressionFit = 91,471945, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(_, B).  [covers 401,0/413,0 pos, 0,0/0,0 neg]
%     Score = -93,125618 (regressionFit = 93,125616, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 406,0/413,0 pos, 0,0/0,0 neg]
%     Score = -91,471947 (regressionFit = 91,471945, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 401,0/413,0 pos, 0,0/0,0 neg]
%     Score = -91,914972 (regressionFit = 91,914970, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _), teamplayssport(A, _).  [covers 383,0/413,0 pos, 0,0/0,0 neg]
%     Score = -91,471947 (regressionFit = 91,471945, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplayssport(B, _).  [covers 401,0/413,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,226.
% Will extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]
Comparing variance: 0.21576043152086666 to score=0.0025 #egs=381.0
Comparing variance: 0.2021484375000001 to score=0.0025 #egs=32.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 381,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,215760)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,215760) into position #1 in the search queue (new size=6).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 32,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,202148)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/413,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,202148) into position #3 in the search queue (new size=7).

% Time for loop #8: 59 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      athleteplaysforteam(_, A) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 381,0/413,0 pos, 0,0/0,0 neg]
% This clause covers 381 positive examples, of which 381 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (athleteplaysforteam(D, E) :- teamplaysagainstteam(E, Anon1109))
Created a leaf under (athleteplaysforteam(D, E) :- athleteledsportsteam(D, Anon1685))
Created a leaf under (athleteplaysforteam(D, E) :- teamplaysagainstteam(E, Anon1109))
Created a leaf under (athleteplaysforteam(D, E) :- athleteplayssport(D, Anon1511))
Created a leaf under (athleteplaysforteam(D, E) :- teamplayssport(E, Anon1511))
Created a leaf under (athleteplaysforteam(D, E) :- athleteplayssport(D, Anon2219))
Created a leaf under (athleteplaysforteam(D, E) :- athleteledsportsteam(D, E))

%%%%%  WILL-Produced Tree #1 @ 23:44:37 4/24/18.  [Using 6.877.720 memory cells.]  %%%%%


% FOR athleteplaysforteam(A, B):
%   if ( teamalsoknownas(B, C) )
%   then if ( teamplaysagainstteam(B, C) )
%   | then return 0.5431883051782483;  // std dev = 0,465, 381,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=261 */
%   | else return 0.13939893509951237;  // std dev = 0,450, 32,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   else if ( athleteledsportsteam(A, B) )
%   | then return 0.8303711573217337;  // std dev = 0,164, 36,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( teamplayssport(B, D) )
%   | | then if ( athleteledsportsteam(A, E) )
%   | | | then return 0.15172691675088706;  // std dev = 0,455, 109,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=32 */
%   | | | else if ( athleteplayssport(A, D) )
%   | | | | then return 0.6167696247546849;  // std dev = 0,428, 58,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=44 */
%   | | | | else if ( athleteplayssport(A, F) )
%   | | | | | then return 0.0268236338946931;  // std dev = 0,374, 83,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=14 */
%   | | | | | else if ( athleteledsportsteam(G, B) )
%   | | | | | | then return 0.2361016910050248;  // std dev = 5,464, 127,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=48 */
%   | | | | | | else return 0.30100607795665635;  // std dev = 5,877, 140,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=62 */
%   | | else return 0.032061978577773244;  // std dev = 0,379, 69,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=12 */


% Clauses:

athleteplaysforteam(A, B, 0.5431883051782483) :- 
     teamalsoknownas(B, C), 
     teamplaysagainstteam(B, C), 
     !. // Clause #1.

athleteplaysforteam(A, B, 0.13939893509951237) :- 
     teamalsoknownas(B, C), 
     !. // Clause #2.

athleteplaysforteam(A, B, 0.8303711573217337) :- 
     athleteledsportsteam(A, B), 
     !. // Clause #3.

athleteplaysforteam(A, B, 0.15172691675088706) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(A, D), 
     !. // Clause #4.

athleteplaysforteam(A, B, 0.6167696247546849) :- 
     teamplayssport(B, C), 
     athleteplayssport(A, C), 
     !. // Clause #5.

athleteplaysforteam(A, B, 0.0268236338946931) :- 
     teamplayssport(B, C), 
     athleteplayssport(A, D), 
     !. // Clause #6.

athleteplaysforteam(A, B, 0.2361016910050248) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(D, B), 
     !. // Clause #7.

athleteplaysforteam(A, B, 0.30100607795665635) :- 
     teamplayssport(B, C), 
     !. // Clause #8.

athleteplaysforteam(A, B, 0.032061978577773244) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_athleteplaysforteam(underscore, a, 0.5431883051782483) :-  /* #neg=120 #pos=261 */ 
   teamalsoknownas(a, uniqueVar1),
   teamplaysagainstteam(a, uniqueVar1),
   !. // Flattened version of clause #1.

flattened_athleteplaysforteam(underscore, a, 0.13939893509951237) :-  /* #neg=23 #pos=9 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #2.

flattened_athleteplaysforteam(a, b, 0.8303711573217337) :-  /* #neg=1 #pos=35 */ 
   athleteledsportsteam(a, b),
   !. // Flattened version of clause #3.

flattened_athleteplaysforteam(a, b, 0.15172691675088706) :-  /* #neg=77 #pos=32 */ 
   teamplayssport(b, underscore),
   athleteledsportsteam(a, underscore),
   !. // Flattened version of clause #4.

flattened_athleteplaysforteam(a, b, 0.6167696247546849) :-  /* #neg=14 #pos=44 */ 
   teamplayssport(b, uniqueVar2),
   athleteplayssport(a, uniqueVar2),
   !. // Flattened version of clause #5.

flattened_athleteplaysforteam(a, b, 0.0268236338946931) :-  /* #neg=69 #pos=14 */ 
   teamplayssport(b, underscore),
   athleteplayssport(a, underscore),
   !. // Flattened version of clause #6.

flattened_athleteplaysforteam(underscore, a, 0.2361016910050248) :-  /* #neg=79 #pos=48 */ 
   teamplayssport(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #7.

flattened_athleteplaysforteam(underscore, a, 0.30100607795665635) :-  /* #neg=78 #pos=62 */ 
   teamplayssport(a, underscore),
   !. // Flattened version of clause #8.

flattened_athleteplaysforteam(underscore, underscore, 0.032061978577773244) :-  /* #neg=57 #pos=12 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   teamplayssport(b, underscore)
%   teamalsoknownas(a, underscore)
%   athleteplayssport(a, underscore)
%   teamplayssport(a, underscore)
%   athleteledsportsteam(underscore, a)
%   teamalsoknownas(a, uniqueVar1)
%   athleteledsportsteam(a, underscore)
%   athleteledsportsteam(a, b)
%   teamplayssport(b, uniqueVar2)
%   athleteplayssport(a, uniqueVar2)
%   teamplaysagainstteam(a, uniqueVar1)

% Saving model in: nell_non_pre_computed/train/models/bRDNs/athleteplaysforteam.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for athleteplaysforteam.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).

logPrior(-1.8).
athleteplaysforteam(D, E, Total) :- // A general accessor. 
   athleteplaysforteam(D, E, 1000000, Total), !.
athleteplaysforteam(D, E, Total) :- waitHere("This should not fail", athleteplaysforteam(D, E, Total)).

athleteplaysforteam(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_athleteplaysforteam_tree1(D, E, TreesToUse, Total1),
   Total is LogPrior + Total1,
   !.
athleteplaysforteam(D, E, TreesToUse, Total) :- waitHere("This should not fail", athleteplaysforteam(D, E, TreesToUse, Total)).

getScore_athleteplaysforteam_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_athleteplaysforteam_tree1(D, E, TreesToUse, Total1) :- athleteplaysforteam_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(athleteplaysforteam, 11, [
   teamplayssport(b, underscore),
   teamalsoknownas(a, underscore),
   athleteplayssport(a, underscore),
   teamplayssport(a, underscore),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(a, uniqueVar1),
   athleteledsportsteam(a, underscore),
   athleteledsportsteam(a, b),
   teamplayssport(b, uniqueVar2),
   athleteplayssport(a, uniqueVar2),
   teamplaysagainstteam(a, uniqueVar1)]).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2499997666223166
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 79 89 101 128 154 203 223 245 613 718
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = athleteplaysforteam(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]
% Most-general root: athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'athleteplaysforteam(_, _).  [covers 1.035,0/1.035,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 6 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -250,038825 (regressionFit = 250,038824, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 605,0/1.035,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -250,038825): athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 605,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,749679 (regressionFit = 258,749678, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 258,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,486958 (regressionFit = 258,486956, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplaysinleague(A, _).  [covers 502,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -258,070700 (regressionFit = 258,070698, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplayssport(A, _).  [covers 490,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -242,401475 (regressionFit = 242,401474, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -242,401475): athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -251,310873 (regressionFit = 251,310872, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamalsoknownas(_, A).  [covers 323,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -254,821889 (regressionFit = 254,821887, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(A, _).  [covers 970,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -252,698339 (regressionFit = 252,698337, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 988,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -255,948871 (regressionFit = 255,948870, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysinleague(A, _).  [covers 954,0/1.035,0 pos, 0,0/0,0 neg]
%     Score = -252,071485 (regressionFit = 252,071484, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 936,0/1.035,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
Comparing variance: 0.22636000680077026 to score=0.0025 #egs=413.0
Comparing variance: 0.239412847261714 to score=0.0025 #egs=622.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 413,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,226360)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,226360) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 622,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,239413)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,239413) into position #1 in the search queue (new size=2).

% Time for loop #1: 54 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      athleteplaysforteam(_, A) :- teamalsoknownas(A, _).  [covers 413,0/1.035,0 pos, 0,0/0,0 neg]
% This clause covers 413 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 92 163 178 240 288 316 364 437 443 512
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = athleteplaysforteam(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]
% Most-general root: athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'athleteplaysforteam(_, _).  [covers 622,0/622,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 6 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -145,476776 (regressionFit = 145,476775, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 317,0/622,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -145,476776): athleteplaysforteam(_, A) :- athleteledsportsteam(_, A).  [covers 317,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,747187 (regressionFit = 148,747186, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteledsportsteam(A, _).  [covers 160,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,775399 (regressionFit = 148,775398, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplaysinleague(A, _).  [covers 293,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,910528 (regressionFit = 148,910526, penalties=1.23E-6) for clause:  athleteplaysforteam(A, _) :- athleteplayssport(A, _).  [covers 280,0/622,0 pos, 0,0/0,0 neg]
%     Score = -147,344806 (regressionFit = 147,344804, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(A, _).  [covers 570,0/622,0 pos, 0,0/0,0 neg]
%     Score = -145,695660 (regressionFit = 145,695659, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysagainstteam(_, A).  [covers 578,0/622,0 pos, 0,0/0,0 neg]
%     Score = -148,289309 (regressionFit = 148,289308, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplaysinleague(A, _).  [covers 548,0/622,0 pos, 0,0/0,0 neg]
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -145,048669): athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,239.
% Will extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]
Comparing variance: 0.24436821676275344 to score=0.0025 #egs=553.0
Comparing variance: 0.14366729678638887 to score=0.0025 #egs=69.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 553,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,244368)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,244368) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 69,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,143667)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,143667) into the LAST position (#3) in the search queue.

% Time for loop #2: 28 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/622,0 pos, 0,0/0,0 neg]
% This clause covers 553 positive examples, of which 553 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/553,0 pos, 0,0/0,0 neg]'
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/553,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 78 95 154 195 245 304 363 398 468
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/553,0 pos, 0,0/0,0 neg]' score=-145.04866857806348
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -123,602785 (regressionFit = 123,602783, penalties=2.1300000000000004E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 36,0/553,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -123,602785): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 36,0/553,0 pos, 0,0/0,0 neg]
%     Score = -133,388235 (regressionFit = 133,388233, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 312,0/553,0 pos, 0,0/0,0 neg]
%     Score = -134,864911 (regressionFit = 134,864909, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 145,0/553,0 pos, 0,0/0,0 neg]
%     Score = -134,755896 (regressionFit = 134,755894, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 263,0/553,0 pos, 0,0/0,0 neg]
%     Score = -120,229192 (regressionFit = 120,229190, penalties=2.0300000000000005E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -120,229192): athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]
%     Score = -135,040285 (regressionFit = 135,040283, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 248,0/553,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 553,0/553,0 pos, 0,0/0,0 neg]
%     Score = -134,791437 (regressionFit = 134,791435, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 522,0/553,0 pos, 0,0/0,0 neg]
%     Score = -134,408017 (regressionFit = 134,408015, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 549,0/553,0 pos, 0,0/0,0 neg]
%     Score = -134,786894 (regressionFit = 134,786892, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 496,0/553,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 553,0/553,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,244.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]
Comparing variance: 0.17586511126360244 to score=0.0025 #egs=101.0
Comparing variance: 0.22669649150286164 to score=0.0025 #egs=452.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 101,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,175865)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,175865) into position #2 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 452,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,226696)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/553,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,226696) into position #1 in the search queue (new size=4).

% Time for loop #3: 127 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, C), athleteplayssport(A, C).  [covers 101,0/553,0 pos, 0,0/0,0 neg]
% This clause covers 101 positive examples, of which 101 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 553,0/452,0 pos, 0,0/0,0 neg]'
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 452,0/452,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 100 145 154 169 263 278 305 404
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 452,0/452,0 pos, 0,0/0,0 neg]' score=-145.04866857806348
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -102,466775 (regressionFit = 102,466772, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 233,0/452,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -102,466775): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 233,0/452,0 pos, 0,0/0,0 neg]
%     Score = -101,020961 (regressionFit = 101,020959, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 168,0/452,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -101,020961): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 168,0/452,0 pos, 0,0/0,0 neg]
%     Score = -98,410128 (regressionFit = 98,410126, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -98,410128): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 452,0/452,0 pos, 0,0/0,0 neg]
%     Score = -100,880441 (regressionFit = 100,880439, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamalsoknownas(_, A).  [covers 35,0/452,0 pos, 0,0/0,0 neg]
%     Score = -102,424393 (regressionFit = 102,424391, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 423,0/452,0 pos, 0,0/0,0 neg]
%     Score = -102,102452 (regressionFit = 102,102450, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 449,0/452,0 pos, 0,0/0,0 neg]
%     Score = -102,424778 (regressionFit = 102,424776, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 402,0/452,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 452,0/452,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,227.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]
Comparing variance: 0.16641214308852906 to score=0.0025 #egs=147.0
Comparing variance: 0.24245095404461484 to score=0.0025 #egs=305.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 147,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,166412)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,166412) into position #3 in the search queue (new size=4).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 305,0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0,242451)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 452,0/452,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0,242451) into position #1 in the search queue (new size=5).

% Time for loop #4: 63 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplayssport(A, _).  [covers 147,0/452,0 pos, 0,0/0,0 neg]
% This clause covers 147 positive examples, of which 147 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 452,0/305,0 pos, 0,0/0,0 neg]'
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 305,0/305,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 5 39 45 54 57 117 146 154 176 201
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 305,0/305,0 pos, 0,0/0,0 neg]' score=-145.04866857806348
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -70,416230 (regressionFit = 70,416228, penalties=2.1300000000000004E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -70,416230): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,933551 (regressionFit = 73,933548, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 155,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,944808 (regressionFit = 73,944806, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 38,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,658674 (regressionFit = 73,658672, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 34,0/305,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 305,0/305,0 pos, 0,0/0,0 neg]
%     Score = -71,867841 (regressionFit = 71,867839, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamalsoknownas(_, A).  [covers 27,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,870717 (regressionFit = 73,870714, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 280,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,430466 (regressionFit = 73,430464, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 302,0/305,0 pos, 0,0/0,0 neg]
%     Score = -73,934891 (regressionFit = 73,934889, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 277,0/305,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 305,0/305,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]

% Expanding node at Level 4 with score = -0,242.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]
Comparing variance: 0.07100591715976314 to score=0.0025 #egs=13.0
Comparing variance: 0.23799024207168606 to score=0.0025 #egs=292.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 13,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,071006)
%         ILP node to extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,071006) into the LAST position (#5) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 292,0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0,237990)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 305,0/305,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0,237990) into position #1 in the search queue (new size=6).

% Time for loop #5: 33 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, B).  [covers 13,0/305,0 pos, 0,0/0,0 neg]
% This clause covers 13 positive examples, of which 13 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 305,0/292,0 pos, 0,0/0,0 neg]'
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 292,0/292,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 11 19 33 55 58 74 94 99 133 161
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 292,0/292,0 pos, 0,0/0,0 neg]' score=-145.04866857806348
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -69,223101 (regressionFit = 69,223099, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -69,223101): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]
%     Score = -69,475550 (regressionFit = 69,475547, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteplaysinleague(A, _).  [covers 29,0/292,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 292,0/292,0 pos, 0,0/0,0 neg]
%     Score = -69,467868 (regressionFit = 69,467865, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 267,0/292,0 pos, 0,0/0,0 neg]
%     Score = -69,031144 (regressionFit = 69,031142, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 289,0/292,0 pos, 0,0/0,0 neg]
%     Score = -69,481204 (regressionFit = 69,481202, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 265,0/292,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 292,0/292,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]

% Expanding node at Level 5 with score = -0,238.
% Will extend: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]
Comparing variance: 0.2301626661376715 to score=0.0025 #egs=142.0
Comparing variance: 0.2435999999999999 to score=0.0025 #egs=150.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 142,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,230163)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,230163) into position #1 in the search queue (new size=6).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 150,0
%      addToQueueOfTreeStructuredLearningTasks (level=6; score=-0,243600)
%         ILP node to extend: athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 292,0/292,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 6 and with score = -0,243600) into position #1 in the search queue (new size=7).

% Time for loop #6: 29 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/292,0 pos, 0,0/0,0 neg]
% This clause covers 142 positive examples, of which 142 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 292,0/150,0 pos, 0,0/0,0 neg]'
%     Score = -145,048669 (regressionFit = 145,048667, penalties=1.23E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 150,0/150,0 pos, 0,0/0,0 neg]

% Have these 9 positive seeds: 13 23 36 45 72 111 112 134 139
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'athleteplaysforteam(_, A) :- teamplayssport(A, _).  [covers 150,0/150,0 pos, 0,0/0,0 neg]' score=-145.04866857806348
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 18 bad extensions.
%     Score = -35,442859 (regressionFit = 35,442857, penalties=2.24E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -35,442859): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteplayssport(_, B).  [covers 150,0/150,0 pos, 0,0/0,0 neg]
%     Score = -36,432002 (regressionFit = 36,432000, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(A, _).  [covers 125,0/150,0 pos, 0,0/0,0 neg]
%     Score = -36,000002 (regressionFit = 36,000000, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysagainstteam(_, A).  [covers 147,0/150,0 pos, 0,0/0,0 neg]
%     Score = -36,425375 (regressionFit = 36,425373, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), teamplaysinleague(A, _).  [covers 134,0/150,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), teamplayssport(_, B).  [covers 150,0/150,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,244.
% Will extend: athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #7: 15 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(A, _).  [covers 10,0/150,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]'
%     Score = -69,223101 (regressionFit = 69,223099, penalties=2.3400000000000005E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 26 64 65 67 68 74 102 112 117 129
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #8, bodyLen=2] 'athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]' score=-69.22310093154933
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -32,258271 (regressionFit = 32,258268, penalties=3.2500000000000006E-6) for clause:  athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(_, B), athleteledsportsteam(A, _).  [covers 15,0/142,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -32,258271): athleteplaysforteam(A, B) :- teamplayssport(B, _), athleteledsportsteam(_, B), athleteledsportsteam(A, _).  [covers 15,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -32,681821 (regressionFit = 32,681818, penalties=3.1400000000000004E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 98,0/142,0 pos, 0,0/0,0 neg]
%     Score = -32,647622 (regressionFit = 32,647619, penalties=3.35E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 135,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -31,741326 (regressionFit = 31,741323, penalties=3.450000000000001E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -31,741326): athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.450000000000001E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.450000000000001E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 142,0/142,0 pos, 0,0/0,0 neg]
%     Score = -32,308123 (regressionFit = 32,308119, penalties=3.450000000000001E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 131,0/142,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  athleteplaysforteam(_, A) :- teamplayssport(A, B), athleteledsportsteam(_, A), teamplayssport(_, B).  [covers 142,0/142,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]

% The best node found: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]

% Expanding node at Level 6 with score = -0,230.
% Will extend: athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 6 >= 6

% Time for loop #8: 38 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 6
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      athleteplaysforteam(_, A) :- teamplayssport(A, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 23,0/142,0 pos, 0,0/0,0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (athleteplaysforteam(D, E) :- teamalsoknownas(E, Anon3253))
Created a leaf under (athleteplaysforteam(D, E) :- athleteplayssport(D, Anon3471))
Created a leaf under (athleteplaysforteam(D, E) :- athleteplayssport(D, Anon3901))
Created a leaf under (athleteplaysforteam(D, E) :- teamplayssport(E, Anon3471))
Created a leaf under (athleteplaysforteam(D, E) :- athleteledsportsteam(D, E))

%%%%%  WILL-Produced Tree Combined @ 23:44:37 4/24/18.  [Using 6.833.688 memory cells.]  %%%%%


% FOR athleteplaysforteam(A, B):
%   if ( teamalsoknownas(B, C) )
%   then return 0.5119019617338907;  // std dev = 0,476, 413,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=270 */
%   else if ( teamplayssport(B, D) )
%   | then if ( athleteplayssport(A, D) )
%   | | then return 0.6304261628222838;  // std dev = 0,419, 101,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   | | else if ( athleteplayssport(A, E) )
%   | | | then return 0.06903328884100794;  // std dev = 0,408, 147,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=31 */
%   | | | else if ( athleteledsportsteam(A, B) )
%   | | | | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | | else if ( athleteledsportsteam(F, B) )
%   | | | | | then if ( teamalsoknownas(G, B) )
%   | | | | | | then return 0.03206197857777315;  // std dev = 1,818, 23,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | | | | else return 0.25310691829279025;  // std dev = 5,333, 119,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=47 */
%   | | | | | else if ( athleteledsportsteam(A, H) )
%   | | | | | | then return -0.04185106490048778;  // std dev = 0,949, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | | | | else return 0.30100607795665635;  // std dev = 5,877, 140,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=62 */
%   | else return 0.032061978577773244;  // std dev = 0,379, 69,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=12 */


% Clauses:

athleteplaysforteam(A, B, 0.5119019617338907) :- 
     teamalsoknownas(B, C), 
     !. // Clause #1.

athleteplaysforteam(A, B, 0.6304261628222838) :- 
     teamplayssport(B, C), 
     athleteplayssport(A, C), 
     !. // Clause #2.

athleteplaysforteam(A, B, 0.06903328884100794) :- 
     teamplayssport(B, C), 
     athleteplayssport(A, D), 
     !. // Clause #3.

athleteplaysforteam(A, B, 0.7812258581764353) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(A, B), 
     !. // Clause #4.

athleteplaysforteam(A, B, 0.03206197857777315) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(D, B), 
     teamalsoknownas(E, B), 
     !. // Clause #5.

athleteplaysforteam(A, B, 0.25310691829279025) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(D, B), 
     !. // Clause #6.

athleteplaysforteam(A, B, -0.04185106490048778) :- 
     teamplayssport(B, C), 
     athleteledsportsteam(A, D), 
     !. // Clause #7.

athleteplaysforteam(A, B, 0.30100607795665635) :- 
     teamplayssport(B, C), 
     !. // Clause #8.

athleteplaysforteam(A, B, 0.032061978577773244) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_athleteplaysforteam(underscore, a, 0.5119019617338907) :-  /* #neg=143 #pos=270 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_athleteplaysforteam(a, b, 0.6304261628222838) :-  /* #neg=23 #pos=78 */ 
   teamplayssport(b, uniqueVar3),
   athleteplayssport(a, uniqueVar3),
   !. // Flattened version of clause #2.

flattened_athleteplaysforteam(a, b, 0.06903328884100794) :-  /* #neg=116 #pos=31 */ 
   teamplayssport(b, underscore),
   athleteplayssport(a, underscore),
   !. // Flattened version of clause #3.

flattened_athleteplaysforteam(a, b, 0.7812258581764353) :-  /* #neg=1 #pos=12 */ 
   teamplayssport(b, underscore),
   athleteledsportsteam(a, b),
   !. // Flattened version of clause #4.

flattened_athleteplaysforteam(underscore, a, 0.03206197857777315) :-  /* #neg=19 #pos=4 */ 
   teamplayssport(a, underscore),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(underscore, a),
   !. // Flattened version of clause #5.

flattened_athleteplaysforteam(underscore, a, 0.25310691829279025) :-  /* #neg=72 #pos=47 */ 
   teamplayssport(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_athleteplaysforteam(a, b, -0.04185106490048778) :-  /* #neg=9 #pos=1 */ 
   teamplayssport(b, underscore),
   athleteledsportsteam(a, underscore),
   !. // Flattened version of clause #7.

flattened_athleteplaysforteam(underscore, a, 0.30100607795665635) :-  /* #neg=78 #pos=62 */ 
   teamplayssport(a, underscore),
   !. // Flattened version of clause #8.

flattened_athleteplaysforteam(underscore, underscore, 0.032061978577773244) :-  /* #neg=57 #pos=12 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   teamplayssport(b, underscore)
%   teamalsoknownas(a, underscore)
%   athleteplayssport(a, underscore)
%   teamplayssport(a, underscore)
%   athleteledsportsteam(underscore, a)
%   athleteplayssport(a, uniqueVar3)
%   athleteledsportsteam(a, underscore)
%   athleteledsportsteam(a, b)
%   teamalsoknownas(underscore, a)
%   teamplayssport(b, uniqueVar3)

% Time taken to learn model for 'athleteplaysforteam': 1,413 seconds.
% Saving model in: nell_non_pre_computed/train/models/bRDNs/athleteplaysforteam.model
cached groundings hit: 0
Misses: 0

% Total learning time (1 trees): 2,073 seconds.
