Starting experiment #1 for imdb->cora

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */


Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.08729542238638185;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03950580835247579;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07764318176203613;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02876680256924829;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03411130955094581;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0689197306651532;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.05513656233618984;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04662356596759974;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.009441540141516814;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.014448450248616346;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.042562578828808345;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.012255041924262244;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395198761707943;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0026582448724292163;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02870888632417844;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0022368454517547654;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023817327319488282;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */


Results
   AUC ROC   = 0.548233
   AUC PR    = 0.553546
   CLL	      = -0.68455
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.698506


Total learning time: 12.731 seconds
Total inference time: 1.939 seconds
AUC ROC: 0.548233


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358284, 0.18325925266268636]}
{'': [0.24867255573583463, 0.18325628920908163], 'false': [0.16, 0.18452848370338096]}
{'': [0.24867255573583355, 0.18323411073416435], 'false': [0.16, 0.18450505010524496], 'false,false': [0.16000000000000006, 0.18594726413656382]}
{'': [0.24867255573582772, 0.18319431627506352]}
{'': [0.2486725557358371, 0.18319104135515807]}
{'': [0.24867255573583077, 0.18318829980537452], 'false': [0.16, 0.1844819842734949], 'false,false': [0.15999999999999998, 0.1859472641365647]}
{'': [0.24867255573583177, 0.1831597087989969], 'false': [0.16000000000000003, 0.18448033770252523]}
{'': [0.2486725557358347, 0.1831507555237533], 'false': [0.15999999999999998, 0.1844594419941963]}
{'': [0.24867255573583247, 0.18313876842028512], 'false': [0.15999999999999998, 0.18445845679700948]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.08729542238638185;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03950580835247579;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07764318176203613;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02876680256924829;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03411130955094581;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0689197306651532;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029337394884471218;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.056636513932220085;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016304678830358955;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04836797628793641;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0637658903288656;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.1005421031614116;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013847150590529368;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.01805619452584221;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.042034566605782094;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541969170172882;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01535325666525093;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03374375924280406;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27469937703841074;  // std dev = 0,871, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.05527233403815942;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.006529207730099939;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02846128298580786;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042486274441461226;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.005508351661750089;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.008665541207203564;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.024530935847846165;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */


Results
   AUC ROC   = 0.549421
   AUC PR    = 0.551891
   CLL	      = -0.684629
   Precision = 0.555682 at threshold = 0.5
   Recall    = 0.921102
   F1        = 0.693182


Total learning time: 9.729 seconds
Total inference time: 2.128 seconds
AUC ROC: 0.549421


Refined model AUC ROC: 0.549421


Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 00:04:24
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684629, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 22.46, 'Inference time': 2.128, 'Mapping results': {'Knowledge compiling time': 0.12022829055786133, 'Generating paths time': 4.625077247619629, 'Generating mappings time': 0.06744813919067383, 'Possible mappings': 6, 'Finding best mapping': 0.0006577968597412109, 'Total time': 4.8134191036224365}, 'Parameter Learning results': {'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.68455, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.731, 'Inference time': 1.939}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.08730509952170429;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03379806553072891;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07798411204235697;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.022708053117679466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06726347917649066;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.386994917197794;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.17209632125395846;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else return 0.05517343151958318;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1324503250703157;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.046654812219262466;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019808338357743;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0038081027596171047;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.041283169492158246;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07542013996817613;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03280373748491574;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056634743292539855;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.027330135572812175;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248776805241241;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022690816475277212;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */


Results
   AUC ROC   = 0.547342
   AUC PR    = 0.551722
   CLL	      = -0.684467
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.698506


Total learning time: 20.479 seconds
Total inference time: 1.951 seconds
AUC ROC: 0.547342


Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 00:04:47
{'AUC ROC': 0.547342, 'AUC PR': 0.551722, 'CLL': -0.684467, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 20.479, 'Inference time': 1.951}


Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3141623956668616;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5020180987390209;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.004103156025195361;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10830139933900058;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.18646092761545083;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3036223610394791;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5597715587747403;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.20696552701518348;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2402284412252597;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1401971710745634;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.19774717226548136;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.34657175785681144;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.16398308255756064;  // std dev = 0,930, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11514448624049796;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.105908916267871;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13244572631646076;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08041462767329252;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08722691592096625;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.18108393165672987;  // std dev = 0,340, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.14480002821712884;  // std dev = 0,931, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.03414555194199598;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10769735423208156;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.25400827919961494;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.20394924930789385;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22699065683428823;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05791214188508099;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else return 0.09167703873453982;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.12077686377527497;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31867484107473043;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.025639884371291735;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.05250820207950502;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.17258791199210402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04429275065946794;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.04716672093423454;  // std dev = 0,464, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.462593
   AUC PR    = 0.462623
   CLL	      = -0.713005
   Precision = 0.509027 at threshold = 0.5
   Recall    = 0.966607
   F1        = 0.666871


Total learning time: 42.089 seconds
Total inference time: 4.625 seconds
AUC ROC: 0.462593


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [0.93, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.467, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'author(J, H), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.34, 3, 17], 'true,false,true': [0.931, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.355, 3, 16], 'false,true,false,true': [0.89, 3, 1], 'false,true,false,false': [0.894, 4, 1], 'false,false,true': [0.494, 508, 700], 'false,false,false': [0.46, 14, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.43, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.464, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.19283256243120644, 0.24337786228261007], 'true,true': [0.12096954364241633, 0.21557952012416245], 'true,true,false': [0.25, 0.18587800690591527], 'true,true,false,false': [0.22222222222222224, 0.15999999999999998], 'true,true,true': [0.1875000000000001, -1.6653345369377348e-16]}
{'': [0.23165308540940402, 0.24111978478389806], 'false': [0.2419854700739281, 0.21729289271163407], 'true': [0.1266517828159186, 0.22101875755113182], 'true,false': [0.25, 0.17658827182535067], 'true,false,false': [0.19670893301717968, 0.15999999999999998], 'true,true': [0.1848413400930301, 0.0]}
{'': [0.18142568057872835, 0.24146335838369587], 'false': [0.24245485962289637, 0.21473169594186428], 'true': [0.1168878413752785, 0.2147361649456055], 'true,false': [0.21644549024672002, 0.20862353444914997], 'true,false,false': [0.25, 0.16], 'true,true': [0.1859535660482249, -2.7755575615628914e-17]}
{'': [0.2404522457296639, 0.21784877039873382]}
{'': [0.16867876340429833, 0.24145624110287403], 'false': [0.19051655368812662, 0.2425522414276795], 'false,false': [0.24368448752247163, 0.2117202268431002], 'false,true': [0.12568500526412185, 0.1770026433953565], 'false,true,false': [0.1979609996057758, 0.15999999999999998], 'true': [0.11547136045219848, 0.21064557324292993], 'true,false': [0.21647763804893091, 0.20496775556343413], 'true,false,false': [0.25, 0.16]}
{'': [0.2399309561393083, 0.21487266171699995], 'true': [0.1730189300784778, 0.24159646070056984], 'true,true': [0.12036119407581376, 0.2130240119236335], 'true,true,false': [0.24999999999999994, 0.18671281850505844], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18493654635866993, -1.3877787807814457e-17]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;author(G, E), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '5;true;author(E, D), venue(E, B).;true;true', '5;true,true;author(F, D), venue(F, A).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '6;true;author(E, D), venue(E, A).;true;true', '6;true,true;author(F, D), venue(F, B).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, B).;true;true', '9;true,true,true;author(G, E), venue(G, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.7002541982574071;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786242166412516;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31020660238907777;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3511494072015386;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6013072542322436;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.17983643918540992;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018536604995279704;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.2431547191935052;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2647726025791208;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.45254519554819256;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.13949749688571078;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.014914200614994093;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18681495377669313;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2394056882454382;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.493263050957963;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.10675358076224616;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15472190560229895;  // std dev = 0,425, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.1407274414219851;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.2227822855625587;  // std dev = 0,343, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.08101287594647344;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.09680703526532743;  // std dev = 0,437, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1610748540615502;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.3728025505528358;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.010910421761683478;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.11480016639270577;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10516078805983553;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.13216945191468665;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.10956072612138446;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2676757159629202;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.06117198422722869;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.09696241937503725;  // std dev = 0,955, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.060658145091488036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07974965443029258;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.09971469889137162;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.12064354918594851;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.27432978534459096;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04605604379788453;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.026612347605560378;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10728926000555927;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059624017791562234;  // std dev = 0,491, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06363249217015714;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.09300091556722874;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.22320350546664652;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.03461748388752549;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0607735369413441;  // std dev = 0,429, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04483358791640955;  // std dev = 0,491, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.04852602220205927;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.451377
   AUC PR    = 0.457205
   CLL	      = -0.715659
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665956


Total learning time: 36.858 seconds
Total inference time: 5.869 seconds
AUC ROC: 0.451377


Refined model AUC ROC: 0.451377


Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 00:06:23
{'AUC ROC': 0.451377, 'AUC PR': 0.457205, 'CLL': -0.715659, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 78.947, 'Inference time': 5.869, 'Mapping results': {'Knowledge compiling time': 0.18697857856750488, 'Generating paths time': 4.7841596603393555, 'Generating mappings time': 0.0710904598236084, 'Possible mappings': 6, 'Finding best mapping': 0.0006663799285888672, 'Total time': 5.042905569076538}, 'Parameter Learning results': {'AUC ROC': 0.462593, 'AUC PR': 0.462623, 'CLL': -0.713005, 'Precision': [0.509027, 0.5], 'Recall': 0.966607, 'F1': 0.666871, 'Learning time': 42.089, 'Inference time': 4.625}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.6455293835086062;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.637634646666501;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.3749995821840918;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.42267090509443306;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6728159276317324;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.24327375891060532;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.10710303504209802;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.003744376074618383;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.3087110069380289;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.3238605318029773;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5120309097017451;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.19418971492213988;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.08780729296554342;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.003137590001006407;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24345062787922447;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18771538949970618;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422131543002881;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2038658243106117;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4578413216198611;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07338174084817317;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.1971956743807722;  // std dev = 0,911, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18202453030741922;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10554670861778662;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.15400889397881332;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.34821891914066483;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.055342412120007914;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.03373224853419202;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14006861264532072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07924691028357285;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08853159124011843;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.1800826282763234;  // std dev = 0,343, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.041637834390436335;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.025931009688414625;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10937195891782192;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.17024257591909678;  // std dev = 0,350, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.03949825398494078;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0983402631092964;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05865726314469169;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.06711339781559379;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04557185242424022;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.051122028005564736;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.440788
   AUC PR    = 0.452306
   CLL	      = -0.71465
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665956


Total learning time: 45.444 seconds
Total inference time: 5.18 seconds
AUC ROC: 0.440788


Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 00:07:14
{'AUC ROC': 0.440788, 'AUC PR': 0.452306, 'CLL': -0.71465, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 45.444, 'Inference time': 5.18}


Starting fold 3

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08162081214353095;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.13192128190163854;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2261733751354077;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03331531975035466;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0726103876073905;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730797472242146;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.05930239138136958;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322233484737356;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04998375151111534;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.08689040402312753;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.020223737356460703;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10256400867073832;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.012556313272824924;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.01772283838921398;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04595080100869943;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.06567700560287781;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01531202737780717;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07719743961796349;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.010636369692725824;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.014824595368969668;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.038224672568332806;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.04947699445582266;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.03360398120629388;  // std dev = 0,479, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05976675088801322;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.008998236255682825;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.031642926729216585;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03720131777084324;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.025882771987852687;  // std dev = 0,479, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.003057533849371193;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.0463529183714066;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.007603960689007649;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.026088409841630487;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.547997
   AUC PR    = 0.555917
   CLL	      = -0.684917
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.687196


Total learning time: 25.606 seconds
Total inference time: 2.446 seconds
AUC ROC: 0.547997


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [0.497, 20, 16], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.479, 24, 15], 'false,true': [0.498, 453, 529], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,true': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.479, 24, 15], 'false,true,true': [0.496, 17, 13], 'false,true,false': [0.498, 436, 516], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
{'': [0.24874942585522805, 0.18750000000000128], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24874942585523416, 0.18743865388620684], 'false': [0.16, 0.18933432635396055]}
{'': [0.248749425855229, 0.18739987736643357]}
{'': [0.24874942585523707, 0.1873951039632787], 'true': [0.24691358024691398, 0.24850257797172012], 'false': [0.16000000000000003, 0.1893322853763981]}
{'': [0.24862693215169576, 0.18736472213644667]}
{'': [0.24862214271586572, 0.1873607704838974]}
{'': [0.24861946041430213, 0.18735748515818473], 'true': [0.24691358024691368, 0.24850257797172323], 'true,true': [0.25, 0.24555555555555547], 'false': [0.16000000000000006, 0.18933018849143898], 'false,false': [0.1728395061728395, 0.19046399999999875]}
{'': [0.24853462278056665, 0.18732257816575465], 'true': [0.246648606161798, 0.24850257797171232], 'true,true': [0.25, 0.24555555555555567], 'false': [0.16000000000000003, 0.1893145719263198], 'false,false': [0.17283950617283947, 0.1904640000000001]}
{'': [0.23295226209018177, 0.2410707199286494], 'false': [0.2482259078534676, 0.1882425776410594], 'true': [0.25, 0.2294092067120497], 'false,false': [0.15999999999999995, 0.19046400000000033]}
{'': [0.23256308403222087, 0.24101721356779007], 'false': [0.24822504954418567, 0.18823084189715156], 'false,true': [0.2455555555555555, 0.24823458795283243], 'true': [0.24999999999999997, 0.22934986792488182], 'false,false': [0.16000000000000006, 0.19046399999999963]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;haswordvenue(B, D).;true;true', '6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;haswordvenue(A, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;false,true;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3025933795439568;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3171873642307679;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25052069756410084;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27951632356315925;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.21109393408039043;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.15792822612935672;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.11949982462829115;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22818329801764425;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07218916237340114;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17303328644245286;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03315494592188567;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.038668288675020826;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.06283928464508629;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09378643949103628;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13361248827443212;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.04991144434638045;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.10415050528005043;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.06575540201657111;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10105129663240547;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.021286446271626958;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02501991208878179;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04465735179261182;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07899247355141135;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05034094500593147;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07604723109355188;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.01814073280437639;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.02102889310812993;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03711806781616724;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.05962648209840938;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return -0.022032410369393265;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.01762799908082345;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.05894396298062376;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.01542604428082566;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.030705720247830054;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.04488380539572412;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return -0.016573789936349007;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.014744357484260395;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.024207748552879535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.044863304791410506;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.013093020017001234;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.025301281075603442;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.547994
   AUC PR    = 0.555917
   CLL	      = -0.684986
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.687196


Total learning time: 18.603 seconds
Total inference time: 3.157 seconds
AUC ROC: 0.547994


Refined model AUC ROC: 0.547994


Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 00:08:10
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684986, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 44.209, 'Inference time': 3.157, 'Mapping results': {'Knowledge compiling time': 0.19215631484985352, 'Generating paths time': 4.741911172866821, 'Generating mappings time': 0.07165670394897461, 'Possible mappings': 6, 'Finding best mapping': 0.0006678104400634766, 'Total time': 5.006400108337402}, 'Parameter Learning results': {'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684917, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 25.606, 'Inference time': 2.446}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.23601732058838834;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.34187413318963167;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2564123687585864;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.19587112794949943;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2822332807518594;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.03853867052204916;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0848589630439226;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22279181970094933;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03325254655007278;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04573256672438624;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07454728480768834;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.157890071872415;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0930680174231353;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.17560049955028054;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.028581009441941786;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.03898712421111541;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.06321100207152933;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322026631258059;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024483316254126;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.05183244570032412;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000425351975992;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04179355998284365;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07532343212636267;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014685222303587417;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.03632564099906484;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.04697283240025918;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0016677091829554274;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05841275887383757;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.028858346476503167;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042444841020887976;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008021046860939454;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.007515487430882163;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.02629324941482609;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */


Results
   AUC ROC   = 0.547985
   AUC PR    = 0.555914
   CLL	      = -0.684833
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   F1        = 0.687196


Total learning time: 41.994 seconds
Total inference time: 2.721 seconds
AUC ROC: 0.547985


Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 00:08:55
{'AUC ROC': 0.547985, 'AUC PR': 0.555914, 'CLL': -0.684833, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 41.994, 'Inference time': 2.721}


Starting fold 4

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32300862228540816;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2675192676197991;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21418489323254222;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16716835232310373;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12826455880834944;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5804962923507572;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.38024961034248433;  // std dev = 0,176, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.38049629235075727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.09505233310766098;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.051276582806118444;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4364246654420628;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2973965449175458;  // std dev = 0,149, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2860822856171211;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.07174436451741327;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.04225922003597654;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05523857099722425;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.033066142972159436;  // std dev = 0,444, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04150683975435865;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.02700826632097367;  // std dev = 0,444, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */


Results
   AUC ROC   = 0.56567
   AUC PR    = 0.579977
   CLL	      = -0.682691
   Precision = 0.625 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.062762


Total learning time: 26.466 seconds
Total inference time: 2.102 seconds
AUC ROC: 0.56567


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [2.11e-08, 0, 8], 'true,true,false': [0.176, 5, 0], 'true,false': [0.894, 1, 4], 'false,true': [0.5, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.149, 5, 0], 'true,false': [0.894, 1, 4], 'false,true': [0.5, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.444, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.444, 75, 28]}]
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.24971458193035473, 0.19794514091808793]}
{'': [0.2497145819303701, 0.19794514091808826]}
{'': [0.2497145819303689, 0.1979451409180892]}
{'': [0.24971458193036916, 0.19794514091808763]}
{'': [0.24971458193037266, 0.19794514091808932]}
{'': [0.20970488916426108, 0.24641230436726022], 'false': [0.24978812167747733, 0.1991541714725107], 'true': [0.22083986663946664, 0.16], 'true,true': [5.551115123125783e-17, 0.006163536621473819]}
{'': [0.1412164080301861, 0.24634495445282542], 'false': [0.24978812167748504, 0.19915417147250936], 'true': [0.12915953314334214, 0.16], 'true,true': [-8.326672684688674e-17, 0.004434128465833675]}
{'': [0.24815106373868775, 0.19747293259163476]}
{'': [0.24815149343639079, 0.19746563331928196]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['6;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '6;true;author(E, D), venue(E, B).;true;true', '6;true,true;samebib(E, F), venue(F, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '7;true;author(E, D), venue(E, B).;true;true', '7;true,true;samebib(E, F), venue(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32300862228540816;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2675192676197991;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21418489323254222;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6502740316904744;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3497259683095256;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.45027403169047436;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1648300724473799;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4924930465021981;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27488649595128073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3423904771791434;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.6119256607945028;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.3880743392054972;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.3619256607945027;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1251804472451608;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3722624340563563;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.22352007303440047;  // std dev = 0,000321, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2570013353753394;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.09601342483272103;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.051276582806118444;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.29012324579956955;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.18712665585519903;  // std dev = 0,000281, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1942643889885583;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.07249431392390503;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.04225922003597654;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( author(F, D) )
%   | | | then return 0.37313239044594054;  // std dev = 0,160, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41945294403793565;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.32113059135173105;  // std dev = 0,089, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.25479183687354534;  // std dev = 0,872, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05402768997611498;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   | else return 0.03542105944760257;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041591168696531455;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830809864494702;  // std dev = 0,444, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */


Results
   AUC ROC   = 0.571979
   AUC PR    = 0.590256
   CLL	      = -0.678892
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.105475


Total learning time: 33.968 seconds
Total inference time: 3.235 seconds
AUC ROC: 0.571979


Refined model AUC ROC: 0.571979


Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 00:10:07
{'AUC ROC': 0.571979, 'AUC PR': 0.590256, 'CLL': -0.678892, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 60.434000000000005, 'Inference time': 3.235, 'Mapping results': {'Knowledge compiling time': 0.13999152183532715, 'Generating paths time': 4.7044947147369385, 'Generating mappings time': 0.0673069953918457, 'Possible mappings': 6, 'Finding best mapping': 0.0006806850433349609, 'Total time': 4.9124836921691895}, 'Parameter Learning results': {'AUC ROC': 0.56567, 'AUC PR': 0.579977, 'CLL': -0.682691, 'Precision': [0.625, 0.5], 'Recall': 0.03304, 'F1': 0.062762, 'Learning time': 26.466, 'Inference time': 2.102}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32300862228540816;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2675192676197991;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21418489323254222;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6502740316904744;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3497259683095256;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.45027403169047436;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16520484013911838;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1282021556002605;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09736107390518445;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4364472795313423;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32204127238276525;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28610525340859205;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07204934971129187;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.48785148853072374;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.5392755547089834;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.4607244452910167;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.31449983120943953;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.05316772214854842;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31101694809608094;  // std dev = 0,081, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2663383914056858;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.190355937475972;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040556021726738965;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */


Results
   AUC ROC   = 0.57133
   AUC PR    = 0.586544
   CLL	      = -0.680255
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   F1        = 0.105475


Total learning time: 33.988 seconds
Total inference time: 3.253 seconds
AUC ROC: 0.57133


Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 00:10:45
{'AUC ROC': 0.57133, 'AUC PR': 0.586544, 'CLL': -0.680255, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 33.988, 'Inference time': 3.253}


Starting fold 5

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7474809064030066;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3836267131196144;  // std dev = 0,485, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then return 0.14168213568619817;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.04538583938990186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(J, H), venue(J, A) )
%   | | | | then return 0.24538583938990186;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1509413949454574;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03836829553025274;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.21328867176029512;  // std dev = 0,416, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.32531705765392177;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6259480808791653;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1740519191208347;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1740519191208347;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11863100770843338;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.039360095885018924;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13996902202862835;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03328650874156766;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17084170280373034;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.1671229581883848;  // std dev = 0,408, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, B) )
%   | | | | then return -0.20350188361665728;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5250695449547713;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.266348852813789;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.5173247985491525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15043029206222497;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08377550400706113;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05196243580147958;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1909939454380542;  // std dev = 0,477, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5918890986845754;  // std dev = 0,909, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19863683971247165;  // std dev = 0,048, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06750606756737605;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.0029441836004830023;  // std dev = 0,670, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.10833506399515598;  // std dev = 0,927, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.10046421379525682;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.02151223573349404;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09026656823423317;  // std dev = 0,397, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03582021654454276;  // std dev = 0,405, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15661831750369015;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.121900538567838;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.053944003667557444;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then if ( samebib(M, N), venue(N, B) )
%   | | | | then return 0.427362238346664;  // std dev = 0,886, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16756568457569487;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.07509450366124538;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.018434397823094372;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10879915309538764;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.39669771380920693;  // std dev = 0,940, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.152929972986942;  // std dev = 0,050, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.043360970767286;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.02950278328605734;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.02448286648620044;  // std dev = 0,389, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.2360517330353038;  // std dev = 0,286, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.3499235827482312;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.08484802525486063;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.0932083684618952;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03781028522472706;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.051326620100248736;  // std dev = 0,362, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05447754779283515;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011419460733861925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06164507120654154;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.32183295660084166;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17143367442054103;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03099147034073206;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.02591041076384849;  // std dev = 0,622, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.052652080405568936;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.00971637860086158;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.36527092477569545;  // std dev = 0,230, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3264115508682503;  // std dev = 0,112, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.22721646596359163;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.2538367425781161;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04867631364841743;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.04662378731425602;  // std dev = 0,346, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.025303095911522407;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.03564581948988619;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.008257556663878136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.547529
   AUC PR    = 0.562683
   CLL	      = -0.687075
   Precision = 0.545222 at threshold = 0.5
   Recall    = 0.950547
   F1        = 0.692967


Total learning time: 52.0 seconds
Total inference time: 4.912 seconds
AUC ROC: 0.547529


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,true,false': 'author(H, E), venue(H, A)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true,true': [0.223, 1, 18], 'true,true,true,false': [0.0, 15, 0], 'true,true,false,true': [0.331, 14, 2], 'true,true,false,false': [0.287, 1, 10], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [0.0, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.429, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false,true': 'author(I, H), venue(I, B)', 'false,false,true,false': 'author(J, H), venue(J, A)'}, {'true,true': [0.119, 0, 10], 'true,false': [0.485, 338, 488], 'false,true': [0.457, 38, 16], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.416, 31, 30], 'true,false': [0.485, 307, 468], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [3.73e-09, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, A)', 'true,false,true,false': 'author(I, G), venue(I, B)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.409, 31, 30], 'true,false,true,true': [0.408, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [5.27e-09, 5, 0], 'false,true,false': [0.444, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, A)', 'false,false,true,false': 'author(K, I), venue(K, B)'}, {'true': [0.477, 338, 498], 'false,true,true,true': [0.909, 1, 4], 'false,true,true,false': [0.048, 5, 0], 'false,true,false': [0.437, 32, 12], 'false,false,true,true': [0.67, 4, 1], 'false,false,true,false,true': [0.927, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)', 'false,false,true,true': 'samebib(M, N), venue(N, B)'}, {'true,true': [0.397, 31, 30], 'true,false,true': [0.405, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.387, 6, 4], 'false,true,false': [0.439, 32, 12], 'false,false,true,true,true': [0.886, 1, 3], 'false,false,true,true,false': [0.042, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.94, 1, 4], 'false,true,true,false': [0.05, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false': [0.409, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'author(G, E), venue(G, A)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.389, 22, 19], 'true,true,false,true': [0.286, 8, 1], 'true,true,false,false': [0.272, 1, 10], 'true,false': [0.482, 307, 468], 'false,true,true': [0.381, 6, 4], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.362, 5, 3], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.902, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.622, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'author(H, E), venue(H, B)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.23, 1, 18], 'true,true,true,false': [0.112, 15, 0], 'true,true,false,true': [0.284, 14, 2], 'true,true,false,false': [0.272, 1, 10], 'true,false': [0.482, 307, 468], 'false,true,true': [0.346, 6, 4], 'false,true,false': [0.436, 32, 12], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2499328137597435, 0.2392108220603487], 'true,true': [0.24913494809688536, 0.2469135802469131], 'true,true,true': [0.04986149584487499, -1.4802973661668754e-17], 'true,true,false': [0.10937500000000004, 0.0826446280991734], 'true,false': [0.241566014160766, 0.23629229940273755], 'true,false,true': [0.24999999999999953, 0.19390581717451505], 'true,false,true,true': [0.05859374999999978, -1.1895246692412391e-17]}
{'': [0.2337157723216018, 0.18394619617434038], 'true': [0.001422613181348975, 0.23494442723810266], 'false': [0.20850480109739328, 0.17437499999999947], 'false,false': [0.21172022684309977, 0.15574022776238794], 'false,false,true': [0.15999999999999998, 0.21653777513384853], 'false,false,true,false': [0.24000000000000005, 0.21219135802469113]}
{'': [0.23157160630526813, 0.1830785998634412], 'true': [0.17333227737737575, 0.23523984922030994], 'false': [0.20850480109739375, 0.17354500787416294], 'false,true': [0.24000000000000005, 0.1983471074380166], 'false,true,true': [0.15999999999999998, 0.0], 'false,true,false': [4.625929269271485e-18, 0.20701963117192157], 'false,false': [0.2111380951946426, 0.15574022776238783], 'false,false,true': [0.15999999999999998, 0.21627421391718488]}
{'': [0.23029042789580617, 0.17957063270530552], 'true': [0.16751972502729026, 0.23470579429763355], 'true,false': [0.1845729499401744, 0.23629229940273908], 'true,false,true': [0.1662525723061865, 0.1939058171745152], 'true,false,true,false': [0.0663265306122449, 0.15999999999999998], 'false': [0.19740911645326858, 0.17291245155487323], 'false,true': [0.19147421525935227, 0.19691824326410343], 'false,true,true': [0.15999999999999992, 5.551115123125783e-18]}
{'': [0.2279361450557937, 0.1772265912594176], 'false': [0.20227366286277773, 0.16814216669474197], 'false,true': [0.23915134605444893, 0.19080496560055094], 'false,true,true': [0.16537785810417788, 0.0004592043654540856], 'false,false': [0.1954647608476389, 0.15574022776238902], 'false,false,true': [0.08989531211877583, 0.20728492204492588], 'false,false,true,false': [0.17190418762029003, 0.2121913580246914]}
{'': [0.2273851879572428, 0.1740180641782397], 'true': [0.15781863984679792, 0.23260920696760565], 'true,false': [0.16436972803485428, 0.23629229940273985], 'false': [0.18543751767160335, 0.1699508433205415], 'false,true': [0.14960199063395518, 0.19272675366513986], 'false,false': [0.20204679768222394, 0.15574022776238874], 'false,false,true': [0.18681777231800006, 0.20473056853572033], 'false,false,true,true': [0.19623019906353648, 0.00043572883610756147]}
{'': [0.22679664931276353, 0.17217699444329546], 'false': [0.18614132895258104, 0.1672605147255888], 'false,true': [0.16412005950454334, 0.1900043396275857], 'false,true,true': [0.17669927936438398, 0.0004955425982599876]}
{'': [0.22660603654874797, 0.17056318971224657], 'true': [0.15560590729357013, 0.2320769937294262], 'false': [0.1821578250342908, 0.16649942334621137], 'false,true': [0.14478938085529425, 0.19008232962228042], 'false,false': [0.19187595189283022, 0.15574022776238797], 'false,false,true': [0.13110980069897749, 0.2046670991596259], 'true,true': [0.15102699884021223, 0.162429640126761], 'true,true,false': [0.08187396123632051, 0.07382365012778626]}
{'': [0.2256539332146361, 0.17019053851677887], 'false': [0.18142133332032218, 0.16630347603549273], 'false,true': [0.14222254720810584, 0.18996822939008295], 'false,false': [0.1916389982215249, 0.1557402277623885], 'false,false,true': [0.07730205293209769, 0.20491165150239743], 'false,true,true': [0.1627426229895669, 4.648678705235776e-05]}
{'': [0.22559105896951304, 0.16889870186678646], 'true': [0.14372042806286936, 0.23197373698772328], 'false': [0.17689918674553215, 0.1661551044904697], 'false,true': [0.11942755708884567, 0.18987674078028755], 'false,false': [0.19143142762682014, 0.15574022776238913], 'true,true': [0.14783294023561508, 0.1338906271553655], 'true,true,true': [0.05281474552831777, 0.0008343703409617506], 'true,true,false': [0.08064410220054258, 0.07420696869606479]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;author(F, E), venue(F, B).;true;true', '0;true,true,true;samebib(F, G), venue(G, A).;true;true', '0;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '0;true,false,true;author(K, J), venue(K, A).;true;true', '0;true,false,true,true;samebib(K, L), venue(L, B).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordauthor(D, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;false,true;author(H, G), venue(H, B).;true;true', '2;false,true,true;samebib(H, I), venue(I, A).;true;true', '2;false,true,false;author(J, G), venue(J, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, J), haswordauthor(K, J).;true;true', '3;false,true;author(L, K), venue(L, B).;true;true', '3;false,true,true;samebib(L, M), venue(M, A).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;samebib(F, G), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '5;false,false;haswordvenue(B, K), haswordauthor(L, K).;true;true', '5;false,false,true;author(M, L), venue(M, A).;true;true', '5;false,false,true,true;samebib(M, N), venue(N, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, A).;true;true', '6;false,true,true;samebib(F, G), venue(G, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, A).;true;true', '9;true,true,true;samebib(F, G), venue(G, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7397900556375383;  // std dev = 0,020, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.13414848833684392;  // std dev = 0,126, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.09432260543541698;  // std dev = 0,432, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then return 0.29744445863548663;  // std dev = 0,433, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | | else if ( author(L, J), venue(L, A) )
%   | | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31550689740027;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16652143889048682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.13903411666506882;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.13782638719647008;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2485056988579456;  // std dev = 0,477, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5265136095597585;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14467330597811723;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09063353080603855;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.013460981471142875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13053415220285036;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11997858962482415;  // std dev = 0,375, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19659283748635625;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6010919153529944;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19519391565825422;  // std dev = 0,022, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.037762114350792124;  // std dev = 0,712, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.08329001036274893;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.008580002081595872;  // std dev = 0,674, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10598326300735403;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.019517531503884755;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14472552081945514;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.12405777319509216;  // std dev = 0,715, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.0025758394675908236;  // std dev = 0,697, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0793284319918578;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.4334821520547455;  // std dev = 0,873, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16872102409769182;  // std dev = 0,016, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06932561069833838;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.016701349883922266;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10921784019181945;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4030137483241097;  // std dev = 0,928, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1518965889786256;  // std dev = 0,029, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.03478520558462353;  // std dev = 0,720, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.05719445973319818;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.0044613649164465755;  // std dev = 0,665, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.07963554631520593;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.07327966269818213;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014263086474153676;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.34696340521587093;  // std dev = 0,024, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07912370216347843;  // std dev = 0,477, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.30449292739124045;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13336656210123804;  // std dev = 0,026, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.21265169354968486;  // std dev = 0,025, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05465885492990693;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.053432121777364665;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012159966581671941;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0141767612652779;  // std dev = 0,361, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.04069701840814606;  // std dev = 0,397, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07320412676672333;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.1044439609841763;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.050189072906320076;  // std dev = 0,619, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.03807638433814032;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, B) )
%   | | | then return -0.03262715728014569;  // std dev = 0,523, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04442741286825688;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010351767134103369;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.029891906401700554;  // std dev = 0,318, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2000787729052262;  // std dev = 0,192, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.10197934809879636;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.04965417418627825;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.03267291301792378;  // std dev = 0,423, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.02780698944822077;  // std dev = 0,526, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return -0.015539847272307972;  // std dev = 0,841, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04309659980179606;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.008801409689331349;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.550072
   AUC PR    = 0.568071
   CLL	      = -0.686272
   Precision = 0.546031 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.69145


Total learning time: 32.778 seconds
Total inference time: 4.69 seconds
AUC ROC: 0.550072


Refined model AUC ROC: 0.550072


Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 00:12:26
{'AUC ROC': 0.550072, 'AUC PR': 0.568071, 'CLL': -0.686272, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 84.77799999999999, 'Inference time': 4.69, 'Mapping results': {'Knowledge compiling time': 0.15059375762939453, 'Generating paths time': 4.647877216339111, 'Generating mappings time': 0.06656908988952637, 'Possible mappings': 6, 'Finding best mapping': 0.0006723403930664062, 'Total time': 4.865722179412842}, 'Parameter Learning results': {'AUC ROC': 0.547529, 'AUC PR': 0.562683, 'CLL': -0.687075, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 52.0, 'Inference time': 4.912}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, B) )
%   | | | | then if ( samebib(K, L), venue(L, A) )
%   | | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12745050010411493;  // std dev = 0,029, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.09432260543541698;  // std dev = 0,432, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2984795363559846;  // std dev = 0,434, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.08410399073567305;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6444674378357556;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31543402400340226;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10620583383678607;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.5834785611095132;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16652143889048682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12295224532003957;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.16804613853572753;  // std dev = 0,378, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.12954970840519317;  // std dev = 0,413, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.2632583024827497;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5527102619853845;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15209631068978322;  // std dev = 0,033, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18345777588215417;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1073645207071222;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.11781314547699073;  // std dev = 0,451, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.13482887636486968;  // std dev = 0,373, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.15976674363033486;  // std dev = 0,407, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.016054919366935195;  // std dev = 0,396, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.20103344442096202;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.04133725751838799;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.1575469286573724;  // std dev = 1,001, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09291407419956778;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.09578819493790867;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.019517531503884755;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4022902593769504;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.14106565312597108;  // std dev = 0,476, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.4790868562794094;  // std dev = 0,907, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1718850472959901;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05832168270923987;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.3435129347293;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13784401735996682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.07505370095366297;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.016701349883922266;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0681588976136803;  // std dev = 0,359, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.09288330413112418;  // std dev = 0,399, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.013613355137300984;  // std dev = 0,394, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.11631125310155582;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.10926066620467938;  // std dev = 0,386, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.048349921033085504;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.06824149150024195;  // std dev = 0,361, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06214885174257806;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.014263086474153676;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.053899558268243275;  // std dev = 0,358, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06509242172280574;  // std dev = 0,383, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.30902700047584625;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | else return 0.4127514555650504;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.08726883881317143;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return -0.003148524778946591;  // std dev = 0,326, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05791155361829802;  // std dev = 0,446, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.051907438223985594;  // std dev = 0,437, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012159966581671941;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061764902929440105;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33198213186948944;  // std dev = 0,916, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16628602952754484;  // std dev = 0,028, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03008278884623152;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.04237450156988414;  // std dev = 0,437, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.010351767134103369;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046802384184681106;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.1706100665194545;  // std dev = 0,612, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20558416825606687;  // std dev = 0,080, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.037893934568148754;  // std dev = 0,444, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.016168021465114427;  // std dev = 0,407, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.542666
   AUC PR    = 0.557544
   CLL	      = -0.686809
   Precision = 0.546053 at threshold = 0.5
   Recall    = 0.942035
   F1        = 0.691358


Total learning time: 51.451 seconds
Total inference time: 5.246 seconds
AUC ROC: 0.542666


Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 00:13:23
{'AUC ROC': 0.542666, 'AUC PR': 0.557544, 'CLL': -0.686809, 'Precision': [0.546053, 0.5], 'Recall': 0.942035, 'F1': 0.691358, 'Learning time': 51.451, 'Inference time': 5.246}


Starting experiment #2 for imdb->cora

Starting experiment #2 for imdb->cora

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360663;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( actor(A) )
%   | | | then return 0.5553664367462832;  // std dev = 6,31e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | | else return -0.11231637819360629;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.11231637819360626;  // std dev = 3,65e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360663;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462833;  // std dev = 5,72e-07, 170,000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( actor(A) )
%   | | | then return 0.5553664367462832;  // std dev = 6,31e-07, 212,000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | | else return -0.11231637819360629;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.11231637819360626;  // std dev = 3,65e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926058;  // std dev = 1,43e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926058;  // std dev = 1,43e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948723;  // std dev = 4,50e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948723;  // std dev = 4,50e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,56e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333706;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,56e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333706;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */




Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'female(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'female(person).', 'actor(person).']

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08973290427509041;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08973290427509041;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 12,665, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07555163361934929;  // std dev = 4,084, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 12,665, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07555163361934929;  // std dev = 4,084, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06481605947836912;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06481605947836912;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.05517836904887655;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.05517836904887655;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0045241050971815185;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01137966493382766;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05143768534409504;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0045241050971815185;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01137966493382766;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05143768534409504;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0038116410491848664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04126856671915473;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0038116410491848664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04126856671915473;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0031898686790762685;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03451340560081187;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0031898686790762685;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03451340560081187;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0023026042404653115;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02902722936933643;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0023026042404653115;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02902722936933643;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022656102255250964;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022656102255250964;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */




Results
Results
   AUC ROC   = 0.548236
   AUC ROC   = 0.548236
   AUC PR    = 0.553547
   AUC PR    = 0.553547
   CLL	      = -0.684494
   CLL	      = -0.684494
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506




Total learning time: 12.886 seconds
Total learning time: 12.886 seconds
Total inference time: 1.895 seconds
Total inference time: 1.895 seconds
AUC ROC: 0.548236
AUC ROC: 0.548236




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.665, 299, 346], 'false': [4.084, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.665, 299, 346], 'false': [4.084, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
{'': [0.2486725557358248, 0.1833111943002062]}
{'': [0.2486725557358248, 0.1833111943002062]}
{'': [0.2486725557358284, 0.18331119430020426], 'false': [0.15999999999999998, 0.1845592212006486]}
{'': [0.2486725557358284, 0.18331119430020426], 'false': [0.15999999999999998, 0.1845592212006486]}
{'': [0.24867255573583463, 0.18328535969343918]}
{'': [0.24867255573583463, 0.18328535969343918]}
{'': [0.24867255573583355, 0.1832841360962164]}
{'': [0.24867255573583355, 0.1832841360962164]}
{'': [0.24867255573582772, 0.18328307870476626]}
{'': [0.24867255573582772, 0.18328307870476626]}
{'': [0.2486725557358371, 0.18328217584440246], 'false': [0.16000000000000003, 0.18452657155218768], 'false,false': [0.16000000000000003, 0.18594726413656457]}
{'': [0.2486725557358371, 0.18328217584440246], 'false': [0.16000000000000003, 0.18452657155218768], 'false,false': [0.16000000000000003, 0.18594726413656457]}
{'': [0.24867255573583077, 0.18322715777162557], 'false': [0.15999999999999998, 0.18450048483978487]}
{'': [0.24867255573583077, 0.18322715777162557], 'false': [0.15999999999999998, 0.18450048483978487]}
{'': [0.24867255573583177, 0.18320402931707624], 'false': [0.15999999999999998, 0.1844991906810161]}
{'': [0.24867255573583177, 0.18320402931707624], 'false': [0.15999999999999998, 0.1844991906810161]}
{'': [0.2486725557358347, 0.1831873651143257], 'false': [0.15999999999999998, 0.18448153595296454]}
{'': [0.2486725557358347, 0.1831873651143257], 'false': [0.15999999999999998, 0.18448153595296454]}
{'': [0.24867255573583247, 0.18317061583937352]}
{'': [0.24867255573583247, 0.18317061583937352]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.39325033915567004;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.39325033915567004;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3394625050028261;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09178596434599032;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3394625050028261;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09178596434599032;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28024802868792087;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07937197303760503;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28024802868792087;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07937197303760503;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333203735765042;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06628821857543353;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333203735765042;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06628821857543353;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342780046376102;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055110427963307236;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342780046376102;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055110427963307236;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245773352074172;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02130059582094595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025352894033953615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04947500998613841;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245773352074172;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02130059582094595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025352894033953615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04947500998613841;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020382854094277;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01815297112638;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04036382836420378;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020382854094277;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01815297112638;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04036382836420378;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0754245171503854;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015676719199710303;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.015436582220256312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03485180424457719;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0754245171503854;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015676719199710303;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.015436582220256312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03485180424457719;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056638047632379535;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013102059212135291;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01330807918804534;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0289699310140524;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056638047632379535;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013102059212135291;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01330807918804534;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0289699310140524;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042490251405853545;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011102804356133467;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023252725006035875;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042490251405853545;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011102804356133467;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023252725006035875;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */




Results
Results
   AUC ROC   = 0.547345
   AUC ROC   = 0.547345
   AUC PR    = 0.551723
   AUC PR    = 0.551723
   CLL	      = -0.684625
   CLL	      = -0.684625
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506




Total learning time: 9.959 seconds
Total learning time: 9.959 seconds
Total inference time: 2.024 seconds
Total inference time: 2.024 seconds
AUC ROC: 0.547345
AUC ROC: 0.547345




Refined model AUC ROC: 0.547345
Refined model AUC ROC: 0.547345




Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 02:46:29
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 02:46:29
{'AUC ROC': 0.547345, 'AUC PR': 0.551723, 'CLL': -0.684625, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 22.845, 'Inference time': 2.024, 'Mapping results': {'Knowledge compiling time': 0.11847186088562012, 'Generating paths time': 4.671358108520508, 'Generating mappings time': 0.07217788696289062, 'Possible mappings': 6, 'Finding best mapping': 0.0008842945098876953, 'Total time': 4.862898826599121}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684494, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.886, 'Inference time': 1.895}}
{'AUC ROC': 0.547345, 'AUC PR': 0.551723, 'CLL': -0.684625, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 22.845, 'Inference time': 2.024, 'Mapping results': {'Knowledge compiling time': 0.11847186088562012, 'Generating paths time': 4.671358108520508, 'Generating mappings time': 0.07217788696289062, 'Possible mappings': 6, 'Finding best mapping': 0.0008842945098876953, 'Total time': 4.862898826599121}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684494, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.886, 'Inference time': 1.895}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.08730509952170429;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.08730509952170429;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07555630728897082;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07555630728897082;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02306189413695508;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06724794064858332;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02306189413695508;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06724794064858332;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.019678307969260223;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05724092091581729;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.019678307969260223;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05724092091581729;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01675142253052305;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04838420268387373;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01675142253052305;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04838420268387373;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014230946840946107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040653177616086486;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014230946840946107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040653177616086486;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.010202509498696532;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.012068756905401023;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.036711070748217216;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.010202509498696532;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.012068756905401023;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.036711070748217216;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.027287991540491295;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.027287991540491295;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022655976348646904;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022655976348646904;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */




Results
Results
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   CLL	      = -0.684494
   CLL	      = -0.684494
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506




Total learning time: 12.038 seconds
Total learning time: 12.038 seconds
Total inference time: 1.908 seconds
Total inference time: 1.908 seconds
AUC ROC: 0.548233
AUC ROC: 0.548233




Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 02:46:44
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 02:46:44
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684494, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.038, 'Inference time': 1.908}
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684494, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.038, 'Inference time': 1.908}




Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786242166412516;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786242166412516;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102066023890778;  // std dev = 17,502, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102066023890778;  // std dev = 17,502, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3494130898637832;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5994130898637832;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17983643918540992;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.04831164101085198;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05864555259895872;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24318386018378937;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3494130898637832;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5994130898637832;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17983643918540992;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.04831164101085198;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05864555259895872;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24318386018378937;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3904129376984978;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.13949749688571078;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0037088980979839517;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10792536201251046;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.3292555963459214;  // std dev = 0,354, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return 0.03836511612805075;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.04756046268351458;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1854313057932628;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3904129376984978;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.13949749688571078;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0037088980979839517;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10792536201251046;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.3292555963459214;  // std dev = 0,354, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return 0.03836511612805075;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.04756046268351458;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1854313057932628;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1421256124695079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1421256124695079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.15752200421510643;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4097963234465873;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.07237817447267923;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.16320248757516756;  // std dev = 0,929, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11526116003622218;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10588754399692117;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.15752200421510643;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4097963234465873;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.07237817447267923;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.16320248757516756;  // std dev = 0,929, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11526116003622218;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10588754399692117;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08043814187271979;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08835455048664233;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08043814187271979;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08835455048664233;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06044091185288688;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06697924688770847;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06044091185288688;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06697924688770847;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04545931555183573;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05101976460475077;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04545931555183573;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05101976460475077;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */




Results
Results
   AUC ROC   = 0.440786
   AUC ROC   = 0.440786
   AUC PR    = 0.452304
   AUC PR    = 0.452304
   CLL	      = -0.712955
   CLL	      = -0.712955
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956




Total learning time: 40.332 seconds
Total learning time: 40.332 seconds
Total inference time: 4.021 seconds
Total inference time: 4.021 seconds
AUC ROC: 0.440786
AUC ROC: 0.440786




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(G, E), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,false': 'author(K, I), venue(K, A)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.365, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(G, E), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,false': 'author(K, I), venue(K, A)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.365, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.502, 528, 739], 'false': [3.266, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.502, 528, 739], 'false': [3.266, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordauthor(G, C)', 'true,true,false,false': 'author(H, E), venue(H, A)', 'true,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.354, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordauthor(G, C)', 'true,true,false,false': 'author(H, E), venue(H, A)', 'true,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.354, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.929, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.929, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,false': [0.2222222222222218, 0.2436844875224983], 'true,true': [0.12749999999999959, 0.22222222222222207], 'true,true,false': [0.25, 0.18750000000000003], 'true,false,true': [0.13296398891966726, 0.18750000000000003], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,false,true,false': [0.22222222222222224, 0.16000000000000003]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,false': [0.2222222222222218, 0.2436844875224983], 'true,true': [0.12749999999999959, 0.22222222222222207], 'true,true,false': [0.25, 0.18750000000000003], 'true,false,true': [0.13296398891966726, 0.18750000000000003], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,false,true,false': [0.22222222222222224, 0.16000000000000003]}
{'': [0.2419820886421406, 0.2222222222222228]}
{'': [0.2419820886421406, 0.2222222222222228]}
{'': [0.24177391520979183, 0.22222222222222254]}
{'': [0.24177391520979183, 0.22222222222222254]}
{'': [0.24163196536622303, 0.2222222222222224], 'true': [0.19856349202395984, 0.24266998781058746], 'true,true': [0.12750000000000009, 0.21608788956597494], 'true,true,false': [0.25, 0.1860145461297911], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18749999999999992, -1.1102230246251565e-16]}
{'': [0.24163196536622303, 0.2222222222222224], 'true': [0.19856349202395984, 0.24266998781058746], 'true,true': [0.12750000000000009, 0.21608788956597494], 'true,true,false': [0.25, 0.1860145461297911], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18749999999999992, -1.1102230246251565e-16]}
{'': [0.24099593612963552, 0.22222222222222243], 'true': [0.19639552193885662, 0.24206693119962708], 'true,false': [0.16799356362398646, 0.24368448752248165], 'true,true': [0.12711186675448743, 0.21689843299403344], 'true,true,false': [0.24999999999999994, 0.1858788969311883], 'true,true,false,false': [0.2222222222222222, 0.16000000000000006], 'true,false,true': [0.12562240313547862, 0.18506377202726365], 'true,false,true,false': [0.22222222222222224, 0.15999999999999998]}
{'': [0.24099593612963552, 0.22222222222222243], 'true': [0.19639552193885662, 0.24206693119962708], 'true,false': [0.16799356362398646, 0.24368448752248165], 'true,true': [0.12711186675448743, 0.21689843299403344], 'true,true,false': [0.24999999999999994, 0.1858788969311883], 'true,true,false,false': [0.2222222222222222, 0.16000000000000006], 'true,false,true': [0.12562240313547862, 0.18506377202726365], 'true,false,true,false': [0.22222222222222224, 0.15999999999999998]}
{'': [0.24028445563729614, 0.2222222222222221]}
{'': [0.24028445563729614, 0.2222222222222221]}
{'': [0.18767258656259517, 0.24094214898771715], 'false': [0.2418133114090872, 0.21729289271163404], 'true': [0.12712600262962562, 0.2145373167485216], 'true,false': [0.25, 0.18534268481657867], 'true,false,false': [0.2157441681227484, 0.16000000000000003], 'true,true': [0.18641973819189314, -5.551115123125783e-17]}
{'': [0.18767258656259517, 0.24094214898771715], 'false': [0.2418133114090872, 0.21729289271163404], 'true': [0.12712600262962562, 0.2145373167485216], 'true,false': [0.25, 0.18534268481657867], 'true,false,false': [0.2157441681227484, 0.16000000000000003], 'true,true': [0.18641973819189314, -5.551115123125783e-17]}
{'': [0.23991751037376796, 0.22028836479047043]}
{'': [0.23991751037376796, 0.22028836479047043]}
{'': [0.23992708086452197, 0.22030566520790326]}
{'': [0.23992708086452197, 0.22030566520790326]}
{'': [0.23993811570656107, 0.22032325180526094]}
{'': [0.23993811570656107, 0.22032325180526094]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '6;true;author(E, D), venue(E, B).;true;true', '6;true,true;author(F, D), venue(F, A).;true;true']
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '6;true;author(E, D), venue(E, B).;true;true', '6;true,true;author(F, D), venue(F, A).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.7002541982574071;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786242166412516;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3786242166412516;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4211137828555453;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6711137828555453;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24330671712285;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.10713326968088695;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.003716355389352588;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30877201997511183;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4211137828555453;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6711137828555453;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24330671712285;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.10713326968088695;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.003716355389352588;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30877201997511183;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3225133674473782;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5105267106277829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.19421938590210197;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.030991278694711095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.2435047438934943;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3225133674473782;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5105267106277829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.19421938590210197;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.030991278694711095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.2435047438934943;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18774550996186753;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18774550996186753;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.24114195396462948;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.49527496847950647;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10777169653492313;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.04659056710009557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14905297230668418;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14073851667207846;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.24114195396462948;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.49527496847950647;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10777169653492313;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.04659056710009557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14905297230668418;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14073851667207846;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.18133669016193577;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37421516529868987;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.08180403397370316;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1370999182778353;  // std dev = 0,430, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.10590700020879833;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.18133669016193577;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37421516529868987;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.08180403397370316;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1370999182778353;  // std dev = 0,430, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.10590700020879833;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13393969654469584;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08049398238355235;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0882186507217567;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08049398238355235;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0882186507217567;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060488442570290187;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06687644847726015;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060488442570290187;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06687644847726015;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04549897097612056;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05094153395090114;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04549897097612056;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05094153395090114;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */




Results
Results
   AUC ROC   = 0.440778
   AUC ROC   = 0.440778
   AUC PR    = 0.452313
   AUC PR    = 0.452313
   CLL	      = -0.713635
   CLL	      = -0.713635
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956




Total learning time: 39.682 seconds
Total learning time: 39.682 seconds
Total inference time: 4.665 seconds
Total inference time: 4.665 seconds
AUC ROC: 0.440778
AUC ROC: 0.440778




Refined model AUC ROC: 0.440778
Refined model AUC ROC: 0.440778




Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 02:48:19
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 02:48:19
{'AUC ROC': 0.440778, 'AUC PR': 0.452313, 'CLL': -0.713635, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 80.01400000000001, 'Inference time': 4.665, 'Mapping results': {'Knowledge compiling time': 0.19842934608459473, 'Generating paths time': 4.711407423019409, 'Generating mappings time': 0.06794452667236328, 'Possible mappings': 6, 'Finding best mapping': 0.0008933544158935547, 'Total time': 4.978683710098267}, 'Parameter Learning results': {'AUC ROC': 0.440786, 'AUC PR': 0.452304, 'CLL': -0.712955, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.332, 'Inference time': 4.021}}
{'AUC ROC': 0.440778, 'AUC PR': 0.452313, 'CLL': -0.713635, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 80.01400000000001, 'Inference time': 4.665, 'Mapping results': {'Knowledge compiling time': 0.19842934608459473, 'Generating paths time': 4.711407423019409, 'Generating mappings time': 0.06794452667236328, 'Possible mappings': 6, 'Finding best mapping': 0.0008933544158935547, 'Total time': 4.978683710098267}, 'Parameter Learning results': {'AUC ROC': 0.440786, 'AUC PR': 0.452304, 'CLL': -0.712955, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.332, 'Inference time': 4.021}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14224698895743415;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.1579417181718644;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14224698895743415;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.1579417181718644;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2706077212817182;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5241184997635728;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04436438489417614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.24442130533275513;  // std dev = 0,889, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2758815002364271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10502942222389171;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.132861041981472;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2706077212817182;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5241184997635728;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04436438489417614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.24442130533275513;  // std dev = 0,889, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2758815002364271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10502942222389171;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.132861041981472;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08032006935377858;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08795547190070883;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08032006935377858;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08795547190070883;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.26027558024441183;  // std dev = 0,347, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.013307105073901995;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.20417554954174075;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2274872946613841;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2527551637832529;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.10269899117787655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.22737334771643608;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05728463492419967;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07899711797584735;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.26027558024441183;  // std dev = 0,347, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.013307105073901995;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.20417554954174075;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2274872946613841;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2527551637832529;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.10269899117787655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.22737334771643608;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05728463492419967;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07899711797584735;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541611599250502;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04940159709170786;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541611599250502;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04940159709170786;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */




Results
Results
   AUC ROC   = 0.462513
   AUC ROC   = 0.462513
   AUC PR    = 0.461282
   AUC PR    = 0.461282
   CLL	      = -0.709976
   CLL	      = -0.709976
   Precision = 0.510166 at threshold = 0.5
   Precision = 0.510166 at threshold = 0.5
   Recall    = 0.97195
   Recall    = 0.97195
   F1        = 0.669119
   F1        = 0.669119




Total learning time: 30.059 seconds
Total learning time: 30.059 seconds
Total inference time: 2.612 seconds
Total inference time: 2.612 seconds
AUC ROC: 0.462513
AUC ROC: 0.462513




Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 02:48:52
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 02:48:52
{'AUC ROC': 0.462513, 'AUC PR': 0.461282, 'CLL': -0.709976, 'Precision': [0.510166, 0.5], 'Recall': 0.97195, 'F1': 0.669119, 'Learning time': 30.059, 'Inference time': 2.612}
{'AUC ROC': 0.462513, 'AUC PR': 0.461282, 'CLL': -0.709976, 'Precision': [0.510166, 0.5], 'Recall': 0.97195, 'F1': 0.669119, 'Learning time': 30.059, 'Inference time': 2.612}




Starting fold 3

Starting fold 3

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 15,913, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08161313243011754;  // std dev = 5,195, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 15,913, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08161313243011754;  // std dev = 5,195, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.06987487780308277;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.06987487780308277;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1377263150805499;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0710596484138832;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1764228527587631;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.039473960751179496;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.023383451598958428;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06363029018133287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1377263150805499;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0710596484138832;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1764228527587631;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.039473960751179496;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.023383451598958428;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06363029018133287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222034186466855;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01995720401309891;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.052204175426783815;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222034186466855;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01995720401309891;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.052204175426783815;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07335740065423202;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.022913302494651407;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10256228254897003;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.01699213925686361;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.043673446261445176;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07335740065423202;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.022913302494651407;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10256228254897003;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.01699213925686361;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.043673446261445176;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0753037993083359;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01838566382613109;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014437845919607326;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03762774299924891;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0753037993083359;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01838566382613109;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014437845919607326;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03762774299924891;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.006762732092528632;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.046926936963892565;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.061756536425459106;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else return 0.030079266450770446;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.006762732092528632;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.046926936963892565;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.061756536425459106;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else return 0.030079266450770446;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03497744248135538;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.02469556323483591;  // std dev = 0,479, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.04482957074104418;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.024766714223226006;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03497744248135538;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.02469556323483591;  // std dev = 0,479, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.04482957074104418;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.024766714223226006;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */




Results
Results
   AUC ROC   = 0.547994
   AUC ROC   = 0.547994
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.684882
   CLL	      = -0.684882
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196




Total learning time: 25.029 seconds
Total learning time: 25.029 seconds
Total inference time: 2.335 seconds
Total inference time: 2.335 seconds
AUC ROC: 0.547994
AUC ROC: 0.547994




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.913, 473, 545], 'false': [5.195, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.913, 473, 545], 'false': [5.195, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,true': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.477, 28, 18], 'false,true,true': [0.496, 17, 13], 'false,true,false': [0.498, 436, 516], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,true': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.477, 28, 18], 'false,true,true': [0.496, 17, 13], 'false,true,false': [0.498, 436, 516], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.479, 24, 15], 'false,true': [0.498, 453, 529], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.479, 24, 15], 'false,true': [0.498, 453, 529], 'false,false': [0.434, 101, 34]}]
{'': [0.24874942585522805, 0.18750000000000128], 'false': [0.17283950617283952, 0.18842249657064597], 'false,false': [0.16000000000000003, 0.19046400000000122]}
{'': [0.24874942585522805, 0.18750000000000128], 'false': [0.17283950617283952, 0.18842249657064597], 'false,false': [0.16000000000000003, 0.19046400000000122]}
{'': [0.24874942585523416, 0.18743865388620684], 'false': [0.1728395061728396, 0.18837044722037913], 'false,false': [0.16, 0.19046400000000013]}
{'': [0.24874942585523416, 0.18743865388620684], 'false': [0.1728395061728396, 0.18837044722037913], 'false,false': [0.16, 0.19046400000000013]}
{'': [0.248749425855229, 0.18738715583711402]}
{'': [0.248749425855229, 0.18738715583711402]}
{'': [0.24874942585523707, 0.18738186218457556]}
{'': [0.24874942585523707, 0.18738186218457556]}
{'': [0.2487494258552306, 0.18737734040829693], 'true': [0.24691358024691354, 0.24850257797171685], 'true,true': [0.25000000000000006, 0.24555555555555544], 'false': [0.17283950617283955, 0.18831850535088251], 'false,false': [0.15999999999999995, 0.19046399999999927]}
{'': [0.2487494258552306, 0.18737734040829693], 'true': [0.24691358024691354, 0.24850257797171685], 'true,true': [0.25000000000000006, 0.24555555555555544], 'false': [0.17283950617283955, 0.18831850535088251], 'false,false': [0.15999999999999995, 0.19046399999999927]}
{'': [0.24861309887755, 0.18733754022713], 'false': [0.16000000000000003, 0.1893054421718589]}
{'': [0.24861309887755, 0.18733754022713], 'false': [0.16000000000000003, 0.1893054421718589]}
{'': [0.2486101897954065, 0.18731533479841567], 'true': [0.24664971394062038, 0.24850257797171998], 'true,true': [0.25, 0.24555555555555572], 'false': [0.15999999999999995, 0.18930435566478507]}
{'': [0.2486101897954065, 0.18731533479841567], 'true': [0.24664971394062038, 0.24850257797171998], 'true,true': [0.25, 0.24555555555555572], 'false': [0.15999999999999995, 0.18930435566478507]}
{'': [0.24852931475796974, 0.18729948672089214], 'false': [0.1728395061728394, 0.18824429158618347], 'false,false': [0.16, 0.1904639999999993]}
{'': [0.24852931475796974, 0.18729948672089214], 'false': [0.1728395061728394, 0.18824429158618347], 'false,false': [0.16, 0.1904639999999993]}
{'': [0.22769910268056293, 0.24147848046234044], 'false': [0.2485025779717136, 0.18929581030045894], 'false,true': [0.24555555555555533, 0.24823458795282288]}
{'': [0.22769910268056293, 0.24147848046234044], 'false': [0.2485025779717136, 0.18929581030045894], 'false,true': [0.24555555555555533, 0.24823458795282288]}
{'': [0.23233679429882378, 0.24101493109525815], 'false': [0.24822395256192648, 0.18822210486111807], 'true': [0.24999999999999997, 0.22914459568894366]}
{'': [0.23233679429882378, 0.24101493109525815], 'false': [0.24822395256192648, 0.18822210486111807], 'true': [0.24999999999999997, 0.22914459568894366]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;true,true;haswordauthor(F, C).;true;true', '4;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '4;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;haswordauthor(F, C).;true;true', '6;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;false,true;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;true,true;haswordauthor(F, C).;true;true', '4;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '4;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;haswordauthor(F, C).;true;true', '6;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '8;false,true;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1458639986908663;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.07029739243727381;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.17639366599924486;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.03906614089523557;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06320606432154353;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1458639986908663;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.07029739243727381;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.17639366599924486;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.03906614089523557;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06320606432154353;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.063404569664319;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474438945631445;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.05183302982233765;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.063404569664319;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474438945631445;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.05183302982233765;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.09667727973212736;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.02168843749457777;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10244785396022182;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.020954815063583265;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04335238773985821;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.09667727973212736;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.02168843749457777;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10244785396022182;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.020954815063583265;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04335238773985821;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07530314239170771;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018121296844786486;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01785396712826009;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.0373525040545716;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07530314239170771;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018121296844786486;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01785396712826009;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.0373525040545716;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.05469499171656389;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.001986611656134533;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.01517917379970828;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.00448392282507291;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.06033918376732087;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else return 0.029846834922707077;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return 0.05469499171656389;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.001986611656134533;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.01517917379970828;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.00448392282507291;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.06033918376732087;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   | else return 0.029846834922707077;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.04114771601509016;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return -0.003380589557508762;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.010218519641294261;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.04383400996675964;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.012881298493372639;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02565536445722553;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.04114771601509016;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return -0.003380589557508762;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.010218519641294261;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.04383400996675964;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.012881298493372639;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02565536445722553;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */




Results
Results
   AUC ROC   = 0.547985
   AUC ROC   = 0.547985
   AUC PR    = 0.555914
   AUC PR    = 0.555914
   CLL	      = -0.684899
   CLL	      = -0.684899
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196




Total learning time: 17.025 seconds
Total learning time: 17.025 seconds
Total inference time: 2.58 seconds
Total inference time: 2.58 seconds
AUC ROC: 0.547985
AUC ROC: 0.547985




Refined model AUC ROC: 0.547985
Refined model AUC ROC: 0.547985




Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 02:49:45
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 02:49:45
{'AUC ROC': 0.547985, 'AUC PR': 0.555914, 'CLL': -0.684899, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.054, 'Inference time': 2.58, 'Mapping results': {'Knowledge compiling time': 0.1570756435394287, 'Generating paths time': 4.701690196990967, 'Generating mappings time': 0.07460856437683105, 'Possible mappings': 6, 'Finding best mapping': 0.0009205341339111328, 'Total time': 4.934303045272827}, 'Parameter Learning results': {'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684882, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 25.029, 'Inference time': 2.335}}
{'AUC ROC': 0.547985, 'AUC PR': 0.555914, 'CLL': -0.684899, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.054, 'Inference time': 2.58, 'Mapping results': {'Knowledge compiling time': 0.1570756435394287, 'Generating paths time': 4.701690196990967, 'Generating mappings time': 0.07460856437683105, 'Possible mappings': 6, 'Finding best mapping': 0.0009205341339111328, 'Total time': 4.934303045272827}, 'Parameter Learning results': {'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684882, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 25.029, 'Inference time': 2.335}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27950378122247355;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03853867052204916;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0848589630439226;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27950378122247355;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03853867052204916;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0848589630439226;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22280183961507852;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.06987867477070332;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22280183961507852;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.06987867477070332;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307250750330536;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.023316061639461174;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.062016221405880874;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307250750330536;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.023316061639461174;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.062016221405880874;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322278089297;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02573867290221071;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.019898744041103623;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.054128969815063044;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322278089297;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02573867290221071;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.019898744041103623;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.054128969815063044;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005691217371802;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04182340752847973;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005691217371802;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04182340752847973;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07533035913137653;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010603982307919044;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.036656638464023145;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07533035913137653;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010603982307919044;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.036656638464023145;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.04915456179949463;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0014427860446714791;  // std dev = 0,473, 40,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.0583832727832805;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.008763248488815613;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031917542311017386;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.04915456179949463;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0014427860446714791;  // std dev = 0,473, 40,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.0583832727832805;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.008763248488815613;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031917542311017386;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04242580418927779;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.023909538582982393;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04242580418927779;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.023909538582982393;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */




Results
Results
   AUC ROC   = 0.547858
   AUC ROC   = 0.547858
   AUC PR    = 0.555876
   AUC PR    = 0.555876
   CLL	      = -0.684879
   CLL	      = -0.684879
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196




Total learning time: 25.882 seconds
Total learning time: 25.882 seconds
Total inference time: 2.205 seconds
Total inference time: 2.205 seconds
AUC ROC: 0.547858
AUC ROC: 0.547858




Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 02:50:14
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 02:50:14
{'AUC ROC': 0.547858, 'AUC PR': 0.555876, 'CLL': -0.684879, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 25.882, 'Inference time': 2.205}
{'AUC ROC': 0.547858, 'AUC PR': 0.555876, 'CLL': -0.684879, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 25.882, 'Inference time': 2.205}




Starting fold 4

Starting fold 4

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3206703424096839;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3206703424096839;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2674103919926687;  // std dev = 18,606, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 4,515, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2674103919926687;  // std dev = 18,606, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 4,515, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21411368616157322;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21411368616157322;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.167134283053964;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.167134283053964;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5970477720224965;  // std dev = 0,112, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3880234851902124;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.3980699378212912;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1264255880474351;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5970477720224965;  // std dev = 0,112, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3880234851902124;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.3980699378212912;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1264255880474351;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4469192817932769;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3007437928105154;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2974050655602552;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.0957586077202297;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4469192817932769;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3007437928105154;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2974050655602552;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.0957586077202297;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07348803905273907;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07348803905273907;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3437931472053401;  // std dev = 0,149, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.2552102502711082;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06416635215108613;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.4229520918607994;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.3375112174501522;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.22210685368198244;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05315869285431473;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3437931472053401;  // std dev = 0,149, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.2552102502711082;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06416635215108613;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.4229520918607994;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.3375112174501522;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.22210685368198244;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05315869285431473;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041590890095242396;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041590890095242396;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */




Results
Results
   AUC ROC   = 0.571833
   AUC ROC   = 0.571833
   AUC PR    = 0.592328
   AUC PR    = 0.592328
   CLL	      = -0.678469
   CLL	      = -0.678469
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518




Total learning time: 36.844 seconds
Total learning time: 36.844 seconds
Total inference time: 3.365 seconds
Total inference time: 3.365 seconds
AUC ROC: 0.571833
AUC ROC: 0.571833




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.606, 672, 719], 'false': [4.515, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.606, 672, 719], 'false': [4.515, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.112, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.881, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.112, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.881, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.106, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.881, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.106, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.881, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.149, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.792, 1, 2], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.149, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.792, 1, 2], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.496, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.496, 672, 719], 'false': [0.445, 75, 28]}]
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24887842221645773, 0.19794514091808826]}
{'': [0.24887842221645773, 0.19794514091808826]}
{'': [0.24879423038966594, 0.1979451409180892]}
{'': [0.24879423038966594, 0.1979451409180892]}
{'': [0.24874027650647793, 0.19794514091808763]}
{'': [0.24874027650647793, 0.19794514091808763]}
{'': [0.24870881438886305, 0.19794514091808932], 'true': [0.21617441086646877, 0.24887544013281288], 'true,true': [0.23063232373032727, 0.15521094073874936], 'true,true,true': [0.0015600715284637134, -2.2204460492503132e-17]}
{'': [0.24870881438886305, 0.19794514091808932], 'true': [0.21617441086646877, 0.24887544013281288], 'true,true': [0.23063232373032727, 0.15521094073874936], 'true,true,true': [0.0015600715284637134, -2.2204460492503132e-17]}
{'': [0.247640674332152, 0.19794514091808854], 'true': [0.13608730472085973, 0.2488103015970803], 'true,true': [0.12514996687968494, 0.15531942305392027], 'true,true,true': [0.001391592610862108, 0.0]}
{'': [0.247640674332152, 0.19794514091808854], 'true': [0.13608730472085973, 0.2488103015970803], 'true,true': [0.12514996687968494, 0.15531942305392027], 'true,true,true': [0.001391592610862108, 0.0]}
{'': [0.24710499734535568, 0.19794514091808735]}
{'': [0.24710499734535568, 0.19794514091808735]}
{'': [0.24709815581492164, 0.19794514091808735], 'true': [0.10017439985961842, 0.24879525610269687], 'true,false': [0.15481871074458486, 0.24982431063614954], 'true,false,true': [0.14056010811309547, 0.1875], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.07481013317104421, 0.20884922724393196], 'true,true,true': [0.0022184520999396053, 0.0]}
{'': [0.24709815581492164, 0.19794514091808735], 'true': [0.10017439985961842, 0.24879525610269687], 'true,false': [0.15481871074458486, 0.24982431063614954], 'true,false,true': [0.14056010811309547, 0.1875], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.07481013317104421, 0.20884922724393196], 'true,true,true': [0.0022184520999396053, 0.0]}
{'': [0.24625356165216242, 0.19794514091808849]}
{'': [0.24625356165216242, 0.19794514091808849]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;samebib(F, G), venue(G, B).;true;true', '8;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '8;true,false,true;author(J, I), venue(J, A).;true;true', '8;true,false,true,true;samebib(J, K), venue(K, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;samebib(F, G), venue(G, B).;true;true', '8;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '8;true,false,true;author(J, I), venue(J, A).;true;true', '8;true,false,true,true;samebib(J, K), venue(K, B).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.37140372155017015;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.37140372155017015;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5652614367137483;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3208995709237665;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5652614367137483;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3208995709237665;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4494290758816769;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2658757583622731;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4494290758816769;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2658757583622731;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21373798046760276;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21373798046760276;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669649865211457;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669649865211457;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4729923014198519;  // std dev = 0,055, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27400977519632597;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.32217681228556916;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.12699495750067868;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4729923014198519;  // std dev = 0,055, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27400977519632597;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.32217681228556916;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.12699495750067868;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.29294796743880314;  // std dev = 0,063, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.15816913884128364;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20647154101219706;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09663299218395184;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.29294796743880314;  // std dev = 0,063, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.15816913884128364;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20647154101219706;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09663299218395184;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.3129436948280765;  // std dev = 0,147, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3554305907886889;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.24016966540500467;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.21412414705465865;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07274441958366155;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.3129436948280765;  // std dev = 0,147, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3554305907886889;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.24016966540500467;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.21412414705465865;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07274441958366155;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2459384646399141;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1471239401007036;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.008700831376424115;  // std dev = 0,785, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.2824424450331503;  // std dev = 0,011, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19910154153098197;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1373272067227497;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05434828806558693;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2459384646399141;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1471239401007036;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.008700831376424115;  // std dev = 0,785, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.2824424450331503;  // std dev = 0,011, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19910154153098197;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1373272067227497;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05434828806558693;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041782294243819226;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041782294243819226;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */




Results
Results
   AUC ROC   = 0.572741
   AUC ROC   = 0.572741
   AUC PR    = 0.59253
   AUC PR    = 0.59253
   CLL	      = -0.677878
   CLL	      = -0.677878
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518




Total learning time: 40.424 seconds
Total learning time: 40.424 seconds
Total inference time: 5.217 seconds
Total inference time: 5.217 seconds
AUC ROC: 0.572741
AUC ROC: 0.572741




Refined model AUC ROC: 0.572741
Refined model AUC ROC: 0.572741




Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 02:51:47
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 02:51:47
{'AUC ROC': 0.572741, 'AUC PR': 0.59253, 'CLL': -0.677878, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 77.268, 'Inference time': 5.217, 'Mapping results': {'Knowledge compiling time': 0.14289069175720215, 'Generating paths time': 4.665782690048218, 'Generating mappings time': 0.07332324981689453, 'Possible mappings': 6, 'Finding best mapping': 0.00091552734375, 'Total time': 4.8829216957092285}, 'Parameter Learning results': {'AUC ROC': 0.571833, 'AUC PR': 0.592328, 'CLL': -0.678469, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.844, 'Inference time': 3.365}}
{'AUC ROC': 0.572741, 'AUC PR': 0.59253, 'CLL': -0.677878, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 77.268, 'Inference time': 5.217, 'Mapping results': {'Knowledge compiling time': 0.14289069175720215, 'Generating paths time': 4.665782690048218, 'Generating mappings time': 0.07332324981689453, 'Possible mappings': 6, 'Finding best mapping': 0.00091552734375, 'Total time': 4.8829216957092285}, 'Parameter Learning results': {'AUC ROC': 0.571833, 'AUC PR': 0.592328, 'CLL': -0.678469, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.844, 'Inference time': 3.365}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32300862228540816;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32300862228540816;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2675192676197991;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2675192676197991;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21418489323254222;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21418489323254222;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16716835232310373;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16716835232310373;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12826455880834944;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12826455880834944;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09739061298338522;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09739061298338522;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5566113242513203;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.44338867574867963;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3566113242513204;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07116736500823517;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5566113242513203;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.44338867574867963;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3566113242513204;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07116736500823517;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05528178788836935;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05528178788836935;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4050485967481045;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3296422649596658;  // std dev = 0,095, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2540121717712161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5252213965708626;  // std dev = 2,98e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.43648447447214594;  // std dev = 0,210, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.27522139657086275;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.03847618302152902;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.0322138930850886;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4050485967481045;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3296422649596658;  // std dev = 0,095, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2540121717712161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5252213965708626;  // std dev = 2,98e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.43648447447214594;  // std dev = 0,210, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.27522139657086275;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.03847618302152902;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.0322138930850886;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */




Results
Results
   AUC ROC   = 0.571069
   AUC ROC   = 0.571069
   AUC PR    = 0.584781
   AUC PR    = 0.584781
   CLL	      = -0.680366
   CLL	      = -0.680366
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475




Total learning time: 40.835 seconds
Total learning time: 40.835 seconds
Total inference time: 2.359 seconds
Total inference time: 2.359 seconds
AUC ROC: 0.571069
AUC ROC: 0.571069




Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 02:52:30
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 02:52:30
{'AUC ROC': 0.571069, 'AUC PR': 0.584781, 'CLL': -0.680366, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.835, 'Inference time': 2.359}
{'AUC ROC': 0.571069, 'AUC PR': 0.584781, 'CLL': -0.680366, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.835, 'Inference time': 2.359}




Starting fold 5

Starting fold 5

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6856749352272815;  // std dev = 0,220, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.1455032542856268;  // std dev = 0,065, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.031564855112908505;  // std dev = 0,266, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.6853797874949548;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.2984795363559846;  // std dev = 0,434, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6856749352272815;  // std dev = 0,220, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.1455032542856268;  // std dev = 0,065, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.031564855112908505;  // std dev = 0,266, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.6853797874949548;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.2984795363559846;  // std dev = 0,434, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3153773196146811;  // std dev = 13,803, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3153773196146811;  // std dev = 13,803, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.248417638484163;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6225929538228894;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17740704617711073;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17740704617711076;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11527588065215762;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5725929538228893;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17740704617711073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11206663803341564;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.015575409963240064;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.248417638484163;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6225929538228894;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17740704617711073;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17740704617711076;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11527588065215762;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5725929538228893;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17740704617711073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11206663803341564;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.015575409963240064;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12909706699114815;  // std dev = 0,393, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19582696290143473;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.513291008234319;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15297939944588373;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0807233526658153;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.005746966589498409;  // std dev = 0,803, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.17285206368172484;  // std dev = 1,010, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.11119918525845332;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.013290999538108299;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12909706699114815;  // std dev = 0,393, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19582696290143473;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.513291008234319;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15297939944588373;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0807233526658153;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.005746966589498409;  // std dev = 0,803, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.17285206368172484;  // std dev = 1,010, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.11119918525845332;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.013290999538108299;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1447864660739984;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5153981560786908;  // std dev = 0,930, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17375486279671834;  // std dev = 0,045, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06002889490593774;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08796963428380018;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.011323526812919567;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1447864660739984;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5153981560786908;  // std dev = 0,930, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17375486279671834;  // std dev = 0,045, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06002889490593774;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08796963428380018;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.011323526812919567;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04954761681210715;  // std dev = 0,345, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.018925858430195272;  // std dev = 0,400, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.12040696262947709;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.11711307191077913;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.17479961890290865;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06935405473577225;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -0.013262020822115372;  // std dev = 0,699, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08256512205417423;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.009634111204041866;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04954761681210715;  // std dev = 0,345, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.018925858430195272;  // std dev = 0,400, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.12040696262947709;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.11711307191077913;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.17479961890290865;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06935405473577225;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -0.013262020822115372;  // std dev = 0,699, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08256512205417423;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.009634111204041866;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08214154011472205;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05260020064822874;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.059134499907626724;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00818717616142051;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08214154011472205;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05260020064822874;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.059134499907626724;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00818717616142051;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06201510730833625;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3364430745162176;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16627441848257035;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0335146345027248;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020632209679994785;  // std dev = 0,695, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.05084150024081628;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05750198701369872;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.006950626771059874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06201510730833625;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3364430745162176;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16627441848257035;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0335146345027248;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020632209679994785;  // std dev = 0,695, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.05084150024081628;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05750198701369872;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.006950626771059874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.007706142511082452;  // std dev = 0,342, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.04997900062577253;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.2525429498634981;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14448394195693365;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.02738636772721376;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.0172958311996043;  // std dev = 0,697, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.04029064730033666;  // std dev = 0,910, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04662191772831195;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.00589583755322754;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.007706142511082452;  // std dev = 0,342, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.04997900062577253;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.2525429498634981;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14448394195693365;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.02738636772721376;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.0172958311996043;  // std dev = 0,697, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.04029064730033666;  // std dev = 0,910, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04662191772831195;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.00589583755322754;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */




Results
Results
   AUC ROC   = 0.549787
   AUC ROC   = 0.549787
   AUC PR    = 0.570295
   AUC PR    = 0.570295
   CLL	      = -0.685777
   CLL	      = -0.685777
   Precision = 0.54556 at threshold = 0.5
   Precision = 0.54556 at threshold = 0.5
   Recall    = 0.951358
   Recall    = 0.951358
   F1        = 0.693455
   F1        = 0.693455




Total learning time: 35.498 seconds
Total learning time: 35.498 seconds
Total inference time: 4.769 seconds
Total inference time: 4.769 seconds
AUC ROC: 0.549787
AUC ROC: 0.549787




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'author(F, E), venue(F, B)', 'true,true,false,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false': [0.433, 15, 5], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [0.0, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.429, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'author(F, E), venue(F, B)', 'true,true,false,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false': [0.433, 15, 5], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [0.0, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.429, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'author(H, E), venue(H, B)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true,true': [0.22, 1, 19], 'true,true,true,false': [0.065, 21, 0], 'true,true,false,true': [0.266, 8, 1], 'true,true,false,false': [0.272, 1, 10], 'true,false,true,true': [0.434, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false': [0.429, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'author(H, E), venue(H, B)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true,true': [0.22, 1, 19], 'true,true,true,false': [0.065, 21, 0], 'true,true,false,true': [0.266, 8, 1], 'true,true,false,false': [0.272, 1, 10], 'true,false,true,true': [0.434, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false': [0.429, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [13.803, 338, 498], 'false': [6.274, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [13.803, 338, 498], 'false': [6.274, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [5.27e-09, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.866, 1, 3], 'false,false,true,true,false': [0.0, 4, 0], 'false,false,true,false': [0.454, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [5.27e-09, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.866, 1, 3], 'false,false,true,true,false': [0.0, 4, 0], 'false,false,true,false': [0.454, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.393, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [3.73e-09, 5, 0], 'false,true,false': [0.444, 32, 12], 'false,false,true,true': [0.803, 4, 1], 'false,false,true,false,true': [1.01, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.393, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [3.73e-09, 5, 0], 'false,true,false': [0.444, 32, 12], 'false,false,true,true': [0.803, 4, 1], 'false,false,true,false,true': [1.01, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)'}, {'true': [0.474, 338, 498], 'false,true,true,true': [0.93, 1, 4], 'false,true,true,false': [0.045, 5, 0], 'false,true,false': [0.437, 32, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)'}, {'true': [0.474, 338, 498], 'false,true,true,true': [0.93, 1, 4], 'false,true,true,false': [0.045, 5, 0], 'false,true,false': [0.437, 32, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,false': 'author(K, I), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.345, 31, 30], 'true,false,true': [0.4, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.385, 6, 4], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true': [0.699, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,false': 'author(K, I), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.345, 31, 30], 'true,false,true': [0.4, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.385, 6, 4], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true': [0.699, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.429, 38, 16], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.429, 38, 16], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.896, 1, 4], 'false,true,true,false': [0.003, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.695, 4, 1], 'false,false,true,false,true': [0.912, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.896, 1, 4], 'false,true,true,false': [0.003, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.695, 4, 1], 'false,false,true,false,true': [0.912, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.342, 31, 30], 'true,false': [0.481, 307, 468], 'false,true,true,true': [0.896, 1, 4], 'false,true,true,false': [0.003, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.697, 4, 1], 'false,false,true,false,true': [0.91, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.342, 31, 30], 'true,false': [0.481, 307, 468], 'false,true,true,true': [0.896, 1, 4], 'false,true,true,false': [0.003, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.697, 4, 1], 'false,false,true,false,true': [0.91, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2499328137597435, 0.2392108220603487], 'true,true': [-8.881784197001253e-17, 0.23836985774702002], 'true,false': [0.241566014160766, 0.23629229940273755], 'true,false,true': [0.24999999999999953, 0.19390581717451505], 'true,false,true,true': [0.05859374999999978, -1.1895246692412391e-17], 'true,true,false': [0.24973985431841786, 0.18749999999999983], 'true,true,false,true': [0.05859374999999978, -1.4802973661668754e-17]}
{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2499328137597435, 0.2392108220603487], 'true,true': [-8.881784197001253e-17, 0.23836985774702002], 'true,false': [0.241566014160766, 0.23629229940273755], 'true,false,true': [0.24999999999999953, 0.19390581717451505], 'true,false,true,true': [0.05859374999999978, -1.1895246692412391e-17], 'true,true,false': [0.24973985431841786, 0.18749999999999983], 'true,true,false,true': [0.05859374999999978, -1.4802973661668754e-17]}
{'': [0.2340124946847172, 0.18394619617434038], 'true': [0.1998033110739977, 0.2359487427193948], 'true,false': [0.19940019436145273, 0.23629229940274585], 'true,true': [0.19638222960656093, 0.19971283819505742], 'true,true,false': [0.07050730987310383, 0.07412212302280335], 'true,false,true': [0.1884977427949735, 0.19390581717451527], 'true,true,true': [0.04851865900360144, 0.00020117403304819882], 'true,false,true,false': [0.06632653061224489, 0.16000000000000006]}
{'': [0.2340124946847172, 0.18394619617434038], 'true': [0.1998033110739977, 0.2359487427193948], 'true,false': [0.19940019436145273, 0.23629229940274585], 'true,true': [0.19638222960656093, 0.19971283819505742], 'true,true,false': [0.07050730987310383, 0.07412212302280335], 'true,false,true': [0.1884977427949735, 0.19390581717451527], 'true,true,true': [0.04851865900360144, 0.00020117403304819882], 'true,false,true,false': [0.06632653061224489, 0.16000000000000006]}
{'': [0.2278987211067903, 0.18394619617433852]}
{'': [0.2278987211067903, 0.18394619617433852]}
{'': [0.2262335625307728, 0.18394619617433824], 'false': [0.20850480109739364, 0.174375], 'false,true': [0.23999999999999994, 0.19834710743801648], 'false,true,true': [0.15999999999999992, 5.551115123125783e-18], 'false,true,false': [-4.625929269271485e-18, 0.20701963117192143], 'false,false': [0.21172022684310013, 0.15574022776238838], 'false,false,true': [0.23437499999999994, 0.20567867036011075], 'false,false,true,true': [0.18749999999999994, 0.0]}
{'': [0.2262335625307728, 0.18394619617433824], 'false': [0.20850480109739364, 0.174375], 'false,true': [0.23999999999999994, 0.19834710743801648], 'false,true,true': [0.15999999999999992, 5.551115123125783e-18], 'false,true,false': [-4.625929269271485e-18, 0.20701963117192143], 'false,false': [0.21172022684310013, 0.15574022776238838], 'false,false,true': [0.23437499999999994, 0.20567867036011075], 'false,false,true,true': [0.18749999999999994, 0.0]}
{'': [0.2251539881240293, 0.17856130136532924], 'true': [0.15424101399760975, 0.23041061441425698], 'false': [0.1972961991192042, 0.17135792699746538], 'false,true': [0.19097906403758574, 0.19690102044206467], 'false,true,true': [0.15999999999999998, 2.7755575615628915e-18], 'false,false': [0.20388069932948136, 0.15574022776238822], 'false,false,true': [0.12910116644244288, 0.21161293545670798], 'false,false,true,false': [0.2041107615759188, 0.21219135802469136]}
{'': [0.2251539881240293, 0.17856130136532924], 'true': [0.15424101399760975, 0.23041061441425698], 'false': [0.1972961991192042, 0.17135792699746538], 'false,true': [0.19097906403758574, 0.19690102044206467], 'false,true,true': [0.15999999999999998, 2.7755575615628915e-18], 'false,false': [0.20388069932948136, 0.15574022776238822], 'false,false,true': [0.12910116644244288, 0.21161293545670798], 'false,false,true,false': [0.2041107615759188, 0.21219135802469136]}
{'': [0.2244653926270386, 0.175603360167273], 'false': [0.19546101285956574, 0.16833955181264862], 'false,true': [0.20533303321670573, 0.19094421745504297], 'false,true,true': [0.172803770203087, 0.0003963545177795569], 'false,false': [0.19537829271369075, 0.1557402277623886]}
{'': [0.2244653926270386, 0.175603360167273], 'false': [0.19546101285956574, 0.16833955181264862], 'false,true': [0.20533303321670573, 0.19094421745504297], 'false,true,true': [0.172803770203087, 0.0003963545177795569], 'false,false': [0.19537829271369075, 0.1557402277623886]}
{'': [0.22409021438429183, 0.17282554472977218], 'true': [0.11869561146507521, 0.23208276581650197], 'true,false': [0.16006565271420153, 0.23629229940274327], 'false': [0.18577793167305465, 0.16810816033423945], 'false,true': [0.14848789231791684, 0.19348477124392618], 'false,true,false': [3.5875796936118975e-06, 0.20357754354574067], 'false,false': [0.1959745829219634, 0.15574022776238836], 'false,false,true': [0.09764119308902938, 0.2069683248056586]}
{'': [0.22409021438429183, 0.17282554472977218], 'true': [0.11869561146507521, 0.23208276581650197], 'true,false': [0.16006565271420153, 0.23629229940274327], 'false': [0.18577793167305465, 0.16810816033423945], 'false,true': [0.14848789231791684, 0.19348477124392618], 'false,true,false': [3.5875796936118975e-06, 0.20357754354574067], 'false,false': [0.1959745829219634, 0.15574022776238836], 'false,false,true': [0.09764119308902938, 0.2069683248056586]}
{'': [0.22365163681220857, 0.17198553586803123], 'false': [0.18398178339288107, 0.1677132334850981], 'false,false': [0.19553607882847834, 0.1557402277623883]}
{'': [0.22365163681220857, 0.17198553586803123], 'false': [0.18398178339288107, 0.1677132334850981], 'false,false': [0.19553607882847834, 0.1557402277623883]}
{'': [0.22352006287909074, 0.17162707156940943], 'false': [0.18357519260295532, 0.16744643249668362], 'false,true': [0.143464007259325, 0.19219888344400735], 'false,false': [0.1952401234785881, 0.15574022776238816], 'false,false,true': [0.09658684977388933, 0.20662115369542017], 'false,false,true,false': [0.16647673045086744, 0.21219135802469113], 'false,true,true': [0.16056320204566615, 2.3735894907173092e-06]}
{'': [0.22352006287909074, 0.17162707156940943], 'false': [0.18357519260295532, 0.16744643249668362], 'false,true': [0.143464007259325, 0.19219888344400735], 'false,false': [0.1952401234785881, 0.15574022776238816], 'false,false,true': [0.09658684977388933, 0.20662115369542017], 'false,false,true,false': [0.16647673045086744, 0.21219135802469113], 'false,true,true': [0.16056320204566615, 2.3735894907173092e-06]}
{'': [0.22344654036235884, 0.170219520303832], 'true': [0.11712539486650929, 0.23168465267776242], 'false': [0.1788028379023002, 0.16725048713899343], 'false,true': [0.11968947165917213, 0.19210623892072887], 'false,false': [0.19499574707217243, 0.15574022776238816], 'false,false,true': [0.09705724763918135, 0.20650605649327797], 'false,false,true,false': [0.16553668889470208, 0.21219135802469127], 'false,true,true': [0.1605618811419703, 1.8857620775997175e-06]}
{'': [0.22344654036235884, 0.170219520303832], 'true': [0.11712539486650929, 0.23168465267776242], 'false': [0.1788028379023002, 0.16725048713899343], 'false,true': [0.11968947165917213, 0.19210623892072887], 'false,false': [0.19499574707217243, 0.15574022776238816], 'false,false,true': [0.09705724763918135, 0.20650605649327797], 'false,false,true,false': [0.16553668889470208, 0.21219135802469127], 'false,true,true': [0.1605618811419703, 1.8857620775997175e-06]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;true,true,false;author(F, E), venue(F, B).;true;true', '0;true,true,false,true;samebib(F, G), venue(G, A).;true;true', '0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '0;true,false,true;author(J, I), venue(J, A).;true;true', '0;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;false,true;author(F, E), venue(F, B).;true;true', '3;false,true,true;samebib(F, G), venue(G, A).;true;true', '3;false,true,false;author(H, E), venue(H, A).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;false,false,true;author(K, J), venue(K, A).;true;true', '3;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;false,true;author(H, G), venue(H, B).;true;true', '4;false,true,true;samebib(H, I), venue(I, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,true;author(F, E), venue(F, A).;true;true', '5;false,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '6;false,true;author(J, I), venue(J, B).;true;true', '6;false,true,false;author(K, I), venue(K, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;false,true;author(H, G), venue(H, B).;true;true', '9;false,true,true;samebib(H, I), venue(I, A).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;true,true,false;author(F, E), venue(F, B).;true;true', '0;true,true,false,true;samebib(F, G), venue(G, A).;true;true', '0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '0;true,false,true;author(J, I), venue(J, A).;true;true', '0;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;false,true;author(F, E), venue(F, B).;true;true', '3;false,true,true;samebib(F, G), venue(G, A).;true;true', '3;false,true,false;author(H, E), venue(H, A).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;false,false,true;author(K, J), venue(K, A).;true;true', '3;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;false,true;author(H, G), venue(H, B).;true;true', '4;false,true,true;samebib(H, I), venue(I, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,true;author(F, E), venue(F, A).;true;true', '5;false,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '6;false,true;author(J, I), venue(J, B).;true;true', '6;false,true,false;author(K, I), venue(K, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;false,true;author(H, G), venue(H, B).;true;true', '9;false,true,true;samebib(H, I), venue(I, A).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6856749352272815;  // std dev = 0,220, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.1455032542856268;  // std dev = 0,065, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7194734122109546;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17067539084243435;  // std dev = 0,449, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.3954680062697694;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.6453858393899019;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15461416061009814;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11811311211717458;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07038583938990187;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6856749352272815;  // std dev = 0,220, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.1455032542856268;  // std dev = 0,065, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7194734122109546;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17067539084243435;  // std dev = 0,449, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.3954680062697694;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.6453858393899019;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15461416061009814;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11811311211717458;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07038583938990187;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5914366186761444;  // std dev = 0,221, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.19630355549562206;  // std dev = 0,138, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.09346424210557362;  // std dev = 0,232, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.5679263612008416;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.3238489805863738;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6346305160610785;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16536948393892165;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10658451832446679;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05773250645614795;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5914366186761444;  // std dev = 0,221, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.19630355549562206;  // std dev = 0,138, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.09346424210557362;  // std dev = 0,232, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.5679263612008416;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.3238489805863738;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6346305160610785;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16536948393892165;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10658451832446679;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05773250645614795;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.161389013381667;  // std dev = 0,362, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.2543748204375141;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5282743382145976;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14358411364960227;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.18144890867409424;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11141989224986046;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.16862222442027017;  // std dev = 0,437, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11029031611417466;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020871825887624977;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.161389013381667;  // std dev = 0,362, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.2543748204375141;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5282743382145976;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14358411364960227;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.18144890867409424;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11141989224986046;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.16862222442027017;  // std dev = 0,437, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11029031611417466;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020871825887624977;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11085629538807815;  // std dev = 0,346, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.1965381778752163;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.14282108398667862;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.03959622963684178;  // std dev = 0,809, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.0957068236494681;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then if ( samebib(M, N), venue(N, B) )
%   | | | | then return 0.4453436642146792;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16448597434230533;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09349182573580699;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01787744566086983;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11085629538807815;  // std dev = 0,346, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.1965381778752163;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.14282108398667862;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.03959622963684178;  // std dev = 0,809, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.0957068236494681;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then if ( samebib(M, N), venue(N, B) )
%   | | | | then return 0.4453436642146792;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16448597434230533;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09349182573580699;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01787744566086983;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09399157348927992;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.040176280770519573;  // std dev = 0,354, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15563847665648167;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1350726254365156;  // std dev = 0,406, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.05454271411616098;  // std dev = 0,684, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.07834042420924874;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, B) )
%   | | | then return 0.09408961255005932;  // std dev = 0,387, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08032529963388348;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.015280152720984696;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09399157348927992;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.040176280770519573;  // std dev = 0,354, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15563847665648167;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1350726254365156;  // std dev = 0,406, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.05454271411616098;  // std dev = 0,684, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.07834042420924874;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, B) )
%   | | | then return 0.09408961255005932;  // std dev = 0,387, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08032529963388348;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.015280152720984696;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07457428567034849;  // std dev = 0,351, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.11143551931057691;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.10531983923307538;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.1681750715137366;  // std dev = 0,025, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | | then return -0.013331471394301308;  // std dev = 0,772, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08034626258108277;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.07520704095601731;  // std dev = 0,386, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06499722361971268;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.013036346161572045;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07457428567034849;  // std dev = 0,351, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.11143551931057691;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.10531983923307538;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.1681750715137366;  // std dev = 0,025, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | | then return -0.013331471394301308;  // std dev = 0,772, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08034626258108277;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.07520704095601731;  // std dev = 0,386, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06499722361971268;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.013036346161572045;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08207223843411952;  // std dev = 0,471, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.336218394104204;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16568508901448006;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04279597533366226;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.2922982858635339;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17087648676478148;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0534798648243764;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011104598587498887;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08207223843411952;  // std dev = 0,471, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.336218394104204;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16568508901448006;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04279597533366226;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.2922982858635339;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17087648676478148;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0534798648243764;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011104598587498887;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.038488011741082864;  // std dev = 0,337, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.06393163297957082;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.252405267378988;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14403489585535179;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035173026056758316;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.21936348061981562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14800877996783046;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04370167787156678;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009446412468120804;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.038488011741082864;  // std dev = 0,337, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.06393163297957082;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.252405267378988;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14403489585535179;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035173026056758316;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.21936348061981562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14800877996783046;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04370167787156678;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009446412468120804;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.003750699144836481;  // std dev = 0,327, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return 0.08132602221718588;  // std dev = 0,385, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else return 0.04837222427866239;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.03189497478913642;  // std dev = 0,326, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.042987327220124105;  // std dev = 0,775, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.040111400587883664;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -0.07064315864722154;  // std dev = 0,557, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044943232909088415;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008026628414444575;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.003750699144836481;  // std dev = 0,327, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return 0.08132602221718588;  // std dev = 0,385, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else return 0.04837222427866239;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.03189497478913642;  // std dev = 0,326, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.042987327220124105;  // std dev = 0,775, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.040111400587883664;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -0.07064315864722154;  // std dev = 0,557, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044943232909088415;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008026628414444575;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */




Results
Results
   AUC ROC   = 0.549055
   AUC ROC   = 0.549055
   AUC PR    = 0.566699
   AUC PR    = 0.566699
   CLL	      = -0.685319
   CLL	      = -0.685319
   Precision = 0.546879 at threshold = 0.5
   Precision = 0.546879 at threshold = 0.5
   Recall    = 0.933928
   Recall    = 0.933928
   F1        = 0.68982
   F1        = 0.68982




Total learning time: 37.611 seconds
Total learning time: 37.611 seconds
Total inference time: 5.132 seconds
Total inference time: 5.132 seconds
AUC ROC: 0.549055
AUC ROC: 0.549055




Refined model AUC ROC: 0.549055
Refined model AUC ROC: 0.549055




Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 02:54:00
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 02:54:00
{'AUC ROC': 0.549055, 'AUC PR': 0.566699, 'CLL': -0.685319, 'Precision': [0.546879, 0.5], 'Recall': 0.933928, 'F1': 0.68982, 'Learning time': 73.109, 'Inference time': 5.132, 'Mapping results': {'Knowledge compiling time': 0.17982125282287598, 'Generating paths time': 4.693466424942017, 'Generating mappings time': 0.07945513725280762, 'Possible mappings': 6, 'Finding best mapping': 0.0009505748748779297, 'Total time': 4.953726291656494}, 'Parameter Learning results': {'AUC ROC': 0.549787, 'AUC PR': 0.570295, 'CLL': -0.685777, 'Precision': [0.54556, 0.5], 'Recall': 0.951358, 'F1': 0.693455, 'Learning time': 35.498, 'Inference time': 4.769}}
{'AUC ROC': 0.549055, 'AUC PR': 0.566699, 'CLL': -0.685319, 'Precision': [0.546879, 0.5], 'Recall': 0.933928, 'F1': 0.68982, 'Learning time': 73.109, 'Inference time': 5.132, 'Mapping results': {'Knowledge compiling time': 0.17982125282287598, 'Generating paths time': 4.693466424942017, 'Generating mappings time': 0.07945513725280762, 'Possible mappings': 6, 'Finding best mapping': 0.0009505748748779297, 'Total time': 4.953726291656494}, 'Parameter Learning results': {'AUC ROC': 0.549787, 'AUC PR': 0.570295, 'CLL': -0.685777, 'Precision': [0.54556, 0.5], 'Recall': 0.951358, 'F1': 0.693455, 'Learning time': 35.498, 'Inference time': 4.769}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38803914974885984;  // std dev = 0,484, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6453858393899019;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15461416061009814;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11811311211717458;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.04538583938990186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.24538583938990186;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1509413949454574;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03836829553025274;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.38803914974885984;  // std dev = 0,484, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6453858393899019;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15461416061009814;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11811311211717458;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.04538583938990186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.24538583938990186;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1509413949454574;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03836829553025274;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6350195314202874;  // std dev = 5,16e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.2171946756859574;  // std dev = 0,420, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.1463284156043017;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5842578683457255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32448563112220347;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5414415538554511;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13546545843939475;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10203760037104283;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.060813702369609576;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6350195314202874;  // std dev = 5,16e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.2171946756859574;  // std dev = 0,420, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.1463284156043017;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5842578683457255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32448563112220347;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5414415538554511;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13546545843939475;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10203760037104283;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.060813702369609576;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.47970924562158246;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.1560146074215333;  // std dev = 0,405, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.20497417243410113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5269745159144681;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2569024977516076;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6096835672938934;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1843217440194833;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08608106704410523;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04881860127758496;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.47970924562158246;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.1560146074215333;  // std dev = 0,405, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.20497417243410113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5269745159144681;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2569024977516076;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6096835672938934;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1843217440194833;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08608106704410523;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04881860127758496;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11464732616138507;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07714544411916692;  // std dev = 0,406, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20499274706298354;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4982411801860477;  // std dev = 0,908, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15823084129206194;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07274419354107389;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return -0.0047447785506404385;  // std dev = 0,695, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11311943401628834;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.018020336780650667;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11464732616138507;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07714544411916692;  // std dev = 0,406, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20499274706298354;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4982411801860477;  // std dev = 0,908, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15823084129206194;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07274419354107389;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return -0.0047447785506404385;  // std dev = 0,695, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11311943401628834;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.018020336780650667;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08999918282189008;  // std dev = 0,380, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06068445547415208;  // std dev = 0,404, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15459702939661538;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.12965730112966573;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05944201545217762;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.0036974397322559415;  // std dev = 0,699, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.08245540327934626;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09611154859174774;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.015403839604623559;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08999918282189008;  // std dev = 0,380, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06068445547415208;  // std dev = 0,404, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15459702939661538;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.12965730112966573;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05944201545217762;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.0036974397322559415;  // std dev = 0,699, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.08245540327934626;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09611154859174774;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.015403839604623559;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866579618188033;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3608192030786938;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1488099619830472;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04936078177034917;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.003130616366203415;  // std dev = 0,700, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0780694202193499;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013143010533178998;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866579618188033;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3608192030786938;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1488099619830472;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04936078177034917;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.003130616366203415;  // std dev = 0,700, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0780694202193499;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013143010533178998;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08192613587616263;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.175278951081902;  // std dev = 0,610, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19306035281376216;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05573484565517543;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3033784317690702;  // std dev = 0,895, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14848638190464836;  // std dev = 0,046, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.052274548829916286;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011196289491651723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08192613587616263;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.175278951081902;  // std dev = 0,610, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19306035281376216;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05573484565517543;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3033784317690702;  // std dev = 0,895, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14848638190464836;  // std dev = 0,046, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.052274548829916286;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011196289491651723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06181900280042172;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.14302102575231262;  // std dev = 0,588, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16502006492598567;  // std dev = 0,072, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.013467966024250566;  // std dev = 0,865, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.049505136105885625;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.01449275274791927;  // std dev = 0,634, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01261153109339681;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.056157367961657524;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009525016907412177;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06181900280042172;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.14302102575231262;  // std dev = 0,588, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16502006492598567;  // std dev = 0,072, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.013467966024250566;  // std dev = 0,865, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.049505136105885625;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.01449275274791927;  // std dev = 0,634, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01261153109339681;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.056157367961657524;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009525016907412177;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04672038137332855;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.22940662970140044;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14364191998875692;  // std dev = 0,067, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1618305950312795;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04034019718218654;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.22677552676770615;  // std dev = 0,898, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13085022091868925;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03271562931263718;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.00809385745555733;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04672038137332855;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.22940662970140044;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14364191998875692;  // std dev = 0,067, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1618305950312795;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04034019718218654;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.22677552676770615;  // std dev = 0,898, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13085022091868925;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03271562931263718;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.00809385745555733;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */




Results
Results
   AUC ROC   = 0.541817
   AUC ROC   = 0.541817
   AUC PR    = 0.555783
   AUC PR    = 0.555783
   CLL	      = -0.687142
   CLL	      = -0.687142
   Precision = 0.546031 at threshold = 0.5
   Precision = 0.546031 at threshold = 0.5
   Recall    = 0.94244
   Recall    = 0.94244
   F1        = 0.69145
   F1        = 0.69145




Total learning time: 47.938 seconds
Total learning time: 47.938 seconds
Total inference time: 4.75 seconds
Total inference time: 4.75 seconds
AUC ROC: 0.541817
AUC ROC: 0.541817




Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 02:54:53
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 02:54:53
{'AUC ROC': 0.541817, 'AUC PR': 0.555783, 'CLL': -0.687142, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 47.938, 'Inference time': 4.75}
{'AUC ROC': 0.541817, 'AUC PR': 0.555783, 'CLL': -0.687142, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 47.938, 'Inference time': 4.75}




Starting experiment #3 for imdb->cora

Starting experiment #3 for imdb->cora

Starting experiment #3 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */






Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03950450449156378;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07764183853183139;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03950450449156378;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07764183853183139;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03950450449156378;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07764183853183139;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06479976121232581;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06479976121232581;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06479976121232581;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.019372864353331676;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05724526935908114;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.019372864353331676;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05724526935908114;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.019372864353331676;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05724526935908114;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.016487902053740365;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04838854993629197;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.016487902053740365;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04838854993629197;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.016487902053740365;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04838854993629197;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020001503402229;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.009167194095857322;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04093866298415091;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020001503402229;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.009167194095857322;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04093866298415091;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020001503402229;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.009167194095857322;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04093866298415091;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541991033536677;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0077265407997806675;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0077476224943902605;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03586531656189669;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541991033536677;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0077265407997806675;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0077476224943902605;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03586531656189669;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541991033536677;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0077265407997806675;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0077476224943902605;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03586531656189669;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633286944649586;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.006541613875293983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.028476501589997025;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633286944649586;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.006541613875293983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.028476501589997025;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633286944649586;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.006541613875293983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.028476501589997025;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248571303004294;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0020413339980468125;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023822960948655825;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248571303004294;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0020413339980468125;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023822960948655825;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248571303004294;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0020413339980468125;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023822960948655825;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */






Results
Results
Results
   AUC ROC   = 0.548928
   AUC ROC   = 0.548928
   AUC ROC   = 0.548928
   AUC PR    = 0.553957
   AUC PR    = 0.553957
   AUC PR    = 0.553957
   CLL	      = -0.684579
   CLL	      = -0.684579
   CLL	      = -0.684579
   Precision = 0.554741 at threshold = 0.5
   Precision = 0.554741 at threshold = 0.5
   Precision = 0.554741 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.69052
   F1        = 0.69052
   F1        = 0.69052






Total learning time: 13.614 seconds
Total learning time: 13.614 seconds
Total learning time: 13.614 seconds
Total inference time: 1.973 seconds
Total inference time: 1.973 seconds
Total inference time: 1.973 seconds
AUC ROC: 0.548928
AUC ROC: 0.548928
AUC ROC: 0.548928






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.499, 296, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.499, 296, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.499, 296, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
{'': [0.2486725557358248, 0.1833111943002062]}
{'': [0.2486725557358248, 0.1833111943002062]}
{'': [0.2486725557358248, 0.1833111943002062]}
{'': [0.2486725557358284, 0.18331119430020426], 'false': [0.15999999999999998, 0.1845592212006486], 'false,false': [0.15999999999999998, 0.18594726413656465]}
{'': [0.2486725557358284, 0.18331119430020426], 'false': [0.15999999999999998, 0.1845592212006486], 'false,false': [0.15999999999999998, 0.18594726413656465]}
{'': [0.2486725557358284, 0.18331119430020426], 'false': [0.15999999999999998, 0.1845592212006486], 'false,false': [0.15999999999999998, 0.18594726413656465]}
{'': [0.24867255573583463, 0.18325628887797607], 'true': [0.24999999999999992, 0.2486475101696966], 'false': [0.16000000000000003, 0.18452848351801743]}
{'': [0.24867255573583463, 0.18325628887797607], 'true': [0.24999999999999992, 0.2486475101696966], 'false': [0.16000000000000003, 0.18452848351801743]}
{'': [0.24867255573583463, 0.18325628887797607], 'true': [0.24999999999999992, 0.2486475101696966], 'false': [0.16000000000000003, 0.18452848351801743]}
{'': [0.24866779962729504, 0.18323411038411663]}
{'': [0.24866779962729504, 0.18323411038411663]}
{'': [0.24866779962729504, 0.18323411038411663]}
{'': [0.24866748019668508, 0.1832312444457862], 'false': [0.16, 0.18450308945302296]}
{'': [0.24866748019668508, 0.1832312444457862], 'false': [0.16, 0.18450308945302296]}
{'': [0.24866748019668508, 0.1832312444457862], 'false': [0.16, 0.18450308945302296]}
{'': [0.24866729230685683, 0.18320797789451776], 'false': [0.16000000000000003, 0.184501364026362]}
{'': [0.24866729230685683, 0.18320797789451776], 'false': [0.16000000000000003, 0.184501364026362]}
{'': [0.24866729230685683, 0.18320797789451776], 'false': [0.16000000000000003, 0.184501364026362]}
{'': [0.2486671899710699, 0.18319065223151068], 'false': [0.16000000000000003, 0.18448348298593786]}
{'': [0.2486671899710699, 0.18319065223151068], 'false': [0.16000000000000003, 0.18448348298593786]}
{'': [0.2486671899710699, 0.18319065223151068], 'false': [0.16000000000000003, 0.18448348298593786]}
{'': [0.24866713811644028, 0.18317330685995098], 'false': [0.16000000000000003, 0.18448199525240283], 'false,false': [0.16000000000000003, 0.18594726413656382]}
{'': [0.24866713811644028, 0.18317330685995098], 'false': [0.16000000000000003, 0.18448199525240283], 'false,false': [0.16000000000000003, 0.18594726413656382]}
{'': [0.24866713811644028, 0.18317330685995098], 'false': [0.16000000000000003, 0.18448199525240283], 'false,false': [0.16000000000000003, 0.18594726413656382]}
{'': [0.24866711416287127, 0.1831490140153292], 'false': [0.16000000000000003, 0.1844684506979746]}
{'': [0.24866711416287127, 0.1831490140153292], 'false': [0.16000000000000003, 0.1844684506979746]}
{'': [0.24866711416287127, 0.1831490140153292], 'false': [0.16000000000000003, 0.1844684506979746]}
{'': [0.24866710483699522, 0.1831400973427913], 'false': [0.16, 0.18445938374756324]}
{'': [0.24866710483699522, 0.1831400973427913], 'false': [0.16, 0.18445938374756324]}
{'': [0.24866710483699522, 0.1831400973427913], 'false': [0.16, 0.18445938374756324]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09178596434599032;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09178596434599032;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09178596434599032;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07733559655894594;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07733559655894594;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.24382419770368804;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2806004105362286;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07733559655894594;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.033909690176085826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06830688916686861;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.033909690176085826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06830688916686861;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333712526001037;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.038428662236904595;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.033909690176085826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06830688916686861;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029159723986729245;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03315494592188569;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05806497268298746;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029159723986729245;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03315494592188569;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05806497268298746;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17342874116247792;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029159723986729245;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03315494592188569;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05806497268298746;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024989403958315108;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04781655308110563;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024989403958315108;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04781655308110563;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245567904942307;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024989403958315108;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04781655308110563;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3181933553895131;  // std dev = 0,871, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.0988396821768898;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02159371705371883;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040148860999815975;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3181933553895131;  // std dev = 0,871, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.0988396821768898;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02159371705371883;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040148860999815975;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3181933553895131;  // std dev = 0,871, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.0988396821768898;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02159371705371883;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040148860999815975;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0754185612530535;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015384689588555812;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01840655530515038;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03467406221848742;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0754185612530535;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015384689588555812;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01840655530515038;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03467406221848742;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0754185612530535;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015384689588555812;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.01840655530515038;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03467406221848742;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663343483533418;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01565497469864922;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013057548228651622;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0288189355435108;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663343483533418;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01565497469864922;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013057548228651622;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0288189355435108;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663343483533418;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01565497469864922;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013057548228651622;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0288189355435108;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042486697842789634;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011064748778100852;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013289421142023073;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.023864553039857832;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042486697842789634;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011064748778100852;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013289421142023073;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.023864553039857832;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042486697842789634;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011064748778100852;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013289421142023073;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.023864553039857832;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */






Results
Results
Results
   AUC ROC   = 0.549424
   AUC ROC   = 0.549424
   AUC ROC   = 0.549424
   AUC PR    = 0.551892
   AUC PR    = 0.551892
   AUC PR    = 0.551892
   CLL	      = -0.684666
   CLL	      = -0.684666
   CLL	      = -0.684666
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Recall    = 0.921102
   Recall    = 0.921102
   Recall    = 0.921102
   F1        = 0.693182
   F1        = 0.693182
   F1        = 0.693182






Total learning time: 13.099 seconds
Total learning time: 13.099 seconds
Total learning time: 13.099 seconds
Total inference time: 2.138 seconds
Total inference time: 2.138 seconds
Total inference time: 2.138 seconds
AUC ROC: 0.549424
AUC ROC: 0.549424
AUC ROC: 0.549424






Refined model AUC ROC: 0.549424
Refined model AUC ROC: 0.549424
Refined model AUC ROC: 0.549424






Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:57:50
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:57:50
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:57:50
{'AUC ROC': 0.549424, 'AUC PR': 0.551892, 'CLL': -0.684666, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 26.713, 'Inference time': 2.138, 'Mapping results': {'Knowledge compiling time': 0.11490535736083984, 'Generating paths time': 4.644410133361816, 'Generating mappings time': 0.06566071510314941, 'Possible mappings': 6, 'Finding best mapping': 0.0006718635559082031, 'Total time': 4.825655937194824}, 'Parameter Learning results': {'AUC ROC': 0.548928, 'AUC PR': 0.553957, 'CLL': -0.684579, 'Precision': [0.554741, 0.5], 'Recall': 0.914307, 'F1': 0.69052, 'Learning time': 13.614, 'Inference time': 1.973}}
{'AUC ROC': 0.549424, 'AUC PR': 0.551892, 'CLL': -0.684666, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 26.713, 'Inference time': 2.138, 'Mapping results': {'Knowledge compiling time': 0.11490535736083984, 'Generating paths time': 4.644410133361816, 'Generating mappings time': 0.06566071510314941, 'Possible mappings': 6, 'Finding best mapping': 0.0006718635559082031, 'Total time': 4.825655937194824}, 'Parameter Learning results': {'AUC ROC': 0.548928, 'AUC PR': 0.553957, 'CLL': -0.684579, 'Precision': [0.554741, 0.5], 'Recall': 0.914307, 'F1': 0.69052, 'Learning time': 13.614, 'Inference time': 1.973}}
{'AUC ROC': 0.549424, 'AUC PR': 0.551892, 'CLL': -0.684666, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 26.713, 'Inference time': 2.138, 'Mapping results': {'Knowledge compiling time': 0.11490535736083984, 'Generating paths time': 4.644410133361816, 'Generating mappings time': 0.06566071510314941, 'Possible mappings': 6, 'Finding best mapping': 0.0006718635559082031, 'Total time': 4.825655937194824}, 'Parameter Learning results': {'AUC ROC': 0.548928, 'AUC PR': 0.553957, 'CLL': -0.684579, 'Precision': [0.554741, 0.5], 'Recall': 0.914307, 'F1': 0.69052, 'Learning time': 13.614, 'Inference time': 1.973}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09214310703739156;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09214310703739156;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09214310703739156;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.0755353699217871;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.0755353699217871;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.0755353699217871;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034158879481904034;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658345589523106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034158879481904034;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658345589523106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034158879481904034;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658345589523106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0191081319581397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02937932227917591;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05896619636297827;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0191081319581397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02937932227917591;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05896619636297827;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0191081319581397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02937932227917591;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05896619636297827;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02518155646613111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01625959760471889;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04980059223813808;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02518155646613111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01625959760471889;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04980059223813808;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02518155646613111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01625959760471889;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04980059223813808;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3137658903288656;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.1862341096711344;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.10065757007768338;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.013808434820454945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040621024344491996;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3137658903288656;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.1862341096711344;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.10065757007768338;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.013808434820454945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040621024344491996;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3137658903288656;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.1862341096711344;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.10065757007768338;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.013808434820454945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.040621024344491996;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541052050856535;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015485092179520921;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.011707049526352787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03509786084453942;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541052050856535;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015485092179520921;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.011707049526352787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03509786084453942;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541052050856535;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015485092179520921;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.011707049526352787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03509786084453942;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05662978837962636;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013143671627414111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02805879929849624;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05662978837962636;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013143671627414111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02805879929849624;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05662978837962636;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013143671627414111;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02805879929849624;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20280437799585882;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.17295515440759857;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.042831937807437485;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else return 0.022602043653691138;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20280437799585882;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.17295515440759857;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.042831937807437485;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else return 0.022602043653691138;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20280437799585882;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.17295515440759857;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.042831937807437485;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else return 0.022602043653691138;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */






Results
Results
Results
   AUC ROC   = 0.549477
   AUC ROC   = 0.549477
   AUC ROC   = 0.549477
   AUC PR    = 0.552873
   AUC PR    = 0.552873
   AUC PR    = 0.552873
   CLL	      = -0.685435
   CLL	      = -0.685435
   CLL	      = -0.685435
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Recall    = 0.921102
   Recall    = 0.921102
   Recall    = 0.921102
   F1        = 0.693182
   F1        = 0.693182
   F1        = 0.693182






Total learning time: 13.677 seconds
Total learning time: 13.677 seconds
Total learning time: 13.677 seconds
Total inference time: 2.249 seconds
Total inference time: 2.249 seconds
Total inference time: 2.249 seconds
AUC ROC: 0.549477
AUC ROC: 0.549477
AUC ROC: 0.549477






Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:58:07
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:58:07
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:58:07
{'AUC ROC': 0.549477, 'AUC PR': 0.552873, 'CLL': -0.685435, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 13.677, 'Inference time': 2.249}
{'AUC ROC': 0.549477, 'AUC PR': 0.552873, 'CLL': -0.685435, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 13.677, 'Inference time': 2.249}
{'AUC ROC': 0.549477, 'AUC PR': 0.552873, 'CLL': -0.685435, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 13.677, 'Inference time': 2.249}






Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102612003689415;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102612003689415;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102612003689415;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4086174446330871;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6618427513442309;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1798088490625913;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.004823915322435757;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1381572486557691;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24268436438014926;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4086174446330871;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6618427513442309;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1798088490625913;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.004823915322435757;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1381572486557691;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24268436438014926;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4086174446330871;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6618427513442309;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1798088490625913;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.004823915322435757;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1381572486557691;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24268436438014926;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878524724261156;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878524724261156;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878524724261156;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14222906927417217;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14222906927417217;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14222906927417217;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10696689670254213;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10696689670254213;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10696689670254213;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20311944833832504;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3947535181185811;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03395670036551614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.22444200429687675;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20790669270603032;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07881211716058555;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20311944833832504;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3947535181185811;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03395670036551614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.22444200429687675;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20790669270603032;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07881211716058555;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20311944833832504;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3947535181185811;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03395670036551614;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.22444200429687675;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20790669270603032;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07881211716058555;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1806317382356151;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3762134838669451;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.025497738422823768;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.2452916726817208;  // std dev = 0,914, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22693959994909832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05886552765850601;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0809023651628569;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1806317382356151;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3762134838669451;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.025497738422823768;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.2452916726817208;  // std dev = 0,914, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22693959994909832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05886552765850601;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0809023651628569;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1806317382356151;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3762134838669451;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.025497738422823768;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.2452916726817208;  // std dev = 0,914, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22693959994909832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05886552765850601;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0809023651628569;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045477552537353014;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.049092187433800505;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045477552537353014;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.049092187433800505;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045477552537353014;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.049092187433800505;  // std dev = 0,467, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.439993
   AUC ROC   = 0.439993
   AUC ROC   = 0.439993
   AUC PR    = 0.447824
   AUC PR    = 0.447824
   AUC PR    = 0.447824
   CLL	      = -0.711614
   CLL	      = -0.711614
   CLL	      = -0.711614
   Precision = 0.50625 at threshold = 0.5
   Precision = 0.50625 at threshold = 0.5
   Precision = 0.50625 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.666159
   F1        = 0.666159
   F1        = 0.666159






Total learning time: 37.575 seconds
Total learning time: 37.575 seconds
Total learning time: 37.575 seconds
Total inference time: 3.385 seconds
Total inference time: 3.385 seconds
Total inference time: 3.385 seconds
AUC ROC: 0.439993
AUC ROC: 0.439993
AUC ROC: 0.439993






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.912, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.912, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.912, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.914, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.914, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.914, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.467, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.467, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.467, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999978, -2.220446049250313e-16]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999978, -2.220446049250313e-16]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999978, -2.220446049250313e-16]}
{'': [0.2424164450957992, 0.2222222222222228]}
{'': [0.2424164450957992, 0.2222222222222228]}
{'': [0.2424164450957992, 0.2222222222222228]}
{'': [0.24229776733393943, 0.22222222222222254]}
{'': [0.24229776733393943, 0.22222222222222254]}
{'': [0.24229776733393943, 0.22222222222222254]}
{'': [0.2422191645464205, 0.2222222222222224], 'true': [0.22413869785995824, 0.24254005262850312], 'true,true': [0.1269905985991196, 0.22429018433920125], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1860017752816184, 0.0]}
{'': [0.2422191645464205, 0.2222222222222224], 'true': [0.22413869785995824, 0.24254005262850312], 'true,true': [0.1269905985991196, 0.22429018433920125], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1860017752816184, 0.0]}
{'': [0.2422191645464205, 0.2222222222222224], 'true': [0.22413869785995824, 0.24254005262850312], 'true,true': [0.1269905985991196, 0.22429018433920125], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1860017752816184, 0.0]}
{'': [0.24129279605246876, 0.22222222222222243]}
{'': [0.24129279605246876, 0.22222222222222243]}
{'': [0.24129279605246876, 0.22222222222222243]}
{'': [0.2412545922772558, 0.2222222222222221]}
{'': [0.2412545922772558, 0.2222222222222221]}
{'': [0.2412545922772558, 0.2222222222222221]}
{'': [0.24124297318132415, 0.22222222222222207]}
{'': [0.24124297318132415, 0.22222222222222207]}
{'': [0.24124297318132415, 0.22222222222222207]}
{'': [0.19971063397861552, 0.24157372456886206], 'false': [0.2424736461898306, 0.21729289271163427], 'true': [0.120356455149526, 0.21572423313917138], 'true,false': [0.24999999999999994, 0.181380764977516], 'true,false,false': [0.20795482312751856, 0.15999999999999998], 'true,true': [0.18590464523565894, 5.551115123125783e-17]}
{'': [0.19971063397861552, 0.24157372456886206], 'false': [0.2424736461898306, 0.21729289271163427], 'true': [0.120356455149526, 0.21572423313917138], 'true,false': [0.24999999999999994, 0.181380764977516], 'true,false,false': [0.20795482312751856, 0.15999999999999998], 'true,true': [0.18590464523565894, 5.551115123125783e-17]}
{'': [0.19971063397861552, 0.24157372456886206], 'false': [0.2424736461898306, 0.21729289271163427], 'true': [0.120356455149526, 0.21572423313917138], 'true,false': [0.24999999999999994, 0.181380764977516], 'true,false,false': [0.20795482312751856, 0.15999999999999998], 'true,true': [0.18590464523565894, 5.551115123125783e-17]}
{'': [0.19930299998009388, 0.24100967829799086], 'false': [0.24197837431960098, 0.21508782595370923], 'true': [0.12016227872900523, 0.2172930657624155], 'true,false': [0.24999999999999997, 0.18186153162563412], 'true,false,false': [0.20900133583901936, 0.15999999999999998], 'true,true': [0.1849695768586627, 0.0]}
{'': [0.19930299998009388, 0.24100967829799086], 'false': [0.24197837431960098, 0.21508782595370923], 'true': [0.12016227872900523, 0.2172930657624155], 'true,false': [0.24999999999999997, 0.18186153162563412], 'true,false,false': [0.20900133583901936, 0.15999999999999998], 'true,true': [0.1849695768586627, 0.0]}
{'': [0.19930299998009388, 0.24100967829799086], 'false': [0.24197837431960098, 0.21508782595370923], 'true': [0.12016227872900523, 0.2172930657624155], 'true,false': [0.24999999999999997, 0.18186153162563412], 'true,false,false': [0.20900133583901936, 0.15999999999999998], 'true,true': [0.1849695768586627, 0.0]}
{'': [0.24025901180305517, 0.21805593758558317]}
{'': [0.24025901180305517, 0.21805593758558317]}
{'': [0.24025901180305517, 0.21805593758558317]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;author(F, E), venue(F, B).;true;true', '0;true,true,true;author(G, E), venue(G, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '7;true;author(E, D), venue(E, A).;true;true', '7;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;author(F, D), venue(F, A).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;author(F, E), venue(F, B).;true;true', '0;true,true,true;author(G, E), venue(G, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '7;true;author(E, D), venue(E, A).;true;true', '7;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;author(F, D), venue(F, A).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;author(F, E), venue(F, B).;true;true', '0;true,true,true;author(G, E), venue(G, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '7;true;author(E, D), venue(E, A).;true;true', '7;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;author(F, D), venue(F, A).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.5854216623722396;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.5854216623722396;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.5854216623722396;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37861273400778395;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37861273400778395;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37861273400778395;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31019996539032374;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31019996539032374;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31019996539032374;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37607184623519946;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5629242043641814;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1798403830709634;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018533048821399452;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24315999479620307;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37607184623519946;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5629242043641814;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1798403830709634;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018533048821399452;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24315999479620307;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37607184623519946;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5629242043641814;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1798403830709634;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018533048821399452;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24315999479620307;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2871227167352275;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5398846708650139;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13950076496224095;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.10255099673426227;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1186726738295513;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1863885572543039;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2871227167352275;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5398846708650139;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13950076496224095;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.10255099673426227;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1186726738295513;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1863885572543039;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.2871227167352275;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5398846708650139;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13950076496224095;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.10255099673426227;  // std dev = 0,912, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1186726738295513;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1863885572543039;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23620216907148084;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.37841659815748235;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1067561833693742;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.012914900848176184;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09210491602026556;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1411919634648288;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15764946173868835;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23620216907148084;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.37841659815748235;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1067561833693742;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.012914900848176184;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09210491602026556;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1411919634648288;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15764946173868835;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23620216907148084;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.37841659815748235;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1067561833693742;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.012914900848176184;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09210491602026556;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1411919634648288;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15764946173868835;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10706243639939836;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11840853685415682;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10706243639939836;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11840853685415682;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10706243639939836;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11840853685415682;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.1517554265642542;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2725440032684335;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.0547492486326554;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12181824728357032;  // std dev = 0,436, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.07950861649613761;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1035192704466869;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.1517554265642542;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2725440032684335;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.0547492486326554;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12181824728357032;  // std dev = 0,436, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.07950861649613761;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1035192704466869;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.1517554265642542;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2725440032684335;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.0547492486326554;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12181824728357032;  // std dev = 0,436, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.07950861649613761;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1035192704466869;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.13246451509433035;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3300919269204148;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.04118878614545973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.16222137475445328;  // std dev = 0,428, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14983917139718947;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.013315627265730842;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07050862057515875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05854657489052186;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07794587953460289;  // std dev = 0,465, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.13246451509433035;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3300919269204148;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.04118878614545973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.16222137475445328;  // std dev = 0,428, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14983917139718947;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.013315627265730842;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07050862057515875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05854657489052186;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07794587953460289;  // std dev = 0,465, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.13246451509433035;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3300919269204148;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.04118878614545973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.16222137475445328;  // std dev = 0,428, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14983917139718947;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.013315627265730842;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07050862057515875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05854657489052186;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07794587953460289;  // std dev = 0,465, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04571059165692723;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.048151298491419504;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04571059165692723;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.048151298491419504;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04571059165692723;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.048151298491419504;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.451834
   AUC ROC   = 0.451834
   AUC ROC   = 0.451834
   AUC PR    = 0.457332
   AUC PR    = 0.457332
   AUC PR    = 0.457332
   CLL	      = -0.714185
   CLL	      = -0.714185
   CLL	      = -0.714185
   Precision = 0.508788 at threshold = 0.5
   Precision = 0.508788 at threshold = 0.5
   Precision = 0.508788 at threshold = 0.5
   Recall    = 0.966607
   Recall    = 0.966607
   Recall    = 0.966607
   F1        = 0.666667
   F1        = 0.666667
   F1        = 0.666667






Total learning time: 59.686 seconds
Total learning time: 59.686 seconds
Total learning time: 59.686 seconds
Total inference time: 4.708 seconds
Total inference time: 4.708 seconds
Total inference time: 4.708 seconds
AUC ROC: 0.451834
AUC ROC: 0.451834
AUC ROC: 0.451834






Refined model AUC ROC: 0.451834
Refined model AUC ROC: 0.451834
Refined model AUC ROC: 0.451834






Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 04:59:58
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 04:59:58
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 04:59:58
{'AUC ROC': 0.451834, 'AUC PR': 0.457332, 'CLL': -0.714185, 'Precision': [0.508788, 0.5], 'Recall': 0.966607, 'F1': 0.666667, 'Learning time': 97.261, 'Inference time': 4.708, 'Mapping results': {'Knowledge compiling time': 0.1813490390777588, 'Generating paths time': 4.667443752288818, 'Generating mappings time': 0.07082986831665039, 'Possible mappings': 6, 'Finding best mapping': 0.0006566047668457031, 'Total time': 4.920288562774658}, 'Parameter Learning results': {'AUC ROC': 0.439993, 'AUC PR': 0.447824, 'CLL': -0.711614, 'Precision': [0.50625, 0.5], 'Recall': 0.973731, 'F1': 0.666159, 'Learning time': 37.575, 'Inference time': 3.385}}
{'AUC ROC': 0.451834, 'AUC PR': 0.457332, 'CLL': -0.714185, 'Precision': [0.508788, 0.5], 'Recall': 0.966607, 'F1': 0.666667, 'Learning time': 97.261, 'Inference time': 4.708, 'Mapping results': {'Knowledge compiling time': 0.1813490390777588, 'Generating paths time': 4.667443752288818, 'Generating mappings time': 0.07082986831665039, 'Possible mappings': 6, 'Finding best mapping': 0.0006566047668457031, 'Total time': 4.920288562774658}, 'Parameter Learning results': {'AUC ROC': 0.439993, 'AUC PR': 0.447824, 'CLL': -0.711614, 'Precision': [0.50625, 0.5], 'Recall': 0.973731, 'F1': 0.666159, 'Learning time': 37.575, 'Inference time': 3.385}}
{'AUC ROC': 0.451834, 'AUC PR': 0.457332, 'CLL': -0.714185, 'Precision': [0.508788, 0.5], 'Recall': 0.966607, 'F1': 0.666667, 'Learning time': 97.261, 'Inference time': 4.708, 'Mapping results': {'Knowledge compiling time': 0.1813490390777588, 'Generating paths time': 4.667443752288818, 'Generating mappings time': 0.07082986831665039, 'Possible mappings': 6, 'Finding best mapping': 0.0006566047668457031, 'Total time': 4.920288562774658}, 'Parameter Learning results': {'AUC ROC': 0.439993, 'AUC PR': 0.447824, 'CLL': -0.711614, 'Precision': [0.50625, 0.5], 'Recall': 0.973731, 'F1': 0.666159, 'Learning time': 37.575, 'Inference time': 3.385}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37869637433100145;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4427813420177679;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.637182160125923;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24329294906106202;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.10712063941152557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0037280607715387106;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.3088374203008963;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4427813420177679;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.637182160125923;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24329294906106202;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.10712063941152557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0037280607715387106;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.3088374203008963;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4427813420177679;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.637182160125923;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.24329294906106202;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.10712063941152557;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0037280607715387106;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.3088374203008963;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2444708139714994;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2444708139714994;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2444708139714994;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878451424228623;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878451424228623;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1878451424228623;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14224946592144438;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14224946592144438;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14224946592144438;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700215785879535;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700215785879535;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700215785879535;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08031213151080248;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08031213151080248;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08031213151080248;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060282007214658664;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060282007214658664;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060282007214658664;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.20661147899803953;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4627638271610058;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return -5.749940944379528E-4;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.3065740698705991;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.3372361728389942;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043323029956143774;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06626330286437354;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.20661147899803953;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4627638271610058;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return -5.749940944379528E-4;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.3065740698705991;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.3372361728389942;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043323029956143774;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06626330286437354;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.20661147899803953;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4627638271610058;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return -5.749940944379528E-4;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.3065740698705991;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.3372361728389942;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043323029956143774;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06626330286437354;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.45077
   AUC ROC   = 0.45077
   AUC ROC   = 0.45077
   AUC PR    = 0.453263
   AUC PR    = 0.453263
   AUC PR    = 0.453263
   CLL	      = -0.711378
   CLL	      = -0.711378
   CLL	      = -0.711378
   Precision = 0.507146 at threshold = 0.5
   Precision = 0.507146 at threshold = 0.5
   Precision = 0.507146 at threshold = 0.5
   Recall    = 0.979519
   Recall    = 0.979519
   Recall    = 0.979519
   F1        = 0.668287
   F1        = 0.668287
   F1        = 0.668287






Total learning time: 37.748 seconds
Total learning time: 37.748 seconds
Total learning time: 37.748 seconds
Total inference time: 3.42 seconds
Total inference time: 3.42 seconds
Total inference time: 3.42 seconds
AUC ROC: 0.45077
AUC ROC: 0.45077
AUC ROC: 0.45077






Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 05:00:40
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 05:00:40
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 05:00:40
{'AUC ROC': 0.45077, 'AUC PR': 0.453263, 'CLL': -0.711378, 'Precision': [0.507146, 0.5], 'Recall': 0.979519, 'F1': 0.668287, 'Learning time': 37.748, 'Inference time': 3.42}
{'AUC ROC': 0.45077, 'AUC PR': 0.453263, 'CLL': -0.711378, 'Precision': [0.507146, 0.5], 'Recall': 0.979519, 'F1': 0.668287, 'Learning time': 37.748, 'Inference time': 3.42}
{'AUC ROC': 0.45077, 'AUC PR': 0.453263, 'CLL': -0.711378, 'Precision': [0.507146, 0.5], 'Recall': 0.979519, 'F1': 0.668287, 'Learning time': 37.748, 'Inference time': 3.42}






Starting fold 3

Starting fold 3

Starting fold 3

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else return 0.1081489350995109;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else return 0.1081489350995109;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else return 0.1081489350995109;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04446743783575573;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0981987811193385;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04446743783575573;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0981987811193385;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04446743783575573;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0981987811193385;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03853712653884491;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05335155572422024;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08712933350199822;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03853712653884491;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05335155572422024;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08712933350199822;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03853712653884491;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05335155572422024;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08712933350199822;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2248554918890147;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03325117659676339;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07261002240471273;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2248554918890147;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03325117659676339;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07261002240471273;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2248554918890147;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03325117659676339;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07261002240471273;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.09322178581492384;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17710627784842234;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.03492835311021371;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092282174640372;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.09322178581492384;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17710627784842234;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.03492835311021371;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092282174640372;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.09322178581492384;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17710627784842234;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.03492835311021371;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092282174640372;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13216777123613527;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01975263936498633;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029553579659944342;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053862820651470654;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13216777123613527;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01975263936498633;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029553579659944342;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053862820651470654;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13216777123613527;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01975263936498633;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029553579659944342;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053862820651470654;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08966776040485303;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04097447578954139;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10189573592197396;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016815569027466094;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024914800894204364;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04503647292412754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08966776040485303;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04097447578954139;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10189573592197396;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016815569027466094;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024914800894204364;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04503647292412754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08966776040485303;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04097447578954139;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10189573592197396;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016815569027466094;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024914800894204364;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04503647292412754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531114091094213;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014286074716502728;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.020939087131130917;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037442223262449746;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531114091094213;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014286074716502728;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.020939087131130917;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037442223262449746;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531114091094213;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014286074716502728;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.020939087131130917;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037442223262449746;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657683260146131;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012115966903046883;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.03007820448439499;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657683260146131;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012115966903046883;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.03007820448439499;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657683260146131;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012115966903046883;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.03007820448439499;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03520075899749597;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0022078500029192893;  // std dev = 0,478, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.04383019664764082;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010260274011490605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02569155568220664;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03520075899749597;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0022078500029192893;  // std dev = 0,478, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.04383019664764082;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010260274011490605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02569155568220664;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03520075899749597;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0022078500029192893;  // std dev = 0,478, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.04383019664764082;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010260274011490605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02569155568220664;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.68491
   CLL	      = -0.68491
   CLL	      = -0.68491
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196






Total learning time: 32.09 seconds
Total learning time: 32.09 seconds
Total learning time: 32.09 seconds
Total inference time: 2.994 seconds
Total inference time: 2.994 seconds
Total inference time: 2.994 seconds
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false,true': [0.496, 17, 13], 'true,false,false': [0.498, 436, 516], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.478, 24, 15], 'false,true': [0.498, 453, 529], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.478, 24, 15], 'false,true': [0.498, 453, 529], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.478, 24, 15], 'false,true': [0.498, 453, 529], 'false,false,true': [0.4, 8, 2], 'false,false,false': [0.436, 93, 32]}]
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,false': [0.2455555555555551, 0.2482345879528216], 'true,true': [0.24999999999999992, 0.2455555555555551]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,false': [0.2455555555555551, 0.2482345879528216], 'true,true': [0.24999999999999992, 0.2455555555555551]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,false': [0.2455555555555551, 0.2482345879528216], 'true,true': [0.24999999999999992, 0.2455555555555551]}
{'': [0.24856163918085591, 0.18750000000000108], 'true': [0.24674070662916606, 0.24840341668289873], 'true,true': [0.24999999999999992, 0.24555555555555544], 'false': [0.16, 0.1893517487190922]}
{'': [0.24856163918085591, 0.18750000000000108], 'true': [0.24674070662916606, 0.24840341668289873], 'true,true': [0.24999999999999992, 0.24555555555555544], 'false': [0.16, 0.1893517487190922]}
{'': [0.24856163918085591, 0.18750000000000108], 'true': [0.24674070662916606, 0.24840341668289873], 'true,true': [0.24999999999999992, 0.24555555555555544], 'false': [0.16, 0.1893517487190922]}
{'': [0.2484538241016237, 0.18745210314600577], 'false': [0.15999999999999998, 0.1893517487190908], 'false,false': [0.17283950617283955, 0.1904639999999997]}
{'': [0.2484538241016237, 0.18745210314600577], 'false': [0.15999999999999998, 0.1893517487190908], 'false,false': [0.17283950617283955, 0.1904639999999997]}
{'': [0.2484538241016237, 0.18745210314600577], 'false': [0.15999999999999998, 0.1893517487190908], 'false,false': [0.17283950617283955, 0.1904639999999997]}
{'': [0.24842080080383172, 0.1873954281053437], 'true': [0.24653560339216604, 0.24837044466717312], 'true,true': [0.25000000000000006, 0.2455555555555554], 'false': [0.15999999999999998, 0.18933228534806895]}
{'': [0.24842080080383172, 0.1873954281053437], 'true': [0.24653560339216604, 0.24837044466717312], 'true,true': [0.25000000000000006, 0.2455555555555554], 'false': [0.15999999999999998, 0.18933228534806895]}
{'': [0.24842080080383172, 0.1873954281053437], 'true': [0.24653560339216604, 0.24837044466717312], 'true,true': [0.25000000000000006, 0.2455555555555554], 'false': [0.15999999999999998, 0.18933228534806895]}
{'': [0.24835435730576072, 0.18736496141544526], 'true': [0.24687059224828425, 0.24822728366872154], 'true,false': [0.2455555555555553, 0.2482345879528251], 'true,true': [0.25, 0.2455555555555556], 'false': [0.17283950617283952, 0.18829109307330583]}
{'': [0.24835435730576072, 0.18736496141544526], 'true': [0.24687059224828425, 0.24822728366872154], 'true,false': [0.2455555555555553, 0.2482345879528251], 'true,true': [0.25, 0.2455555555555556], 'false': [0.17283950617283952, 0.18829109307330583]}
{'': [0.24835435730576072, 0.18736496141544526], 'true': [0.24687059224828425, 0.24822728366872154], 'true,false': [0.2455555555555553, 0.2482345879528251], 'true,true': [0.25, 0.2455555555555556], 'false': [0.17283950617283952, 0.18829109307330583]}
{'': [0.24823470284139362, 0.18734952895641735], 'false': [0.16, 0.18931728954342344], 'false,false': [0.1728395061728394, 0.19046399999999916]}
{'': [0.24823470284139362, 0.18734952895641735], 'false': [0.16, 0.18931728954342344], 'false,false': [0.1728395061728394, 0.19046399999999916]}
{'': [0.24823470284139362, 0.18734952895641735], 'false': [0.16, 0.18931728954342344], 'false,false': [0.1728395061728394, 0.19046399999999916]}
{'': [0.24822614892564052, 0.18731717399435688], 'true': [0.2466256068472169, 0.24818621560602708], 'true,true': [0.25000000000000006, 0.2455555555555558], 'false': [0.15999999999999998, 0.18930563245379725], 'false,false': [0.17283950617283952, 0.19046399999999997]}
{'': [0.24822614892564052, 0.18731717399435688], 'true': [0.2466256068472169, 0.24818621560602708], 'true,true': [0.25000000000000006, 0.2455555555555558], 'false': [0.15999999999999998, 0.18930563245379725], 'false,false': [0.17283950617283952, 0.19046399999999997]}
{'': [0.24822614892564052, 0.18731717399435688], 'true': [0.2466256068472169, 0.24818621560602708], 'true,true': [0.25000000000000006, 0.2455555555555558], 'false': [0.15999999999999998, 0.18930563245379725], 'false,false': [0.17283950617283952, 0.19046399999999997]}
{'': [0.24817652047412353, 0.18729420526335783], 'false': [0.15999999999999995, 0.18929732914537767], 'false,false': [0.17283950617283958, 0.19046400000000116]}
{'': [0.24817652047412353, 0.18729420526335783], 'false': [0.15999999999999995, 0.18929732914537767], 'false,false': [0.17283950617283958, 0.19046400000000116]}
{'': [0.24817652047412353, 0.18729420526335783], 'false': [0.15999999999999995, 0.18929732914537767], 'false,false': [0.17283950617283958, 0.19046400000000116]}
{'': [0.24817380046786947, 0.18727827654278856], 'false': [0.15999999999999998, 0.18929156312912]}
{'': [0.24817380046786947, 0.18727827654278856], 'false': [0.15999999999999998, 0.18929156312912]}
{'': [0.24817380046786947, 0.18727827654278856], 'false': [0.15999999999999998, 0.18929156312912]}
{'': [0.23175886841320784, 0.240974468522553], 'false': [0.24818141720085504, 0.18822373967448525], 'true': [0.25, 0.22880740287092172], 'false,false': [0.16000000000000003, 0.19046399999999958]}
{'': [0.23175886841320784, 0.240974468522553], 'false': [0.24818141720085504, 0.18822373967448525], 'true': [0.25, 0.22880740287092172], 'false,false': [0.16000000000000003, 0.19046399999999958]}
{'': [0.23175886841320784, 0.240974468522553], 'false': [0.24818141720085504, 0.18822373967448525], 'true': [0.25, 0.22880740287092172], 'false,false': [0.16000000000000003, 0.19046399999999958]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordvenue(B, D).;true;true', '1;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordvenue(B, D).;true;true', '3;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;haswordvenue(A, D).;true;true', '4;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;true,true;haswordvenue(A, D).;true;true', '6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordvenue(B, D).;true;true', '1;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordvenue(B, D).;true;true', '3;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;haswordvenue(A, D).;true;true', '4;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;true,true;haswordvenue(A, D).;true;true', '6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordvenue(B, D).;true;true', '1;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordvenue(B, D).;true;true', '3;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;haswordvenue(A, D).;true;true', '4;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;true,true;haswordvenue(A, D).;true;true', '6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;haswordvenue(A, C).;true;true', '9;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.4001657418221966;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25217476417968154;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3413638139407383;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795012611324169;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.14173885918374088;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22747471350787843;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07217910394185868;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.14173885918374088;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22747471350787843;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07217910394185868;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.20132359461199342;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1598144258626535;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.14173885918374088;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22747471350787843;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07217910394185868;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11162101827349864;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17649905654621184;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.0421892903070299;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06039719941587624;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11162101827349864;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17649905654621184;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.0421892903070299;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06039719941587624;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.1575252138286236;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11162101827349864;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.12693828347291322;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.17649905654621184;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.0421892903070299;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06039719941587624;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13214968486193748;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024589518470815037;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03587698722995659;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05297917242787839;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13214968486193748;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024589518470815037;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03587698722995659;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05297917242787839;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13214968486193748;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024589518470815037;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03587698722995659;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05297917242787839;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08967213657129947;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0562961672889502;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06930893624814848;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.10243162134599364;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.0210044162292145;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.03037598101472996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427200416757492;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08967213657129947;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0562961672889502;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06930893624814848;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.10243162134599364;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.0210044162292145;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.03037598101472996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427200416757492;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.08967213657129947;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0562961672889502;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06930893624814848;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.10243162134599364;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.0210044162292145;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.03037598101472996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427200416757492;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.0678140463665269;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04298468443333931;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05311706418382077;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.07706277147103342;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.017896849224650326;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.025622319609332783;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03678875800825642;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.0678140463665269;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04298468443333931;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05311706418382077;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.07706277147103342;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.017896849224650326;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.025622319609332783;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03678875800825642;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.0678140463665269;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04298468443333931;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05311706418382077;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.07706277147103342;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.017896849224650326;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.025622319609332783;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03678875800825642;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.051101943644068615;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.040522758314110785;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05708129495037722;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01521608372149369;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02154383344391232;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0304270819784802;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.051101943644068615;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.040522758314110785;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05708129495037722;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01521608372149369;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02154383344391232;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0304270819784802;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.051101943644068615;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.040522758314110785;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05708129495037722;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01521608372149369;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02154383344391232;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0304270819784802;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.038429570654731064;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return 0.018927430503292663;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.018065767041812644;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.04319426634347953;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.012912948600757812;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506744224191546;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.038429570654731064;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return 0.018927430503292663;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.018065767041812644;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.04319426634347953;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.012912948600757812;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506744224191546;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.038429570654731064;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return 0.018927430503292663;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.018065767041812644;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then return 0.04319426634347953;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.012912948600757812;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506744224191546;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.685037
   CLL	      = -0.685037
   CLL	      = -0.685037
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196






Total learning time: 23.015 seconds
Total learning time: 23.015 seconds
Total learning time: 23.015 seconds
Total inference time: 3.502 seconds
Total inference time: 3.502 seconds
Total inference time: 3.502 seconds
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997






Refined model AUC ROC: 0.547997
Refined model AUC ROC: 0.547997
Refined model AUC ROC: 0.547997






Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 05:01:48
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 05:01:48
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 05:01:48
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.685037, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.105000000000004, 'Inference time': 3.502, 'Mapping results': {'Knowledge compiling time': 0.18511962890625, 'Generating paths time': 4.679772138595581, 'Generating mappings time': 0.07010149955749512, 'Possible mappings': 6, 'Finding best mapping': 0.000675201416015625, 'Total time': 4.935676336288452}, 'Parameter Learning results': {'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68491, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 32.09, 'Inference time': 2.994}}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.685037, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.105000000000004, 'Inference time': 3.502, 'Mapping results': {'Knowledge compiling time': 0.18511962890625, 'Generating paths time': 4.679772138595581, 'Generating mappings time': 0.07010149955749512, 'Possible mappings': 6, 'Finding best mapping': 0.000675201416015625, 'Total time': 4.935676336288452}, 'Parameter Learning results': {'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68491, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 32.09, 'Inference time': 2.994}}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.685037, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.105000000000004, 'Inference time': 3.502, 'Mapping results': {'Knowledge compiling time': 0.18511962890625, 'Generating paths time': 4.679772138595581, 'Generating mappings time': 0.07010149955749512, 'Possible mappings': 6, 'Finding best mapping': 0.000675201416015625, 'Total time': 4.935676336288452}, 'Parameter Learning results': {'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68491, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 32.09, 'Inference time': 2.994}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1874768374571942;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.12081017079052764;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2261733751354077;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.06984429966161648;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1874768374571942;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.12081017079052764;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2261733751354077;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.06984429966161648;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1874768374571942;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.12081017079052764;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2261733751354077;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.06984429966161648;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730789823090106;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059299282789742135;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730789823090106;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059299282789742135;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730789823090106;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059299282789742135;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10534670904981693;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.054489957186014765;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13476188592936644;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.020161073169279446;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.029978296428922246;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0538071148877896;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10534670904981693;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.054489957186014765;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13476188592936644;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.020161073169279446;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.029978296428922246;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0538071148877896;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10534670904981693;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.054489957186014765;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13476188592936644;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.020161073169279446;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.029978296428922246;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0538071148877896;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000314168027629;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04182454126958383;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000314168027629;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04182454126958383;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000314168027629;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.04182454126958383;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07530859290471272;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010836320164131524;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01858135598196968;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03794090810649455;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07530859290471272;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010836320164131524;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01858135598196968;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03794090810649455;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07530859290471272;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010836320164131524;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01858135598196968;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03794090810649455;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05655870027456819;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015551395930439539;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.0297555207699257;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05655870027456819;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015551395930439539;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.0297555207699257;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05655870027456819;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.015551395930439539;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.0297555207699257;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04243478941776078;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.023850543308340195;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04243478941776078;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.023850543308340195;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04243478941776078;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.023850543308340195;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */






Results
Results
Results
   AUC ROC   = 0.546617
   AUC ROC   = 0.546617
   AUC ROC   = 0.546617
   AUC PR    = 0.555126
   AUC PR    = 0.555126
   AUC PR    = 0.555126
   CLL	      = -0.684883
   CLL	      = -0.684883
   CLL	      = -0.684883
   Precision = 0.555804 at threshold = 0.5
   Precision = 0.555804 at threshold = 0.5
   Precision = 0.555804 at threshold = 0.5
   Recall    = 0.917898
   Recall    = 0.917898
   Recall    = 0.917898
   F1        = 0.692367
   F1        = 0.692367
   F1        = 0.692367






Total learning time: 24.301 seconds
Total learning time: 24.301 seconds
Total learning time: 24.301 seconds
Total inference time: 2.165 seconds
Total inference time: 2.165 seconds
Total inference time: 2.165 seconds
AUC ROC: 0.546617
AUC ROC: 0.546617
AUC ROC: 0.546617






Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 05:02:15
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 05:02:15
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 05:02:15
{'AUC ROC': 0.546617, 'AUC PR': 0.555126, 'CLL': -0.684883, 'Precision': [0.555804, 0.5], 'Recall': 0.917898, 'F1': 0.692367, 'Learning time': 24.301, 'Inference time': 2.165}
{'AUC ROC': 0.546617, 'AUC PR': 0.555126, 'CLL': -0.684883, 'Precision': [0.555804, 0.5], 'Recall': 0.917898, 'F1': 0.692367, 'Learning time': 24.301, 'Inference time': 2.165}
{'AUC ROC': 0.546617, 'AUC PR': 0.555126, 'CLL': -0.684883, 'Precision': [0.555804, 0.5], 'Recall': 0.917898, 'F1': 0.692367, 'Learning time': 24.301, 'Inference time': 2.165}






Starting fold 4

Starting fold 4

Starting fold 4

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */






Results
Results
Results
   AUC ROC   = 0.571945
   AUC ROC   = 0.571945
   AUC ROC   = 0.571945
   AUC PR    = 0.590058
   AUC PR    = 0.590058
   AUC PR    = 0.590058
   CLL	      = -0.678859
   CLL	      = -0.678859
   CLL	      = -0.678859
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475






Total learning time: 37.746 seconds
Total learning time: 37.746 seconds
Total learning time: 37.746 seconds
Total inference time: 3.254 seconds
Total inference time: 3.254 seconds
Total inference time: 3.254 seconds
AUC ROC: 0.571945
AUC ROC: 0.571945
AUC ROC: 0.571945






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [2.11e-08, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [2.11e-08, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [2.11e-08, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.5, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true,true': [1.83e-08, 0, 8], 'true,true,false': [0.011, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true': [2.11e-08, 0, 7], 'false,true,true,false': [0.198, 5, 0], 'false,true,false': [0.866, 1, 3], 'false,false,true': [0.5, 661, 697], 'false,false,false': [0.448, 73, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true,true': [1.83e-08, 0, 8], 'true,true,false': [0.011, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true': [2.11e-08, 0, 7], 'false,true,true,false': [0.198, 5, 0], 'false,true,false': [0.866, 1, 3], 'false,false,true': [0.5, 661, 697], 'false,false,false': [0.448, 73, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true,true': [1.83e-08, 0, 8], 'true,true,false': [0.011, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true': [2.11e-08, 0, 7], 'false,true,true,false': [0.198, 5, 0], 'false,true,false': [0.866, 1, 3], 'false,false,true': [0.5, 661, 697], 'false,false,false': [0.448, 73, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true,true': 'author(J, I), venue(J, B)', 'false,true,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true': [1.05e-08, 0, 8], 'true,true,false': [0.01, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true,true': [2.58e-08, 0, 7], 'false,true,true,true,false': [0.0, 4, 0], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [0.5, 661, 697], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true,true': 'author(J, I), venue(J, B)', 'false,true,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true': [1.05e-08, 0, 8], 'true,true,false': [0.01, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true,true': [2.58e-08, 0, 7], 'false,true,true,true,false': [0.0, 4, 0], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [0.5, 661, 697], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true,true': 'author(J, I), venue(J, B)', 'false,true,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true': [1.05e-08, 0, 8], 'true,true,false': [0.01, 6, 0], 'true,false': [0.894, 1, 4], 'false,true,true,true,true': [2.58e-08, 0, 7], 'false,true,true,true,false': [0.0, 4, 0], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [0.5, 661, 697], 'false,false': [0.446, 74, 28]}]
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24882159852468355, 0.19794514091808826]}
{'': [0.24882159852468355, 0.19794514091808826]}
{'': [0.24882159852468355, 0.19794514091808826]}
{'': [0.24872947726507033, 0.1979451409180892], 'true': [0.15648850636295847, 0.24977707095906285], 'true,true': [0.1486905859169469, 0.16], 'true,true,true': [5.551115123125783e-17, 0.0]}
{'': [0.24872947726507033, 0.1979451409180892], 'true': [0.15648850636295847, 0.24977707095906285], 'true,true': [0.1486905859169469, 0.16], 'true,true,true': [5.551115123125783e-17, 0.0]}
{'': [0.24872947726507033, 0.1979451409180892], 'true': [0.15648850636295847, 0.24977707095906285], 'true,true': [0.1486905859169469, 0.16], 'true,true,true': [5.551115123125783e-17, 0.0]}
{'': [0.24806666536001237, 0.19794514091808763]}
{'': [0.24806666536001237, 0.19794514091808763]}
{'': [0.24806666536001237, 0.19794514091808763]}
{'': [0.24802505366044994, 0.19794514091808932]}
{'': [0.24802505366044994, 0.19794514091808932]}
{'': [0.24802505366044994, 0.19794514091808932]}
{'': [0.24800306693013371, 0.19794514091808854]}
{'': [0.24800306693013371, 0.19794514091808854]}
{'': [0.24800306693013371, 0.19794514091808854]}
{'': [0.24799239639768908, 0.19794514091808735]}
{'': [0.24799239639768908, 0.19794514091808735]}
{'': [0.24799239639768908, 0.19794514091808735]}
{'': [0.10631694625394465, 0.24629904562136193], 'false': [0.21993714114156532, 0.24641430055216912], 'false,false': [0.24982431063614327, 0.20037251249877355], 'false,true': [0.22525903076931864, 0.1875], 'false,true,true': [6.344131569286608e-17, 0.007860716228282483], 'true': [0.08262407780404205, 0.15999999999999998], 'true,true': [4.163336342344337e-17, 2.1505583745751178e-05]}
{'': [0.10631694625394465, 0.24629904562136193], 'false': [0.21993714114156532, 0.24641430055216912], 'false,false': [0.24982431063614327, 0.20037251249877355], 'false,true': [0.22525903076931864, 0.1875], 'false,true,true': [6.344131569286608e-17, 0.007860716228282483], 'true': [0.08262407780404205, 0.15999999999999998], 'true,true': [4.163336342344337e-17, 2.1505583745751178e-05]}
{'': [0.10631694625394465, 0.24629904562136193], 'false': [0.21993714114156532, 0.24641430055216912], 'false,false': [0.24982431063614327, 0.20037251249877355], 'false,true': [0.22525903076931864, 0.1875], 'false,true,true': [6.344131569286608e-17, 0.007860716228282483], 'true': [0.08262407780404205, 0.15999999999999998], 'true,true': [4.163336342344337e-17, 2.1505583745751178e-05]}
{'': [0.0836370061224004, 0.24542695185076457], 'false': [0.24888115886279072, 0.19880727951313712], 'false,true': [0.15116379021059376, 0.2498243106361557], 'false,true,true': [0.13579224311884122, 0.1875], 'false,true,true,true': [9.516197353929913e-17, 0.0], 'true': [0.05367682243121851, 0.16], 'true,true': [1.3877787807814457e-17, 1.631605548823208e-05]}
{'': [0.0836370061224004, 0.24542695185076457], 'false': [0.24888115886279072, 0.19880727951313712], 'false,true': [0.15116379021059376, 0.2498243106361557], 'false,true,true': [0.13579224311884122, 0.1875], 'false,true,true,true': [9.516197353929913e-17, 0.0], 'true': [0.05367682243121851, 0.16], 'true,true': [1.3877787807814457e-17, 1.631605548823208e-05]}
{'': [0.0836370061224004, 0.24542695185076457], 'false': [0.24888115886279072, 0.19880727951313712], 'false,true': [0.15116379021059376, 0.2498243106361557], 'false,true,true': [0.13579224311884122, 0.1875], 'false,true,true,true': [9.516197353929913e-17, 0.0], 'true': [0.05367682243121851, 0.16], 'true,true': [1.3877787807814457e-17, 1.631605548823208e-05]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;samebib(F, G), venue(G, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, A).;true;true', '8;true,true;samebib(E, F), venue(F, B).;true;true', '8;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;false,true;author(I, H), venue(I, B).;true;true', '8;false,true,true;samebib(I, J), venue(J, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;author(E, D), venue(E, A).;true;true', '9;true,true;samebib(E, F), venue(F, B).;true;true', '9;false;haswordvenue(A, G), haswordvenue(B, G).;true;true', '9;false,true;haswordvenue(A, H), haswordauthor(I, H).;true;true', '9;false,true,true;author(J, I), venue(J, B).;true;true', '9;false,true,true,true;samebib(J, K), venue(K, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;samebib(F, G), venue(G, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, A).;true;true', '8;true,true;samebib(E, F), venue(F, B).;true;true', '8;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;false,true;author(I, H), venue(I, B).;true;true', '8;false,true,true;samebib(I, J), venue(J, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;author(E, D), venue(E, A).;true;true', '9;true,true;samebib(E, F), venue(F, B).;true;true', '9;false;haswordvenue(A, G), haswordvenue(B, G).;true;true', '9;false,true;haswordvenue(A, H), haswordauthor(I, H).;true;true', '9;false,true,true;author(J, I), venue(J, B).;true;true', '9;false,true,true,true;samebib(J, K), venue(K, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;samebib(F, G), venue(G, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, A).;true;true', '8;true,true;samebib(E, F), venue(F, B).;true;true', '8;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;false,true;author(I, H), venue(I, B).;true;true', '8;false,true,true;samebib(I, J), venue(J, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true', '9;true;author(E, D), venue(E, A).;true;true', '9;true,true;samebib(E, F), venue(F, B).;true;true', '9;false;haswordvenue(A, G), haswordvenue(B, G).;true;true', '9;false,true;haswordvenue(A, H), haswordauthor(I, H).;true;true', '9;false,true,true;author(J, I), venue(J, B).;true;true', '9;false,true,true,true;samebib(J, K), venue(K, A).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32104511010142234;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26740130402742085;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869670075917672;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20563486314732;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.43446988149920845;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2126605510183174;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669722212232545;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281792505461538;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09738191135429834;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07354371121920639;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.33145692608739724;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2493563109015824;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2135992699997356;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.539361555340297;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.4163081045180953;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.28936155534029706;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05261634179095564;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | | else return 0.03824097882061264;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2624913109755341;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.205645213089513;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.162921781428015;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.40574373803560093;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.36029573822664435;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21715016997947933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03951967387708901;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.029228665045728745;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */






Results
Results
Results
   AUC ROC   = 0.571945
   AUC ROC   = 0.571945
   AUC ROC   = 0.571945
   AUC PR    = 0.590058
   AUC PR    = 0.590058
   AUC PR    = 0.590058
   CLL	      = -0.678859
   CLL	      = -0.678859
   CLL	      = -0.678859
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475






Total learning time: 26.242 seconds
Total learning time: 26.242 seconds
Total learning time: 26.242 seconds
Total inference time: 3.187 seconds
Total inference time: 3.187 seconds
Total inference time: 3.187 seconds
AUC ROC: 0.571945
AUC ROC: 0.571945
AUC ROC: 0.571945






Refined model AUC ROC: 0.571945
Refined model AUC ROC: 0.571945
Refined model AUC ROC: 0.571945






Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 05:03:32
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 05:03:32
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 05:03:32
{'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 63.988, 'Inference time': 3.187, 'Mapping results': {'Knowledge compiling time': 0.13935256004333496, 'Generating paths time': 4.637048959732056, 'Generating mappings time': 0.06922125816345215, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 4.846308946609497}, 'Parameter Learning results': {'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.746, 'Inference time': 3.254}}
{'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 63.988, 'Inference time': 3.187, 'Mapping results': {'Knowledge compiling time': 0.13935256004333496, 'Generating paths time': 4.637048959732056, 'Generating mappings time': 0.06922125816345215, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 4.846308946609497}, 'Parameter Learning results': {'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.746, 'Inference time': 3.254}}
{'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 63.988, 'Inference time': 3.187, 'Mapping results': {'Knowledge compiling time': 0.13935256004333496, 'Generating paths time': 4.637048959732056, 'Generating mappings time': 0.06922125816345215, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 4.846308946609497}, 'Parameter Learning results': {'AUC ROC': 0.571945, 'AUC PR': 0.590058, 'CLL': -0.678859, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.746, 'Inference time': 3.254}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3206703424096839;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3206703424096839;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3206703424096839;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6499552344614105;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1653645733748385;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.49399056757218246;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.26561842710462097;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6499552344614105;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1653645733748385;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.49399056757218246;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.26561842710462097;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6499552344614105;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1653645733748385;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.49399056757218246;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.26561842710462097;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.6466940588168459;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.6981846019482083;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.3018153980517917;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4746489283679711;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21218290871705953;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.6466940588168459;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.6981846019482083;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.3018153980517917;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4746489283679711;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21218290871705953;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.6466940588168459;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.6981846019482083;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.3018153980517917;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4746489283679711;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21218290871705953;  // std dev = 0,498, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669525519303973;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669525519303973;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1669525519303973;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.128189885981121;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.128189885981121;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.128189885981121;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.097410764535286;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.097410764535286;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.097410764535286;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07358138035724525;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07358138035724525;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07358138035724525;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.3076929152741132;  // std dev = 0,076, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.35733058302459536;  // std dev = 0,096, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2486380021929056;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.058597281377140896;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.05422551017541008;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.3076929152741132;  // std dev = 0,076, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.35733058302459536;  // std dev = 0,096, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2486380021929056;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.058597281377140896;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.05422551017541008;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.3076929152741132;  // std dev = 0,076, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.35733058302459536;  // std dev = 0,096, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2486380021929056;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.058597281377140896;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.05422551017541008;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0416639971798298;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0416639971798298;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0416639971798298;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */






Results
Results
Results
   AUC ROC   = 0.571643
   AUC ROC   = 0.571643
   AUC ROC   = 0.571643
   AUC PR    = 0.5888
   AUC PR    = 0.5888
   AUC PR    = 0.5888
   CLL	      = -0.679439
   CLL	      = -0.679439
   CLL	      = -0.679439
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518






Total learning time: 40.377 seconds
Total learning time: 40.377 seconds
Total learning time: 40.377 seconds
Total inference time: 3.47 seconds
Total inference time: 3.47 seconds
Total inference time: 3.47 seconds
AUC ROC: 0.571643
AUC ROC: 0.571643
AUC ROC: 0.571643






Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 05:04:16
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 05:04:16
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 05:04:16
{'AUC ROC': 0.571643, 'AUC PR': 0.5888, 'CLL': -0.679439, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 40.377, 'Inference time': 3.47}
{'AUC ROC': 0.571643, 'AUC PR': 0.5888, 'CLL': -0.679439, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 40.377, 'Inference time': 3.47}
{'AUC ROC': 0.571643, 'AUC PR': 0.5888, 'CLL': -0.679439, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 40.377, 'Inference time': 3.47}






Starting fold 5

Starting fold 5

Starting fold 5

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04350068122642711;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.056658575963269224;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4105805710335841;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08785792677319129;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04350068122642711;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.056658575963269224;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4105805710335841;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08785792677319129;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04350068122642711;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.056658575963269224;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4105805710335841;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08785792677319129;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6347517234722438;  // std dev = 4,21e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.6491161938349704;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.4824495271683038;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1773039265957894;  // std dev = 0,038, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.14652202037705458;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5840623283946433;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32425345280831674;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.07601395468598782;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6347517234722438;  // std dev = 4,21e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.6491161938349704;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.4824495271683038;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1773039265957894;  // std dev = 0,038, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.14652202037705458;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5840623283946433;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32425345280831674;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.07601395468598782;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6347517234722438;  // std dev = 4,21e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.6491161938349704;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.4824495271683038;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1773039265957894;  // std dev = 0,038, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.14652202037705458;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5840623283946433;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32425345280831674;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.07601395468598782;  // std dev = 0,425, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.16585475868815236;  // std dev = 0,364, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.16616737078556934;  // std dev = 0,408, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.20178017686584843;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5267912517055802;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2653224865217267;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.0593531260134354;  // std dev = 0,386, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return 0.17820309755585279;  // std dev = 1,007, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1110394008022213;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05020603523830006;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.16585475868815236;  // std dev = 0,364, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.16616737078556934;  // std dev = 0,408, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.20178017686584843;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5267912517055802;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2653224865217267;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.0593531260134354;  // std dev = 0,386, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return 0.17820309755585279;  // std dev = 1,007, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1110394008022213;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05020603523830006;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.16585475868815236;  // std dev = 0,364, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.16616737078556934;  // std dev = 0,408, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.20178017686584843;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5267912517055802;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2653224865217267;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.0593531260134354;  // std dev = 0,386, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return 0.17820309755585279;  // std dev = 1,007, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1110394008022213;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05020603523830006;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1901432543219692;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6069146270793443;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1895245848051396;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1851251913299511;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0954672144255943;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.005879706377482846;  // std dev = 0,793, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return 0.14675078410261821;  // std dev = 0,998, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.106819450446386;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.01568862481593802;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1901432543219692;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6069146270793443;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1895245848051396;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1851251913299511;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0954672144255943;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.005879706377482846;  // std dev = 0,793, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return 0.14675078410261821;  // std dev = 0,998, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.106819450446386;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.01568862481593802;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1901432543219692;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6069146270793443;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1895245848051396;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1851251913299511;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0954672144255943;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.005879706377482846;  // std dev = 0,793, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, B) )
%   | | | | then return 0.14675078410261821;  // std dev = 0,998, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.106819450446386;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.01568862481593802;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08381990480096232;  // std dev = 0,387, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04610980977224495;  // std dev = 0,359, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15596558552964715;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.49496374133891885;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16212129055573707;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.15882187711167625;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07993983716219054;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.08331013418356328;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013388673512018688;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08381990480096232;  // std dev = 0,387, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04610980977224495;  // std dev = 0,359, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15596558552964715;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.49496374133891885;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16212129055573707;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.15882187711167625;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07993983716219054;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.08331013418356328;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013388673512018688;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08381990480096232;  // std dev = 0,387, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04610980977224495;  // std dev = 0,359, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.15596558552964715;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.49496374133891885;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16212129055573707;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.15882187711167625;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07993983716219054;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.08331013418356328;  // std dev = 0,449, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013388673512018688;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10853962850095475;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3814506475476832;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14129502834806848;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1387441541162484;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0662667124868941;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02789436417165771;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10853962850095475;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3814506475476832;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14129502834806848;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1387441541162484;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0662667124868941;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02789436417165771;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10853962850095475;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3814506475476832;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14129502834806848;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.1387441541162484;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0662667124868941;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02789436417165771;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05963710978088126;  // std dev = 0,347, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08361932254147544;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4500139974603089;  // std dev = 0,916, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18716844677835448;  // std dev = 0,039, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.21647849735436644;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05479987646757354;  // std dev = 0,444, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.008160329924023843;  // std dev = 0,562, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0647083072021457;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.007225388116611085;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05963710978088126;  // std dev = 0,347, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08361932254147544;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4500139974603089;  // std dev = 0,916, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18716844677835448;  // std dev = 0,039, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.21647849735436644;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05479987646757354;  // std dev = 0,444, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.008160329924023843;  // std dev = 0,562, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0647083072021457;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.007225388116611085;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05963710978088126;  // std dev = 0,347, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08361932254147544;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4500139974603089;  // std dev = 0,916, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18716844677835448;  // std dev = 0,039, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.21647849735436644;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05479987646757354;  // std dev = 0,444, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.008160329924023843;  // std dev = 0,562, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0647083072021457;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.007225388116611085;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0617548205557915;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34245742896077896;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16039093677390168;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1820285286520307;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04486534533725823;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0070730413198704075;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.052713692068741;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.006130055978991172;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0617548205557915;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34245742896077896;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16039093677390168;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1820285286520307;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04486534533725823;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0070730413198704075;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.052713692068741;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.006130055978991172;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0617548205557915;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34245742896077896;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16039093677390168;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1820285286520307;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04486534533725823;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0070730413198704075;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.052713692068741;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.006130055978991172;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04670111943597532;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.25728199523980927;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13998218203719573;  // std dev = 0,031, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.023367911761609825;  // std dev = 0,431, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.006127141372134079;  // std dev = 0,560, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.01416307193732042;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04663838887521442;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.005196875551416134;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04670111943597532;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.25728199523980927;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13998218203719573;  // std dev = 0,031, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.023367911761609825;  // std dev = 0,431, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.006127141372134079;  // std dev = 0,560, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.01416307193732042;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04663838887521442;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.005196875551416134;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04670111943597532;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.25728199523980927;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13998218203719573;  // std dev = 0,031, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.023367911761609825;  // std dev = 0,431, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.006127141372134079;  // std dev = 0,560, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.01416307193732042;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04663838887521442;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.005196875551416134;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */






Results
Results
Results
   AUC ROC   = 0.550092
   AUC ROC   = 0.550092
   AUC ROC   = 0.550092
   AUC PR    = 0.568181
   AUC PR    = 0.568181
   AUC PR    = 0.568181
   CLL	      = -0.685966
   CLL	      = -0.685966
   CLL	      = -0.685966
   Precision = 0.546031 at threshold = 0.5
   Precision = 0.546031 at threshold = 0.5
   Precision = 0.546031 at threshold = 0.5
   Recall    = 0.94244
   Recall    = 0.94244
   Recall    = 0.94244
   F1        = 0.69145
   F1        = 0.69145
   F1        = 0.69145






Total learning time: 52.969 seconds
Total learning time: 52.969 seconds
Total learning time: 52.969 seconds
Total inference time: 5.137 seconds
Total inference time: 5.137 seconds
Total inference time: 5.137 seconds
AUC ROC: 0.550092
AUC ROC: 0.550092
AUC ROC: 0.550092






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 15, 0], 'true,true,false,false': [0.433, 15, 5], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [1.49e-08, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 15, 0], 'true,true,false,false': [0.433, 15, 5], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [1.49e-08, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'true,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 15, 0], 'true,true,false,false': [0.433, 15, 5], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [1.49e-08, 14, 0], 'true,false,true,false': [0.44, 14, 5], 'true,false,false': [0.486, 278, 448], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'author(F, E), venue(F, A)', 'true,true,false,true': 'samebib(F, G), venue(G, B)', 'true,true,false,true,true': 'author(G, E)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true': [4.21e-08, 0, 10], 'true,true,false,true,true,true': [0.0, 0, 10], 'true,true,false,true,true,false': [0.913, 1, 5], 'true,true,false,true,false': [0.038, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.485, 307, 468], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'author(F, E), venue(F, A)', 'true,true,false,true': 'samebib(F, G), venue(G, B)', 'true,true,false,true,true': 'author(G, E)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true': [4.21e-08, 0, 10], 'true,true,false,true,true,true': [0.0, 0, 10], 'true,true,false,true,true,false': [0.913, 1, 5], 'true,true,false,true,false': [0.038, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.485, 307, 468], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'author(F, E), venue(F, A)', 'true,true,false,true': 'samebib(F, G), venue(G, B)', 'true,true,false,true,true': 'author(G, E)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true': [4.21e-08, 0, 10], 'true,true,false,true,true,true': [0.0, 0, 10], 'true,true,false,true,true,false': [0.913, 1, 5], 'true,true,false,true,false': [0.038, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.485, 307, 468], 'false': [0.425, 162, 52]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'true,false,true,false': 'author(I, G), venue(I, A)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)', 'false,true,false': 'author(M, K), venue(M, B)'}, {'true,true': [0.364, 31, 30], 'true,false,true,true': [0.408, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.386, 6, 2], 'false,true,false,true': [1.007, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false': [0.417, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'true,false,true,false': 'author(I, G), venue(I, A)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)', 'false,true,false': 'author(M, K), venue(M, B)'}, {'true,true': [0.364, 31, 30], 'true,false,true,true': [0.408, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.386, 6, 2], 'false,true,false,true': [1.007, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false': [0.417, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'true,false,true,false': 'author(I, G), venue(I, A)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)', 'false,true,false': 'author(M, K), venue(M, B)'}, {'true,true': [0.364, 31, 30], 'true,false,true,true': [0.408, 15, 15], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.386, 6, 2], 'false,true,false,true': [1.007, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false': [0.417, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,false': 'author(L, J), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.021, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true': [0.793, 4, 1], 'false,false,true,false,true': [0.998, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,false': 'author(L, J), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.021, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true': [0.793, 4, 1], 'false,false,true,false,true': [0.998, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,false': 'author(L, J), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.021, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true': [0.793, 4, 1], 'false,false,true,false,true': [0.998, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.387, 31, 30], 'true,false,true': [0.359, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true': [0.449, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.387, 31, 30], 'true,false,true': [0.359, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true': [0.449, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.387, 31, 30], 'true,false,true': [0.359, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true': [0.449, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.013, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false': [0.412, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.013, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false': [0.412, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.013, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false': [0.412, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.347, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.916, 1, 4], 'false,true,true,false': [0.039, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.444, 29, 12], 'false,false,true,true': [0.562, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.347, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.916, 1, 4], 'false,true,true,false': [0.039, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.444, 29, 12], 'false,false,true,true': [0.562, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.347, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.916, 1, 4], 'false,true,true,false': [0.039, 5, 0], 'false,true,false,true': [0.017, 3, 0], 'false,true,false,false': [0.444, 29, 12], 'false,false,true,true': [0.562, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.035, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.443, 29, 12], 'false,false,true,true': [0.561, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.035, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.443, 29, 12], 'false,false,true,true': [0.561, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.035, 5, 0], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [0.443, 29, 12], 'false,false,true,true': [0.561, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.031, 5, 0], 'false,true,false': [0.431, 32, 12], 'false,false,true,true': [0.56, 4, 1], 'false,false,true,false,true': [0.866, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.031, 5, 0], 'false,true,false': [0.431, 32, 12], 'false,false,true,true': [0.56, 4, 1], 'false,false,true,false,true': [0.866, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.918, 1, 4], 'false,true,true,false': [0.031, 5, 0], 'false,true,false': [0.431, 32, 12], 'false,false,true,true': [0.56, 4, 1], 'false,false,true,false,true': [0.866, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}
{'': [0.2408427004876197, 0.18090031112654872], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [8.881784197001253e-17, 0.2383698577470206], 'true,false': [0.2415660141607666, 0.23629229940273547], 'true,false,true': [0.2500000000000003, 0.19390581717451522], 'true,false,true,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false': [0.24973985431841858, 0.18749999999999994], 'true,true,false,true': [0.05859375000000033, 1.4802973661668754e-17]}
{'': [0.2408427004876197, 0.18090031112654872], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [8.881784197001253e-17, 0.2383698577470206], 'true,false': [0.2415660141607666, 0.23629229940273547], 'true,false,true': [0.2500000000000003, 0.19390581717451522], 'true,false,true,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false': [0.24973985431841858, 0.18749999999999994], 'true,true,false,true': [0.05859375000000033, 1.4802973661668754e-17]}
{'': [0.2408427004876197, 0.18090031112654872], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [8.881784197001253e-17, 0.2383698577470206], 'true,false': [0.2415660141607666, 0.23629229940273547], 'true,false,true': [0.2500000000000003, 0.19390581717451522], 'true,false,true,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false': [0.24973985431841858, 0.18749999999999994], 'true,true,false,true': [0.05859375000000033, 1.4802973661668754e-17]}
{'': [0.23254337324112825, 0.1807439764490299], 'true': [0.18987327026733763, 0.23519994223023985], 'true,true': [1.7763568394002506e-16, 0.1879516942186627], 'true,true,false': [0.1760294384466276, 0.18654989533042027], 'true,true,false,false': [0.06196148777301908, 0.15999999999999998], 'true,true,false,true': [0.05859375000000017, 9.471451927268726e-05], 'true,true,false,true,true': [0.0, 0.13888888888888895]}
{'': [0.23254337324112825, 0.1807439764490299], 'true': [0.18987327026733763, 0.23519994223023985], 'true,true': [1.7763568394002506e-16, 0.1879516942186627], 'true,true,false': [0.1760294384466276, 0.18654989533042027], 'true,true,false,false': [0.06196148777301908, 0.15999999999999998], 'true,true,false,true': [0.05859375000000017, 9.471451927268726e-05], 'true,true,false,true,true': [0.0, 0.13888888888888895]}
{'': [0.23254337324112825, 0.1807439764490299], 'true': [0.18987327026733763, 0.23519994223023985], 'true,true': [1.7763568394002506e-16, 0.1879516942186627], 'true,true,false': [0.1760294384466276, 0.18654989533042027], 'true,true,false,false': [0.06196148777301908, 0.15999999999999998], 'true,true,false,true': [0.05859375000000017, 9.471451927268726e-05], 'true,true,false,true,true': [0.0, 0.13888888888888895]}
{'': [0.227749005438062, 0.18060882479032603], 'true': [0.132558968846638, 0.23466499337383703], 'true,false': [0.18427674769160984, 0.23629229940273783], 'true,false,true': [0.16613743111660562, 0.19390581717451533], 'true,false,true,false': [0.06632653061224494, 0.15999999999999998], 'false': [0.1988003338558603, 0.17357900651609165], 'false,true': [0.14871170419479257, 0.20699592906646871], 'false,true,false': [0.20278093161423333, 0.20701963117192118]}
{'': [0.227749005438062, 0.18060882479032603], 'true': [0.132558968846638, 0.23466499337383703], 'true,false': [0.18427674769160984, 0.23629229940273783], 'true,false,true': [0.16613743111660562, 0.19390581717451533], 'true,false,true,false': [0.06632653061224494, 0.15999999999999998], 'false': [0.1988003338558603, 0.17357900651609165], 'false,true': [0.14871170419479257, 0.20699592906646871], 'false,true,false': [0.20278093161423333, 0.20701963117192118]}
{'': [0.227749005438062, 0.18060882479032603], 'true': [0.132558968846638, 0.23466499337383703], 'true,false': [0.18427674769160984, 0.23629229940273783], 'true,false,true': [0.16613743111660562, 0.19390581717451533], 'true,false,true,false': [0.06632653061224494, 0.15999999999999998], 'false': [0.1988003338558603, 0.17357900651609165], 'false,true': [0.14871170419479257, 0.20699592906646871], 'false,true,false': [0.20278093161423333, 0.20701963117192118]}
{'': [0.2253124914376478, 0.18019463318880738], 'false': [0.2055804955102329, 0.1706921233108835], 'false,true': [0.23925658438883585, 0.19468259205184896], 'false,true,true': [0.16127085057748686, 8.460908659588818e-05], 'false,true,false': [9.262848695266075e-05, 0.20355278446645045], 'false,false': [0.20265945586451375, 0.15574022776238908], 'false,false,true': [0.12592631785466, 0.21080023897735428], 'false,false,true,false': [0.1993841230396376, 0.21219135802469125]}
{'': [0.2253124914376478, 0.18019463318880738], 'false': [0.2055804955102329, 0.1706921233108835], 'false,true': [0.23925658438883585, 0.19468259205184896], 'false,true,true': [0.16127085057748686, 8.460908659588818e-05], 'false,true,false': [9.262848695266075e-05, 0.20355278446645045], 'false,false': [0.20265945586451375, 0.15574022776238908], 'false,false,true': [0.12592631785466, 0.21080023897735428], 'false,false,true,false': [0.1993841230396376, 0.21219135802469125]}
{'': [0.2253124914376478, 0.18019463318880738], 'false': [0.2055804955102329, 0.1706921233108835], 'false,true': [0.23925658438883585, 0.19468259205184896], 'false,true,true': [0.16127085057748686, 8.460908659588818e-05], 'false,true,false': [9.262848695266075e-05, 0.20355278446645045], 'false,false': [0.20265945586451375, 0.15574022776238908], 'false,false,true': [0.12592631785466, 0.21080023897735428], 'false,false,true,false': [0.1993841230396376, 0.21219135802469125]}
{'': [0.22467921454908327, 0.1765202591246435], 'true': [0.15010893536587797, 0.23023843400180427], 'true,false': [0.12923712344240348, 0.236292299402741], 'false': [0.1939470767416824, 0.1700279104566743], 'false,true': [0.18886145833915924, 0.19314739168097528], 'false,true,false': [7.281134913733611e-05, 0.20338794843864383], 'false,true,true': [0.16177646869149642, 6.607841682162996e-05], 'false,false': [0.20195309529769753, 0.15574022776238824]}
{'': [0.22467921454908327, 0.1765202591246435], 'true': [0.15010893536587797, 0.23023843400180427], 'true,false': [0.12923712344240348, 0.236292299402741], 'false': [0.1939470767416824, 0.1700279104566743], 'false,true': [0.18886145833915924, 0.19314739168097528], 'false,true,false': [7.281134913733611e-05, 0.20338794843864383], 'false,true,true': [0.16177646869149642, 6.607841682162996e-05], 'false,false': [0.20195309529769753, 0.15574022776238824]}
{'': [0.22467921454908327, 0.1765202591246435], 'true': [0.15010893536587797, 0.23023843400180427], 'true,false': [0.12923712344240348, 0.236292299402741], 'false': [0.1939470767416824, 0.1700279104566743], 'false,true': [0.18886145833915924, 0.19314739168097528], 'false,true,false': [7.281134913733611e-05, 0.20338794843864383], 'false,true,true': [0.16177646869149642, 6.607841682162996e-05], 'false,false': [0.20195309529769753, 0.15574022776238824]}
{'': [0.2241075776448812, 0.17370750055127407], 'false': [0.18485785726742876, 0.16959977922465713], 'false,true': [0.14938261183570103, 0.19206941980003558], 'false,true,false': [5.8349153604181823e-05, 0.20325336564704685], 'false,true,true': [0.16208103945855856, 5.2663378990336354e-05]}
{'': [0.2241075776448812, 0.17370750055127407], 'false': [0.18485785726742876, 0.16959977922465713], 'false,true': [0.14938261183570103, 0.19206941980003558], 'false,true,false': [5.8349153604181823e-05, 0.20325336564704685], 'false,true,true': [0.16208103945855856, 5.2663378990336354e-05]}
{'': [0.2241075776448812, 0.17370750055127407], 'false': [0.18485785726742876, 0.16959977922465713], 'false,true': [0.14938261183570103, 0.19206941980003558], 'false,true,false': [5.8349153604181823e-05, 0.20325336564704685], 'false,true,true': [0.16208103945855856, 5.2663378990336354e-05]}
{'': [0.22388694861803315, 0.17205309547397968], 'true': [0.12049318622415629, 0.23198307186990047], 'false': [0.18896743779281716, 0.16608718237169498], 'false,true': [0.18548594569195886, 0.18808319469985893], 'false,true,false': [0.00010147374985809236, 0.19682032139867955], 'false,true,true': [0.16765957337772264, 0.0003115843832164178], 'false,false': [0.18985189411251793, 0.15574022776238886], 'false,false,true': [0.06323961877588893, 0.20494484226305024]}
{'': [0.22388694861803315, 0.17205309547397968], 'true': [0.12049318622415629, 0.23198307186990047], 'false': [0.18896743779281716, 0.16608718237169498], 'false,true': [0.18548594569195886, 0.18808319469985893], 'false,true,false': [0.00010147374985809236, 0.19682032139867955], 'false,true,true': [0.16765957337772264, 0.0003115843832164178], 'false,false': [0.18985189411251793, 0.15574022776238886], 'false,false,true': [0.06323961877588893, 0.20494484226305024]}
{'': [0.22388694861803315, 0.17205309547397968], 'true': [0.12049318622415629, 0.23198307186990047], 'false': [0.18896743779281716, 0.16608718237169498], 'false,true': [0.18548594569195886, 0.18808319469985893], 'false,true,false': [0.00010147374985809236, 0.19682032139867955], 'false,true,true': [0.16765957337772264, 0.0003115843832164178], 'false,false': [0.18985189411251793, 0.15574022776238886], 'false,false,true': [0.06323961877588893, 0.20494484226305024]}
{'': [0.2237658426580864, 0.16947862644482808], 'false': [0.17990516157967087, 0.16582949357858795], 'false,true': [0.1475728626976473, 0.1865498492230049], 'false,true,false': [7.841012474954963e-05, 0.19668404426975877], 'false,false': [0.18959895648002165, 0.15574022776238847], 'false,false,true': [0.06300045448357855, 0.20481137764334192], 'false,true,true': [0.16847338563840092, 0.00024410029587412785]}
{'': [0.2237658426580864, 0.16947862644482808], 'false': [0.17990516157967087, 0.16582949357858795], 'false,true': [0.1475728626976473, 0.1865498492230049], 'false,true,false': [7.841012474954963e-05, 0.19668404426975877], 'false,false': [0.18959895648002165, 0.15574022776238847], 'false,false,true': [0.06300045448357855, 0.20481137764334192], 'false,true,true': [0.16847338563840092, 0.00024410029587412785]}
{'': [0.2237658426580864, 0.16947862644482808], 'false': [0.17990516157967087, 0.16582949357858795], 'false,true': [0.1475728626976473, 0.1865498492230049], 'false,true,false': [7.841012474954963e-05, 0.19668404426975877], 'false,false': [0.18959895648002165, 0.15574022776238847], 'false,false,true': [0.06300045448357855, 0.20481137764334192], 'false,true,true': [0.16847338563840092, 0.00024410029587412785]}
{'': [0.22369613887970058, 0.16787705882409665], 'false': [0.17430232688022793, 0.16565121538622934], 'false,true': [0.1238130382307063, 0.1855466431430223], 'false,false': [0.18941323399760854, 0.15574022776238836], 'false,false,true': [0.06279433408337454, 0.20470934976371385], 'false,false,true,false': [0.1499128594659486, 0.21219135802469147], 'false,true,true': [0.1685216042234862, 0.00019505896413861412]}
{'': [0.22369613887970058, 0.16787705882409665], 'false': [0.17430232688022793, 0.16565121538622934], 'false,true': [0.1238130382307063, 0.1855466431430223], 'false,false': [0.18941323399760854, 0.15574022776238836], 'false,false,true': [0.06279433408337454, 0.20470934976371385], 'false,false,true,false': [0.1499128594659486, 0.21219135802469147], 'false,true,true': [0.1685216042234862, 0.00019505896413861412]}
{'': [0.22369613887970058, 0.16787705882409665], 'false': [0.17430232688022793, 0.16565121538622934], 'false,true': [0.1238130382307063, 0.1855466431430223], 'false,false': [0.18941323399760854, 0.15574022776238836], 'false,false,true': [0.06279433408337454, 0.20470934976371385], 'false,false,true,false': [0.1499128594659486, 0.21219135802469147], 'false,true,true': [0.1685216042234862, 0.00019505896413861412]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '1;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '1;true,false,true;author(K, J), venue(K, A).;true;true', '1;true,false,true,true;samebib(K, L), venue(L, B).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordvenue(A, D).;true;true', '2;true,true,false;author(F, E), venue(F, A).;true;true', '2;true,true,false,true;samebib(F, G), venue(G, B).;true;true', '2;true,true,false,true,true;author(G, E).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;samebib(F, G), venue(G, B).;true;true', '4;false,true,false;author(H, E), venue(H, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;false,true;author(J, I), venue(J, A).;true;true', '5;false,true,true;samebib(J, K), venue(K, B).;true;true', '5;false,true,false;author(L, I), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, A).;true;true', '6;false,true,true;samebib(F, G), venue(G, B).;true;true', '6;false,true,false;author(H, E), venue(H, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;false,true;author(H, G), venue(H, B).;true;true', '7;false,true,true;samebib(H, I), venue(I, A).;true;true', '7;false,true,false;author(J, G), venue(J, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '8;false,true,false;author(H, E), venue(H, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, B).;true;true', '9;false,true,true;samebib(F, G), venue(G, A).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '1;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '1;true,false,true;author(K, J), venue(K, A).;true;true', '1;true,false,true,true;samebib(K, L), venue(L, B).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordvenue(A, D).;true;true', '2;true,true,false;author(F, E), venue(F, A).;true;true', '2;true,true,false,true;samebib(F, G), venue(G, B).;true;true', '2;true,true,false,true,true;author(G, E).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;samebib(F, G), venue(G, B).;true;true', '4;false,true,false;author(H, E), venue(H, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;false,true;author(J, I), venue(J, A).;true;true', '5;false,true,true;samebib(J, K), venue(K, B).;true;true', '5;false,true,false;author(L, I), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, A).;true;true', '6;false,true,true;samebib(F, G), venue(G, B).;true;true', '6;false,true,false;author(H, E), venue(H, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;false,true;author(H, G), venue(H, B).;true;true', '7;false,true,true;samebib(H, I), venue(I, A).;true;true', '7;false,true,false;author(J, G), venue(J, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '8;false,true,false;author(H, E), venue(H, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, B).;true;true', '9;false,true,true;samebib(F, G), venue(G, A).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '1;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '1;true,false,true;author(K, J), venue(K, A).;true;true', '1;true,false,true,true;samebib(K, L), venue(L, B).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordvenue(A, D).;true;true', '2;true,true,false;author(F, E), venue(F, A).;true;true', '2;true,true,false,true;samebib(F, G), venue(G, B).;true;true', '2;true,true,false,true,true;author(G, E).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;samebib(F, G), venue(G, B).;true;true', '4;false,true,false;author(H, E), venue(H, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '5;false,true;author(J, I), venue(J, A).;true;true', '5;false,true,true;samebib(J, K), venue(K, B).;true;true', '5;false,true,false;author(L, I), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, A).;true;true', '6;false,true,true;samebib(F, G), venue(G, B).;true;true', '6;false,true,false;author(H, E), venue(H, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;false,true;author(H, G), venue(H, B).;true;true', '7;false,true,true;samebib(H, I), venue(I, A).;true;true', '7;false,true,false;author(J, G), venue(J, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,true;author(F, E), venue(F, B).;true;true', '8;false,true,true;samebib(F, G), venue(G, A).;true;true', '8;false,true,false;author(H, E), venue(H, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, B).;true;true', '9;false,true,true;samebib(F, G), venue(G, A).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then if ( samebib(F, G), venue(G, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1058893024861437;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1058893024861437;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1058893024861437;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.16097546014021943;  // std dev = 0,396, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.32172773904505764;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.33347856110951324;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16652143889048682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13782638719647008;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.16097546014021943;  // std dev = 0,396, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.32172773904505764;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.33347856110951324;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16652143889048682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13782638719647008;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.16097546014021943;  // std dev = 0,396, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else return 0.32172773904505764;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.33347856110951324;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16652143889048682;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13782638719647008;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.5433812553578047;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.3767145886911381;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1335753091834536;  // std dev = 0,061, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.12484242797563647;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6040541713370168;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.25278027766840283;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.06532132763454157;  // std dev = 0,427, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.5433812553578047;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.3767145886911381;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1335753091834536;  // std dev = 0,061, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.12484242797563647;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6040541713370168;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.25278027766840283;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.06532132763454157;  // std dev = 0,427, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then if ( author(G, E) )
%   | | | | | then return 0.5433812553578047;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | | | else return 0.3767145886911381;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | | else return -0.1335753091834536;  // std dev = 0,061, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.12484242797563647;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6040541713370168;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.25278027766840283;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else return 0.06532132763454157;  // std dev = 0,427, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1323191673963156;  // std dev = 0,320, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19372955011216017;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6053276118121664;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19107572309164028;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18601108528222263;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | | then return -0.0010121891731942334;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.10688287574978886;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.10912001911364279;  // std dev = 0,458, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013329657059496314;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1323191673963156;  // std dev = 0,320, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19372955011216017;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6053276118121664;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19107572309164028;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18601108528222263;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | | then return -0.0010121891731942334;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.10688287574978886;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.10912001911364279;  // std dev = 0,458, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013329657059496314;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1323191673963156;  // std dev = 0,320, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.19372955011216017;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6053276118121664;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19107572309164028;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18601108528222263;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | | then return -0.0010121891731942334;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.10688287574978886;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.10912001911364279;  // std dev = 0,458, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013329657059496314;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14380591489868874;  // std dev = 0,471, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4931380390438022;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16327945738314245;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15948218355155885;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -8.504754350339927E-4;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.0893179338296647;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -2.780523842845717E-4;  // std dev = 0,843, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10260778724984719;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.011356767990673368;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14380591489868874;  // std dev = 0,471, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4931380390438022;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16327945738314245;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15948218355155885;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -8.504754350339927E-4;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.0893179338296647;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -2.780523842845717E-4;  // std dev = 0,843, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10260778724984719;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.011356767990673368;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14380591489868874;  // std dev = 0,471, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4931380390438022;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16327945738314245;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15948218355155885;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -8.504754350339927E-4;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.0893179338296647;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -2.780523842845717E-4;  // std dev = 0,843, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10260778724984719;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.011356767990673368;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03784556130572202;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05599192356730608;  // std dev = 0,332, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.11849823426886853;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.11880333006303853;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.1392518249850048;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06471053960372589;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.14658910210807394;  // std dev = 0,477, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06062012607883889;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009662615665973942;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03784556130572202;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05599192356730608;  // std dev = 0,332, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.11849823426886853;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.11880333006303853;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.1392518249850048;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06471053960372589;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.14658910210807394;  // std dev = 0,477, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06062012607883889;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009662615665973942;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03784556130572202;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.05599192356730608;  // std dev = 0,332, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.11849823426886853;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.11880333006303853;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.1392518249850048;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06471053960372589;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.14658910210807394;  // std dev = 0,477, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06062012607883889;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009662615665973942;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07258403552867063;  // std dev = 0,310, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08281347897678315;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.540685765272386;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.24523976004727244;  // std dev = 0,068, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.17123043817605574;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.031850277200768835;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06231384694798628;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05602012608937037;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.008211561072252295;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07258403552867063;  // std dev = 0,310, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08281347897678315;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.540685765272386;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.24523976004727244;  // std dev = 0,068, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.17123043817605574;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.031850277200768835;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06231384694798628;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05602012608937037;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.008211561072252295;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07258403552867063;  // std dev = 0,310, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.08281347897678315;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.540685765272386;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.24523976004727244;  // std dev = 0,068, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.17123043817605574;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.031850277200768835;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06231384694798628;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05602012608937037;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.008211561072252295;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012978756121217709;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.06603416275680023;  // std dev = 0,478, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.42463759979483384;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2029007260786358;  // std dev = 0,059, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14828626958483404;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.026631959579114534;  // std dev = 0,654, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.050660739873723055;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.04570590260252221;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00697144550802011;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012978756121217709;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.06603416275680023;  // std dev = 0,478, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.42463759979483384;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2029007260786358;  // std dev = 0,059, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14828626958483404;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.026631959579114534;  // std dev = 0,654, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.050660739873723055;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.04570590260252221;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00697144550802011;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.012978756121217709;  // std dev = 0,353, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.06603416275680023;  // std dev = 0,478, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.42463759979483384;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2029007260786358;  // std dev = 0,059, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14828626958483404;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | | then return -0.026631959579114534;  // std dev = 0,654, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.050660739873723055;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.04570590260252221;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.00697144550802011;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.16703704110587814;  // std dev = 0,165, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.019581562585613232;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else return 0.04696342094782331;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3212435238539175;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17216710378619396;  // std dev = 0,052, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.03903584707717037;  // std dev = 0,662, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.031687540000597675;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.0370902438165833;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.005913581232766667;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.16703704110587814;  // std dev = 0,165, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.019581562585613232;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else return 0.04696342094782331;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3212435238539175;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17216710378619396;  // std dev = 0,052, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.03903584707717037;  // std dev = 0,662, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.031687540000597675;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.0370902438165833;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.005913581232766667;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.16703704110587814;  // std dev = 0,165, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.019581562585613232;  // std dev = 0,328, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else return 0.04696342094782331;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3212435238539175;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17216710378619396;  // std dev = 0,052, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.03903584707717037;  // std dev = 0,662, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.031687540000597675;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.0370902438165833;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.005913581232766667;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */






Results
Results
Results
   AUC ROC   = 0.55069
   AUC ROC   = 0.55069
   AUC ROC   = 0.55069
   AUC PR    = 0.56886
   AUC PR    = 0.56886
   AUC PR    = 0.56886
   CLL	      = -0.685158
   CLL	      = -0.685158
   CLL	      = -0.685158
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   F1        = 0.69012
   F1        = 0.69012
   F1        = 0.69012






Total learning time: 38.95 seconds
Total learning time: 38.95 seconds
Total learning time: 38.95 seconds
Total inference time: 5.93 seconds
Total inference time: 5.93 seconds
Total inference time: 5.93 seconds
AUC ROC: 0.55069
AUC ROC: 0.55069
AUC ROC: 0.55069






Refined model AUC ROC: 0.55069
Refined model AUC ROC: 0.55069
Refined model AUC ROC: 0.55069






Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 05:06:05
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 05:06:05
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 05:06:05
{'AUC ROC': 0.55069, 'AUC PR': 0.56886, 'CLL': -0.685158, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.91900000000001, 'Inference time': 5.93, 'Mapping results': {'Knowledge compiling time': 0.17565178871154785, 'Generating paths time': 4.59773063659668, 'Generating mappings time': 0.06633496284484863, 'Possible mappings': 6, 'Finding best mapping': 0.0006749629974365234, 'Total time': 4.840402364730835}, 'Parameter Learning results': {'AUC ROC': 0.550092, 'AUC PR': 0.568181, 'CLL': -0.685966, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 52.969, 'Inference time': 5.137}}
{'AUC ROC': 0.55069, 'AUC PR': 0.56886, 'CLL': -0.685158, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.91900000000001, 'Inference time': 5.93, 'Mapping results': {'Knowledge compiling time': 0.17565178871154785, 'Generating paths time': 4.59773063659668, 'Generating mappings time': 0.06633496284484863, 'Possible mappings': 6, 'Finding best mapping': 0.0006749629974365234, 'Total time': 4.840402364730835}, 'Parameter Learning results': {'AUC ROC': 0.550092, 'AUC PR': 0.568181, 'CLL': -0.685966, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 52.969, 'Inference time': 5.137}}
{'AUC ROC': 0.55069, 'AUC PR': 0.56886, 'CLL': -0.685158, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.91900000000001, 'Inference time': 5.93, 'Mapping results': {'Knowledge compiling time': 0.17565178871154785, 'Generating paths time': 4.59773063659668, 'Generating mappings time': 0.06633496284484863, 'Possible mappings': 6, 'Finding best mapping': 0.0006749629974365234, 'Total time': 4.840402364730835}, 'Parameter Learning results': {'AUC ROC': 0.550092, 'AUC PR': 0.568181, 'CLL': -0.685966, 'Precision': [0.546031, 0.5], 'Recall': 0.94244, 'F1': 0.69145, 'Learning time': 52.969, 'Inference time': 5.137}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6177366470047175;  // std dev = 0,888, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17209901159778193;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13146151704002107;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12868578561052385;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6177366470047175;  // std dev = 0,888, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17209901159778193;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13146151704002107;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12868578561052385;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6177366470047175;  // std dev = 0,888, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17209901159778193;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13146151704002107;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12868578561052385;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4940980664244809;  // std dev = 0,940, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12581299843653226;  // std dev = 0,060, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09269200318502824;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.0393374038654928;  // std dev = 0,735, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13096472453554084;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4940980664244809;  // std dev = 0,940, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12581299843653226;  // std dev = 0,060, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09269200318502824;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.0393374038654928;  // std dev = 0,735, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13096472453554084;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4940980664244809;  // std dev = 0,940, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12581299843653226;  // std dev = 0,060, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09269200318502824;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.0393374038654928;  // std dev = 0,735, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13096472453554084;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4854695561430321;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16063425590640534;  // std dev = 0,055, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.11816414761553377;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09255208994620329;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.29504777457984055;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.1003710391289157;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09653070019404801;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03389416118740775;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4854695561430321;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16063425590640534;  // std dev = 0,055, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.11816414761553377;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09255208994620329;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.29504777457984055;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.1003710391289157;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09653070019404801;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03389416118740775;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4854695561430321;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16063425590640534;  // std dev = 0,055, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.11816414761553377;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09255208994620329;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.29504777457984055;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.1003710391289157;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09653070019404801;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03389416118740775;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5959431819431275;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5334431819431275;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4040568180568726;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.3373901513902059;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.39594318194312755;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.19981414968507308;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.11633101466976273;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06481123888206129;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0433757863759073;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5959431819431275;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5334431819431275;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4040568180568726;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.3373901513902059;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.39594318194312755;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.19981414968507308;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.11633101466976273;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06481123888206129;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0433757863759073;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5959431819431275;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5334431819431275;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4040568180568726;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.3373901513902059;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.39594318194312755;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.19981414968507308;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.11633101466976273;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06481123888206129;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0433757863759073;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4483465994924668;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then return 0.4845542648673122;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4444878536869341;  // std dev = 0,123, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.37685606391560245;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.3470542648673122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.15373717120664812;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.017304265613400514;  // std dev = 0,335, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07024144392692862;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.036710003237720126;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4483465994924668;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then return 0.4845542648673122;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4444878536869341;  // std dev = 0,123, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.37685606391560245;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.3470542648673122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.15373717120664812;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.017304265613400514;  // std dev = 0,335, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07024144392692862;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.036710003237720126;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4483465994924668;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then if ( samebib(F, G), venue(G, B) )
%   | | | | then return 0.4845542648673122;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.4444878536869341;  // std dev = 0,123, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.37685606391560245;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.3470542648673122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.15373717120664812;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.017304265613400514;  // std dev = 0,335, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07024144392692862;  // std dev = 0,439, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.036710003237720126;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.24527890425437468;  // std dev = 0,216, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.03235478232795736;  // std dev = 0,396, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.14573008762352302;  // std dev = 0,387, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.11559402075665305;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08640397847686734;  // std dev = 0,375, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.047582961265131354;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.034911197245559154;  // std dev = 0,563, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07137277922533383;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01804740686407097;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.24527890425437468;  // std dev = 0,216, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.03235478232795736;  // std dev = 0,396, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.14573008762352302;  // std dev = 0,387, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.11559402075665305;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08640397847686734;  // std dev = 0,375, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.047582961265131354;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.034911197245559154;  // std dev = 0,563, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07137277922533383;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01804740686407097;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.24527890425437468;  // std dev = 0,216, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.03235478232795736;  // std dev = 0,396, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.14573008762352302;  // std dev = 0,387, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.11559402075665305;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08640397847686734;  // std dev = 0,375, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.047582961265131354;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.034911197245559154;  // std dev = 0,563, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07137277922533383;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01804740686407097;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2888493824145955;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.014752088345566643;  // std dev = 0,393, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.12049777109782303;  // std dev = 0,380, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08680249997721155;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.06966527435417569;  // std dev = 0,372, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.039223072281363326;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.029610186193310174;  // std dev = 0,566, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05852588614772485;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.015427274400215062;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2888493824145955;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.014752088345566643;  // std dev = 0,393, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.12049777109782303;  // std dev = 0,380, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08680249997721155;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.06966527435417569;  // std dev = 0,372, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.039223072281363326;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.029610186193310174;  // std dev = 0,566, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05852588614772485;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.015427274400215062;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2888493824145955;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.014752088345566643;  // std dev = 0,393, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.12049777109782303;  // std dev = 0,380, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08680249997721155;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.06966527435417569;  // std dev = 0,372, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.039223072281363326;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.029610186193310174;  // std dev = 0,566, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05852588614772485;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.015427274400215062;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061457124701270606;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2944646634566942;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18266151645684697;  // std dev = 0,063, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12694942698805117;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04381574886691857;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.03975295356821304;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013163222215548892;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061457124701270606;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2944646634566942;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18266151645684697;  // std dev = 0,063, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12694942698805117;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04381574886691857;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.03975295356821304;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013163222215548892;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061457124701270606;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2944646634566942;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18266151645684697;  // std dev = 0,063, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.12694942698805117;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04381574886691857;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.03975295356821304;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.013163222215548892;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22247771453520526;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.03764547210536261;  // std dev = 0,391, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.2126043645452543;  // std dev = 0,377, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.05416603293068629;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.00414614444718076;  // std dev = 0,238, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.010301361749769544;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03554337280481313;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.03238802795346903;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.011213665430956098;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22247771453520526;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.03764547210536261;  // std dev = 0,391, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.2126043645452543;  // std dev = 0,377, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.05416603293068629;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.00414614444718076;  // std dev = 0,238, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.010301361749769544;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03554337280481313;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.03238802795346903;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.011213665430956098;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22247771453520526;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.03764547210536261;  // std dev = 0,391, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.2126043645452543;  // std dev = 0,377, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.05416603293068629;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.00414614444718076;  // std dev = 0,238, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.010301361749769544;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03554337280481313;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.03238802795346903;  // std dev = 0,435, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.011213665430956098;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */






Results
Results
Results
   AUC ROC   = 0.54968
   AUC ROC   = 0.54968
   AUC ROC   = 0.54968
   AUC PR    = 0.56785
   AUC PR    = 0.56785
   AUC PR    = 0.56785
   CLL	      = -0.686579
   CLL	      = -0.686579
   CLL	      = -0.686579
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967






Total learning time: 45.706 seconds
Total learning time: 45.706 seconds
Total learning time: 45.706 seconds
Total inference time: 4.761 seconds
Total inference time: 4.761 seconds
Total inference time: 4.761 seconds
AUC ROC: 0.54968
AUC ROC: 0.54968
AUC ROC: 0.54968






Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 05:06:56
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 05:06:56
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 05:06:56
{'AUC ROC': 0.54968, 'AUC PR': 0.56785, 'CLL': -0.686579, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 45.706, 'Inference time': 4.761}
{'AUC ROC': 0.54968, 'AUC PR': 0.56785, 'CLL': -0.686579, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 45.706, 'Inference time': 4.761}
{'AUC ROC': 0.54968, 'AUC PR': 0.56785, 'CLL': -0.686579, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 45.706, 'Inference time': 4.761}






Starting experiment #4 for imdb->cora

Starting experiment #4 for imdb->cora

Starting experiment #4 for imdb->cora

Starting experiment #4 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */








Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.089415573302106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.089415573302106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.089415573302106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.089415573302106;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033168203026090186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07800413875740324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033168203026090186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07800413875740324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033168203026090186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07800413875740324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033168203026090186;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07800413875740324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.028506773472731155;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03381707352267731;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06895578286902798;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.028506773472731155;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03381707352267731;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06895578286902798;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.028506773472731155;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03381707352267731;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06895578286902798;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.028506773472731155;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03381707352267731;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06895578286902798;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024418427889493825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029078126434610867;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864340505582962;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024418427889493825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029078126434610867;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864340505582962;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024418427889493825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029078126434610867;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864340505582962;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024418427889493825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029078126434610867;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864340505582962;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.020855749158200255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.048086857005660115;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.020855749158200255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.048086857005660115;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.020855749158200255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.048086857005660115;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.020855749158200255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.048086857005660115;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017768329986344266;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04039668959309194;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017768329986344266;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04039668959309194;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017768329986344266;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04039668959309194;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017768329986344266;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04039668959309194;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011769040051149949;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395867339168076;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011769040051149949;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395867339168076;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011769040051149949;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395867339168076;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011769040051149949;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395867339168076;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.00996412816874349;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.009932753931384718;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029398062692229523;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.00996412816874349;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.009932753931384718;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029398062692229523;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.00996412816874349;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.009932753931384718;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029398062692229523;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.00996412816874349;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.009932753931384718;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029398062692229523;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.008398979932959138;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023426903352387732;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.008398979932959138;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023426903352387732;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.008398979932959138;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023426903352387732;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.008398979932959138;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023426903352387732;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   CLL	      = -0.68459
   CLL	      = -0.68459
   CLL	      = -0.68459
   CLL	      = -0.68459
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506








Total learning time: 12.526 seconds
Total learning time: 12.526 seconds
Total learning time: 12.526 seconds
Total learning time: 12.526 seconds
Total inference time: 1.924 seconds
Total inference time: 1.924 seconds
Total inference time: 1.924 seconds
Total inference time: 1.924 seconds
AUC ROC: 0.548233
AUC ROC: 0.548233
AUC ROC: 0.548233
AUC ROC: 0.548233








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933]}
{'': [0.2486725557358284, 0.18328675507423356], 'false': [0.16, 0.18455922120064905]}
{'': [0.2486725557358284, 0.18328675507423356], 'false': [0.16, 0.18455922120064905]}
{'': [0.2486725557358284, 0.18328675507423356], 'false': [0.16, 0.18455922120064905]}
{'': [0.2486725557358284, 0.18328675507423356], 'false': [0.16, 0.18455922120064905]}
{'': [0.24867255573583463, 0.1832663882163185], 'false': [0.16, 0.18450863129723807]}
{'': [0.24867255573583463, 0.1832663882163185], 'false': [0.16, 0.18450863129723807]}
{'': [0.24867255573583463, 0.1832663882163185], 'false': [0.16, 0.18450863129723807]}
{'': [0.24867255573583463, 0.1832663882163185], 'false': [0.16, 0.18450863129723807]}
{'': [0.24867255573583355, 0.18323640667689042], 'false': [0.16000000000000006, 0.1845063151943748], 'false,false': [0.16000000000000003, 0.1859472641365653]}
{'': [0.24867255573583355, 0.18323640667689042], 'false': [0.16000000000000006, 0.1845063151943748], 'false,false': [0.16000000000000003, 0.1859472641365653]}
{'': [0.24867255573583355, 0.18323640667689042], 'false': [0.16000000000000006, 0.1845063151943748], 'false,false': [0.16000000000000003, 0.1859472641365653]}
{'': [0.24867255573583355, 0.18323640667689042], 'false': [0.16000000000000006, 0.1845063151943748], 'false,false': [0.16000000000000003, 0.1859472641365653]}
{'': [0.24867255573582772, 0.18319601931517748], 'false': [0.16000000000000003, 0.18448656771008468], 'false,false': [0.16000000000000003, 0.18594726413656412]}
{'': [0.24867255573582772, 0.18319601931517748], 'false': [0.16000000000000003, 0.18448656771008468], 'false,false': [0.16000000000000003, 0.18594726413656412]}
{'': [0.24867255573582772, 0.18319601931517748], 'false': [0.16000000000000003, 0.18448656771008468], 'false,false': [0.16000000000000003, 0.18594726413656412]}
{'': [0.24867255573582772, 0.18319601931517748], 'false': [0.16000000000000003, 0.18448656771008468], 'false,false': [0.16000000000000003, 0.18594726413656412]}
{'': [0.2486725557358371, 0.18316573621655846], 'false': [0.16000000000000003, 0.18447183776110945]}
{'': [0.2486725557358371, 0.18316573621655846], 'false': [0.16000000000000003, 0.18447183776110945]}
{'': [0.2486725557358371, 0.18316573621655846], 'false': [0.16000000000000003, 0.18447183776110945]}
{'': [0.2486725557358371, 0.18316573621655846], 'false': [0.16000000000000003, 0.18447183776110945]}
{'': [0.24867255573583077, 0.18315212348008056], 'false': [0.16000000000000006, 0.1844700429587775]}
{'': [0.24867255573583077, 0.18315212348008056], 'false': [0.16000000000000006, 0.1844700429587775]}
{'': [0.24867255573583077, 0.18315212348008056], 'false': [0.16000000000000006, 0.1844700429587775]}
{'': [0.24867255573583077, 0.18315212348008056], 'false': [0.16000000000000006, 0.1844700429587775]}
{'': [0.24867255573583177, 0.1831422191881553], 'false': [0.16, 0.1844606432112405]}
{'': [0.24867255573583177, 0.1831422191881553], 'false': [0.16, 0.1844606432112405]}
{'': [0.24867255573583177, 0.1831422191881553], 'false': [0.16, 0.1844606432112405]}
{'': [0.24867255573583177, 0.1831422191881553], 'false': [0.16, 0.1844606432112405]}
{'': [0.2486725557358347, 0.18313291840091697], 'false': [0.16, 0.18445945048196294], 'false,false': [0.16000000000000003, 0.1859472641365648]}
{'': [0.2486725557358347, 0.18313291840091697], 'false': [0.16, 0.18445945048196294], 'false,false': [0.16000000000000003, 0.1859472641365648]}
{'': [0.2486725557358347, 0.18313291840091697], 'false': [0.16, 0.18445945048196294], 'false,false': [0.16000000000000003, 0.1859472641365648]}
{'': [0.2486725557358347, 0.18313291840091697], 'false': [0.16, 0.18445945048196294], 'false,false': [0.16000000000000003, 0.1859472641365648]}
{'': [0.24867255573583247, 0.18312077122931178], 'false': [0.16000000000000003, 0.184452593406918]}
{'': [0.24867255573583247, 0.18312077122931178], 'false': [0.16000000000000003, 0.184452593406918]}
{'': [0.24867255573583247, 0.18312077122931178], 'false': [0.16000000000000003, 0.184452593406918]}
{'': [0.24867255573583247, 0.18312077122931178], 'false': [0.16000000000000003, 0.184452593406918]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.033866493639975584;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06860948491735713;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.033866493639975584;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06860948491735713;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.033866493639975584;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06860948491735713;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.033866493639975584;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06860948491735713;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02912166536247323;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05833463965973209;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02912166536247323;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05833463965973209;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02912166536247323;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05833463965973209;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02912166536247323;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05833463965973209;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.047833720020672314;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.047833720020672314;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.047833720020672314;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.047833720020672314;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0401772845373714;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0401772845373714;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0401772845373714;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0401772845373714;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011881517713322076;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03394200720615979;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011881517713322076;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03394200720615979;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011881517713322076;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03394200720615979;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011881517713322076;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03394200720615979;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010060126509426615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013063330949253877;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029190148675616326;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010060126509426615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013063330949253877;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029190148675616326;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010060126509426615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013063330949253877;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029190148675616326;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010060126509426615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013063330949253877;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029190148675616326;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011069692700889233;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023266484383974894;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011069692700889233;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023266484383974894;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011069692700889233;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023266484383974894;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011069692700889233;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023266484383974894;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC ROC   = 0.548233
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   CLL	      = -0.684598
   CLL	      = -0.684598
   CLL	      = -0.684598
   CLL	      = -0.684598
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506








Total learning time: 9.048 seconds
Total learning time: 9.048 seconds
Total learning time: 9.048 seconds
Total learning time: 9.048 seconds
Total inference time: 1.873 seconds
Total inference time: 1.873 seconds
Total inference time: 1.873 seconds
Total inference time: 1.873 seconds
AUC ROC: 0.548233
AUC ROC: 0.548233
AUC ROC: 0.548233
AUC ROC: 0.548233








Refined model AUC ROC: 0.548233
Refined model AUC ROC: 0.548233
Refined model AUC ROC: 0.548233
Refined model AUC ROC: 0.548233








Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 08:36:24
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 08:36:24
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 08:36:24
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 08:36:24
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684598, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 21.573999999999998, 'Inference time': 1.873, 'Mapping results': {'Knowledge compiling time': 0.11688661575317383, 'Generating paths time': 4.609928369522095, 'Generating mappings time': 0.06926274299621582, 'Possible mappings': 6, 'Finding best mapping': 0.0006835460662841797, 'Total time': 4.7967689037323}, 'Parameter Learning results': {'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.68459, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.526, 'Inference time': 1.924}}
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684598, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 21.573999999999998, 'Inference time': 1.873, 'Mapping results': {'Knowledge compiling time': 0.11688661575317383, 'Generating paths time': 4.609928369522095, 'Generating mappings time': 0.06926274299621582, 'Possible mappings': 6, 'Finding best mapping': 0.0006835460662841797, 'Total time': 4.7967689037323}, 'Parameter Learning results': {'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.68459, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.526, 'Inference time': 1.924}}
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684598, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 21.573999999999998, 'Inference time': 1.873, 'Mapping results': {'Knowledge compiling time': 0.11688661575317383, 'Generating paths time': 4.609928369522095, 'Generating mappings time': 0.06926274299621582, 'Possible mappings': 6, 'Finding best mapping': 0.0006835460662841797, 'Total time': 4.7967689037323}, 'Parameter Learning results': {'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.68459, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.526, 'Inference time': 1.924}}
{'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.684598, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 21.573999999999998, 'Inference time': 1.873, 'Mapping results': {'Knowledge compiling time': 0.11688661575317383, 'Generating paths time': 4.609928369522095, 'Generating mappings time': 0.06926274299621582, 'Possible mappings': 6, 'Finding best mapping': 0.0006835460662841797, 'Total time': 4.7967689037323}, 'Parameter Learning results': {'AUC ROC': 0.548233, 'AUC PR': 0.553546, 'CLL': -0.68459, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.526, 'Inference time': 1.924}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10233498161113995;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08974653293716853;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08974653293716853;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08974653293716853;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04522952679047825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08974653293716853;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03917528110844664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0392199424495925;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08003577515906159;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03917528110844664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0392199424495925;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08003577515906159;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03917528110844664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0392199424495925;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08003577515906159;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03917528110844664;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0392199424495925;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08003577515906159;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06478875699085482;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06478875699085482;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06478875699085482;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.06478875699085482;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055154910662198436;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055154910662198436;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055154910662198436;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.055154910662198436;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3460216764050391;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.13112308046119855;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016525969460578615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.016568856296494888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.050354253282109615;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3460216764050391;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.13112308046119855;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016525969460578615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.016568856296494888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.050354253282109615;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3460216764050391;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.13112308046119855;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016525969460578615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.016568856296494888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.050354253282109615;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3460216764050391;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.13112308046119855;  // std dev = 0,499, 641,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.016525969460578615;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.016568856296494888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.050354253282109615;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019674071244226;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014074075576660888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014037230616392582;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04228046254624336;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019674071244226;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014074075576660888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014037230616392582;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04228046254624336;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019674071244226;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014074075576660888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014037230616392582;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04228046254624336;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019674071244226;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014074075576660888;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.014037230616392582;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04228046254624336;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541911700109916;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011934436500347345;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395193618377576;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541911700109916;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011934436500347345;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395193618377576;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541911700109916;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011934436500347345;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395193618377576;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541911700109916;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.011934436500347345;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03395193618377576;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663397105414474;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.02726277377711734;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663397105414474;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.02726277377711734;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663397105414474;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.02726277377711734;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05663397105414474;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.02726277377711734;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042487187682277695;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005875841207758048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023609808406066246;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042487187682277695;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005875841207758048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023609808406066246;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042487187682277695;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005875841207758048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023609808406066246;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042487187682277695;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005875841207758048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.023609808406066246;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.547342
   AUC ROC   = 0.547342
   AUC ROC   = 0.547342
   AUC ROC   = 0.547342
   AUC PR    = 0.551722
   AUC PR    = 0.551722
   AUC PR    = 0.551722
   AUC PR    = 0.551722
   CLL	      = -0.68457
   CLL	      = -0.68457
   CLL	      = -0.68457
   CLL	      = -0.68457
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506








Total learning time: 12.998 seconds
Total learning time: 12.998 seconds
Total learning time: 12.998 seconds
Total learning time: 12.998 seconds
Total inference time: 1.958 seconds
Total inference time: 1.958 seconds
Total inference time: 1.958 seconds
Total inference time: 1.958 seconds
AUC ROC: 0.547342
AUC ROC: 0.547342
AUC ROC: 0.547342
AUC ROC: 0.547342








Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 08:36:40
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 08:36:40
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 08:36:40
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 08:36:40
{'AUC ROC': 0.547342, 'AUC PR': 0.551722, 'CLL': -0.68457, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.998, 'Inference time': 1.958}
{'AUC ROC': 0.547342, 'AUC PR': 0.551722, 'CLL': -0.68457, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.998, 'Inference time': 1.958}
{'AUC ROC': 0.547342, 'AUC PR': 0.551722, 'CLL': -0.68457, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.998, 'Inference time': 1.958}
{'AUC ROC': 0.547342, 'AUC PR': 0.551722, 'CLL': -0.68457, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.998, 'Inference time': 1.958}








Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102412480953422;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102412480953422;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102412480953422;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102412480953422;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24459704250797873;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24459704250797873;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24459704250797873;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24459704250797873;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18788662183881474;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18788662183881474;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18788662183881474;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18788662183881474;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2675750584000763;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.455202747714957;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1622453344257241;  // std dev = 0,908, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07940448051203973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14970658195914646;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.14083205817400338;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2675750584000763;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.455202747714957;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1622453344257241;  // std dev = 0,908, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07940448051203973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14970658195914646;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.14083205817400338;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2675750584000763;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.455202747714957;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1622453344257241;  // std dev = 0,908, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07940448051203973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14970658195914646;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.14083205817400338;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2675750584000763;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.455202747714957;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1622453344257241;  // std dev = 0,908, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07940448051203973;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14970658195914646;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.14083205817400338;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700853530870098;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798777797788668;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700853530870098;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798777797788668;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700853530870098;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798777797788668;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10700853530870098;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798777797788668;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.34411502641629366;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.033429104383005726;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.1688886280196488;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.3022219613529821;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2237072377658747;  // std dev = 0,349, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.034335025176341495;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14005990905090787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0772482373225206;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08898741391950694;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.34411502641629366;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.033429104383005726;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.1688886280196488;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.3022219613529821;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2237072377658747;  // std dev = 0,349, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.034335025176341495;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14005990905090787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0772482373225206;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08898741391950694;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.34411502641629366;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.033429104383005726;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.1688886280196488;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.3022219613529821;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2237072377658747;  // std dev = 0,349, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.034335025176341495;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14005990905090787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0772482373225206;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08898741391950694;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.34411502641629366;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.033429104383005726;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.1688886280196488;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.3022219613529821;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2237072377658747;  // std dev = 0,349, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return -0.034335025176341495;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14005990905090787;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0772482373225206;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08898741391950694;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.11868948631367106;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.27576051805485097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.0251006539700509;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.026389414612122814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10936553226325547;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059374248392271727;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06745306842052973;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.11868948631367106;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.27576051805485097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.0251006539700509;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.026389414612122814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10936553226325547;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059374248392271727;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06745306842052973;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.11868948631367106;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.27576051805485097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.0251006539700509;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.026389414612122814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10936553226325547;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059374248392271727;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06745306842052973;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.11868948631367106;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.27576051805485097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.0251006539700509;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.026389414612122814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10936553226325547;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059374248392271727;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06745306842052973;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541597473484064;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.051376745258365664;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541597473484064;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.051376745258365664;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541597473484064;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.051376745258365664;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04541597473484064;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.051376745258365664;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */








Results
Results
Results
Results
   AUC ROC   = 0.439227
   AUC ROC   = 0.439227
   AUC ROC   = 0.439227
   AUC ROC   = 0.439227
   AUC PR    = 0.448945
   AUC PR    = 0.448945
   AUC PR    = 0.448945
   AUC PR    = 0.448945
   CLL	      = -0.712399
   CLL	      = -0.712399
   CLL	      = -0.712399
   CLL	      = -0.712399
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956








Total learning time: 61.379 seconds
Total learning time: 61.379 seconds
Total learning time: 61.379 seconds
Total learning time: 61.379 seconds
Total inference time: 3.917 seconds
Total inference time: 3.917 seconds
Total inference time: 3.917 seconds
Total inference time: 3.917 seconds
AUC ROC: 0.439227
AUC ROC: 0.439227
AUC ROC: 0.439227
AUC ROC: 0.439227








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.49e-08, 0, 8], 'true,false,true': [0.908, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.49e-08, 0, 8], 'true,false,true': [0.908, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.49e-08, 0, 8], 'true,false,true': [0.908, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.49e-08, 0, 8], 'true,false,true': [0.908, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(G, E), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.349, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(G, E), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.349, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(G, E), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.349, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(G, E), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false,true,true': [0.349, 3, 16], 'true,false,true,false,true': [0.816, 2, 1], 'true,false,true,false,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.432, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.432, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.432, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.432, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228], 'true': [0.2255859374999999, 0.24337786228262925], 'true,true': [0.12749999999999959, 0.22222222222222235], 'true,true,false': [0.25, 0.18749999999999994], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999967, -2.220446049250313e-16]}
{'': [0.24306651325713258, 0.2222222222222228], 'true': [0.2255859374999999, 0.24337786228262925], 'true,true': [0.12749999999999959, 0.22222222222222235], 'true,true,false': [0.25, 0.18749999999999994], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999967, -2.220446049250313e-16]}
{'': [0.24306651325713258, 0.2222222222222228], 'true': [0.2255859374999999, 0.24337786228262925], 'true,true': [0.12749999999999959, 0.22222222222222235], 'true,true,false': [0.25, 0.18749999999999994], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999967, -2.220446049250313e-16]}
{'': [0.24306651325713258, 0.2222222222222228], 'true': [0.2255859374999999, 0.24337786228262925], 'true,true': [0.12749999999999959, 0.22222222222222235], 'true,true,false': [0.25, 0.18749999999999994], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.18749999999999967, -2.220446049250313e-16]}
{'': [0.24229773844188718, 0.22222222222222254]}
{'': [0.24229773844188718, 0.22222222222222254]}
{'': [0.24229773844188718, 0.22222222222222254]}
{'': [0.24229773844188718, 0.22222222222222254]}
{'': [0.2422191472900879, 0.2222222222222224]}
{'': [0.2422191472900879, 0.2222222222222224]}
{'': [0.2422191472900879, 0.2222222222222224]}
{'': [0.2422191472900879, 0.2222222222222224]}
{'': [0.2421760046654979, 0.22222222222222243]}
{'': [0.2421760046654979, 0.22222222222222243]}
{'': [0.2421760046654979, 0.22222222222222243]}
{'': [0.2421760046654979, 0.22222222222222243]}
{'': [0.20075506877641325, 0.24245964280293753], 'false': [0.24337786228262115, 0.21729289271163407], 'true': [0.12094899595143387, 0.21370557990404407], 'true,false': [0.20632590172365914, 0.21296095776461127], 'true,false,false': [0.25000000000000006, 0.15999999999999998], 'true,true': [0.1874999999999999, 2.7755575615628914e-17]}
{'': [0.20075506877641325, 0.24245964280293753], 'false': [0.24337786228262115, 0.21729289271163407], 'true': [0.12094899595143387, 0.21370557990404407], 'true,false': [0.20632590172365914, 0.21296095776461127], 'true,false,false': [0.25000000000000006, 0.15999999999999998], 'true,true': [0.1874999999999999, 2.7755575615628914e-17]}
{'': [0.20075506877641325, 0.24245964280293753], 'false': [0.24337786228262115, 0.21729289271163407], 'true': [0.12094899595143387, 0.21370557990404407], 'true,false': [0.20632590172365914, 0.21296095776461127], 'true,false,false': [0.25000000000000006, 0.15999999999999998], 'true,true': [0.1874999999999999, 2.7755575615628914e-17]}
{'': [0.20075506877641325, 0.24245964280293753], 'false': [0.24337786228262115, 0.21729289271163407], 'true': [0.12094899595143387, 0.21370557990404407], 'true,false': [0.20632590172365914, 0.21296095776461127], 'true,false,false': [0.25000000000000006, 0.15999999999999998], 'true,true': [0.1874999999999999, 2.7755575615628914e-17]}
{'': [0.24163659770860355, 0.2200387109199012]}
{'': [0.24163659770860355, 0.2200387109199012]}
{'': [0.24163659770860355, 0.2200387109199012]}
{'': [0.24163659770860355, 0.2200387109199012]}
{'': [0.2416394002851459, 0.2200498394718392], 'true': [0.22294126682886048, 0.24197083805939373], 'true,false': [0.16281396267458859, 0.24368448752247304], 'true,true': [0.12665603184422886, 0.22646589585691237], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,false,true': [0.12194405528157345, 0.1859531187404327], 'true,false,true,false': [0.22222222222222224, 0.16]}
{'': [0.2416394002851459, 0.2200498394718392], 'true': [0.22294126682886048, 0.24197083805939373], 'true,false': [0.16281396267458859, 0.24368448752247304], 'true,true': [0.12665603184422886, 0.22646589585691237], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,false,true': [0.12194405528157345, 0.1859531187404327], 'true,false,true,false': [0.22222222222222224, 0.16]}
{'': [0.2416394002851459, 0.2200498394718392], 'true': [0.22294126682886048, 0.24197083805939373], 'true,false': [0.16281396267458859, 0.24368448752247304], 'true,true': [0.12665603184422886, 0.22646589585691237], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,false,true': [0.12194405528157345, 0.1859531187404327], 'true,false,true,false': [0.22222222222222224, 0.16]}
{'': [0.2416394002851459, 0.2200498394718392], 'true': [0.22294126682886048, 0.24197083805939373], 'true,false': [0.16281396267458859, 0.24368448752247304], 'true,true': [0.12665603184422886, 0.22646589585691237], 'true,true,false': [0.25, 0.1875], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,false,true': [0.12194405528157345, 0.1859531187404327], 'true,false,true,false': [0.22222222222222224, 0.16]}
{'': [0.2406428450643441, 0.22006738268009418], 'true': [0.1638788563146417, 0.24259607048929907], 'true,true': [0.11776523386645052, 0.20900495397403182], 'true,true,false': [0.25, 0.18494701366937735], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1864068661725221, -2.7755575615628914e-17]}
{'': [0.2406428450643441, 0.22006738268009418], 'true': [0.1638788563146417, 0.24259607048929907], 'true,true': [0.11776523386645052, 0.20900495397403182], 'true,true,false': [0.25, 0.18494701366937735], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1864068661725221, -2.7755575615628914e-17]}
{'': [0.2406428450643441, 0.22006738268009418], 'true': [0.1638788563146417, 0.24259607048929907], 'true,true': [0.11776523386645052, 0.20900495397403182], 'true,true,false': [0.25, 0.18494701366937735], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1864068661725221, -2.7755575615628914e-17]}
{'': [0.2406428450643441, 0.22006738268009418], 'true': [0.1638788563146417, 0.24259607048929907], 'true,true': [0.11776523386645052, 0.20900495397403182], 'true,true,false': [0.25, 0.18494701366937735], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.1864068661725221, -2.7755575615628914e-17]}
{'': [0.24048775890628088, 0.22008576706703423]}
{'': [0.24048775890628088, 0.22008576706703423]}
{'': [0.24048775890628088, 0.22008576706703423]}
{'': [0.24048775890628088, 0.22008576706703423]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;author(G, E), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '5;true;author(E, D), venue(E, A).;true;true', '5;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;author(G, E), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;author(G, E), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '5;true;author(E, D), venue(E, A).;true;true', '5;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;author(G, E), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;author(G, E), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '5;true;author(E, D), venue(E, A).;true;true', '5;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;author(G, E), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;author(G, E), venue(G, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '5;true;author(E, D), venue(E, A).;true;true', '5;true,true;author(F, D), venue(F, B).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '8;true,true;author(F, E), venue(F, A).;true;true', '8;true,true,true;author(G, E), venue(G, B).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3767762557219925;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3767762557219925;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3767762557219925;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3767762557219925;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31016755948397234;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31016755948397234;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31016755948397234;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31016755948397234;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3707128012481023;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632764555193304;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486056630772955;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.06526989321839827;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.06806344011493506;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.2431350400306018;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3707128012481023;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632764555193304;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486056630772955;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.06526989321839827;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.06806344011493506;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.2431350400306018;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3707128012481023;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632764555193304;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486056630772955;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.06526989321839827;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.06806344011493506;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.2431350400306018;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3707128012481023;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632764555193304;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486056630772955;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return 0.06526989321839827;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.06806344011493506;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.2431350400306018;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.30897285379362777;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5029430184278941;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.15205438979271402;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.0032764849059992995;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10751297718945688;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.186358567194459;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.30897285379362777;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5029430184278941;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.15205438979271402;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.0032764849059992995;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10751297718945688;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.186358567194459;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.30897285379362777;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5029430184278941;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.15205438979271402;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.0032764849059992995;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10751297718945688;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.186358567194459;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.30897285379362777;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5029430184278941;  // std dev = 3,65e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.15205438979271402;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.0032764849059992995;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.10751297718945688;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.186358567194459;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2314522431707938;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37867761829165736;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.11680936855850743;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10303144626376885;  // std dev = 0,431, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.14114140101660155;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2314522431707938;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37867761829165736;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.11680936855850743;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10303144626376885;  // std dev = 0,431, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.14114140101660155;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2314522431707938;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37867761829165736;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.11680936855850743;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10303144626376885;  // std dev = 0,431, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.14114140101660155;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.2314522431707938;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37867761829165736;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.11680936855850743;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10303144626376885;  // std dev = 0,431, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.14114140101660155;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.17425787126004158;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.29445539405906856;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.09400870198513982;  // std dev = 0,931, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08885113162598633;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07106883858516107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10617719388507023;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13042720865608579;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.17425787126004158;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.29445539405906856;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.09400870198513982;  // std dev = 0,931, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08885113162598633;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07106883858516107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10617719388507023;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13042720865608579;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.17425787126004158;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.29445539405906856;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.09400870198513982;  // std dev = 0,931, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08885113162598633;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07106883858516107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10617719388507023;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13042720865608579;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.17425787126004158;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.29445539405906856;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.09400870198513982;  // std dev = 0,931, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08885113162598633;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07106883858516107;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.10617719388507023;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.13042720865608579;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.2301997465393383;  // std dev = 0,341, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06718297943856233;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.059743581228462274;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13805662791707488;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.16656911190234117;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.05442475220397499;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05725684194728875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07864983174892509;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08681580976204406;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.2301997465393383;  // std dev = 0,341, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06718297943856233;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.059743581228462274;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13805662791707488;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.16656911190234117;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.05442475220397499;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05725684194728875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07864983174892509;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08681580976204406;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.2301997465393383;  // std dev = 0,341, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06718297943856233;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.059743581228462274;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13805662791707488;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.16656911190234117;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.05442475220397499;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05725684194728875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07864983174892509;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08681580976204406;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.2301997465393383;  // std dev = 0,341, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06718297943856233;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, A) )
%   | | | | then return -0.059743581228462274;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13805662791707488;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.16656911190234117;  // std dev = 0,344, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, B) )
%   | | | | then return 0.05442475220397499;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05725684194728875;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07864983174892509;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.08681580976204406;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.09290025539530804;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.20835545036368996;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05062194803263799;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.012787688020025095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.059825727565468056;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.0658511798257777;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.09290025539530804;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.20835545036368996;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05062194803263799;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.012787688020025095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.059825727565468056;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.0658511798257777;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.09290025539530804;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.20835545036368996;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05062194803263799;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.012787688020025095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.059825727565468056;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.0658511798257777;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.09290025539530804;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.20835545036368996;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05062194803263799;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.012787688020025095;  // std dev = 0,430, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.059825727565468056;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.0658511798257777;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045672903565084175;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05018776857877433;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045672903565084175;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05018776857877433;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045672903565084175;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05018776857877433;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045672903565084175;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05018776857877433;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */








Results
Results
Results
Results
   AUC ROC   = 0.4516
   AUC ROC   = 0.4516
   AUC ROC   = 0.4516
   AUC ROC   = 0.4516
   AUC PR    = 0.457942
   AUC PR    = 0.457942
   AUC PR    = 0.457942
   AUC PR    = 0.457942
   CLL	      = -0.715458
   CLL	      = -0.715458
   CLL	      = -0.715458
   CLL	      = -0.715458
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956








Total learning time: 44.576 seconds
Total learning time: 44.576 seconds
Total learning time: 44.576 seconds
Total learning time: 44.576 seconds
Total inference time: 5.771 seconds
Total inference time: 5.771 seconds
Total inference time: 5.771 seconds
Total inference time: 5.771 seconds
AUC ROC: 0.4516
AUC ROC: 0.4516
AUC ROC: 0.4516
AUC ROC: 0.4516








Refined model AUC ROC: 0.4516
Refined model AUC ROC: 0.4516
Refined model AUC ROC: 0.4516
Refined model AUC ROC: 0.4516








Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 08:38:42
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 08:38:42
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 08:38:42
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 08:38:42
{'AUC ROC': 0.4516, 'AUC PR': 0.457942, 'CLL': -0.715458, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 105.955, 'Inference time': 5.771, 'Mapping results': {'Knowledge compiling time': 0.20763087272644043, 'Generating paths time': 4.710155248641968, 'Generating mappings time': 0.07764148712158203, 'Possible mappings': 6, 'Finding best mapping': 0.0006928443908691406, 'Total time': 4.996174573898315}, 'Parameter Learning results': {'AUC ROC': 0.439227, 'AUC PR': 0.448945, 'CLL': -0.712399, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 61.379, 'Inference time': 3.917}}
{'AUC ROC': 0.4516, 'AUC PR': 0.457942, 'CLL': -0.715458, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 105.955, 'Inference time': 5.771, 'Mapping results': {'Knowledge compiling time': 0.20763087272644043, 'Generating paths time': 4.710155248641968, 'Generating mappings time': 0.07764148712158203, 'Possible mappings': 6, 'Finding best mapping': 0.0006928443908691406, 'Total time': 4.996174573898315}, 'Parameter Learning results': {'AUC ROC': 0.439227, 'AUC PR': 0.448945, 'CLL': -0.712399, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 61.379, 'Inference time': 3.917}}
{'AUC ROC': 0.4516, 'AUC PR': 0.457942, 'CLL': -0.715458, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 105.955, 'Inference time': 5.771, 'Mapping results': {'Knowledge compiling time': 0.20763087272644043, 'Generating paths time': 4.710155248641968, 'Generating mappings time': 0.07764148712158203, 'Possible mappings': 6, 'Finding best mapping': 0.0006928443908691406, 'Total time': 4.996174573898315}, 'Parameter Learning results': {'AUC ROC': 0.439227, 'AUC PR': 0.448945, 'CLL': -0.712399, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 61.379, 'Inference time': 3.917}}
{'AUC ROC': 0.4516, 'AUC PR': 0.457942, 'CLL': -0.715458, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 105.955, 'Inference time': 5.771, 'Mapping results': {'Knowledge compiling time': 0.20763087272644043, 'Generating paths time': 4.710155248641968, 'Generating mappings time': 0.07764148712158203, 'Possible mappings': 6, 'Finding best mapping': 0.0006928443908691406, 'Total time': 4.996174573898315}, 'Parameter Learning results': {'AUC ROC': 0.439227, 'AUC PR': 0.448945, 'CLL': -0.712399, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 61.379, 'Inference time': 3.917}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.12886271684193937;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0044706164913939864;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024124809534215;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024124809534215;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024124809534215;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31024124809534215;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.40859932741850674;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6618247082261007;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.10010967207294472;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.179791300770998;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13817529177389926;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.242666316108409;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2949382508597063;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.40859932741850674;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6618247082261007;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.10010967207294472;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.179791300770998;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13817529177389926;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.242666316108409;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2949382508597063;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.40859932741850674;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6618247082261007;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.10010967207294472;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.179791300770998;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13817529177389926;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.242666316108409;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2949382508597063;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.40859932741850674;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6618247082261007;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.10010967207294472;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.179791300770998;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13817529177389926;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.242666316108409;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2949382508597063;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3112442899624834;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5025366172424314;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13946009423421812;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11715582681354633;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10785926637802674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1864697515275054;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2251726894725752;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3112442899624834;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5025366172424314;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13946009423421812;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11715582681354633;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10785926637802674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1864697515275054;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2251726894725752;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3112442899624834;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5025366172424314;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13946009423421812;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11715582681354633;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10785926637802674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1864697515275054;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2251726894725752;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3112442899624834;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5025366172424314;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.13946009423421812;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11715582681354633;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10785926637802674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1864697515275054;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.2251726894725752;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14227583620901363;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15658728892568533;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14227583620901363;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15658728892568533;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14227583620901363;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15658728892568533;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14227583620901363;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15658728892568533;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.22749537270865142;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4208868272974416;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07231084993954506;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.05774055022266892;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.18204763912362135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1055220205048908;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11765021469352675;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.22749537270865142;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4208868272974416;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07231084993954506;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.05774055022266892;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.18204763912362135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1055220205048908;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11765021469352675;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.22749537270865142;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4208868272974416;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07231084993954506;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.05774055022266892;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.18204763912362135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1055220205048908;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11765021469352675;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.22749537270865142;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4208868272974416;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07231084993954506;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.05774055022266892;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.18204763912362135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1055220205048908;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11765021469352675;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08037941121698736;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08875992872109034;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08037941121698736;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08875992872109034;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08037941121698736;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08875992872109034;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08037941121698736;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08875992872109034;  // std dev = 0,466, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.15191890913009362;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.30567871926842155;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03459348805772679;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.1738294349360158;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15834966323610492;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05915411725127036;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0794961000931153;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.15191890913009362;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.30567871926842155;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03459348805772679;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.1738294349360158;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15834966323610492;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05915411725127036;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0794961000931153;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.15191890913009362;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.30567871926842155;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03459348805772679;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.1738294349360158;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15834966323610492;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05915411725127036;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0794961000931153;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.15191890913009362;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.30567871926842155;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03459348805772679;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.1738294349360158;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15834966323610492;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05915411725127036;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.0794961000931153;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04550897419714526;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04971428384017524;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04550897419714526;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04971428384017524;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04550897419714526;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04971428384017524;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04550897419714526;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04971428384017524;  // std dev = 0,465, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */








Results
Results
Results
Results
   AUC ROC   = 0.451997
   AUC ROC   = 0.451997
   AUC ROC   = 0.451997
   AUC ROC   = 0.451997
   AUC PR    = 0.45529
   AUC PR    = 0.45529
   AUC PR    = 0.45529
   AUC PR    = 0.45529
   CLL	      = -0.711693
   CLL	      = -0.711693
   CLL	      = -0.711693
   CLL	      = -0.711693
   Precision = 0.509151 at threshold = 0.5
   Precision = 0.509151 at threshold = 0.5
   Precision = 0.509151 at threshold = 0.5
   Precision = 0.509151 at threshold = 0.5
   Recall    = 0.966162
   Recall    = 0.966162
   Recall    = 0.966162
   Recall    = 0.966162
   F1        = 0.666872
   F1        = 0.666872
   F1        = 0.666872
   F1        = 0.666872








Total learning time: 64.181 seconds
Total learning time: 64.181 seconds
Total learning time: 64.181 seconds
Total learning time: 64.181 seconds
Total inference time: 3.489 seconds
Total inference time: 3.489 seconds
Total inference time: 3.489 seconds
Total inference time: 3.489 seconds
AUC ROC: 0.451997
AUC ROC: 0.451997
AUC ROC: 0.451997
AUC ROC: 0.451997








Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 08:39:50
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 08:39:50
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 08:39:50
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 08:39:50
{'AUC ROC': 0.451997, 'AUC PR': 0.45529, 'CLL': -0.711693, 'Precision': [0.509151, 0.5], 'Recall': 0.966162, 'F1': 0.666872, 'Learning time': 64.181, 'Inference time': 3.489}
{'AUC ROC': 0.451997, 'AUC PR': 0.45529, 'CLL': -0.711693, 'Precision': [0.509151, 0.5], 'Recall': 0.966162, 'F1': 0.666872, 'Learning time': 64.181, 'Inference time': 3.489}
{'AUC ROC': 0.451997, 'AUC PR': 0.45529, 'CLL': -0.711693, 'Precision': [0.509151, 0.5], 'Recall': 0.966162, 'F1': 0.666872, 'Learning time': 64.181, 'Inference time': 3.489}
{'AUC ROC': 0.451997, 'AUC PR': 0.45529, 'CLL': -0.711693, 'Precision': [0.509151, 0.5], 'Recall': 0.966162, 'F1': 0.666872, 'Learning time': 64.181, 'Inference time': 3.489}








Starting fold 3

Starting fold 3

Starting fold 3

Starting fold 3

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.11188027838309306;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0661989471239738;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09997672490175077;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2822642574966863;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2822642574966863;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2822642574966863;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.2822642574966863;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05728207998915112;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635467528713694;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11951560750632464;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22608956021650975;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.04924019034026962;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384104652673049;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11951560750632464;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22608956021650975;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.04924019034026962;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384104652673049;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11951560750632464;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22608956021650975;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.04924019034026962;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384104652673049;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11951560750632464;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22608956021650975;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.04924019034026962;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384104652673049;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730584192042821;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059256582872197455;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730584192042821;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059256582872197455;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730584192042821;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059256582872197455;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730584192042821;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059256582872197455;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.11734244095413437;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05338250649425545;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13471562326160913;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0247544380470219;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.033164104578703335;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053168532801698754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.11734244095413437;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05338250649425545;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13471562326160913;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0247544380470219;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.033164104578703335;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053168532801698754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.11734244095413437;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05338250649425545;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13471562326160913;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0247544380470219;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.033164104578703335;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053168532801698754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.11734244095413437;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05338250649425545;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.13471562326160913;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0247544380470219;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.033164104578703335;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.053168532801698754;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10003477910310991;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021147756007698294;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04333366867627349;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10003477910310991;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021147756007698294;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04333366867627349;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10003477910310991;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021147756007698294;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04333366867627349;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10003477910310991;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021147756007698294;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.04333366867627349;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531743378810166;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01802078902844403;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02115606500631427;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037117151221270434;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531743378810166;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01802078902844403;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02115606500631427;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037117151221270434;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531743378810166;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01802078902844403;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02115606500631427;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037117151221270434;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531743378810166;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01802078902844403;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02115606500631427;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.037117151221270434;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657019241716216;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01532277505174412;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.029833901649832937;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657019241716216;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01532277505174412;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.029833901649832937;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657019241716216;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01532277505174412;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.029833901649832937;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05657019241716216;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01532277505174412;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.029833901649832937;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04244708086185843;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.02380211002087536;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04244708086185843;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.02380211002087536;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04244708086185843;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.02380211002087536;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04244708086185843;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.02380211002087536;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */








Results
Results
Results
Results
   AUC ROC   = 0.547986
   AUC ROC   = 0.547986
   AUC ROC   = 0.547986
   AUC ROC   = 0.547986
   AUC PR    = 0.555914
   AUC PR    = 0.555914
   AUC PR    = 0.555914
   AUC PR    = 0.555914
   CLL	      = -0.684843
   CLL	      = -0.684843
   CLL	      = -0.684843
   CLL	      = -0.684843
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196








Total learning time: 28.496 seconds
Total learning time: 28.496 seconds
Total learning time: 28.496 seconds
Total learning time: 28.496 seconds
Total inference time: 2.511 seconds
Total inference time: 2.511 seconds
Total inference time: 2.511 seconds
Total inference time: 2.511 seconds
AUC ROC: 0.547986
AUC ROC: 0.547986
AUC ROC: 0.547986
AUC ROC: 0.547986








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 473, 545], 'false': [0.433, 108, 36]}]
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238]}
{'': [0.24865738473063062, 0.18745488588363146], 'false': [0.16, 0.1893517487190911], 'false,false': [0.1728395061728396, 0.19046399999999997]}
{'': [0.24865738473063062, 0.18745488588363146], 'false': [0.16, 0.1893517487190911], 'false,false': [0.1728395061728396, 0.19046399999999997]}
{'': [0.24865738473063062, 0.18745488588363146], 'false': [0.16, 0.1893517487190911], 'false,false': [0.1728395061728396, 0.19046399999999997]}
{'': [0.24865738473063062, 0.18745488588363146], 'false': [0.16, 0.1893517487190911], 'false,false': [0.1728395061728396, 0.19046399999999997]}
{'': [0.24863991189102538, 0.187399874981595], 'true': [0.24670740223343385, 0.24850257797171557], 'true,true': [0.25000000000000006, 0.24555555555555594], 'false': [0.15999999999999998, 0.1893332207739183], 'false,false': [0.17283950617283947, 0.19046400000000002]}
{'': [0.24863991189102538, 0.187399874981595], 'true': [0.24670740223343385, 0.24850257797171557], 'true,true': [0.25000000000000006, 0.24555555555555594], 'false': [0.15999999999999998, 0.1893332207739183], 'false,false': [0.17283950617283947, 0.19046400000000002]}
{'': [0.24863991189102538, 0.187399874981595], 'true': [0.24670740223343385, 0.24850257797171557], 'true,true': [0.25000000000000006, 0.24555555555555594], 'false': [0.15999999999999998, 0.1893332207739183], 'false,false': [0.17283950617283947, 0.19046400000000002]}
{'': [0.24863991189102538, 0.187399874981595], 'true': [0.24670740223343385, 0.24850257797171557], 'true,true': [0.25000000000000006, 0.24555555555555594], 'false': [0.15999999999999998, 0.1893332207739183], 'false,false': [0.17283950617283947, 0.19046400000000002]}
{'': [0.24855090726045767, 0.18735585062763907], 'true': [0.24722014392751332, 0.24829395957844483], 'true,true': [0.24999999999999997, 0.24555555555555555], 'false': [0.16000000000000003, 0.18931818316079352], 'false,false': [0.17283950617283944, 0.19046400000000102]}
{'': [0.24855090726045767, 0.18735585062763907], 'true': [0.24722014392751332, 0.24829395957844483], 'true,true': [0.24999999999999997, 0.24555555555555555], 'false': [0.16000000000000003, 0.18931818316079352], 'false,false': [0.17283950617283944, 0.19046400000000102]}
{'': [0.24855090726045767, 0.18735585062763907], 'true': [0.24722014392751332, 0.24829395957844483], 'true,true': [0.24999999999999997, 0.24555555555555555], 'false': [0.16000000000000003, 0.18931818316079352], 'false,false': [0.17283950617283944, 0.19046400000000102]}
{'': [0.24855090726045767, 0.18735585062763907], 'true': [0.24722014392751332, 0.24829395957844483], 'true,true': [0.24999999999999997, 0.24555555555555555], 'false': [0.16000000000000003, 0.18931818316079352], 'false,false': [0.17283950617283944, 0.19046400000000102]}
{'': [0.24840571825850494, 0.18732225604776406]}
{'': [0.24840571825850494, 0.18732225604776406]}
{'': [0.24840571825850494, 0.18732225604776406]}
{'': [0.24840571825850494, 0.18732225604776406]}
{'': [0.24839298605051818, 0.18731760056385982], 'true': [0.24686447313186743, 0.24827239160392056], 'true,true': [0.25, 0.2455555555555554], 'false': [0.16000000000000003, 0.1893053376997397], 'false,false': [0.17283950617283955, 0.19046399999999913]}
{'': [0.24839298605051818, 0.18731760056385982], 'true': [0.24686447313186743, 0.24827239160392056], 'true,true': [0.25, 0.2455555555555554], 'false': [0.16000000000000003, 0.1893053376997397], 'false,false': [0.17283950617283955, 0.19046399999999913]}
{'': [0.24839298605051818, 0.18731760056385982], 'true': [0.24686447313186743, 0.24827239160392056], 'true,true': [0.25, 0.2455555555555554], 'false': [0.16000000000000003, 0.1893053376997397], 'false,false': [0.17283950617283955, 0.19046399999999913]}
{'': [0.24839298605051818, 0.18731760056385982], 'true': [0.24686447313186743, 0.24827239160392056], 'true,true': [0.25, 0.2455555555555554], 'false': [0.16000000000000003, 0.1893053376997397], 'false,false': [0.17283950617283955, 0.19046399999999913]}
{'': [0.24830576274327967, 0.18729441905650937], 'false': [0.16000000000000003, 0.18929713442318205]}
{'': [0.24830576274327967, 0.18729441905650937], 'false': [0.16000000000000003, 0.18929713442318205]}
{'': [0.24830576274327967, 0.18729441905650937], 'false': [0.16000000000000003, 0.18929713442318205]}
{'': [0.24830576274327967, 0.18729441905650937], 'false': [0.16000000000000003, 0.18929713442318205]}
{'': [0.2483010710222529, 0.18728276062473667], 'false': [0.15999999999999998, 0.18929622662350978], 'false,false': [0.17283950617283955, 0.1904639999999994]}
{'': [0.2483010710222529, 0.18728276062473667], 'false': [0.15999999999999998, 0.18929622662350978], 'false,false': [0.17283950617283955, 0.1904639999999994]}
{'': [0.2483010710222529, 0.18728276062473667], 'false': [0.15999999999999998, 0.18929622662350978], 'false,false': [0.17283950617283955, 0.1904639999999994]}
{'': [0.2483010710222529, 0.18728276062473667], 'false': [0.15999999999999998, 0.18929622662350978], 'false,false': [0.17283950617283955, 0.1904639999999994]}
{'': [0.24829858056969203, 0.187270327129181], 'false': [0.15999999999999998, 0.18929080305789808]}
{'': [0.24829858056969203, 0.187270327129181], 'false': [0.15999999999999998, 0.18929080305789808]}
{'': [0.24829858056969203, 0.187270327129181], 'false': [0.15999999999999998, 0.18929080305789808]}
{'': [0.24829858056969203, 0.187270327129181], 'false': [0.15999999999999998, 0.18929080305789808]}
{'': [0.24829730718764437, 0.18726489245046246]}
{'': [0.24829730718764437, 0.18726489245046246]}
{'': [0.24829730718764437, 0.18726489245046246]}
{'': [0.24829730718764437, 0.18726489245046246]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(A, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '2;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;haswordvenue(B, D).;true;true', '5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(A, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '2;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;haswordvenue(B, D).;true;true', '5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(A, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '2;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;haswordvenue(B, D).;true;true', '5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(A, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '2;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '3;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;haswordvenue(B, D).;true;true', '5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '5;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.17690105315180193;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.28558452654116745;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.17690105315180193;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.28558452654116745;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.17690105315180193;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.28558452654116745;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2508763753501724;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1964708356746348;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.17690105315180193;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.28558452654116745;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.061022104415313035;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08607703323321923;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1417474357178521;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22539600050596822;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05259950478597565;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0735888350810823;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1417474357178521;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22539600050596822;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05259950478597565;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0735888350810823;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1417474357178521;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22539600050596822;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05259950478597565;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0735888350810823;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20107358041372894;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1417474357178521;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.22539600050596822;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.05259950478597565;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.0735888350810823;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17303603476046997;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04506156572157876;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060193469469905315;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17303603476046997;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04506156572157876;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060193469469905315;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17303603476046997;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04506156572157876;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060193469469905315;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17303603476046997;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04506156572157876;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060193469469905315;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1173477288342295;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0727678670039713;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1341119369592473;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024618984356594088;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.03839689936532517;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.052783967478799744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1173477288342295;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0727678670039713;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1341119369592473;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024618984356594088;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.03839689936532517;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.052783967478799744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1173477288342295;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0727678670039713;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1341119369592473;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024618984356594088;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.03839689936532517;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.052783967478799744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.1173477288342295;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0727678670039713;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.1341119369592473;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024618984356594088;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.03839689936532517;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.052783967478799744;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10002835945181679;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02103002397460593;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03256600389501996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04410325387407772;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10002835945181679;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02103002397460593;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03256600389501996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04410325387407772;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10002835945181679;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02103002397460593;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03256600389501996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04410325387407772;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10002835945181679;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02103002397460593;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03256600389501996;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04410325387407772;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531749783487307;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017918989286701815;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.027510392484601905;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03664460130699688;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531749783487307;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017918989286701815;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.027510392484601905;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03664460130699688;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531749783487307;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017918989286701815;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.027510392484601905;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03664460130699688;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07531749783487307;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017918989286701815;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.027510392484601905;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03664460130699688;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04627028227503383;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01382619969954989;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05794296532511389;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.015235141220552292;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02316052837029378;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.030305144512875623;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04627028227503383;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01382619969954989;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05794296532511389;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.015235141220552292;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02316052837029378;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.030305144512875623;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04627028227503383;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01382619969954989;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05794296532511389;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.015235141220552292;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02316052837029378;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.030305144512875623;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04627028227503383;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01382619969954989;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05794296532511389;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.015235141220552292;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02316052837029378;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.030305144512875623;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01450948163784338;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.04347060631325848;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.012929290968070328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024594189170617023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01450948163784338;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.04347060631325848;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.012929290968070328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024594189170617023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01450948163784338;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.04347060631325848;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.012929290968070328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024594189170617023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01450948163784338;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.04347060631325848;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.012929290968070328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024594189170617023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */








Results
Results
Results
Results
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.68495
   CLL	      = -0.68495
   CLL	      = -0.68495
   CLL	      = -0.68495
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196








Total learning time: 26.56 seconds
Total learning time: 26.56 seconds
Total learning time: 26.56 seconds
Total learning time: 26.56 seconds
Total inference time: 2.863 seconds
Total inference time: 2.863 seconds
Total inference time: 2.863 seconds
Total inference time: 2.863 seconds
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997








Refined model AUC ROC: 0.547997
Refined model AUC ROC: 0.547997
Refined model AUC ROC: 0.547997
Refined model AUC ROC: 0.547997








Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 08:40:57
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 08:40:57
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 08:40:57
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 08:40:57
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68495, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.056, 'Inference time': 2.863, 'Mapping results': {'Knowledge compiling time': 0.21451950073242188, 'Generating paths time': 4.739855766296387, 'Generating mappings time': 0.0735781192779541, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 5.0286431312561035}, 'Parameter Learning results': {'AUC ROC': 0.547986, 'AUC PR': 0.555914, 'CLL': -0.684843, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 28.496, 'Inference time': 2.511}}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68495, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.056, 'Inference time': 2.863, 'Mapping results': {'Knowledge compiling time': 0.21451950073242188, 'Generating paths time': 4.739855766296387, 'Generating mappings time': 0.0735781192779541, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 5.0286431312561035}, 'Parameter Learning results': {'AUC ROC': 0.547986, 'AUC PR': 0.555914, 'CLL': -0.684843, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 28.496, 'Inference time': 2.511}}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68495, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.056, 'Inference time': 2.863, 'Mapping results': {'Knowledge compiling time': 0.21451950073242188, 'Generating paths time': 4.739855766296387, 'Generating mappings time': 0.0735781192779541, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 5.0286431312561035}, 'Parameter Learning results': {'AUC ROC': 0.547986, 'AUC PR': 0.555914, 'CLL': -0.684843, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 28.496, 'Inference time': 2.511}}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.68495, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 55.056, 'Inference time': 2.863, 'Mapping results': {'Knowledge compiling time': 0.21451950073242188, 'Generating paths time': 4.739855766296387, 'Generating mappings time': 0.0735781192779541, 'Possible mappings': 6, 'Finding best mapping': 0.0006787776947021484, 'Total time': 5.0286431312561035}, 'Parameter Learning results': {'AUC ROC': 0.547986, 'AUC PR': 0.555914, 'CLL': -0.684843, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 28.496, 'Inference time': 2.511}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33857481369040965;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08162081214353095;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08162081214353095;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08162081214353095;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2795632420146223;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.08162081214353095;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331531975035466;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.045731018083346474;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07454570221312168;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331531975035466;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.045731018083346474;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07454570221312168;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331531975035466;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.045731018083346474;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07454570221312168;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2228402952175151;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331531975035466;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.045731018083346474;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07454570221312168;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730897728408697;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059294675593212505;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730897728408697;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059294675593212505;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730897728408697;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059294675593212505;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1730897728408697;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.059294675593212505;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322284624890982;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020051762754343328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0522104655582788;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322284624890982;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020051762754343328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0522104655582788;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322284624890982;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020051762754343328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0522104655582788;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1322284624890982;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020051762754343328;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.0522104655582788;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.06468324838837769;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0019834182782888215;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10337978606658983;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.02170534944340421;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.017073775144379723;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.045260651645129456;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.06468324838837769;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0019834182782888215;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10337978606658983;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.02170534944340421;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.017073775144379723;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.045260651645129456;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.06468324838837769;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0019834182782888215;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10337978606658983;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.02170534944340421;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.017073775144379723;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.045260651645129456;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.06468324838837769;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0019834182782888215;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.10337978606658983;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.02170534944340421;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.017073775144379723;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.045260651645129456;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.04872184945622415;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0014959248795823332;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07781921111266966;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.018203139770471746;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.014508028927199091;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03763397805377261;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.04872184945622415;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0014959248795823332;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07781921111266966;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.018203139770471746;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.014508028927199091;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03763397805377261;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.04872184945622415;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0014959248795823332;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07781921111266966;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.018203139770471746;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.014508028927199091;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03763397805377261;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.04872184945622415;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0014959248795823332;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07781921111266966;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.018203139770471746;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.014508028927199091;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.03763397805377261;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.023152662909091026;  // std dev = 0,478, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05983348482731627;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.015231104880983793;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031142486819153627;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.023152662909091026;  // std dev = 0,478, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05983348482731627;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.015231104880983793;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031142486819153627;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.023152662909091026;  // std dev = 0,478, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05983348482731627;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.015231104880983793;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031142486819153627;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.023152662909091026;  // std dev = 0,478, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05983348482731627;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.015231104880983793;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.031142486819153627;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04234068164039338;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015810551438249422;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024798337481141543;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04234068164039338;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015810551438249422;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024798337481141543;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04234068164039338;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015810551438249422;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024798337481141543;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04234068164039338;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015810551438249422;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.024798337481141543;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */








Results
Results
Results
Results
   AUC ROC   = 0.547855
   AUC ROC   = 0.547855
   AUC ROC   = 0.547855
   AUC ROC   = 0.547855
   AUC PR    = 0.555875
   AUC PR    = 0.555875
   AUC PR    = 0.555875
   AUC PR    = 0.555875
   CLL	      = -0.684986
   CLL	      = -0.684986
   CLL	      = -0.684986
   CLL	      = -0.684986
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196








Total learning time: 33.747 seconds
Total learning time: 33.747 seconds
Total learning time: 33.747 seconds
Total learning time: 33.747 seconds
Total inference time: 2.199 seconds
Total inference time: 2.199 seconds
Total inference time: 2.199 seconds
Total inference time: 2.199 seconds
AUC ROC: 0.547855
AUC ROC: 0.547855
AUC ROC: 0.547855
AUC ROC: 0.547855








Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 08:41:33
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 08:41:33
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 08:41:33
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 08:41:33
{'AUC ROC': 0.547855, 'AUC PR': 0.555875, 'CLL': -0.684986, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 33.747, 'Inference time': 2.199}
{'AUC ROC': 0.547855, 'AUC PR': 0.555875, 'CLL': -0.684986, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 33.747, 'Inference time': 2.199}
{'AUC ROC': 0.547855, 'AUC PR': 0.555875, 'CLL': -0.684986, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 33.747, 'Inference time': 2.199}
{'AUC ROC': 0.547855, 'AUC PR': 0.555875, 'CLL': -0.684986, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 33.747, 'Inference time': 2.199}








Starting fold 4

Starting fold 4

Starting fold 4

Starting fold 4

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */








Results
Results
Results
Results
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   CLL	      = -0.679198
   CLL	      = -0.679198
   CLL	      = -0.679198
   CLL	      = -0.679198
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518








Total learning time: 36.53 seconds
Total learning time: 36.53 seconds
Total learning time: 36.53 seconds
Total learning time: 36.53 seconds
Total inference time: 3.298 seconds
Total inference time: 3.298 seconds
Total inference time: 3.298 seconds
Total inference time: 3.298 seconds
AUC ROC: 0.572027
AUC ROC: 0.572027
AUC ROC: 0.572027
AUC ROC: 0.572027








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,true,true': 'samebib(J, K), venue(K, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 4, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.015, 5, 0], 'true,false': [0.892, 1, 4], 'false,true': [0.499, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.015, 5, 0], 'true,false': [0.892, 1, 4], 'false,true': [0.499, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.015, 5, 0], 'true,false': [0.892, 1, 4], 'false,true': [0.499, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.015, 5, 0], 'true,false': [0.892, 1, 4], 'false,true': [0.499, 667, 707], 'false,false': [0.446, 74, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.136, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.812, 1, 2], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.136, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.812, 1, 2], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.136, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.812, 1, 2], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.136, 0, 10], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.812, 1, 2], 'true,false': [0.499, 667, 707], 'false': [0.445, 75, 28]}]
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,false': [0.22222222222222227, 0.2498243106361406], 'true,false,true': [0.23140495867768598, 0.18750000000000006], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,false': [0.22222222222222227, 0.2498243106361406], 'true,false,true': [0.23140495867768598, 0.18750000000000006], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,false': [0.22222222222222227, 0.2498243106361406], 'true,false,true': [0.23140495867768598, 0.18750000000000006], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.222222222222222, 0.24977707095906285], 'true,false': [0.22222222222222227, 0.2498243106361406], 'true,false,true': [0.23140495867768598, 0.18750000000000006], 'true,false,true,true': [0.0, 0.0], 'true,true': [0.2366863905325444, 0.16000000000000006], 'true,true,true': [0.0, -5.551115123125783e-18]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24782005779918775, 0.19794514091808763]}
{'': [0.24782005779918775, 0.19794514091808763]}
{'': [0.24782005779918775, 0.19794514091808763]}
{'': [0.24782005779918775, 0.19794514091808763]}
{'': [0.24775602229937313, 0.19794514091808932]}
{'': [0.24775602229937313, 0.19794514091808932]}
{'': [0.24775602229937313, 0.19794514091808932]}
{'': [0.24775602229937313, 0.19794514091808932]}
{'': [0.24772070614644248, 0.19794514091808854]}
{'': [0.24772070614644248, 0.19794514091808854]}
{'': [0.24772070614644248, 0.19794514091808854]}
{'': [0.24772070614644248, 0.19794514091808854]}
{'': [0.24770248695638622, 0.19794514091808735], 'true': [0.13964521108698547, 0.24878249150999193], 'true,true': [0.12784849971432544, 0.15902526708088888], 'true,true,true': [-2.7755575615628914e-17, 0.0]}
{'': [0.24770248695638622, 0.19794514091808735], 'true': [0.13964521108698547, 0.24878249150999193], 'true,true': [0.12784849971432544, 0.15902526708088888], 'true,true,true': [-2.7755575615628914e-17, 0.0]}
{'': [0.24770248695638622, 0.19794514091808735], 'true': [0.13964521108698547, 0.24878249150999193], 'true,true': [0.12784849971432544, 0.15902526708088888], 'true,true,true': [-2.7755575615628914e-17, 0.0]}
{'': [0.24770248695638622, 0.19794514091808735], 'true': [0.13964521108698547, 0.24878249150999193], 'true,true': [0.12784849971432544, 0.15902526708088888], 'true,true,true': [-2.7755575615628914e-17, 0.0]}
{'': [0.10558033115386052, 0.24537040452187683], 'false': [0.24877767304737552, 0.1991541714725095], 'true': [0.08136590988230355, 0.1590499300133889], 'true,true': [-1.3877787807814457e-17, 4.64849798762379e-05]}
{'': [0.10558033115386052, 0.24537040452187683], 'false': [0.24877767304737552, 0.1991541714725095], 'true': [0.08136590988230355, 0.1590499300133889], 'true,true': [-1.3877787807814457e-17, 4.64849798762379e-05]}
{'': [0.10558033115386052, 0.24537040452187683], 'false': [0.24877767304737552, 0.1991541714725095], 'true': [0.08136590988230355, 0.1590499300133889], 'true,true': [-1.3877787807814457e-17, 4.64849798762379e-05]}
{'': [0.10558033115386052, 0.24537040452187683], 'false': [0.24877767304737552, 0.1991541714725095], 'true': [0.08136590988230355, 0.1590499300133889], 'true,true': [-1.3877787807814457e-17, 4.64849798762379e-05]}
{'': [0.246834564056355, 0.19770780252967507], 'true': [0.08301676813817663, 0.24877543616773787], 'true,true': [0.051635178597997856, 0.21967384250511524], 'true,true,true': [0.0018626012861221453, 0.0]}
{'': [0.246834564056355, 0.19770780252967507], 'true': [0.08301676813817663, 0.24877543616773787], 'true,true': [0.051635178597997856, 0.21967384250511524], 'true,true,true': [0.0018626012861221453, 0.0]}
{'': [0.246834564056355, 0.19770780252967507], 'true': [0.08301676813817663, 0.24877543616773787], 'true,true': [0.051635178597997856, 0.21967384250511524], 'true,true,true': [0.0018626012861221453, 0.0]}
{'': [0.246834564056355, 0.19770780252967507], 'true': [0.08301676813817663, 0.24877543616773787], 'true,true': [0.051635178597997856, 0.21967384250511524], 'true,true,true': [0.0018626012861221453, 0.0]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, B).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, B).;true;true', '7;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;samebib(E, F), venue(F, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, A).;true;true', '9;true,true,true;samebib(F, G), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, B).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, B).;true;true', '7;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;samebib(E, F), venue(F, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, A).;true;true', '9;true,true,true;samebib(F, G), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, B).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, B).;true;true', '7;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;samebib(E, F), venue(F, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, A).;true;true', '9;true,true,true;samebib(F, G), venue(G, B).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, A).;true;true', '1;true,true,true;samebib(F, G), venue(G, B).;true;true', '1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, B).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, B).;true;true', '7;true,true,true;samebib(F, G), venue(G, A).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;true;author(E, D), venue(E, B).;true;true', '8;true,true;samebib(E, F), venue(F, A).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;true,true;author(F, E), venue(F, A).;true;true', '9;true,true,true;samebib(F, G), venue(G, B).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16709945266598872;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12825229621698775;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09741589716384676;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4365256610911801;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32197170127368974;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.29618204793766234;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.07178007500992141;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.33363270885524;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2526227228129312;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22276698443894408;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then return 0.05401502056020786;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2855494018866289;  // std dev = 0,136, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.21093148458208696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.034664357096192054;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04057777246634539;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.026817196388830733;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */








Results
Results
Results
Results
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC ROC   = 0.572027
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   AUC PR    = 0.588188
   CLL	      = -0.679198
   CLL	      = -0.679198
   CLL	      = -0.679198
   CLL	      = -0.679198
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518








Total learning time: 25.709 seconds
Total learning time: 25.709 seconds
Total learning time: 25.709 seconds
Total learning time: 25.709 seconds
Total inference time: 3.21 seconds
Total inference time: 3.21 seconds
Total inference time: 3.21 seconds
Total inference time: 3.21 seconds
AUC ROC: 0.572027
AUC ROC: 0.572027
AUC ROC: 0.572027
AUC ROC: 0.572027








Refined model AUC ROC: 0.572027
Refined model AUC ROC: 0.572027
Refined model AUC ROC: 0.572027
Refined model AUC ROC: 0.572027








Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 08:42:48
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 08:42:48
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 08:42:48
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 08:42:48
{'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 62.239000000000004, 'Inference time': 3.21, 'Mapping results': {'Knowledge compiling time': 0.14440107345581055, 'Generating paths time': 4.65861701965332, 'Generating mappings time': 0.07259273529052734, 'Possible mappings': 6, 'Finding best mapping': 0.0006725788116455078, 'Total time': 4.87629246711731}, 'Parameter Learning results': {'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.53, 'Inference time': 3.298}}
{'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 62.239000000000004, 'Inference time': 3.21, 'Mapping results': {'Knowledge compiling time': 0.14440107345581055, 'Generating paths time': 4.65861701965332, 'Generating mappings time': 0.07259273529052734, 'Possible mappings': 6, 'Finding best mapping': 0.0006725788116455078, 'Total time': 4.87629246711731}, 'Parameter Learning results': {'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.53, 'Inference time': 3.298}}
{'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 62.239000000000004, 'Inference time': 3.21, 'Mapping results': {'Knowledge compiling time': 0.14440107345581055, 'Generating paths time': 4.65861701965332, 'Generating mappings time': 0.07259273529052734, 'Possible mappings': 6, 'Finding best mapping': 0.0006725788116455078, 'Total time': 4.87629246711731}, 'Parameter Learning results': {'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.53, 'Inference time': 3.298}}
{'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 62.239000000000004, 'Inference time': 3.21, 'Mapping results': {'Knowledge compiling time': 0.14440107345581055, 'Generating paths time': 4.65861701965332, 'Generating mappings time': 0.07259273529052734, 'Possible mappings': 6, 'Finding best mapping': 0.0006725788116455078, 'Total time': 4.87629246711731}, 'Parameter Learning results': {'AUC ROC': 0.572027, 'AUC PR': 0.588188, 'CLL': -0.679198, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 36.53, 'Inference time': 3.298}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37270497585642154;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37270497585642154;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37270497585642154;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37270497585642154;  // std dev = 0,500, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7956037383964073;  // std dev = 0,081, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19352050071995655;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5967874663484057;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3210238694043341;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7956037383964073;  // std dev = 0,081, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19352050071995655;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5967874663484057;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3210238694043341;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7956037383964073;  // std dev = 0,081, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19352050071995655;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5967874663484057;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3210238694043341;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7956037383964073;  // std dev = 0,081, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19352050071995655;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5967874663484057;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3210238694043341;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26730159348939947;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26730159348939947;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26730159348939947;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26730159348939947;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21405011497527518;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21405011497527518;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21405011497527518;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21405011497527518;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16711316733281978;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16711316733281978;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16711316733281978;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16711316733281978;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47858210200901075;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27440989227658824;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.32922190985723565;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.49580670080351347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2744122160119017;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2953854020670499;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12574842213388285;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47858210200901075;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27440989227658824;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.32922190985723565;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.49580670080351347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2744122160119017;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2953854020670499;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12574842213388285;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47858210200901075;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27440989227658824;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.32922190985723565;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.49580670080351347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2744122160119017;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2953854020670499;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12574842213388285;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47858210200901075;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27440989227658824;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.32922190985723565;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.49580670080351347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2744122160119017;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2953854020670499;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.12574842213388285;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09730474049502066;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09730474049502066;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09730474049502066;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09730474049502066;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07352298869907112;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07352298869907112;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07352298869907112;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07352298869907112;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3248295075827513;  // std dev = 0,090, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25121675084435013;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20575366731102865;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3355010927832347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2542760249195761;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1794316328049265;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05347522803129589;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3248295075827513;  // std dev = 0,090, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25121675084435013;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20575366731102865;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3355010927832347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2542760249195761;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1794316328049265;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05347522803129589;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3248295075827513;  // std dev = 0,090, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25121675084435013;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20575366731102865;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3355010927832347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2542760249195761;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1794316328049265;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05347522803129589;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3248295075827513;  // std dev = 0,090, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25121675084435013;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20575366731102865;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3355010927832347;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.2542760249195761;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1794316328049265;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05347522803129589;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   | else return 0.035523059969904035;  // std dev = 0,446, 102,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04163723128743655;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026815043604304072;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04163723128743655;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026815043604304072;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04163723128743655;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026815043604304072;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04163723128743655;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026815043604304072;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */








Results
Results
Results
Results
   AUC ROC   = 0.572306
   AUC ROC   = 0.572306
   AUC ROC   = 0.572306
   AUC ROC   = 0.572306
   AUC PR    = 0.591187
   AUC PR    = 0.591187
   AUC PR    = 0.591187
   AUC PR    = 0.591187
   CLL	      = -0.678717
   CLL	      = -0.678717
   CLL	      = -0.678717
   CLL	      = -0.678717
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475








Total learning time: 40.053 seconds
Total learning time: 40.053 seconds
Total learning time: 40.053 seconds
Total learning time: 40.053 seconds
Total inference time: 3.5 seconds
Total inference time: 3.5 seconds
Total inference time: 3.5 seconds
Total inference time: 3.5 seconds
AUC ROC: 0.572306
AUC ROC: 0.572306
AUC ROC: 0.572306
AUC ROC: 0.572306








Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 08:43:33
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 08:43:33
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 08:43:33
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 08:43:33
{'AUC ROC': 0.572306, 'AUC PR': 0.591187, 'CLL': -0.678717, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.053, 'Inference time': 3.5}
{'AUC ROC': 0.572306, 'AUC PR': 0.591187, 'CLL': -0.678717, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.053, 'Inference time': 3.5}
{'AUC ROC': 0.572306, 'AUC PR': 0.591187, 'CLL': -0.678717, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.053, 'Inference time': 3.5}
{'AUC ROC': 0.572306, 'AUC PR': 0.591187, 'CLL': -0.678717, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 40.053, 'Inference time': 3.5}








Starting fold 5

Starting fold 5

Starting fold 5

Starting fold 5

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4489479665765052;  // std dev = 0,492, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4489479665765052;  // std dev = 0,492, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4489479665765052;  // std dev = 0,492, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4489479665765052;  // std dev = 0,492, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7318015695684165;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20569843043158353;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1390317637649168;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5943015695684165;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.39817253731034236;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7318015695684165;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20569843043158353;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1390317637649168;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5943015695684165;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.39817253731034236;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7318015695684165;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20569843043158353;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1390317637649168;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5943015695684165;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.39817253731034236;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7318015695684165;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20569843043158353;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1390317637649168;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5943015695684165;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.39817253731034236;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31734462375276007;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17022662777754416;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12265788428404449;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.025695158556931986;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13434278707376088;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03539550592356181;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31734462375276007;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17022662777754416;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12265788428404449;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.025695158556931986;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13434278707376088;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03539550592356181;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31734462375276007;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17022662777754416;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12265788428404449;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.025695158556931986;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13434278707376088;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03539550592356181;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31734462375276007;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17022662777754416;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12265788428404449;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.025695158556931986;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13434278707376088;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03539550592356181;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14898994988431016;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( samebib(H, I), venue(I, B) )
%   | | | | then return 0.591243416145619;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.34625658385438113;  // std dev = 2,58e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(J, G), venue(J, B) )
%   | | | | then return -0.27482801242580973;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.4537434161456188;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2708233059527893;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15363014668746483;  // std dev = 0,393, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08745341641022941;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05158590681779969;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14898994988431016;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( samebib(H, I), venue(I, B) )
%   | | | | then return 0.591243416145619;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.34625658385438113;  // std dev = 2,58e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(J, G), venue(J, B) )
%   | | | | then return -0.27482801242580973;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.4537434161456188;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2708233059527893;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15363014668746483;  // std dev = 0,393, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08745341641022941;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05158590681779969;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14898994988431016;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( samebib(H, I), venue(I, B) )
%   | | | | then return 0.591243416145619;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.34625658385438113;  // std dev = 2,58e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(J, G), venue(J, B) )
%   | | | | then return -0.27482801242580973;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.4537434161456188;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2708233059527893;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15363014668746483;  // std dev = 0,393, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08745341641022941;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05158590681779969;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14898994988431016;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then if ( samebib(H, I), venue(I, B) )
%   | | | | then return 0.591243416145619;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.34625658385438113;  // std dev = 2,58e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(J, G), venue(J, B) )
%   | | | | then return -0.27482801242580973;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.4537434161456188;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2708233059527893;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15363014668746483;  // std dev = 0,393, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08745341641022941;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05158590681779969;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09751738744647498;  // std dev = 0,398, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06631094302240136;  // std dev = 0,408, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20726038084651477;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5683392260123298;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2211232935648737;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18493931390834728;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08295784792052947;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0937259266386916;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023501693726767605;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09751738744647498;  // std dev = 0,398, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06631094302240136;  // std dev = 0,408, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20726038084651477;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5683392260123298;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2211232935648737;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18493931390834728;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08295784792052947;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0937259266386916;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023501693726767605;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09751738744647498;  // std dev = 0,398, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06631094302240136;  // std dev = 0,408, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20726038084651477;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5683392260123298;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2211232935648737;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18493931390834728;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08295784792052947;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0937259266386916;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023501693726767605;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09751738744647498;  // std dev = 0,398, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.06631094302240136;  // std dev = 0,408, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.20726038084651477;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5683392260123298;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2211232935648737;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18493931390834728;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08295784792052947;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0937259266386916;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023501693726767605;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0753906267276922;  // std dev = 0,396, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.14975611161523972;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4529836097334766;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1854914682134644;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.15870208152116685;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06898495766824952;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.013042623218148303;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08924756351332001;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.020167922536378544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0753906267276922;  // std dev = 0,396, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.14975611161523972;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4529836097334766;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1854914682134644;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.15870208152116685;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06898495766824952;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.013042623218148303;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08924756351332001;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.020167922536378544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0753906267276922;  // std dev = 0,396, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.14975611161523972;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4529836097334766;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1854914682134644;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.15870208152116685;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06898495766824952;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.013042623218148303;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08924756351332001;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.020167922536378544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0753906267276922;  // std dev = 0,396, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.14975611161523972;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4529836097334766;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1854914682134644;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.15870208152116685;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06898495766824952;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.013042623218148303;  // std dev = 0,651, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08924756351332001;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.020167922536378544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866073854210029;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35199998054945214;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15369173340947645;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04400097881948504;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.012973156341473913;  // std dev = 0,657, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.043495225433421825;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0720417169336614;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.017265873409273432;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866073854210029;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35199998054945214;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15369173340947645;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04400097881948504;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.012973156341473913;  // std dev = 0,657, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.043495225433421825;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0720417169336614;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.017265873409273432;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866073854210029;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35199998054945214;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15369173340947645;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04400097881948504;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.012973156341473913;  // std dev = 0,657, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.043495225433421825;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0720417169336614;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.017265873409273432;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10866073854210029;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35199998054945214;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15369173340947645;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04400097881948504;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.012973156341473913;  // std dev = 0,657, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.043495225433421825;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0720417169336614;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.017265873409273432;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3715610568117249;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.018652880024269295;  // std dev = 0,399, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.022101134255159645;  // std dev = 0,402, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09185989454242076;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.0010500118473407254;  // std dev = 0,273, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.019967841804271236;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05202312820602064;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.051045722739859495;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014751061675774306;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3715610568117249;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.018652880024269295;  // std dev = 0,399, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.022101134255159645;  // std dev = 0,402, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09185989454242076;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.0010500118473407254;  // std dev = 0,273, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.019967841804271236;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05202312820602064;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.051045722739859495;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014751061675774306;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3715610568117249;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.018652880024269295;  // std dev = 0,399, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.022101134255159645;  // std dev = 0,402, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09185989454242076;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.0010500118473407254;  // std dev = 0,273, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.019967841804271236;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05202312820602064;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.051045722739859495;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014751061675774306;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3715610568117249;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.018652880024269295;  // std dev = 0,399, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.022101134255159645;  // std dev = 0,402, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09185989454242076;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.0010500118473407254;  // std dev = 0,273, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.019967841804271236;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05202312820602064;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.051045722739859495;  // std dev = 0,440, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014751061675774306;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.023672799042018404;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06670559452988178;  // std dev = 0,397, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.11106567756734774;  // std dev = 0,388, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06902231301358204;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.06271043420579292;  // std dev = 0,348, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02730078076429203;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.003802780353074642;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.046161742585198645;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012580283871657008;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.023672799042018404;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06670559452988178;  // std dev = 0,397, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.11106567756734774;  // std dev = 0,388, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06902231301358204;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.06271043420579292;  // std dev = 0,348, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02730078076429203;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.003802780353074642;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.046161742585198645;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012580283871657008;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.023672799042018404;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06670559452988178;  // std dev = 0,397, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.11106567756734774;  // std dev = 0,388, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06902231301358204;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.06271043420579292;  // std dev = 0,348, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02730078076429203;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.003802780353074642;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.046161742585198645;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012580283871657008;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.023672799042018404;  // std dev = 0,383, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06670559452988178;  // std dev = 0,397, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.11106567756734774;  // std dev = 0,388, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06902231301358204;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.06271043420579292;  // std dev = 0,348, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.02730078076429203;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.003802780353074642;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.046161742585198645;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.012580283871657008;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04635909098470529;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.15713518262538992;  // std dev = 0,597, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1717157634430048;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.003610234084227426;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03735194852750753;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0032480154715650356;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01377684817020553;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.040396870621059254;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010712713784224323;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04635909098470529;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.15713518262538992;  // std dev = 0,597, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1717157634430048;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.003610234084227426;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03735194852750753;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0032480154715650356;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01377684817020553;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.040396870621059254;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010712713784224323;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04635909098470529;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.15713518262538992;  // std dev = 0,597, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1717157634430048;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.003610234084227426;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03735194852750753;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0032480154715650356;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01377684817020553;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.040396870621059254;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010712713784224323;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04635909098470529;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.15713518262538992;  // std dev = 0,597, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1717157634430048;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.003610234084227426;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03735194852750753;  // std dev = 0,446, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0032480154715650356;  // std dev = 0,650, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.01377684817020553;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.040396870621059254;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010712713784224323;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */








Results
Results
Results
Results
   AUC ROC   = 0.534815
   AUC ROC   = 0.534815
   AUC ROC   = 0.534815
   AUC ROC   = 0.534815
   AUC PR    = 0.544945
   AUC PR    = 0.544945
   AUC PR    = 0.544945
   AUC PR    = 0.544945
   CLL	      = -0.687545
   CLL	      = -0.687545
   CLL	      = -0.687545
   CLL	      = -0.687545
   Precision = 0.546159 at threshold = 0.5
   Precision = 0.546159 at threshold = 0.5
   Precision = 0.546159 at threshold = 0.5
   Precision = 0.546159 at threshold = 0.5
   Recall    = 0.94244
   Recall    = 0.94244
   Recall    = 0.94244
   Recall    = 0.94244
   F1        = 0.691553
   F1        = 0.691553
   F1        = 0.691553
   F1        = 0.691553








Total learning time: 38.665 seconds
Total learning time: 38.665 seconds
Total learning time: 38.665 seconds
Total learning time: 38.665 seconds
Total inference time: 4.427 seconds
Total inference time: 4.427 seconds
Total inference time: 4.427 seconds
Total inference time: 4.427 seconds
AUC ROC: 0.534815
AUC ROC: 0.534815
AUC ROC: 0.534815
AUC ROC: 0.534815








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.492, 338, 488], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.492, 338, 488], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.492, 338, 488], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.492, 338, 488], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [2.98e-08, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.0, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.485, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false,true': [0.004, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.887, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.485, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false,true': [0.004, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.887, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.485, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false,true': [0.004, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.887, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)'}, {'true': [0.485, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false,true': [0.004, 3, 0], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.887, 4, 1], 'false,false,true,false': [0.465, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, A)', 'true,false,true,true': 'samebib(H, I), venue(I, B)', 'true,false,true,false': 'author(J, G), venue(J, B)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.401, 31, 30], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [2.58e-08, 14, 0], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.393, 6, 4], 'false,true,false': [0.444, 32, 12], 'false,false': [0.415, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, A)', 'true,false,true,true': 'samebib(H, I), venue(I, B)', 'true,false,true,false': 'author(J, G), venue(J, B)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.401, 31, 30], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [2.58e-08, 14, 0], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.393, 6, 4], 'false,true,false': [0.444, 32, 12], 'false,false': [0.415, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, A)', 'true,false,true,true': 'samebib(H, I), venue(I, B)', 'true,false,true,false': 'author(J, G), venue(J, B)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.401, 31, 30], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [2.58e-08, 14, 0], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.393, 6, 4], 'false,true,false': [0.444, 32, 12], 'false,false': [0.415, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, A)', 'true,false,true,true': 'samebib(H, I), venue(I, B)', 'true,false,true,false': 'author(J, G), venue(J, B)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.401, 31, 30], 'true,false,true,true,true': [0.242, 1, 15], 'true,false,true,true,false': [2.58e-08, 14, 0], 'true,false,true,false,true': [0.258, 13, 1], 'true,false,true,false,false': [0.894, 1, 4], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.393, 6, 4], 'false,true,false': [0.444, 32, 12], 'false,false': [0.415, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.398, 31, 30], 'true,false,true': [0.408, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.911, 1, 4], 'false,true,true,false': [0.053, 5, 0], 'false,true,false,true': [0.026, 3, 0], 'false,true,false,false': [0.447, 29, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.398, 31, 30], 'true,false,true': [0.408, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.911, 1, 4], 'false,true,true,false': [0.053, 5, 0], 'false,true,false,true': [0.026, 3, 0], 'false,true,false,false': [0.447, 29, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.398, 31, 30], 'true,false,true': [0.408, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.911, 1, 4], 'false,true,true,false': [0.053, 5, 0], 'false,true,false,true': [0.026, 3, 0], 'false,true,false,false': [0.447, 29, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.398, 31, 30], 'true,false,true': [0.408, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true,true,true': [0.911, 1, 4], 'false,true,true,false': [0.053, 5, 0], 'false,true,false,true': [0.026, 3, 0], 'false,true,false,false': [0.447, 29, 12], 'false,false,true': [0.442, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true': [0.396, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.917, 1, 4], 'false,true,true,false': [0.047, 5, 0], 'false,true,false,true': [0.023, 3, 0], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.651, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true': [0.396, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.917, 1, 4], 'false,true,true,false': [0.047, 5, 0], 'false,true,false,true': [0.023, 3, 0], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.651, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true': [0.396, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.917, 1, 4], 'false,true,true,false': [0.047, 5, 0], 'false,true,false,true': [0.023, 3, 0], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.651, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true': [0.396, 31, 30], 'true,false': [0.482, 307, 468], 'false,true,true,true': [0.917, 1, 4], 'false,true,true,false': [0.047, 5, 0], 'false,true,false,true': [0.023, 3, 0], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.651, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.657, 4, 1], 'false,false,true,false,true': [0.911, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.657, 4, 1], 'false,false,true,false,true': [0.911, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.657, 4, 1], 'false,false,true,false,true': [0.911, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.476, 338, 498], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.657, 4, 1], 'false,false,true,false,true': [0.911, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.399, 31, 20], 'true,false,false,true': [0.402, 29, 20], 'true,false,false,false': [0.486, 278, 448], 'false,true,true': [0.273, 6, 2], 'false,true,false,true': [0.867, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true': [0.44, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.399, 31, 20], 'true,false,false,true': [0.402, 29, 20], 'true,false,false,false': [0.486, 278, 448], 'false,true,true': [0.273, 6, 2], 'false,true,false,true': [0.867, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true': [0.44, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.399, 31, 20], 'true,false,false,true': [0.402, 29, 20], 'true,false,false,false': [0.486, 278, 448], 'false,true,true': [0.273, 6, 2], 'false,true,false,true': [0.867, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true': [0.44, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.399, 31, 20], 'true,false,false,true': [0.402, 29, 20], 'true,false,false,false': [0.486, 278, 448], 'false,true,true': [0.273, 6, 2], 'false,true,false,true': [0.867, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true': [0.44, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.383, 31, 30], 'true,false,true,true': [0.397, 15, 15], 'true,false,true,false': [0.388, 14, 5], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.348, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false': [0.454, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.383, 31, 30], 'true,false,true,true': [0.397, 15, 15], 'true,false,true,false': [0.388, 14, 5], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.348, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false': [0.454, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.383, 31, 30], 'true,false,true,true': [0.397, 15, 15], 'true,false,true,false': [0.388, 14, 5], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.348, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false': [0.454, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,true': 'author(H, G), venue(H, B)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.383, 31, 30], 'true,false,true,true': [0.397, 15, 15], 'true,false,true,false': [0.388, 14, 5], 'true,false,false': [0.486, 278, 448], 'false,true,true': [0.348, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false': [0.454, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.597, 2, 2], 'false,true,true,false': [0.045, 4, 0], 'false,true,false,true': [0.863, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false,true': [0.905, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.597, 2, 2], 'false,true,true,false': [0.045, 4, 0], 'false,true,false,true': [0.863, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false,true': [0.905, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.597, 2, 2], 'false,true,true,false': [0.045, 4, 0], 'false,true,false,true': [0.863, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false,true': [0.905, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,true,false': 'author(L, J), venue(L, A)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.597, 2, 2], 'false,true,true,false': [0.045, 4, 0], 'false,true,false,true': [0.863, 3, 2], 'false,true,false,false': [0.446, 29, 12], 'false,false,true,true': [0.65, 4, 1], 'false,false,true,false,true': [0.905, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
{'': [0.24084270048762138, 0.18394619617433927], 'true': [-8.881784197001253e-17, 0.241755535882834], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'true': [-8.881784197001253e-17, 0.241755535882834], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'true': [-8.881784197001253e-17, 0.241755535882834], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'true': [-8.881784197001253e-17, 0.241755535882834], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24018510835254045, 0.18085131526571985], 'true': [0.23823223905844287, 0.23921082206036912], 'true,true': [8.881784197001253e-17, 0.2383698577470203], 'true,true,false': [0.24973985431841828, 0.1875], 'true,true,false,true': [0.05859375000000033, -1.4802973661668754e-17], 'true,true,false,false': [0.06222222222222219, 0.16], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.24018510835254045, 0.18085131526571985], 'true': [0.23823223905844287, 0.23921082206036912], 'true,true': [8.881784197001253e-17, 0.2383698577470203], 'true,true,false': [0.24973985431841828, 0.1875], 'true,true,false,true': [0.05859375000000033, -1.4802973661668754e-17], 'true,true,false,false': [0.06222222222222219, 0.16], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.24018510835254045, 0.18085131526571985], 'true': [0.23823223905844287, 0.23921082206036912], 'true,true': [8.881784197001253e-17, 0.2383698577470203], 'true,true,false': [0.24973985431841828, 0.1875], 'true,true,false,true': [0.05859375000000033, -1.4802973661668754e-17], 'true,true,false,false': [0.06222222222222219, 0.16], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.24018510835254045, 0.18085131526571985], 'true': [0.23823223905844287, 0.23921082206036912], 'true,true': [8.881784197001253e-17, 0.2383698577470203], 'true,true,false': [0.24973985431841828, 0.1875], 'true,true,false,true': [0.05859375000000033, -1.4802973661668754e-17], 'true,true,false,false': [0.06222222222222219, 0.16], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.23497079597789589, 0.18034572002594573], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,false': [6.209515191683372e-06, 0.20678725199432305], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'false,false': [0.21072360592200984, 0.155740227762389], 'false,false,true': [0.15721072864395264, 0.21596648969803078]}
{'': [0.23497079597789589, 0.18034572002594573], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,false': [6.209515191683372e-06, 0.20678725199432305], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'false,false': [0.21072360592200984, 0.155740227762389], 'false,false,true': [0.15721072864395264, 0.21596648969803078]}
{'': [0.23497079597789589, 0.18034572002594573], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,false': [6.209515191683372e-06, 0.20678725199432305], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'false,false': [0.21072360592200984, 0.155740227762389], 'false,false,true': [0.15721072864395264, 0.21596648969803078]}
{'': [0.23497079597789589, 0.18034572002594573], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,false': [6.209515191683372e-06, 0.20678725199432305], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'false,false': [0.21072360592200984, 0.155740227762389], 'false,false,true': [0.15721072864395264, 0.21596648969803078]}
{'': [0.23428561321148983, 0.17725396182340827], 'true': [0.16077292217845995, 0.23921082206034683], 'true,false': [0.241566014160766, 0.23629229940273583], 'true,false,true': [0.24999999999999967, 0.19390581717451527], 'true,false,true,true': [0.05859374999999961, 4.7580986769649563e-17], 'true,false,true,false': [0.06632653061224493, 0.16], 'false': [0.18952235610598184, 0.1725290252923059], 'false,true': [0.15431162684439712, 0.1967138020504153]}
{'': [0.23428561321148983, 0.17725396182340827], 'true': [0.16077292217845995, 0.23921082206034683], 'true,false': [0.241566014160766, 0.23629229940273583], 'true,false,true': [0.24999999999999967, 0.19390581717451527], 'true,false,true,true': [0.05859374999999961, 4.7580986769649563e-17], 'true,false,true,false': [0.06632653061224493, 0.16], 'false': [0.18952235610598184, 0.1725290252923059], 'false,true': [0.15431162684439712, 0.1967138020504153]}
{'': [0.23428561321148983, 0.17725396182340827], 'true': [0.16077292217845995, 0.23921082206034683], 'true,false': [0.241566014160766, 0.23629229940273583], 'true,false,true': [0.24999999999999967, 0.19390581717451527], 'true,false,true,true': [0.05859374999999961, 4.7580986769649563e-17], 'true,false,true,false': [0.06632653061224493, 0.16], 'false': [0.18952235610598184, 0.1725290252923059], 'false,true': [0.15431162684439712, 0.1967138020504153]}
{'': [0.23428561321148983, 0.17725396182340827], 'true': [0.16077292217845995, 0.23921082206034683], 'true,false': [0.241566014160766, 0.23629229940273583], 'true,false,true': [0.24999999999999967, 0.19390581717451527], 'true,false,true,true': [0.05859374999999961, 4.7580986769649563e-17], 'true,false,true,false': [0.06632653061224493, 0.16], 'false': [0.18952235610598184, 0.1725290252923059], 'false,true': [0.15431162684439712, 0.1967138020504153]}
{'': [0.22830056336788318, 0.1767552510744955], 'true': [0.1582747856688255, 0.23307042207598297], 'true,false': [0.1667233824505005, 0.2362922994027503], 'false': [0.20118044328021728, 0.16808403441837044], 'false,true': [0.23915774252120428, 0.1903524502275791], 'false,true,true': [0.16612519646500173, 0.0005647536688135335], 'false,true,false': [0.00022192615298142113, 0.19937110643156078], 'false,false': [0.19516155437761917, 0.15574022776238858]}
{'': [0.22830056336788318, 0.1767552510744955], 'true': [0.1582747856688255, 0.23307042207598297], 'true,false': [0.1667233824505005, 0.2362922994027503], 'false': [0.20118044328021728, 0.16808403441837044], 'false,true': [0.23915774252120428, 0.1903524502275791], 'false,true,true': [0.16612519646500173, 0.0005647536688135335], 'false,true,false': [0.00022192615298142113, 0.19937110643156078], 'false,false': [0.19516155437761917, 0.15574022776238858]}
{'': [0.22830056336788318, 0.1767552510744955], 'true': [0.1582747856688255, 0.23307042207598297], 'true,false': [0.1667233824505005, 0.2362922994027503], 'false': [0.20118044328021728, 0.16808403441837044], 'false,true': [0.23915774252120428, 0.1903524502275791], 'false,true,true': [0.16612519646500173, 0.0005647536688135335], 'false,true,false': [0.00022192615298142113, 0.19937110643156078], 'false,false': [0.19516155437761917, 0.15574022776238858]}
{'': [0.22830056336788318, 0.1767552510744955], 'true': [0.1582747856688255, 0.23307042207598297], 'true,false': [0.1667233824505005, 0.2362922994027503], 'false': [0.20118044328021728, 0.16808403441837044], 'false,true': [0.23915774252120428, 0.1903524502275791], 'false,true,true': [0.16612519646500173, 0.0005647536688135335], 'false,true,false': [0.00022192615298142113, 0.19937110643156078], 'false,false': [0.19516155437761917, 0.15574022776238858]}
{'': [0.22732244338235952, 0.17328084459440182], 'true': [0.15685702786934774, 0.2324652322794605], 'false': [0.18934343723044839, 0.16760939079204168], 'false,true': [0.18615145818366302, 0.18887523552124702], 'false,true,false': [0.0001746966476101295, 0.19914795194591134], 'false,true,true': [0.16804425218669064, 0.00043345160095915604], 'false,false': [0.19463063358616306, 0.155740227762389], 'false,false,true': [0.08487693304088205, 0.2068779179199887]}
{'': [0.22732244338235952, 0.17328084459440182], 'true': [0.15685702786934774, 0.2324652322794605], 'false': [0.18934343723044839, 0.16760939079204168], 'false,true': [0.18615145818366302, 0.18887523552124702], 'false,true,false': [0.0001746966476101295, 0.19914795194591134], 'false,true,true': [0.16804425218669064, 0.00043345160095915604], 'false,false': [0.19463063358616306, 0.155740227762389], 'false,false,true': [0.08487693304088205, 0.2068779179199887]}
{'': [0.22732244338235952, 0.17328084459440182], 'true': [0.15685702786934774, 0.2324652322794605], 'false': [0.18934343723044839, 0.16760939079204168], 'false,true': [0.18615145818366302, 0.18887523552124702], 'false,true,false': [0.0001746966476101295, 0.19914795194591134], 'false,true,true': [0.16804425218669064, 0.00043345160095915604], 'false,false': [0.19463063358616306, 0.155740227762389], 'false,false,true': [0.08487693304088205, 0.2068779179199887]}
{'': [0.22732244338235952, 0.17328084459440182], 'true': [0.15685702786934774, 0.2324652322794605], 'false': [0.18934343723044839, 0.16760939079204168], 'false,true': [0.18615145818366302, 0.18887523552124702], 'false,true,false': [0.0001746966476101295, 0.19914795194591134], 'false,true,true': [0.16804425218669064, 0.00043345160095915604], 'false,false': [0.19463063358616306, 0.155740227762389], 'false,false,true': [0.08487693304088205, 0.2068779179199887]}
{'': [0.22691117008748915, 0.17076685454163765], 'false': [0.18112560742143632, 0.16712617279455746], 'false,true': [0.14495152657538873, 0.1887836802882221], 'false,false': [0.1938844673863407, 0.1557402277623878], 'false,false,true': [0.08632603119777593, 0.2066654861717694], 'false,false,true,false': [0.16616368496802536, 0.21219135802469133], 'false,true,true': [0.16199735349449287, 4.364487292512764e-05]}
{'': [0.22691117008748915, 0.17076685454163765], 'false': [0.18112560742143632, 0.16712617279455746], 'false,true': [0.14495152657538873, 0.1887836802882221], 'false,false': [0.1938844673863407, 0.1557402277623878], 'false,false,true': [0.08632603119777593, 0.2066654861717694], 'false,false,true,false': [0.16616368496802536, 0.21219135802469133], 'false,true,true': [0.16199735349449287, 4.364487292512764e-05]}
{'': [0.22691117008748915, 0.17076685454163765], 'false': [0.18112560742143632, 0.16712617279455746], 'false,true': [0.14495152657538873, 0.1887836802882221], 'false,false': [0.1938844673863407, 0.1557402277623878], 'false,false,true': [0.08632603119777593, 0.2066654861717694], 'false,false,true,false': [0.16616368496802536, 0.21219135802469133], 'false,true,true': [0.16199735349449287, 4.364487292512764e-05]}
{'': [0.22691117008748915, 0.17076685454163765], 'false': [0.18112560742143632, 0.16712617279455746], 'false,true': [0.14495152657538873, 0.1887836802882221], 'false,false': [0.1938844673863407, 0.1557402277623878], 'false,false,true': [0.08632603119777593, 0.2066654861717694], 'false,false,true,false': [0.16616368496802536, 0.21219135802469133], 'false,true,true': [0.16199735349449287, 4.364487292512764e-05]}
{'': [0.22673735846671544, 0.16930113948806008], 'true': [0.0, 0.22845346226216043], 'true,false': [0.1593182687021066, 0.23234405199593833], 'true,false,false': [0.16167953399640633, 0.23629229940274274], 'false': [0.17620340288985098, 0.16690443666464216], 'false,true': [0.07427936611696083, 0.1935952200317727], 'false,true,false': [0.15025058239156797, 0.19876946217019067], 'false,false': [0.19363368075124843, 0.15574022776238827]}
{'': [0.22673735846671544, 0.16930113948806008], 'true': [0.0, 0.22845346226216043], 'true,false': [0.1593182687021066, 0.23234405199593833], 'true,false,false': [0.16167953399640633, 0.23629229940274274], 'false': [0.17620340288985098, 0.16690443666464216], 'false,true': [0.07427936611696083, 0.1935952200317727], 'false,true,false': [0.15025058239156797, 0.19876946217019067], 'false,false': [0.19363368075124843, 0.15574022776238827]}
{'': [0.22673735846671544, 0.16930113948806008], 'true': [0.0, 0.22845346226216043], 'true,false': [0.1593182687021066, 0.23234405199593833], 'true,false,false': [0.16167953399640633, 0.23629229940274274], 'false': [0.17620340288985098, 0.16690443666464216], 'false,true': [0.07427936611696083, 0.1935952200317727], 'false,true,false': [0.15025058239156797, 0.19876946217019067], 'false,false': [0.19363368075124843, 0.15574022776238827]}
{'': [0.22673735846671544, 0.16930113948806008], 'true': [0.0, 0.22845346226216043], 'true,false': [0.1593182687021066, 0.23234405199593833], 'true,false,false': [0.16167953399640633, 0.23629229940274274], 'false': [0.17620340288985098, 0.16690443666464216], 'false,true': [0.07427936611696083, 0.1935952200317727], 'false,true,false': [0.15025058239156797, 0.19876946217019067], 'false,false': [0.19363368075124843, 0.15574022776238827]}
{'': [0.22580136948770227, 0.16908820521796705], 'true': [0.14661471447606134, 0.23191239585861956], 'true,false': [0.16226293077951526, 0.23629229940274127], 'false': [0.17595047021785057, 0.16672989366127156], 'false,true': [0.12082728507922609, 0.18824627358899715], 'false,false': [0.1933668809895339, 0.15574022776238816], 'false,false,true': [0.08449155680265256, 0.20644932893136808], 'true,false,true': [0.1576602931748533, 0.15018170728274302]}
{'': [0.22580136948770227, 0.16908820521796705], 'true': [0.14661471447606134, 0.23191239585861956], 'true,false': [0.16226293077951526, 0.23629229940274127], 'false': [0.17595047021785057, 0.16672989366127156], 'false,true': [0.12082728507922609, 0.18824627358899715], 'false,false': [0.1933668809895339, 0.15574022776238816], 'false,false,true': [0.08449155680265256, 0.20644932893136808], 'true,false,true': [0.1576602931748533, 0.15018170728274302]}
{'': [0.22580136948770227, 0.16908820521796705], 'true': [0.14661471447606134, 0.23191239585861956], 'true,false': [0.16226293077951526, 0.23629229940274127], 'false': [0.17595047021785057, 0.16672989366127156], 'false,true': [0.12082728507922609, 0.18824627358899715], 'false,false': [0.1933668809895339, 0.15574022776238816], 'false,false,true': [0.08449155680265256, 0.20644932893136808], 'true,false,true': [0.1576602931748533, 0.15018170728274302]}
{'': [0.22580136948770227, 0.16908820521796705], 'true': [0.14661471447606134, 0.23191239585861956], 'true,false': [0.16226293077951526, 0.23629229940274127], 'false': [0.17595047021785057, 0.16672989366127156], 'false,true': [0.12082728507922609, 0.18824627358899715], 'false,false': [0.1933668809895339, 0.15574022776238816], 'false,false,true': [0.08449155680265256, 0.20644932893136808], 'true,false,true': [0.1576602931748533, 0.15018170728274302]}
{'': [0.22544047209262477, 0.16888750036330916], 'false': [0.17552252059731918, 0.16662109828652796], 'false,true': [0.07189045534622987, 0.1932967591534496], 'false,true,false': [0.14897071467009207, 0.19857862397635], 'false,false': [0.19321788126498182, 0.15574022776238836], 'false,false,true': [0.08438449532971423, 0.20636531276771264], 'false,false,true,false': [0.1637955790777051, 0.21219135802469125], 'false,true,true': [0.0892092888612524, 0.0005001494661681823]}
{'': [0.22544047209262477, 0.16888750036330916], 'false': [0.17552252059731918, 0.16662109828652796], 'false,true': [0.07189045534622987, 0.1932967591534496], 'false,true,false': [0.14897071467009207, 0.19857862397635], 'false,false': [0.19321788126498182, 0.15574022776238836], 'false,false,true': [0.08438449532971423, 0.20636531276771264], 'false,false,true,false': [0.1637955790777051, 0.21219135802469125], 'false,true,true': [0.0892092888612524, 0.0005001494661681823]}
{'': [0.22544047209262477, 0.16888750036330916], 'false': [0.17552252059731918, 0.16662109828652796], 'false,true': [0.07189045534622987, 0.1932967591534496], 'false,true,false': [0.14897071467009207, 0.19857862397635], 'false,false': [0.19321788126498182, 0.15574022776238836], 'false,false,true': [0.08438449532971423, 0.20636531276771264], 'false,false,true,false': [0.1637955790777051, 0.21219135802469125], 'false,true,true': [0.0892092888612524, 0.0005001494661681823]}
{'': [0.22544047209262477, 0.16888750036330916], 'false': [0.17552252059731918, 0.16662109828652796], 'false,true': [0.07189045534622987, 0.1932967591534496], 'false,true,false': [0.14897071467009207, 0.19857862397635], 'false,false': [0.19321788126498182, 0.15574022776238836], 'false,false,true': [0.08438449532971423, 0.20636531276771264], 'false,false,true,false': [0.1637955790777051, 0.21219135802469125], 'false,true,true': [0.0892092888612524, 0.0005001494661681823]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordauthor(D, C).;true;true', '0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true', '0;false,true;author(G, F), venue(G, B).;true;true', '0;false,true,true;samebib(G, H), venue(H, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,true;author(F, E), venue(F, B).;true;true', '2;false,true,true;samebib(F, G), venue(G, A).;true;true', '2;false,true,false;author(H, E), venue(H, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;true,false,true;author(H, G), venue(H, A).;true;true', '3;true,false,true,true;samebib(H, I), venue(I, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '4;false,true;author(J, I), venue(J, A).;true;true', '4;false,true,true;samebib(J, K), venue(K, B).;true;true', '4;false,true,false;author(L, I), venue(L, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;author(H, G), venue(H, A).;true;true', '5;false,true,true;samebib(H, I), venue(I, B).;true;true', '5;false,true,false;author(J, G), venue(J, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, B).;true;true', '6;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordauthor(D, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, A).;true;true', '9;false,true,true;author(G, E), venue(G, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordauthor(D, C).;true;true', '0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true', '0;false,true;author(G, F), venue(G, B).;true;true', '0;false,true,true;samebib(G, H), venue(H, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,true;author(F, E), venue(F, B).;true;true', '2;false,true,true;samebib(F, G), venue(G, A).;true;true', '2;false,true,false;author(H, E), venue(H, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;true,false,true;author(H, G), venue(H, A).;true;true', '3;true,false,true,true;samebib(H, I), venue(I, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '4;false,true;author(J, I), venue(J, A).;true;true', '4;false,true,true;samebib(J, K), venue(K, B).;true;true', '4;false,true,false;author(L, I), venue(L, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;author(H, G), venue(H, A).;true;true', '5;false,true,true;samebib(H, I), venue(I, B).;true;true', '5;false,true,false;author(J, G), venue(J, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, B).;true;true', '6;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordauthor(D, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, A).;true;true', '9;false,true,true;author(G, E), venue(G, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordauthor(D, C).;true;true', '0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true', '0;false,true;author(G, F), venue(G, B).;true;true', '0;false,true,true;samebib(G, H), venue(H, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,true;author(F, E), venue(F, B).;true;true', '2;false,true,true;samebib(F, G), venue(G, A).;true;true', '2;false,true,false;author(H, E), venue(H, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;true,false,true;author(H, G), venue(H, A).;true;true', '3;true,false,true,true;samebib(H, I), venue(I, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '4;false,true;author(J, I), venue(J, A).;true;true', '4;false,true,true;samebib(J, K), venue(K, B).;true;true', '4;false,true,false;author(L, I), venue(L, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;author(H, G), venue(H, A).;true;true', '5;false,true,true;samebib(H, I), venue(I, B).;true;true', '5;false,true,false;author(J, G), venue(J, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, B).;true;true', '6;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordauthor(D, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, A).;true;true', '9;false,true,true;author(G, E), venue(G, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordauthor(D, C).;true;true', '0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true', '0;false,true;author(G, F), venue(G, B).;true;true', '0;false,true,true;samebib(G, H), venue(H, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(F, C).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false,true;author(F, E), venue(F, B).;true;true', '2;false,true,true;samebib(F, G), venue(G, A).;true;true', '2;false,true,false;author(H, E), venue(H, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '3;true,false,true;author(H, G), venue(H, A).;true;true', '3;true,false,true,true;samebib(H, I), venue(I, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '4;false,true;author(J, I), venue(J, A).;true;true', '4;false,true,true;samebib(J, K), venue(K, B).;true;true', '4;false,true,false;author(L, I), venue(L, B).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;false,true;author(H, G), venue(H, A).;true;true', '5;false,true,true;samebib(H, I), venue(I, B).;true;true', '5;false,true,false;author(J, G), venue(J, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,true;author(F, E), venue(F, B).;true;true', '6;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordauthor(D, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;false,true;author(F, E), venue(F, A).;true;true', '9;false,true,true;author(G, E), venue(G, B).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then if ( author(K, J), venue(K, A) )
%   | | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | | else return 0.12130682983635446;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.47522882490667023;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.10113958930511996;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.28480456297261764;  // std dev = 0,434, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(L, I), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.28480456297261764;  // std dev = 0,434, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(L, I), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.28480456297261764;  // std dev = 0,434, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(L, I), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.28480456297261764;  // std dev = 0,434, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09446743783575551;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(L, I), venue(L, B) )
%   | | | | then return -0.0858400208221268;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.6427314077493017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4070543003046223;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else return 0.08837649359551082;  // std dev = 0,429, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.315460845979579;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16652143889048682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.13903411666506882;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.315460845979579;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16652143889048682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.13903411666506882;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.315460845979579;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16652143889048682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.13903411666506882;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.315460845979579;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6334785611095132;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16652143889048682;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.16652143889048682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.13903411666506882;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.033478561109513215;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1505517318412208;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026461017249864237;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17883538944475422;  // std dev = 0,411, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11653159440266288;  // std dev = 0,371, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26325217010008806;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6184253755481878;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1781230879172744;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.17122001484819868;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10511048432085755;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.11556543369589939;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17883538944475422;  // std dev = 0,411, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11653159440266288;  // std dev = 0,371, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26325217010008806;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6184253755481878;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1781230879172744;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.17122001484819868;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10511048432085755;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.11556543369589939;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17883538944475422;  // std dev = 0,411, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11653159440266288;  // std dev = 0,371, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26325217010008806;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6184253755481878;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1781230879172744;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.17122001484819868;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10511048432085755;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.11556543369589939;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.17883538944475422;  // std dev = 0,411, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11653159440266288;  // std dev = 0,371, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26325217010008806;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6184253755481878;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1781230879172744;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.17122001484819868;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10511048432085755;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.11556543369589939;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.022755960528074846;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13895267930572153;  // std dev = 0,359, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.15209533481291884;  // std dev = 0,406, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.1777332858566211;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5508381427148075;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20102841783823394;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.17743579589079733;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return -0.14827117046407923;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08859735721696145;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0418916930907602;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13895267930572153;  // std dev = 0,359, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.15209533481291884;  // std dev = 0,406, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.1777332858566211;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5508381427148075;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20102841783823394;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.17743579589079733;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return -0.14827117046407923;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08859735721696145;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0418916930907602;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13895267930572153;  // std dev = 0,359, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.15209533481291884;  // std dev = 0,406, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.1777332858566211;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5508381427148075;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20102841783823394;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.17743579589079733;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return -0.14827117046407923;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08859735721696145;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0418916930907602;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13895267930572153;  // std dev = 0,359, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.15209533481291884;  // std dev = 0,406, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else if ( author(I, G), venue(I, A) )
%   | | | | then return -0.1777332858566211;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5508381427148075;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20102841783823394;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.17743579589079733;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return -0.14827117046407923;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08859735721696145;  // std dev = 0,450, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0418916930907602;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14407750852611456;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.47047523866562607;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17802254297877843;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.13050551084007103;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -0.011045489139659947;  // std dev = 0,780, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08565128831534087;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0066143391956994145;  // std dev = 0,769, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10064354165466285;  // std dev = 0,459, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013428920141173382;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14407750852611456;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.47047523866562607;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17802254297877843;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.13050551084007103;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -0.011045489139659947;  // std dev = 0,780, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08565128831534087;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0066143391956994145;  // std dev = 0,769, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10064354165466285;  // std dev = 0,459, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013428920141173382;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14407750852611456;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.47047523866562607;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17802254297877843;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.13050551084007103;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -0.011045489139659947;  // std dev = 0,780, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08565128831534087;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0066143391956994145;  // std dev = 0,769, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10064354165466285;  // std dev = 0,459, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013428920141173382;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14407750852611456;  // std dev = 0,474, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.47047523866562607;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17802254297877843;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.13050551084007103;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | | then return -0.011045489139659947;  // std dev = 0,780, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.08565128831534087;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0066143391956994145;  // std dev = 0,769, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10064354165466285;  // std dev = 0,459, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.013428920141173382;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10885640085507571;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4797189541218952;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17207656726462034;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04924618600911894;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.30544839237456883;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.15498886112917498;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06076410250134586;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011442131553360668;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10885640085507571;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4797189541218952;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17207656726462034;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04924618600911894;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.30544839237456883;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.15498886112917498;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06076410250134586;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011442131553360668;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10885640085507571;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4797189541218952;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17207656726462034;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04924618600911894;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.30544839237456883;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.15498886112917498;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06076410250134586;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011442131553360668;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10885640085507571;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4797189541218952;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17207656726462034;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04924618600911894;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.30544839237456883;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.15498886112917498;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06076410250134586;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.011442131553360668;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.33988535129516023;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07904542236874926;  // std dev = 0,475, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then return 0.10944409529649028;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.17401060432278473;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05637188070074146;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -4.1710038396921835E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.026188320534776977;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.059508833010289655;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009735821407001646;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.33988535129516023;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07904542236874926;  // std dev = 0,475, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then return 0.10944409529649028;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.17401060432278473;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05637188070074146;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -4.1710038396921835E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.026188320534776977;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.059508833010289655;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009735821407001646;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.33988535129516023;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07904542236874926;  // std dev = 0,475, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then return 0.10944409529649028;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.17401060432278473;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05637188070074146;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -4.1710038396921835E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.026188320534776977;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.059508833010289655;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009735821407001646;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.33988535129516023;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07904542236874926;  // std dev = 0,475, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then return 0.10944409529649028;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.17401060432278473;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05637188070074146;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -4.1710038396921835E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(L, J), venue(L, A) )
%   | | | | then return 0.026188320534776977;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.059508833010289655;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.009735821407001646;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034864569628077394;  // std dev = 0,375, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -7.143904414268192E-4;  // std dev = 0,355, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06873046803208399;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08873050827239737;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.15039907515222062;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04613547862871042;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -3.595461785351889E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044971616204934714;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008274191340457874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034864569628077394;  // std dev = 0,375, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -7.143904414268192E-4;  // std dev = 0,355, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06873046803208399;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08873050827239737;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.15039907515222062;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04613547862871042;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -3.595461785351889E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044971616204934714;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008274191340457874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034864569628077394;  // std dev = 0,375, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -7.143904414268192E-4;  // std dev = 0,355, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06873046803208399;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08873050827239737;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.15039907515222062;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04613547862871042;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -3.595461785351889E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044971616204934714;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008274191340457874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.034864569628077394;  // std dev = 0,375, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -7.143904414268192E-4;  // std dev = 0,355, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06873046803208399;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.08873050827239737;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.15039907515222062;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04613547862871042;  // std dev = 0,445, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return -3.595461785351889E-4;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.044971616204934714;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.008274191340457874;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.04279648119713094;  // std dev = 0,383, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.0073895901799967065;  // std dev = 0,364, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.048462671008153255;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.01926757879357525;  // std dev = 0,296, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.0417379880835579;  // std dev = 0,655, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04662401982846976;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03798577410615474;  // std dev = 0,359, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.031073673473669634;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.007024919632312996;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.04279648119713094;  // std dev = 0,383, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.0073895901799967065;  // std dev = 0,364, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.048462671008153255;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.01926757879357525;  // std dev = 0,296, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.0417379880835579;  // std dev = 0,655, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04662401982846976;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03798577410615474;  // std dev = 0,359, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.031073673473669634;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.007024919632312996;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.04279648119713094;  // std dev = 0,383, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.0073895901799967065;  // std dev = 0,364, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.048462671008153255;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.01926757879357525;  // std dev = 0,296, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.0417379880835579;  // std dev = 0,655, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04662401982846976;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03798577410615474;  // std dev = 0,359, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.031073673473669634;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.007024919632312996;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.04279648119713094;  // std dev = 0,383, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.0073895901799967065;  // std dev = 0,364, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.048462671008153255;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.01926757879357525;  // std dev = 0,296, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.0417379880835579;  // std dev = 0,655, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04662401982846976;  // std dev = 0,454, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03798577410615474;  // std dev = 0,359, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.031073673473669634;  // std dev = 0,450, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.007024919632312996;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */








Results
Results
Results
Results
   AUC ROC   = 0.550513
   AUC ROC   = 0.550513
   AUC ROC   = 0.550513
   AUC ROC   = 0.550513
   AUC PR    = 0.569473
   AUC PR    = 0.569473
   AUC PR    = 0.569473
   AUC PR    = 0.569473
   CLL	      = -0.686457
   CLL	      = -0.686457
   CLL	      = -0.686457
   CLL	      = -0.686457
   Precision = 0.546986 at threshold = 0.5
   Precision = 0.546986 at threshold = 0.5
   Precision = 0.546986 at threshold = 0.5
   Precision = 0.546986 at threshold = 0.5
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   F1        = 0.690016
   F1        = 0.690016
   F1        = 0.690016
   F1        = 0.690016








Total learning time: 38.758 seconds
Total learning time: 38.758 seconds
Total learning time: 38.758 seconds
Total learning time: 38.758 seconds
Total inference time: 5.481 seconds
Total inference time: 5.481 seconds
Total inference time: 5.481 seconds
Total inference time: 5.481 seconds
AUC ROC: 0.550513
AUC ROC: 0.550513
AUC ROC: 0.550513
AUC ROC: 0.550513








Refined model AUC ROC: 0.550513
Refined model AUC ROC: 0.550513
Refined model AUC ROC: 0.550513
Refined model AUC ROC: 0.550513








Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 08:45:06
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 08:45:06
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 08:45:06
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 08:45:06
{'AUC ROC': 0.550513, 'AUC PR': 0.569473, 'CLL': -0.686457, 'Precision': [0.546986, 0.5], 'Recall': 0.934333, 'F1': 0.690016, 'Learning time': 77.423, 'Inference time': 5.481, 'Mapping results': {'Knowledge compiling time': 0.17785286903381348, 'Generating paths time': 4.61385178565979, 'Generating mappings time': 0.06388044357299805, 'Possible mappings': 6, 'Finding best mapping': 0.0006680488586425781, 'Total time': 4.8562610149383545}, 'Parameter Learning results': {'AUC ROC': 0.534815, 'AUC PR': 0.544945, 'CLL': -0.687545, 'Precision': [0.546159, 0.5], 'Recall': 0.94244, 'F1': 0.691553, 'Learning time': 38.665, 'Inference time': 4.427}}
{'AUC ROC': 0.550513, 'AUC PR': 0.569473, 'CLL': -0.686457, 'Precision': [0.546986, 0.5], 'Recall': 0.934333, 'F1': 0.690016, 'Learning time': 77.423, 'Inference time': 5.481, 'Mapping results': {'Knowledge compiling time': 0.17785286903381348, 'Generating paths time': 4.61385178565979, 'Generating mappings time': 0.06388044357299805, 'Possible mappings': 6, 'Finding best mapping': 0.0006680488586425781, 'Total time': 4.8562610149383545}, 'Parameter Learning results': {'AUC ROC': 0.534815, 'AUC PR': 0.544945, 'CLL': -0.687545, 'Precision': [0.546159, 0.5], 'Recall': 0.94244, 'F1': 0.691553, 'Learning time': 38.665, 'Inference time': 4.427}}
{'AUC ROC': 0.550513, 'AUC PR': 0.569473, 'CLL': -0.686457, 'Precision': [0.546986, 0.5], 'Recall': 0.934333, 'F1': 0.690016, 'Learning time': 77.423, 'Inference time': 5.481, 'Mapping results': {'Knowledge compiling time': 0.17785286903381348, 'Generating paths time': 4.61385178565979, 'Generating mappings time': 0.06388044357299805, 'Possible mappings': 6, 'Finding best mapping': 0.0006680488586425781, 'Total time': 4.8562610149383545}, 'Parameter Learning results': {'AUC ROC': 0.534815, 'AUC PR': 0.544945, 'CLL': -0.687545, 'Precision': [0.546159, 0.5], 'Recall': 0.94244, 'F1': 0.691553, 'Learning time': 38.665, 'Inference time': 4.427}}
{'AUC ROC': 0.550513, 'AUC PR': 0.569473, 'CLL': -0.686457, 'Precision': [0.546986, 0.5], 'Recall': 0.934333, 'F1': 0.690016, 'Learning time': 77.423, 'Inference time': 5.481, 'Mapping results': {'Knowledge compiling time': 0.17785286903381348, 'Generating paths time': 4.61385178565979, 'Generating mappings time': 0.06388044357299805, 'Possible mappings': 6, 'Finding best mapping': 0.0006680488586425781, 'Total time': 4.8562610149383545}, 'Parameter Learning results': {'AUC ROC': 0.534815, 'AUC PR': 0.544945, 'CLL': -0.687545, 'Precision': [0.546159, 0.5], 'Recall': 0.94244, 'F1': 0.691553, 'Learning time': 38.665, 'Inference time': 4.427}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14762261931003867;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.13983265210690626;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.13289744006524093;  // std dev = 0,446, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.1403601988702876;  // std dev = 0,453, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.13983265210690626;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.13289744006524093;  // std dev = 0,446, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.1403601988702876;  // std dev = 0,453, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.13983265210690626;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.13289744006524093;  // std dev = 0,446, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.1403601988702876;  // std dev = 0,453, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.793500681226427;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.13983265210690626;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.13289744006524093;  // std dev = 0,446, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.1403601988702876;  // std dev = 0,453, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31748647896746773;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5328153220107837;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14076463719572965;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539184923605375;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0192883291427964;  // std dev = 0,808, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1326049384601464;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31748647896746773;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5328153220107837;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14076463719572965;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539184923605375;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0192883291427964;  // std dev = 0,808, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1326049384601464;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31748647896746773;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5328153220107837;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14076463719572965;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539184923605375;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0192883291427964;  // std dev = 0,808, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1326049384601464;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31748647896746773;  // std dev = 0,485, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5328153220107837;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14076463719572965;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09539184923605375;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0192883291427964;  // std dev = 0,808, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1326049384601464;  // std dev = 0,460, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5585230613875635;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5902839837234113;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3398766550427529;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.27242013613837757;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.45278398372341105;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09681338466565978;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.26986387353057645;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0932733640221617;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.0532792333063386;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5585230613875635;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5902839837234113;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3398766550427529;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.27242013613837757;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.45278398372341105;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09681338466565978;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.26986387353057645;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0932733640221617;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.0532792333063386;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5585230613875635;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5902839837234113;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3398766550427529;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.27242013613837757;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.45278398372341105;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09681338466565978;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.26986387353057645;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0932733640221617;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.0532792333063386;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5585230613875635;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5902839837234113;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3398766550427529;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.27242013613837757;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.45278398372341105;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09681338466565978;  // std dev = 0,412, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.26986387353057645;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0932733640221617;  // std dev = 0,443, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.0532792333063386;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.16124430360645522;  // std dev = 0,393, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.07798681328425996;  // std dev = 0,387, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1960014125406659;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.1354066579117553;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0718027784539773;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0022489618735527573;  // std dev = 0,802, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.14868875951262533;  // std dev = 1,004, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08904849301808053;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.026636397780163763;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.16124430360645522;  // std dev = 0,393, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.07798681328425996;  // std dev = 0,387, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1960014125406659;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.1354066579117553;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0718027784539773;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0022489618735527573;  // std dev = 0,802, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.14868875951262533;  // std dev = 1,004, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08904849301808053;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.026636397780163763;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.16124430360645522;  // std dev = 0,393, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.07798681328425996;  // std dev = 0,387, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1960014125406659;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.1354066579117553;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0718027784539773;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0022489618735527573;  // std dev = 0,802, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.14868875951262533;  // std dev = 1,004, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08904849301808053;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.026636397780163763;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.16124430360645522;  // std dev = 0,393, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.07798681328425996;  // std dev = 0,387, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1960014125406659;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.1354066579117553;  // std dev = 0,388, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0718027784539773;  // std dev = 0,444, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0022489618735527573;  // std dev = 0,802, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.14868875951262533;  // std dev = 1,004, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08904849301808053;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.026636397780163763;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3970851478988613;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3072059485910382;  // std dev = 0,118, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21542171733413354;  // std dev = 0,286, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.35309870154994677;  // std dev = 0,275, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1513922193117917;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.0626990254732644;  // std dev = 0,441, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.012229126919409295;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08988677367564507;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.022909693917055572;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3970851478988613;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3072059485910382;  // std dev = 0,118, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21542171733413354;  // std dev = 0,286, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.35309870154994677;  // std dev = 0,275, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1513922193117917;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.0626990254732644;  // std dev = 0,441, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.012229126919409295;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08988677367564507;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.022909693917055572;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3970851478988613;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3072059485910382;  // std dev = 0,118, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21542171733413354;  // std dev = 0,286, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.35309870154994677;  // std dev = 0,275, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1513922193117917;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.0626990254732644;  // std dev = 0,441, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.012229126919409295;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08988677367564507;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.022909693917055572;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3970851478988613;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3072059485910382;  // std dev = 0,118, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21542171733413354;  // std dev = 0,286, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.35309870154994677;  // std dev = 0,275, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1513922193117917;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return 0.0626990254732644;  // std dev = 0,441, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.012229126919409295;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08988677367564507;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.022909693917055572;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3248260327136712;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.0682658694264067;  // std dev = 0,394, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08641032546357802;  // std dev = 0,379, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11214634542571851;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.05596583216653532;  // std dev = 0,433, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.4130713018609342;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.18410553530724721;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04796086434673184;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01965155176389813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3248260327136712;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.0682658694264067;  // std dev = 0,394, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08641032546357802;  // std dev = 0,379, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11214634542571851;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.05596583216653532;  // std dev = 0,433, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.4130713018609342;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.18410553530724721;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04796086434673184;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01965155176389813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3248260327136712;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.0682658694264067;  // std dev = 0,394, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08641032546357802;  // std dev = 0,379, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11214634542571851;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.05596583216653532;  // std dev = 0,433, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.4130713018609342;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.18410553530724721;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04796086434673184;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01965155176389813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3248260327136712;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.0682658694264067;  // std dev = 0,394, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.08641032546357802;  // std dev = 0,379, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.11214634542571851;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.05596583216653532;  // std dev = 0,433, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.4130713018609342;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.18410553530724721;  // std dev = 0,039, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04796086434673184;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01965155176389813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08163988609699144;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33976116130356365;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16076624857326488;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035976700144784705;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020276968772810995;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.059940669859844184;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05326452062770889;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016817632634004813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08163988609699144;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33976116130356365;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16076624857326488;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035976700144784705;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020276968772810995;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.059940669859844184;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05326452062770889;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016817632634004813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08163988609699144;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33976116130356365;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16076624857326488;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035976700144784705;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020276968772810995;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.059940669859844184;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05326452062770889;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016817632634004813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08163988609699144;  // std dev = 0,472, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33976116130356365;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16076624857326488;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.035976700144784705;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.020276968772810995;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.059940669859844184;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05326452062770889;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016817632634004813;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009636031648937025;  // std dev = 0,329, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.006533858922942361;  // std dev = 0,398, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07226433875241613;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.006149889728337996;  // std dev = 0,271, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.041693305864936615;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.016975251281388926;  // std dev = 0,714, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.047481369487665695;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04308478129588714;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014363569182753822;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009636031648937025;  // std dev = 0,329, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.006533858922942361;  // std dev = 0,398, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07226433875241613;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.006149889728337996;  // std dev = 0,271, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.041693305864936615;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.016975251281388926;  // std dev = 0,714, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.047481369487665695;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04308478129588714;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014363569182753822;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009636031648937025;  // std dev = 0,329, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.006533858922942361;  // std dev = 0,398, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07226433875241613;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.006149889728337996;  // std dev = 0,271, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.041693305864936615;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.016975251281388926;  // std dev = 0,714, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.047481369487665695;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04308478129588714;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014363569182753822;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.009636031648937025;  // std dev = 0,329, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.006533858922942361;  // std dev = 0,398, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07226433875241613;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.006149889728337996;  // std dev = 0,271, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.041693305864936615;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.016975251281388926;  // std dev = 0,714, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.047481369487665695;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.04308478129588714;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014363569182753822;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24488644116751596;  // std dev = 0,103, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.26133093059941725;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.27997300876120684;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.24797195311750214;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.16476651954870974;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.05065060311117858;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.02803157081449464;  // std dev = 0,427, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.02965198817056633;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012246493501622723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24488644116751596;  // std dev = 0,103, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.26133093059941725;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.27997300876120684;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.24797195311750214;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.16476651954870974;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.05065060311117858;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.02803157081449464;  // std dev = 0,427, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.02965198817056633;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012246493501622723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24488644116751596;  // std dev = 0,103, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.26133093059941725;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.27997300876120684;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.24797195311750214;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.16476651954870974;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.05065060311117858;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.02803157081449464;  // std dev = 0,427, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.02965198817056633;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012246493501622723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24488644116751596;  // std dev = 0,103, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.26133093059941725;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.27997300876120684;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.24797195311750214;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.16476651954870974;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.05065060311117858;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.02803157081449464;  // std dev = 0,427, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.02965198817056633;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012246493501622723;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */








Results
Results
Results
Results
   AUC ROC   = 0.547949
   AUC ROC   = 0.547949
   AUC ROC   = 0.547949
   AUC ROC   = 0.547949
   AUC PR    = 0.564015
   AUC PR    = 0.564015
   AUC PR    = 0.564015
   AUC PR    = 0.564015
   CLL	      = -0.686906
   CLL	      = -0.686906
   CLL	      = -0.686906
   CLL	      = -0.686906
   Precision = 0.546288 at threshold = 0.5
   Precision = 0.546288 at threshold = 0.5
   Precision = 0.546288 at threshold = 0.5
   Precision = 0.546288 at threshold = 0.5
   Recall    = 0.94244
   Recall    = 0.94244
   Recall    = 0.94244
   Recall    = 0.94244
   F1        = 0.691656
   F1        = 0.691656
   F1        = 0.691656
   F1        = 0.691656








Total learning time: 40.953 seconds
Total learning time: 40.953 seconds
Total learning time: 40.953 seconds
Total learning time: 40.953 seconds
Total inference time: 5.729 seconds
Total inference time: 5.729 seconds
Total inference time: 5.729 seconds
Total inference time: 5.729 seconds
AUC ROC: 0.547949
AUC ROC: 0.547949
AUC ROC: 0.547949
AUC ROC: 0.547949








Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 08:45:53
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 08:45:53
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 08:45:53
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 08:45:53
{'AUC ROC': 0.547949, 'AUC PR': 0.564015, 'CLL': -0.686906, 'Precision': [0.546288, 0.5], 'Recall': 0.94244, 'F1': 0.691656, 'Learning time': 40.953, 'Inference time': 5.729}
{'AUC ROC': 0.547949, 'AUC PR': 0.564015, 'CLL': -0.686906, 'Precision': [0.546288, 0.5], 'Recall': 0.94244, 'F1': 0.691656, 'Learning time': 40.953, 'Inference time': 5.729}
{'AUC ROC': 0.547949, 'AUC PR': 0.564015, 'CLL': -0.686906, 'Precision': [0.546288, 0.5], 'Recall': 0.94244, 'F1': 0.691656, 'Learning time': 40.953, 'Inference time': 5.729}
{'AUC ROC': 0.547949, 'AUC PR': 0.564015, 'CLL': -0.686906, 'Precision': [0.546288, 0.5], 'Recall': 0.94244, 'F1': 0.691656, 'Learning time': 40.953, 'Inference time': 5.729}








Starting experiment #5 for imdb->cora

Starting experiment #5 for imdb->cora

Starting experiment #5 for imdb->cora

Starting experiment #5 for imdb->cora

Starting experiment #5 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048796;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839202;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360678;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1015963294878365;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.092691276189261;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926053;  // std dev = 1,26e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333704;  // std dev = 8,30e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420308;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202611;  // std dev = 8,02e-08, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */










Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.077647442708178;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658954356402108;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658954356402108;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658954356402108;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658954356402108;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06658954356402108;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024435446902836548;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864353045829635;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024435446902836548;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864353045829635;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024435446902836548;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864353045829635;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024435446902836548;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864353045829635;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.024435446902836548;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05864353045829635;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020870535970208985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04808879427696834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020870535970208985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04808879427696834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020870535970208985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04808879427696834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020870535970208985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04808879427696834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020870535970208985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04808879427696834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017896303068645435;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.017781111618972934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04178738984397578;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017896303068645435;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.017781111618972934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04178738984397578;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017896303068645435;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.017781111618972934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04178738984397578;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017896303068645435;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.017781111618972934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04178738984397578;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.017896303068645435;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.017781111618972934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04178738984397578;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.032722526157945624;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.032722526157945624;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.032722526157945624;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.032722526157945624;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.032722526157945624;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01023539634465932;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010134202971999972;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029371544802697207;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01023539634465932;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010134202971999972;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029371544802697207;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01023539634465932;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010134202971999972;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029371544802697207;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01023539634465932;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010134202971999972;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029371544802697207;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01023539634465932;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010134202971999972;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.029371544802697207;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008570491236975808;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02341926339025583;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008570491236975808;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02341926339025583;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008570491236975808;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02341926339025583;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008570491236975808;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02341926339025583;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008570491236975808;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02341926339025583;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.548236
   AUC ROC   = 0.548236
   AUC ROC   = 0.548236
   AUC ROC   = 0.548236
   AUC ROC   = 0.548236
   AUC PR    = 0.553547
   AUC PR    = 0.553547
   AUC PR    = 0.553547
   AUC PR    = 0.553547
   AUC PR    = 0.553547
   CLL	      = -0.684587
   CLL	      = -0.684587
   CLL	      = -0.684587
   CLL	      = -0.684587
   CLL	      = -0.684587
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506










Total learning time: 16.748 seconds
Total learning time: 16.748 seconds
Total learning time: 16.748 seconds
Total learning time: 16.748 seconds
Total learning time: 16.748 seconds
Total inference time: 1.856 seconds
Total inference time: 1.856 seconds
Total inference time: 1.856 seconds
Total inference time: 1.856 seconds
Total inference time: 1.856 seconds
AUC ROC: 0.548236
AUC ROC: 0.548236
AUC ROC: 0.548236
AUC ROC: 0.548236
AUC ROC: 0.548236










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.43, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 299, 346], 'false': [0.428, 69, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.431, 61, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 299, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.429, 65, 21]}]
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358248, 0.1833111943002062], 'false': [0.16000000000000003, 0.18455922120064933], 'false,false': [0.16000000000000003, 0.18594726413656407]}
{'': [0.2486725557358284, 0.18325925266268636], 'false': [0.16, 0.18453014273253798]}
{'': [0.2486725557358284, 0.18325925266268636], 'false': [0.16, 0.18453014273253798]}
{'': [0.2486725557358284, 0.18325925266268636], 'false': [0.16, 0.18453014273253798]}
{'': [0.2486725557358284, 0.18325925266268636], 'false': [0.16, 0.18453014273253798]}
{'': [0.2486725557358284, 0.18325925266268636], 'false': [0.16, 0.18453014273253798]}
{'': [0.24867255573583463, 0.18323728482352436], 'false': [0.16000000000000003, 0.18450715697588813]}
{'': [0.24867255573583463, 0.18323728482352436], 'false': [0.16000000000000003, 0.18450715697588813]}
{'': [0.24867255573583463, 0.18323728482352436], 'false': [0.16000000000000003, 0.18450715697588813]}
{'': [0.24867255573583463, 0.18323728482352436], 'false': [0.16000000000000003, 0.18450715697588813]}
{'': [0.24867255573583463, 0.18323728482352436], 'false': [0.16000000000000003, 0.18450715697588813]}
{'': [0.24867255573583355, 0.1832140145252642], 'false': [0.15999999999999998, 0.1845048009099089]}
{'': [0.24867255573583355, 0.1832140145252642], 'false': [0.15999999999999998, 0.1845048009099089]}
{'': [0.24867255573583355, 0.1832140145252642], 'false': [0.15999999999999998, 0.1845048009099089]}
{'': [0.24867255573583355, 0.1832140145252642], 'false': [0.15999999999999998, 0.1845048009099089]}
{'': [0.24867255573583355, 0.1832140145252642], 'false': [0.15999999999999998, 0.1845048009099089]}
{'': [0.24867255573582772, 0.1831958594818643], 'false': [0.16000000000000003, 0.18448645145673348], 'false,false': [0.15999999999999998, 0.18594726413656512]}
{'': [0.24867255573582772, 0.1831958594818643], 'false': [0.16000000000000003, 0.18448645145673348], 'false,false': [0.15999999999999998, 0.18594726413656512]}
{'': [0.24867255573582772, 0.1831958594818643], 'false': [0.16000000000000003, 0.18448645145673348], 'false,false': [0.15999999999999998, 0.18594726413656512]}
{'': [0.24867255573582772, 0.1831958594818643], 'false': [0.16000000000000003, 0.18448645145673348], 'false,false': [0.15999999999999998, 0.18594726413656512]}
{'': [0.24867255573582772, 0.1831958594818643], 'false': [0.16000000000000003, 0.18448645145673348], 'false,false': [0.15999999999999998, 0.18594726413656512]}
{'': [0.2486725557358371, 0.18316561992432184], 'false': [0.16, 0.18447175314996803]}
{'': [0.2486725557358371, 0.18316561992432184], 'false': [0.16, 0.18447175314996803]}
{'': [0.2486725557358371, 0.18316561992432184], 'false': [0.16, 0.18447175314996803]}
{'': [0.2486725557358371, 0.18316561992432184], 'false': [0.16, 0.18447175314996803]}
{'': [0.2486725557358371, 0.18316561992432184], 'false': [0.16, 0.18447175314996803]}
{'': [0.24867255573583077, 0.18315201713296236], 'false': [0.16000000000000006, 0.1844702601460207], 'false,false': [0.15999999999999998, 0.18594726413656498]}
{'': [0.24867255573583077, 0.18315201713296236], 'false': [0.16000000000000006, 0.1844702601460207], 'false,false': [0.15999999999999998, 0.18594726413656498]}
{'': [0.24867255573583077, 0.18315201713296236], 'false': [0.16000000000000006, 0.1844702601460207], 'false,false': [0.15999999999999998, 0.18594726413656498]}
{'': [0.24867255573583077, 0.18315201713296236], 'false': [0.16000000000000006, 0.1844702601460207], 'false,false': [0.15999999999999998, 0.18594726413656498]}
{'': [0.24867255573583077, 0.18315201713296236], 'false': [0.16000000000000006, 0.1844702601460207], 'false,false': [0.15999999999999998, 0.18594726413656498]}
{'': [0.24867255573583177, 0.18313396980337765]}
{'': [0.24867255573583177, 0.18313396980337765]}
{'': [0.24867255573583177, 0.18313396980337765]}
{'': [0.24867255573583177, 0.18313396980337765]}
{'': [0.24867255573583177, 0.18313396980337765]}
{'': [0.2486725557358347, 0.1831319251954499], 'false': [0.16000000000000003, 0.1844589673445375], 'false,false': [0.16000000000000003, 0.18594726413656495]}
{'': [0.2486725557358347, 0.1831319251954499], 'false': [0.16000000000000003, 0.1844589673445375], 'false,false': [0.16000000000000003, 0.18594726413656495]}
{'': [0.2486725557358347, 0.1831319251954499], 'false': [0.16000000000000003, 0.1844589673445375], 'false,false': [0.16000000000000003, 0.18594726413656495]}
{'': [0.2486725557358347, 0.1831319251954499], 'false': [0.16000000000000003, 0.1844589673445375], 'false,false': [0.16000000000000003, 0.18594726413656495]}
{'': [0.2486725557358347, 0.1831319251954499], 'false': [0.16000000000000003, 0.1844589673445375], 'false,false': [0.16000000000000003, 0.18594726413656495]}
{'': [0.24867255573583247, 0.1831200789840403], 'false': [0.16, 0.18445215500536902]}
{'': [0.24867255573583247, 0.1831200789840403], 'false': [0.16, 0.18445215500536902]}
{'': [0.24867255573583247, 0.1831200789840403], 'false': [0.16, 0.18445215500536902]}
{'': [0.24867255573583247, 0.1831200789840403], 'false': [0.16, 0.18445215500536902]}
{'': [0.24867255573583247, 0.1831200789840403], 'false': [0.16, 0.18445215500536902]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10506251534642576;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0894101543557324;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07970306894913542;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07970306894913542;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07970306894913542;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07970306894913542;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039220673625764826;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04434629760466851;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07970306894913542;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06657093501067567;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06657093501067567;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06657093501067567;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06657093501067567;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.033857994073919914;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06657093501067567;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02920618910653251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058332026677695735;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02920618910653251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058332026677695735;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02920618910653251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058332026677695735;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02920618910653251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058332026677695735;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02920618910653251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.02911417704831525;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058332026677695735;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09602167640503911;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13279788923758715;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.025030056589034726;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04924362444730967;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09602167640503911;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13279788923758715;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.025030056589034726;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04924362444730967;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09602167640503911;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13279788923758715;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.025030056589034726;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04924362444730967;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09602167640503911;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13279788923758715;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.025030056589034726;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04924362444730967;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09602167640503911;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13279788923758715;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.025030056589034726;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.024949557355918122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04924362444730967;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019979466202664;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02138738635615727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.041317352469835034;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019979466202664;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02138738635615727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.041317352469835034;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019979466202664;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02138738635615727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.041317352469835034;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019979466202664;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02138738635615727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.041317352469835034;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019979466202664;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.021317388189925606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02138738635615727;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.041317352469835034;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.048025075624059665;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07567696935817704;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.018167495615339934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03354173532330953;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.048025075624059665;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07567696935817704;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.018167495615339934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03354173532330953;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.048025075624059665;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07567696935817704;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.018167495615339934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03354173532330953;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.048025075624059665;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07567696935817704;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.018167495615339934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03354173532330953;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.048025075624059665;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07567696935817704;  // std dev = 0,499, 639,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.018167495615339934;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03354173532330953;  // std dev = 0,429, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27807695146398426;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.21389563080047364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.056941213477262394;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.015449088925247146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.013186005496389753;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028821323255725347;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27807695146398426;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.21389563080047364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.056941213477262394;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.015449088925247146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.013186005496389753;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028821323255725347;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27807695146398426;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.21389563080047364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.056941213477262394;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.015449088925247146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.013186005496389753;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028821323255725347;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27807695146398426;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.21389563080047364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.056941213477262394;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.015449088925247146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.013186005496389753;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028821323255725347;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.27807695146398426;  // std dev = 0,875, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.21389563080047364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.056941213477262394;  // std dev = 0,499, 637,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=342 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.015449088925247146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.013186005496389753;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028821323255725347;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248049477078588;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011174582347325745;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013112787340830146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02386656573696555;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248049477078588;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011174582347325745;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013112787340830146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02386656573696555;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248049477078588;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011174582347325745;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013112787340830146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02386656573696555;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248049477078588;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011174582347325745;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013112787340830146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02386656573696555;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248049477078588;  // std dev = 0,498, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011174582347325745;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.013112787340830146;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02386656573696555;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.549421
   AUC ROC   = 0.549421
   AUC ROC   = 0.549421
   AUC ROC   = 0.549421
   AUC ROC   = 0.549421
   AUC PR    = 0.551891
   AUC PR    = 0.551891
   AUC PR    = 0.551891
   AUC PR    = 0.551891
   AUC PR    = 0.551891
   CLL	      = -0.684937
   CLL	      = -0.684937
   CLL	      = -0.684937
   CLL	      = -0.684937
   CLL	      = -0.684937
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Precision = 0.555682 at threshold = 0.5
   Recall    = 0.921102
   Recall    = 0.921102
   Recall    = 0.921102
   Recall    = 0.921102
   Recall    = 0.921102
   F1        = 0.693182
   F1        = 0.693182
   F1        = 0.693182
   F1        = 0.693182
   F1        = 0.693182










Total learning time: 10.744 seconds
Total learning time: 10.744 seconds
Total learning time: 10.744 seconds
Total learning time: 10.744 seconds
Total learning time: 10.744 seconds
Total inference time: 2.328 seconds
Total inference time: 2.328 seconds
Total inference time: 2.328 seconds
Total inference time: 2.328 seconds
Total inference time: 2.328 seconds
AUC ROC: 0.549421
AUC ROC: 0.549421
AUC ROC: 0.549421
AUC ROC: 0.549421
AUC ROC: 0.549421










Refined model AUC ROC: 0.549421
Refined model AUC ROC: 0.549421
Refined model AUC ROC: 0.549421
Refined model AUC ROC: 0.549421
Refined model AUC ROC: 0.549421










Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 11:01:30
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 11:01:30
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 11:01:30
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 11:01:30
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 11:01:30
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684937, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 27.492, 'Inference time': 2.328, 'Mapping results': {'Knowledge compiling time': 0.11702871322631836, 'Generating paths time': 4.668476819992065, 'Generating mappings time': 0.07156634330749512, 'Possible mappings': 6, 'Finding best mapping': 0.0006589889526367188, 'Total time': 4.857738256454468}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684587, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 16.748, 'Inference time': 1.856}}
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684937, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 27.492, 'Inference time': 2.328, 'Mapping results': {'Knowledge compiling time': 0.11702871322631836, 'Generating paths time': 4.668476819992065, 'Generating mappings time': 0.07156634330749512, 'Possible mappings': 6, 'Finding best mapping': 0.0006589889526367188, 'Total time': 4.857738256454468}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684587, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 16.748, 'Inference time': 1.856}}
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684937, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 27.492, 'Inference time': 2.328, 'Mapping results': {'Knowledge compiling time': 0.11702871322631836, 'Generating paths time': 4.668476819992065, 'Generating mappings time': 0.07156634330749512, 'Possible mappings': 6, 'Finding best mapping': 0.0006589889526367188, 'Total time': 4.857738256454468}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684587, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 16.748, 'Inference time': 1.856}}
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684937, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 27.492, 'Inference time': 2.328, 'Mapping results': {'Knowledge compiling time': 0.11702871322631836, 'Generating paths time': 4.668476819992065, 'Generating mappings time': 0.07156634330749512, 'Possible mappings': 6, 'Finding best mapping': 0.0006589889526367188, 'Total time': 4.857738256454468}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684587, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 16.748, 'Inference time': 1.856}}
{'AUC ROC': 0.549421, 'AUC PR': 0.551891, 'CLL': -0.684937, 'Precision': [0.555682, 0.5], 'Recall': 0.921102, 'F1': 0.693182, 'Learning time': 27.492, 'Inference time': 2.328, 'Mapping results': {'Knowledge compiling time': 0.11702871322631836, 'Generating paths time': 4.668476819992065, 'Generating mappings time': 0.07156634330749512, 'Possible mappings': 6, 'Finding best mapping': 0.0006589889526367188, 'Total time': 4.857738256454468}, 'Parameter Learning results': {'AUC ROC': 0.548236, 'AUC PR': 0.553547, 'CLL': -0.684587, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 16.748, 'Inference time': 1.856}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39458304362663954;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.09990717685775369;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33947617938092345;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.04554685776346183;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09246043801037607;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07554638061753094;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07554638061753094;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07554638061753094;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07554638061753094;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2802583062308098;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.07554638061753094;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06922489683195897;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06922489683195897;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06922489683195897;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06922489683195897;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22333763087938152;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.029062788118686716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06922489683195897;  // std dev = 0,431, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02490460312015568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05690794883051563;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02490460312015568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05690794883051563;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02490460312015568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05690794883051563;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02490460312015568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05690794883051563;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.173429025724928;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02490460312015568;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05690794883051563;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04661900982170855;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04661900982170855;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04661900982170855;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04661900982170855;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13245578493216797;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.04661900982170855;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03919404911060015;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03919404911060015;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03919404911060015;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03919404911060015;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10019999885599243;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03919404911060015;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03279018492390676;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03279018492390676;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03279018492390676;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03279018492390676;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07541982156306583;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.03279018492390676;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0032020841962852485;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02872131671532834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0032020841962852485;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02872131671532834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0032020841962852485;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02872131671532834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0032020841962852485;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02872131671532834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056633161624363104;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0032020841962852485;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02872131671532834;  // std dev = 0,430, 86,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022665872995959062;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022665872995959062;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022665872995959062;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022665872995959062;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04248557482169636;  // std dev = 0,499, 645,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=346 */
%   else return 0.022665872995959062;  // std dev = 0,428, 91,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.548235
   AUC ROC   = 0.548235
   AUC ROC   = 0.548235
   AUC ROC   = 0.548235
   AUC ROC   = 0.548235
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   AUC PR    = 0.553546
   CLL	      = -0.684491
   CLL	      = -0.684491
   CLL	      = -0.684491
   CLL	      = -0.684491
   CLL	      = -0.684491
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Precision = 0.5543 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506
   F1        = 0.698506










Total learning time: 12.034 seconds
Total learning time: 12.034 seconds
Total learning time: 12.034 seconds
Total learning time: 12.034 seconds
Total learning time: 12.034 seconds
Total inference time: 1.843 seconds
Total inference time: 1.843 seconds
Total inference time: 1.843 seconds
Total inference time: 1.843 seconds
Total inference time: 1.843 seconds
AUC ROC: 0.548235
AUC ROC: 0.548235
AUC ROC: 0.548235
AUC ROC: 0.548235
AUC ROC: 0.548235










Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 11:01:44
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 11:01:44
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 11:01:44
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 11:01:44
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 11:01:44
{'AUC ROC': 0.548235, 'AUC PR': 0.553546, 'CLL': -0.684491, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.034, 'Inference time': 1.843}
{'AUC ROC': 0.548235, 'AUC PR': 0.553546, 'CLL': -0.684491, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.034, 'Inference time': 1.843}
{'AUC ROC': 0.548235, 'AUC PR': 0.553546, 'CLL': -0.684491, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.034, 'Inference time': 1.843}
{'AUC ROC': 0.548235, 'AUC PR': 0.553546, 'CLL': -0.684491, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.034, 'Inference time': 1.843}
{'AUC ROC': 0.548235, 'AUC PR': 0.553546, 'CLL': -0.684491, 'Precision': [0.5543, 0.5], 'Recall': 0.94413, 'F1': 0.698506, 'Learning time': 12.034, 'Inference time': 1.843}










Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.4113806961560762;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.24275721437469627;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.35167424158599353;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6050844093968237;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0615822572698429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.19491559060317623;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1859190941124251;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.35167424158599353;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6050844093968237;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0615822572698429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.19491559060317623;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1859190941124251;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.35167424158599353;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6050844093968237;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0615822572698429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.19491559060317623;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1859190941124251;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.35167424158599353;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6050844093968237;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0615822572698429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.19491559060317623;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1859190941124251;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.35167424158599353;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6050844093968237;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.0615822572698429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.19491559060317623;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.1859190941124251;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26457935651512227;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4556551581166697;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.0468382488648205;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14929186535425937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14075120581955494;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26457935651512227;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4556551581166697;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.0468382488648205;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14929186535425937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14075120581955494;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26457935651512227;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4556551581166697;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.0468382488648205;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14929186535425937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14075120581955494;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26457935651512227;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4556551581166697;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.0468382488648205;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14929186535425937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14075120581955494;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.26457935651512227;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4556551581166697;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, B) )
%   | | | | then return -0.0468382488648205;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.14929186535425937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.14075120581955494;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692414775647485;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692414775647485;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692414775647485;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692414775647485;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692414775647485;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.17238793762104776;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3229110047999572;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.045380839459201225;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.06109532097014166;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1397247500765783;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07914591083570795;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.17238793762104776;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3229110047999572;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.045380839459201225;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.06109532097014166;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1397247500765783;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07914591083570795;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.17238793762104776;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3229110047999572;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.045380839459201225;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.06109532097014166;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1397247500765783;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07914591083570795;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.17238793762104776;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3229110047999572;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.045380839459201225;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.06109532097014166;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1397247500765783;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07914591083570795;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.17238793762104776;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3229110047999572;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.045380839459201225;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.06109532097014166;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1397247500765783;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07914591083570795;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060312140744534046;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060312140744534046;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060312140744534046;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060312140744534046;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060312140744534046;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04533670903704606;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04533670903704606;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04533670903704606;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04533670903704606;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04533670903704606;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.44001
   AUC ROC   = 0.44001
   AUC ROC   = 0.44001
   AUC ROC   = 0.44001
   AUC ROC   = 0.44001
   AUC PR    = 0.450416
   AUC PR    = 0.450416
   AUC PR    = 0.450416
   AUC PR    = 0.450416
   AUC PR    = 0.450416
   CLL	      = -0.712953
   CLL	      = -0.712953
   CLL	      = -0.712953
   CLL	      = -0.712953
   CLL	      = -0.712953
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956










Total learning time: 40.758 seconds
Total learning time: 40.758 seconds
Total learning time: 40.758 seconds
Total learning time: 40.758 seconds
Total learning time: 40.758 seconds
Total inference time: 4.335 seconds
Total inference time: 4.335 seconds
Total inference time: 4.335 seconds
Total inference time: 4.335 seconds
Total inference time: 4.335 seconds
AUC ROC: 0.44001
AUC ROC: 0.44001
AUC ROC: 0.44001
AUC ROC: 0.44001
AUC ROC: 0.44001










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.433, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,true,false,false': 'author(H, E), venue(H, A)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,true,false,false': 'author(H, E), venue(H, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'true,true,false,false': 'author(I, E), venue(I, B)'}, {'true,true,true,true': [0.431, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false,true': [0.816, 2, 1], 'true,true,false,false,false': [0.894, 4, 1], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24306651325712475, 0.2222222222222224], 'true': [0.22558593749999972, 0.2433778622826241], 'true,true': [0.12749999999999978, 0.22222222222222224], 'true,true,false': [0.25, 0.18750000000000003], 'true,true,false,false': [0.2222222222222222, 0.16], 'true,true,true': [0.1874999999999999, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.22405148754455845, 0.24249762535936123], 'true,true': [0.12696571382641714, 0.22444586266221456], 'true,true,false': [0.25, 0.18749999999999997], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18592283778406316, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.22405148754455845, 0.24249762535936123], 'true,true': [0.12696571382641714, 0.22444586266221456], 'true,true,false': [0.25, 0.18749999999999997], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18592283778406316, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.22405148754455845, 0.24249762535936123], 'true,true': [0.12696571382641714, 0.22444586266221456], 'true,true,false': [0.25, 0.18749999999999997], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18592283778406316, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.22405148754455845, 0.24249762535936123], 'true,true': [0.12696571382641714, 0.22444586266221456], 'true,true,false': [0.25, 0.18749999999999997], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18592283778406316, 0.0]}
{'': [0.24217598513094632, 0.22222222222222243], 'true': [0.22405148754455845, 0.24249762535936123], 'true,true': [0.12696571382641714, 0.22444586266221456], 'true,true,false': [0.25, 0.18749999999999997], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18592283778406316, 0.0]}
{'': [0.24125476088767736, 0.2222222222222221], 'true': [0.1908537237129407, 0.2424800504998834], 'true,true': [0.1203056527299784, 0.21659307880112785], 'true,true,false': [0.25, 0.18579350759859076], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18590543643356114, 0.0]}
{'': [0.24125476088767736, 0.2222222222222221], 'true': [0.1908537237129407, 0.2424800504998834], 'true,true': [0.1203056527299784, 0.21659307880112785], 'true,true,false': [0.25, 0.18579350759859076], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18590543643356114, 0.0]}
{'': [0.24125476088767736, 0.2222222222222221], 'true': [0.1908537237129407, 0.2424800504998834], 'true,true': [0.1203056527299784, 0.21659307880112785], 'true,true,false': [0.25, 0.18579350759859076], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18590543643356114, 0.0]}
{'': [0.24125476088767736, 0.2222222222222221], 'true': [0.1908537237129407, 0.2424800504998834], 'true,true': [0.1203056527299784, 0.21659307880112785], 'true,true,false': [0.25, 0.18579350759859076], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18590543643356114, 0.0]}
{'': [0.24125476088767736, 0.2222222222222221], 'true': [0.1908537237129407, 0.2424800504998834], 'true,true': [0.1203056527299784, 0.21659307880112785], 'true,true,false': [0.25, 0.18579350759859076], 'true,true,false,false': [0.2222222222222222, 0.15999999999999998], 'true,true,true': [0.18590543643356114, 0.0]}
{'': [0.24075055997658049, 0.22222222222222207]}
{'': [0.24075055997658049, 0.22222222222222207]}
{'': [0.24075055997658049, 0.22222222222222207]}
{'': [0.24075055997658049, 0.22222222222222207]}
{'': [0.24075055997658049, 0.22222222222222207]}
{'': [0.24075436057618843, 0.2222222222222223], 'true': [0.17243843558617442, 0.24247483406099227], 'true,true': [0.11701231982039825, 0.21190323934200792], 'true,true,false': [0.25000000000000006, 0.1847823771899593], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.1859576555328186, -2.7755575615628914e-17]}
{'': [0.24075436057618843, 0.2222222222222223], 'true': [0.17243843558617442, 0.24247483406099227], 'true,true': [0.11701231982039825, 0.21190323934200792], 'true,true,false': [0.25000000000000006, 0.1847823771899593], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.1859576555328186, -2.7755575615628914e-17]}
{'': [0.24075436057618843, 0.2222222222222223], 'true': [0.17243843558617442, 0.24247483406099227], 'true,true': [0.11701231982039825, 0.21190323934200792], 'true,true,false': [0.25000000000000006, 0.1847823771899593], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.1859576555328186, -2.7755575615628914e-17]}
{'': [0.24075436057618843, 0.2222222222222223], 'true': [0.17243843558617442, 0.24247483406099227], 'true,true': [0.11701231982039825, 0.21190323934200792], 'true,true,false': [0.25000000000000006, 0.1847823771899593], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.1859576555328186, -2.7755575615628914e-17]}
{'': [0.24075436057618843, 0.2222222222222223], 'true': [0.17243843558617442, 0.24247483406099227], 'true,true': [0.11701231982039825, 0.21190323934200792], 'true,true,false': [0.25000000000000006, 0.1847823771899593], 'true,true,false,false': [0.22222222222222224, 0.16000000000000003], 'true,true,true': [0.1859576555328186, -2.7755575615628914e-17]}
{'': [0.24049663968778837, 0.22222222222222213]}
{'': [0.24049663968778837, 0.22222222222222213]}
{'': [0.24049663968778837, 0.22222222222222213]}
{'': [0.24049663968778837, 0.22222222222222213]}
{'': [0.24049663968778837, 0.22222222222222213]}
{'': [0.24050817631292287, 0.22222222222222218]}
{'': [0.24050817631292287, 0.22222222222222218]}
{'': [0.24050817631292287, 0.22222222222222218]}
{'': [0.24050817631292287, 0.22222222222222218]}
{'': [0.24050817631292287, 0.22222222222222218]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, B).;true;true', '4;true,true,true;author(G, E), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, A).;true;true', '7;true,true,true;author(G, E), venue(G, B).;true;true']
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, B).;true;true', '4;true,true,true;author(G, E), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, A).;true;true', '7;true,true,true;author(G, E), venue(G, B).;true;true']
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, B).;true;true', '4;true,true,true;author(G, E), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, A).;true;true', '7;true,true,true;author(G, E), venue(G, B).;true;true']
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, B).;true;true', '4;true,true,true;author(G, E), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, A).;true;true', '7;true,true,true;author(G, E), venue(G, B).;true;true']
['3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;true,true;author(F, E), venue(F, A).;true;true', '3;true,true,true;author(G, E), venue(G, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, B).;true;true', '4;true,true,true;author(G, E), venue(G, A).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;true,true;author(F, E), venue(F, A).;true;true', '5;true,true,true;author(G, E), venue(G, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;true,true;author(F, E), venue(F, A).;true;true', '7;true,true,true;author(G, E), venue(G, B).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5113806961560762;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.3886534234288035;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5113806961560762;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.3886534234288035;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5113806961560762;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.3886534234288035;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5113806961560762;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.3886534234288035;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5113806961560762;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1613806961560762;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0886193038439238;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.3886534234288035;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.6613806961560762;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return -0.005285970510590469;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1386193038439238;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24085089483156946;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3911372910500538;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06922705809632365;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.26670875581883335;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.5394360285461061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.014268426506890234;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1190649068264431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1850100456069885;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3911372910500538;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06922705809632365;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.26670875581883335;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.5394360285461061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.014268426506890234;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1190649068264431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1850100456069885;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3911372910500538;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06922705809632365;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.26670875581883335;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.5394360285461061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.014268426506890234;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1190649068264431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1850100456069885;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3911372910500538;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06922705809632365;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.26670875581883335;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.5394360285461061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.014268426506890234;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1190649068264431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1850100456069885;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3911372910500538;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12435450053203612;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06922705809632365;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( author(L, J), venue(L, B) )
%   | | | | then return 0.26670875581883335;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.5394360285461061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, B) )
%   | | | | then return 0.014268426506890234;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.1190649068264431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1850100456069885;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2944962086092251;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05442191579320075;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1997162836071131;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.4053879051599005;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return 0.01119587079888181;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09373770188963056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1400688970131685;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2944962086092251;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05442191579320075;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1997162836071131;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.4053879051599005;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return 0.01119587079888181;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09373770188963056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1400688970131685;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2944962086092251;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05442191579320075;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1997162836071131;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.4053879051599005;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return 0.01119587079888181;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09373770188963056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1400688970131685;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2944962086092251;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05442191579320075;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1997162836071131;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.4053879051599005;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return 0.01119587079888181;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09373770188963056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1400688970131685;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2944962086092251;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09476951054259186;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05442191579320075;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then if ( author(L, J), venue(L, A) )
%   | | | | then return 0.1997162836071131;  // std dev = 0,445, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | | else return 0.4053879051599005;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else if ( author(M, J), venue(M, A) )
%   | | | | then return 0.01119587079888181;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.09373770188963056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1400688970131685;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16876695151967622;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3125009889151036;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.00874623295300403;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0746738147717009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10606925798611352;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16876695151967622;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3125009889151036;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.00874623295300403;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0746738147717009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10606925798611352;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16876695151967622;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3125009889151036;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.00874623295300403;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0746738147717009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10606925798611352;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16876695151967622;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3125009889151036;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.00874623295300403;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0746738147717009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10606925798611352;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16876695151967622;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3125009889151036;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07173867115753339;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return 0.00874623295300403;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.0746738147717009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10606925798611352;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.12181784740280482;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31390427924615055;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.054089942201490646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0654572616915427;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07947828076919669;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.12181784740280482;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31390427924615055;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.054089942201490646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0654572616915427;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07947828076919669;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.12181784740280482;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31390427924615055;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.054089942201490646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0654572616915427;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07947828076919669;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.12181784740280482;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31390427924615055;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.054089942201490646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0654572616915427;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07947828076919669;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.12181784740280482;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.31390427924615055;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.054089942201490646;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0654572616915427;  // std dev = 0,431, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07947828076919669;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10912579720056492;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.23497452550526626;  // std dev = 1,29e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04068977054036836;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.010886350633651879;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07563203495227018;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059639463278387386;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10912579720056492;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.23497452550526626;  // std dev = 1,29e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04068977054036836;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.010886350633651879;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07563203495227018;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059639463278387386;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10912579720056492;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.23497452550526626;  // std dev = 1,29e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04068977054036836;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.010886350633651879;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07563203495227018;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059639463278387386;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10912579720056492;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.23497452550526626;  // std dev = 1,29e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04068977054036836;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.010886350633651879;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07563203495227018;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059639463278387386;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.10912579720056492;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.23497452550526626;  // std dev = 1,29e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04068977054036836;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(H, E), venue(H, A) )
%   | | | | then return -0.010886350633651879;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07563203495227018;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.059639463278387386;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556700416218605;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556700416218605;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556700416218605;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556700416218605;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556700416218605;  // std dev = 0,489, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.440927
   AUC ROC   = 0.440927
   AUC ROC   = 0.440927
   AUC ROC   = 0.440927
   AUC ROC   = 0.440927
   AUC PR    = 0.452939
   AUC PR    = 0.452939
   AUC PR    = 0.452939
   AUC PR    = 0.452939
   AUC PR    = 0.452939
   CLL	      = -0.715811
   CLL	      = -0.715811
   CLL	      = -0.715811
   CLL	      = -0.715811
   CLL	      = -0.715811
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Precision = 0.506016 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956
   F1        = 0.665956










Total learning time: 38.464 seconds
Total learning time: 38.464 seconds
Total learning time: 38.464 seconds
Total learning time: 38.464 seconds
Total learning time: 38.464 seconds
Total inference time: 6.173 seconds
Total inference time: 6.173 seconds
Total inference time: 6.173 seconds
Total inference time: 6.173 seconds
Total inference time: 6.173 seconds
AUC ROC: 0.440927
AUC ROC: 0.440927
AUC ROC: 0.440927
AUC ROC: 0.440927
AUC ROC: 0.440927










Refined model AUC ROC: 0.440927
Refined model AUC ROC: 0.440927
Refined model AUC ROC: 0.440927
Refined model AUC ROC: 0.440927
Refined model AUC ROC: 0.440927










Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 11:03:20
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 11:03:20
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 11:03:20
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 11:03:20
Dataset: imdb->cora, Fold: 2, Type: transfer, Time: 11:03:20
{'AUC ROC': 0.440927, 'AUC PR': 0.452939, 'CLL': -0.715811, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 79.22200000000001, 'Inference time': 6.173, 'Mapping results': {'Knowledge compiling time': 0.17423248291015625, 'Generating paths time': 4.6968042850494385, 'Generating mappings time': 0.06533384323120117, 'Possible mappings': 6, 'Finding best mapping': 0.0006747245788574219, 'Total time': 4.9370551109313965}, 'Parameter Learning results': {'AUC ROC': 0.44001, 'AUC PR': 0.450416, 'CLL': -0.712953, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.758, 'Inference time': 4.335}}
{'AUC ROC': 0.440927, 'AUC PR': 0.452939, 'CLL': -0.715811, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 79.22200000000001, 'Inference time': 6.173, 'Mapping results': {'Knowledge compiling time': 0.17423248291015625, 'Generating paths time': 4.6968042850494385, 'Generating mappings time': 0.06533384323120117, 'Possible mappings': 6, 'Finding best mapping': 0.0006747245788574219, 'Total time': 4.9370551109313965}, 'Parameter Learning results': {'AUC ROC': 0.44001, 'AUC PR': 0.450416, 'CLL': -0.712953, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.758, 'Inference time': 4.335}}
{'AUC ROC': 0.440927, 'AUC PR': 0.452939, 'CLL': -0.715811, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 79.22200000000001, 'Inference time': 6.173, 'Mapping results': {'Knowledge compiling time': 0.17423248291015625, 'Generating paths time': 4.6968042850494385, 'Generating mappings time': 0.06533384323120117, 'Possible mappings': 6, 'Finding best mapping': 0.0006747245788574219, 'Total time': 4.9370551109313965}, 'Parameter Learning results': {'AUC ROC': 0.44001, 'AUC PR': 0.450416, 'CLL': -0.712953, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.758, 'Inference time': 4.335}}
{'AUC ROC': 0.440927, 'AUC PR': 0.452939, 'CLL': -0.715811, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 79.22200000000001, 'Inference time': 6.173, 'Mapping results': {'Knowledge compiling time': 0.17423248291015625, 'Generating paths time': 4.6968042850494385, 'Generating mappings time': 0.06533384323120117, 'Possible mappings': 6, 'Finding best mapping': 0.0006747245788574219, 'Total time': 4.9370551109313965}, 'Parameter Learning results': {'AUC ROC': 0.44001, 'AUC PR': 0.450416, 'CLL': -0.712953, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.758, 'Inference time': 4.335}}
{'AUC ROC': 0.440927, 'AUC PR': 0.452939, 'CLL': -0.715811, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 79.22200000000001, 'Inference time': 6.173, 'Mapping results': {'Knowledge compiling time': 0.17423248291015625, 'Generating paths time': 4.6968042850494385, 'Generating mappings time': 0.06533384323120117, 'Possible mappings': 6, 'Finding best mapping': 0.0006747245788574219, 'Total time': 4.9370551109313965}, 'Parameter Learning results': {'AUC ROC': 0.44001, 'AUC PR': 0.450416, 'CLL': -0.712953, 'Precision': [0.506016, 0.5], 'Recall': 0.973731, 'F1': 0.665956, 'Learning time': 40.758, 'Inference time': 4.335}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return 0.060399196272816126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07293413706051721;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return 0.060399196272816126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07293413706051721;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return 0.060399196272816126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07293413706051721;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return 0.060399196272816126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07293413706051721;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.477065862939483;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7270658629394829;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.22706586293948283;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return 0.060399196272816126;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.07293413706051721;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.30844238115809663;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5098687984399439;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.0048625889163390985;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13819592224967242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.43983430278942165;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.04825059353496982;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05870299482689312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24127427642582866;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5098687984399439;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.0048625889163390985;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13819592224967242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.43983430278942165;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.04825059353496982;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05870299482689312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24127427642582866;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5098687984399439;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.0048625889163390985;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13819592224967242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.43983430278942165;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.04825059353496982;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05870299482689312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24127427642582866;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5098687984399439;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.0048625889163390985;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13819592224967242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.43983430278942165;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.04825059353496982;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05870299482689312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24127427642582866;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5098687984399439;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17977123601689993;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(G, E), venue(G, B) )
%   | | | | then return -0.0048625889163390985;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13819592224967242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.43983430278942165;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.04825059353496982;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.05870299482689312;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.24127427642582866;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1877366061622929;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1877366061622929;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1877366061622929;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1877366061622929;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1877366061622929;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.3413349391911905;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09512976213047619;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16198471475143092;  // std dev = 0,909, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14937138608137984;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2850559838663887;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.0021695110842074503;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.08420722140347983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1397587715278121;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.3413349391911905;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09512976213047619;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16198471475143092;  // std dev = 0,909, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14937138608137984;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2850559838663887;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.0021695110842074503;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.08420722140347983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1397587715278121;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.3413349391911905;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09512976213047619;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16198471475143092;  // std dev = 0,909, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14937138608137984;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2850559838663887;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.0021695110842074503;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.08420722140347983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1397587715278121;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.3413349391911905;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09512976213047619;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16198471475143092;  // std dev = 0,909, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14937138608137984;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2850559838663887;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.0021695110842074503;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.08420722140347983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1397587715278121;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.3413349391911905;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09512976213047619;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16198471475143092;  // std dev = 0,909, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14937138608137984;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2850559838663887;  // std dev = 0,355, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.0021695110842074503;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.08420722140347983;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1397587715278121;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697978410395612;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798642660531537;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697978410395612;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798642660531537;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697978410395612;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798642660531537;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697978410395612;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798642660531537;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10697978410395612;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11798642660531537;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13028291029333505;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3835337510474833;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.04564836109693028;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.034046225063094814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13979787200141897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07918553976418335;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08898638610366577;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13028291029333505;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3835337510474833;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.04564836109693028;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.034046225063094814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13979787200141897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07918553976418335;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08898638610366577;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13028291029333505;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3835337510474833;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.04564836109693028;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.034046225063094814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13979787200141897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07918553976418335;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08898638610366577;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13028291029333505;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3835337510474833;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.04564836109693028;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.034046225063094814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13979787200141897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07918553976418335;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08898638610366577;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13028291029333505;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3835337510474833;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.04564836109693028;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.034046225063094814;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.13979787200141897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07918553976418335;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.08898638610366577;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.17915815649487488;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03430973337299981;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.14923134529923557;  // std dev = 0,921, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10917203286308715;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1741965026972224;  // std dev = 0,356, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.04434732556223164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.105396768240634;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058584658577788044;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07991756585046547;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.17915815649487488;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03430973337299981;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.14923134529923557;  // std dev = 0,921, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10917203286308715;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1741965026972224;  // std dev = 0,356, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.04434732556223164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.105396768240634;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058584658577788044;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07991756585046547;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.17915815649487488;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03430973337299981;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.14923134529923557;  // std dev = 0,921, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10917203286308715;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1741965026972224;  // std dev = 0,356, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.04434732556223164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.105396768240634;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058584658577788044;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07991756585046547;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.17915815649487488;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03430973337299981;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.14923134529923557;  // std dev = 0,921, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10917203286308715;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1741965026972224;  // std dev = 0,356, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.04434732556223164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.105396768240634;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058584658577788044;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07991756585046547;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.17915815649487488;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03430973337299981;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.14923134529923557;  // std dev = 0,921, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10917203286308715;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1741965026972224;  // std dev = 0,356, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return -0.04434732556223164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | | else return -0.105396768240634;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058584658577788044;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.07991756585046547;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556391778483133;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04962320397130989;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556391778483133;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04962320397130989;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556391778483133;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04962320397130989;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556391778483133;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04962320397130989;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04556391778483133;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04962320397130989;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.452771
   AUC ROC   = 0.452771
   AUC ROC   = 0.452771
   AUC ROC   = 0.452771
   AUC ROC   = 0.452771
   AUC PR    = 0.458395
   AUC PR    = 0.458395
   AUC PR    = 0.458395
   AUC PR    = 0.458395
   AUC PR    = 0.458395
   CLL	      = -0.713605
   CLL	      = -0.713605
   CLL	      = -0.713605
   CLL	      = -0.713605
   CLL	      = -0.713605
   Precision = 0.506139 at threshold = 0.5
   Precision = 0.506139 at threshold = 0.5
   Precision = 0.506139 at threshold = 0.5
   Precision = 0.506139 at threshold = 0.5
   Precision = 0.506139 at threshold = 0.5
   Recall    = 0.972841
   Recall    = 0.972841
   Recall    = 0.972841
   Recall    = 0.972841
   Recall    = 0.972841
   F1        = 0.665854
   F1        = 0.665854
   F1        = 0.665854
   F1        = 0.665854
   F1        = 0.665854










Total learning time: 71.174 seconds
Total learning time: 71.174 seconds
Total learning time: 71.174 seconds
Total learning time: 71.174 seconds
Total learning time: 71.174 seconds
Total inference time: 4.913 seconds
Total inference time: 4.913 seconds
Total inference time: 4.913 seconds
Total inference time: 4.913 seconds
Total inference time: 4.913 seconds
AUC ROC: 0.452771
AUC ROC: 0.452771
AUC ROC: 0.452771
AUC ROC: 0.452771
AUC ROC: 0.452771










Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 11:04:37
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 11:04:37
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 11:04:37
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 11:04:37
Dataset: imdb->cora, Fold: 2, Type: scratch, Time: 11:04:37
{'AUC ROC': 0.452771, 'AUC PR': 0.458395, 'CLL': -0.713605, 'Precision': [0.506139, 0.5], 'Recall': 0.972841, 'F1': 0.665854, 'Learning time': 71.174, 'Inference time': 4.913}
{'AUC ROC': 0.452771, 'AUC PR': 0.458395, 'CLL': -0.713605, 'Precision': [0.506139, 0.5], 'Recall': 0.972841, 'F1': 0.665854, 'Learning time': 71.174, 'Inference time': 4.913}
{'AUC ROC': 0.452771, 'AUC PR': 0.458395, 'CLL': -0.713605, 'Precision': [0.506139, 0.5], 'Recall': 0.972841, 'F1': 0.665854, 'Learning time': 71.174, 'Inference time': 4.913}
{'AUC ROC': 0.452771, 'AUC PR': 0.458395, 'CLL': -0.713605, 'Precision': [0.506139, 0.5], 'Recall': 0.972841, 'F1': 0.665854, 'Learning time': 71.174, 'Inference time': 4.913}
{'AUC ROC': 0.452771, 'AUC PR': 0.458395, 'CLL': -0.713605, 'Precision': [0.506139, 0.5], 'Recall': 0.972841, 'F1': 0.665854, 'Learning time': 71.174, 'Inference time': 4.913}










Starting fold 3

Starting fold 3

Starting fold 3

Starting fold 3

Starting fold 3

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33855929786304956;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.09445603404407159;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.0816422760632369;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.0816422760632369;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.0816422760632369;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.0816422760632369;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27955096678201014;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.0816422760632369;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02717728668680578;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07308855710353757;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02717728668680578;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07308855710353757;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02717728668680578;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07308855710353757;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02717728668680578;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07308855710353757;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22283287082222875;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02717728668680578;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07308855710353757;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17308711765866602;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03534677705281713;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092421790580385;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17308711765866602;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03534677705281713;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092421790580385;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17308711765866602;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03534677705281713;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092421790580385;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17308711765866602;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03534677705281713;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092421790580385;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17308711765866602;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03534677705281713;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.06092421790580385;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222945351850615;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02991618771700634;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051336439927646894;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222945351850615;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02991618771700634;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051336439927646894;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222945351850615;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02991618771700634;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051336439927646894;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222945351850615;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02991618771700634;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051336439927646894;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13222945351850615;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02991618771700634;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.051336439927646894;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005000102774762;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0063264710311934065;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025226655564677597;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.045913407852967575;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005000102774762;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0063264710311934065;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025226655564677597;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.045913407852967575;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005000102774762;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0063264710311934065;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025226655564677597;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.045913407852967575;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005000102774762;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0063264710311934065;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025226655564677597;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.045913407852967575;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10005000102774762;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0063264710311934065;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.025226655564677597;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.045913407852967575;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0487301659008087;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.02753564846515856;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07862331892781692;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.005336588362896438;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.037051730363700006;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0487301659008087;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.02753564846515856;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07862331892781692;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.005336588362896438;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.037051730363700006;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0487301659008087;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.02753564846515856;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07862331892781692;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.005336588362896438;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.037051730363700006;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0487301659008087;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.02753564846515856;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07862331892781692;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.005336588362896438;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.037051730363700006;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.0487301659008087;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.02753564846515856;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07862331892781692;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.005336588362896438;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.037051730363700006;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.007873057765266374;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05904906286624093;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.030697649977778043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.007873057765266374;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05904906286624093;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.030697649977778043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.007873057765266374;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05904906286624093;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.030697649977778043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.007873057765266374;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05904906286624093;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.030697649977778043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return -0.007873057765266374;  // std dev = 0,477, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05904906286624093;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else return 0.030697649977778043;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0424015571833822;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.010103782007150033;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024896948153316927;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0424015571833822;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.010103782007150033;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024896948153316927;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0424015571833822;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.010103782007150033;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024896948153316927;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0424015571833822;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.010103782007150033;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024896948153316927;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0424015571833822;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.010103782007150033;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024896948153316927;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.54787
   AUC ROC   = 0.54787
   AUC ROC   = 0.54787
   AUC ROC   = 0.54787
   AUC ROC   = 0.54787
   AUC PR    = 0.555879
   AUC PR    = 0.555879
   AUC PR    = 0.555879
   AUC PR    = 0.555879
   AUC PR    = 0.555879
   CLL	      = -0.68489
   CLL	      = -0.68489
   CLL	      = -0.68489
   CLL	      = -0.68489
   CLL	      = -0.68489
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196










Total learning time: 23.126 seconds
Total learning time: 23.126 seconds
Total learning time: 23.126 seconds
Total learning time: 23.126 seconds
Total learning time: 23.126 seconds
Total inference time: 2.15 seconds
Total inference time: 2.15 seconds
Total inference time: 2.15 seconds
Total inference time: 2.15 seconds
Total inference time: 2.15 seconds
AUC ROC: 0.54787
AUC ROC: 0.54787
AUC ROC: 0.54787
AUC ROC: 0.54787
AUC ROC: 0.54787










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.499, 453, 529], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.499, 473, 545], 'false': [0.433, 108, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.499, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.499, 473, 545], 'false,true': [0.4, 8, 2], 'false,false,true': [0.416, 7, 2], 'false,false,false': [0.436, 93, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.496, 17, 13], 'true,false': [0.498, 453, 529], 'false,true': [0.4, 8, 2], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true': [0.477, 28, 18], 'false,true': [0.498, 453, 529], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true': [0.477, 28, 18], 'false,true': [0.498, 453, 529], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true': [0.477, 28, 18], 'false,true': [0.498, 453, 529], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true': [0.477, 28, 18], 'false,true': [0.498, 453, 529], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)'}, {'true': [0.477, 28, 18], 'false,true': [0.498, 453, 529], 'false,false': [0.435, 100, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 473, 545], 'false,true': [0.416, 7, 2], 'false,false': [0.434, 101, 34]}]
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24874942585522805, 0.18750000000000128], 'true': [0.2469135802469131, 0.24850257797171252], 'true,true': [0.24999999999999992, 0.2455555555555551], 'false': [0.16000000000000003, 0.18935174871909238], 'false,false': [0.17283950617283952, 0.19046400000000122]}
{'': [0.24865738473063062, 0.18743865388620684]}
{'': [0.24865738473063062, 0.18743865388620684]}
{'': [0.24865738473063062, 0.18743865388620684]}
{'': [0.24865738473063062, 0.18743865388620684]}
{'': [0.24865738473063062, 0.18743865388620684]}
{'': [0.24863991189102538, 0.18743487686861635]}
{'': [0.24863991189102538, 0.18743487686861635]}
{'': [0.24863991189102538, 0.18743487686861635]}
{'': [0.24863991189102538, 0.18743487686861635]}
{'': [0.24863991189102538, 0.18743487686861635]}
{'': [0.24862687415917264, 0.18743156862535604], 'false': [0.16000000000000006, 0.18933232250459528]}
{'': [0.24862687415917264, 0.18743156862535604], 'false': [0.16000000000000006, 0.18933232250459528]}
{'': [0.24862687415917264, 0.18743156862535604], 'false': [0.16000000000000006, 0.18933232250459528]}
{'': [0.24862687415917264, 0.18743156862535604], 'false': [0.16000000000000006, 0.18933232250459528]}
{'': [0.24862687415917264, 0.18743156862535604], 'false': [0.16000000000000006, 0.18933232250459528]}
{'': [0.2486182739614196, 0.1873916543024835], 'false': [0.17283950617283955, 0.18832090966858964]}
{'': [0.2486182739614196, 0.1873916543024835], 'false': [0.17283950617283955, 0.18832090966858964]}
{'': [0.2486182739614196, 0.1873916543024835], 'false': [0.17283950617283955, 0.18832090966858964]}
{'': [0.2486182739614196, 0.1873916543024835], 'false': [0.17283950617283955, 0.18832090966858964]}
{'': [0.2486182739614196, 0.1873916543024835], 'false': [0.17283950617283955, 0.18832090966858964]}
{'': [0.24861309984565658, 0.18737713386494825], 'false': [0.1728395061728395, 0.1883176323441241]}
{'': [0.24861309984565658, 0.18737713386494825], 'false': [0.1728395061728395, 0.1883176323441241]}
{'': [0.24861309984565658, 0.18737713386494825], 'false': [0.1728395061728395, 0.1883176323441241]}
{'': [0.24861309984565658, 0.18737713386494825], 'false': [0.1728395061728395, 0.1883176323441241]}
{'': [0.24861309984565658, 0.18737713386494825], 'false': [0.1728395061728395, 0.1883176323441241]}
{'': [0.24861019032306023, 0.1873661502180617], 'false': [0.15999999999999992, 0.18930707723767662], 'false,false': [0.17283950617283947, 0.19046400000000066]}
{'': [0.24861019032306023, 0.1873661502180617], 'false': [0.15999999999999992, 0.18930707723767662], 'false,false': [0.17283950617283947, 0.19046400000000066]}
{'': [0.24861019032306023, 0.1873661502180617], 'false': [0.15999999999999992, 0.18930707723767662], 'false,false': [0.17283950617283947, 0.19046400000000066]}
{'': [0.24861019032306023, 0.1873661502180617], 'false': [0.15999999999999992, 0.18930707723767662], 'false,false': [0.17283950617283947, 0.19046400000000066]}
{'': [0.24861019032306023, 0.1873661502180617], 'false': [0.15999999999999992, 0.18930707723767662], 'false,false': [0.17283950617283947, 0.19046400000000066]}
{'': [0.24860864199959207, 0.18732873729968114], 'true': [0.2471041399686442, 0.24835498446125617], 'true,true': [0.25000000000000006, 0.24555555555555575], 'false': [0.15999999999999995, 0.18929834459655534]}
{'': [0.24860864199959207, 0.18732873729968114], 'true': [0.2471041399686442, 0.24835498446125617], 'true,true': [0.25000000000000006, 0.24555555555555575], 'false': [0.15999999999999995, 0.18929834459655534]}
{'': [0.24860864199959207, 0.18732873729968114], 'true': [0.2471041399686442, 0.24835498446125617], 'true,true': [0.25000000000000006, 0.24555555555555575], 'false': [0.15999999999999995, 0.18929834459655534]}
{'': [0.24860864199959207, 0.18732873729968114], 'true': [0.2471041399686442, 0.24835498446125617], 'true,true': [0.25000000000000006, 0.24555555555555575], 'false': [0.15999999999999995, 0.18929834459655534]}
{'': [0.24860864199959207, 0.18732873729968114], 'true': [0.2471041399686442, 0.24835498446125617], 'true,true': [0.25000000000000006, 0.24555555555555575], 'false': [0.15999999999999995, 0.18929834459655534]}
{'': [0.22793857291695027, 0.24134719131502805], 'false': [0.2483531697342954, 0.18929758317544687]}
{'': [0.22793857291695027, 0.24134719131502805], 'false': [0.2483531697342954, 0.18929758317544687]}
{'': [0.22793857291695027, 0.24134719131502805], 'false': [0.2483531697342954, 0.18929758317544687]}
{'': [0.22793857291695027, 0.24134719131502805], 'false': [0.2483531697342954, 0.18929758317544687]}
{'': [0.22793857291695027, 0.24134719131502805], 'false': [0.2483531697342954, 0.18929758317544687]}
{'': [0.24839453340115578, 0.18728727772441423], 'false': [0.1728395061728395, 0.18823678513422998]}
{'': [0.24839453340115578, 0.18728727772441423], 'false': [0.1728395061728395, 0.18823678513422998]}
{'': [0.24839453340115578, 0.18728727772441423], 'false': [0.1728395061728395, 0.18823678513422998]}
{'': [0.24839453340115578, 0.18728727772441423], 'false': [0.1728395061728395, 0.18823678513422998]}
{'': [0.24839453340115578, 0.18728727772441423], 'false': [0.1728395061728395, 0.18823678513422998]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;true,true;haswordvenue(B, D).;true;true', '0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;false,false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;true,true;haswordauthor(F, C).;true;true', '7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true', '8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.39684547277771526;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.26160249278067366;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.3413805249332784;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09770484012843855;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1911343714542144;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2827565826280999;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1911343714542144;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2827565826280999;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1911343714542144;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2827565826280999;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1911343714542144;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2827565826280999;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1911343714542144;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2827565826280999;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05728252460473694;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.08635513000943287;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.22891292489512452;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13821210777083143;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15728699763408435;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22748511347514608;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.049240588536929045;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384145968962702;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.22891292489512452;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13821210777083143;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15728699763408435;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22748511347514608;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.049240588536929045;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384145968962702;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.22891292489512452;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13821210777083143;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15728699763408435;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22748511347514608;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.049240588536929045;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384145968962702;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.22891292489512452;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13821210777083143;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15728699763408435;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22748511347514608;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.049240588536929045;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384145968962702;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.22891292489512452;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13821210777083143;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15728699763408435;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.22748511347514608;  // std dev = 0,498, 952,000 (wgt'ed) examples reached here.  /* #neg=436 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.038428662236904595;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.049240588536929045;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.07384145968962702;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17301301250280735;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.042082461743448665;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060401888696580606;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17301301250280735;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.042082461743448665;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060401888696580606;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17301301250280735;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.042082461743448665;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060401888696580606;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17301301250280735;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.042082461743448665;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060401888696580606;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17301301250280735;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.042082461743448665;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.060401888696580606;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321944079493529;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03578346900719266;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024588840204510066;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.052983666163261396;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321944079493529;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03578346900719266;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024588840204510066;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.052983666163261396;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321944079493529;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03578346900719266;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024588840204510066;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.052983666163261396;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321944079493529;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03578346900719266;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024588840204510066;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.052983666163261396;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1321944079493529;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03578346900719266;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024588840204510066;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.052983666163261396;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10004266931794865;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021003826785162605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.030294857615316338;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427588944100029;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10004266931794865;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021003826785162605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.030294857615316338;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427588944100029;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10004266931794865;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021003826785162605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.030294857615316338;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427588944100029;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10004266931794865;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021003826785162605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.030294857615316338;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427588944100029;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10004266931794865;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021003826785162605;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.030294857615316338;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.04427588944100029;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08781771148445106;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014405778147769098;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07711357771790335;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.017896339609957002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.025552492363217008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.036792077428440505;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08781771148445106;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014405778147769098;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07711357771790335;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.017896339609957002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.025552492363217008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.036792077428440505;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08781771148445106;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014405778147769098;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07711357771790335;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.017896339609957002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.025552492363217008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.036792077428440505;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08781771148445106;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014405778147769098;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07711357771790335;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.017896339609957002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.025552492363217008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.036792077428440505;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08781771148445106;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014405778147769098;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07711357771790335;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.017896339609957002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.025552492363217008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.036792077428440505;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.06638904225082154;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.0137558228605741;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.015215645067525863;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05782324360049755;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.021484123064987495;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03042989003732524;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.06638904225082154;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.0137558228605741;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.015215645067525863;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05782324360049755;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.021484123064987495;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03042989003732524;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.06638904225082154;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.0137558228605741;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.015215645067525863;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05782324360049755;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.021484123064987495;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03042989003732524;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.06638904225082154;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.0137558228605741;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.015215645067525863;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05782324360049755;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.021484123064987495;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03042989003732524;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.06638904225082154;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.0137558228605741;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return 0.015215645067525863;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05782324360049755;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.021484123064987495;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03042989003732524;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04245007156261444;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018014989691628083;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012912572447176196;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506979841018328;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04245007156261444;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018014989691628083;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012912572447176196;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506979841018328;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04245007156261444;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018014989691628083;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012912572447176196;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506979841018328;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04245007156261444;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018014989691628083;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012912572447176196;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506979841018328;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04245007156261444;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018014989691628083;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012912572447176196;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.02506979841018328;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.547994
   AUC ROC   = 0.547994
   AUC ROC   = 0.547994
   AUC ROC   = 0.547994
   AUC ROC   = 0.547994
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.684984
   CLL	      = -0.684984
   CLL	      = -0.684984
   CLL	      = -0.684984
   CLL	      = -0.684984
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196










Total learning time: 20.307 seconds
Total learning time: 20.307 seconds
Total learning time: 20.307 seconds
Total learning time: 20.307 seconds
Total learning time: 20.307 seconds
Total inference time: 2.702 seconds
Total inference time: 2.702 seconds
Total inference time: 2.702 seconds
Total inference time: 2.702 seconds
Total inference time: 2.702 seconds
AUC ROC: 0.547994
AUC ROC: 0.547994
AUC ROC: 0.547994
AUC ROC: 0.547994
AUC ROC: 0.547994










Refined model AUC ROC: 0.547994
Refined model AUC ROC: 0.547994
Refined model AUC ROC: 0.547994
Refined model AUC ROC: 0.547994
Refined model AUC ROC: 0.547994










Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 11:05:32
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 11:05:32
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 11:05:32
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 11:05:32
Dataset: imdb->cora, Fold: 3, Type: transfer, Time: 11:05:32
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684984, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 43.433, 'Inference time': 2.702, 'Mapping results': {'Knowledge compiling time': 0.22417712211608887, 'Generating paths time': 4.74903678894043, 'Generating mappings time': 0.0715641975402832, 'Possible mappings': 6, 'Finding best mapping': 0.0006666183471679688, 'Total time': 5.045453071594238}, 'Parameter Learning results': {'AUC ROC': 0.54787, 'AUC PR': 0.555879, 'CLL': -0.68489, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 23.126, 'Inference time': 2.15}}
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684984, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 43.433, 'Inference time': 2.702, 'Mapping results': {'Knowledge compiling time': 0.22417712211608887, 'Generating paths time': 4.74903678894043, 'Generating mappings time': 0.0715641975402832, 'Possible mappings': 6, 'Finding best mapping': 0.0006666183471679688, 'Total time': 5.045453071594238}, 'Parameter Learning results': {'AUC ROC': 0.54787, 'AUC PR': 0.555879, 'CLL': -0.68489, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 23.126, 'Inference time': 2.15}}
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684984, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 43.433, 'Inference time': 2.702, 'Mapping results': {'Knowledge compiling time': 0.22417712211608887, 'Generating paths time': 4.74903678894043, 'Generating mappings time': 0.0715641975402832, 'Possible mappings': 6, 'Finding best mapping': 0.0006666183471679688, 'Total time': 5.045453071594238}, 'Parameter Learning results': {'AUC ROC': 0.54787, 'AUC PR': 0.555879, 'CLL': -0.68489, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 23.126, 'Inference time': 2.15}}
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684984, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 43.433, 'Inference time': 2.702, 'Mapping results': {'Knowledge compiling time': 0.22417712211608887, 'Generating paths time': 4.74903678894043, 'Generating mappings time': 0.0715641975402832, 'Possible mappings': 6, 'Finding best mapping': 0.0006666183471679688, 'Total time': 5.045453071594238}, 'Parameter Learning results': {'AUC ROC': 0.54787, 'AUC PR': 0.555879, 'CLL': -0.68489, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 23.126, 'Inference time': 2.15}}
{'AUC ROC': 0.547994, 'AUC PR': 0.555917, 'CLL': -0.684984, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 43.433, 'Inference time': 2.702, 'Mapping results': {'Knowledge compiling time': 0.22417712211608887, 'Generating paths time': 4.74903678894043, 'Generating mappings time': 0.0715641975402832, 'Possible mappings': 6, 'Finding best mapping': 0.0006666183471679688, 'Total time': 5.045453071594238}, 'Parameter Learning results': {'AUC ROC': 0.54787, 'AUC PR': 0.555879, 'CLL': -0.68489, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 23.126, 'Inference time': 2.15}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39351239285982187;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0803711573217344;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.11414893509951106;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30321135593008386;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2365446892634176;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3419078936083028;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30321135593008386;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2365446892634176;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3419078936083028;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30321135593008386;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2365446892634176;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3419078936083028;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30321135593008386;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2365446892634176;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3419078936083028;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30321135593008386;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2365446892634176;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.3419078936083028;  // std dev = 0,499, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.05092203251355425;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.07030324498182235;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.09967775497899498;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.25087347293200857;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17689809466387257;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.28285915857227983;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.25087347293200857;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17689809466387257;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.28285915857227983;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.25087347293200857;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17689809466387257;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.28285915857227983;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.25087347293200857;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17689809466387257;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.28285915857227983;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.25087347293200857;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17689809466387257;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.28285915857227983;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.08161313243011754;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22281707866752176;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22281707866752176;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22281707866752176;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22281707866752176;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22281707866752176;  // std dev = 0,499, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03331638646671068;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07260312342520023;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307734139534686;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06158472618097065;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307734139534686;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06158472618097065;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307734139534686;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06158472618097065;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307734139534686;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06158472618097065;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17307734139534686;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02863720515254716;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06158472618097065;  // std dev = 0,435, 134,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06346417555017242;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474544136555702;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02967211995822843;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05344030207961008;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06346417555017242;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474544136555702;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02967211995822843;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05344030207961008;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06346417555017242;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474544136555702;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02967211995822843;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05344030207961008;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06346417555017242;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474544136555702;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02967211995822843;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05344030207961008;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06346417555017242;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13474544136555702;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.02453244066114383;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.02967211995822843;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.05344030207961008;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000363117740856;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.041795497067725645;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000363117740856;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.041795497067725645;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000363117740856;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.041795497067725645;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000363117740856;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.041795497067725645;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1000363117740856;  // std dev = 0,498, 1.018,000 (wgt'ed) examples reached here.  /* #neg=473 #pos=545 */
%   else return 0.041795497067725645;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07273234953996666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0027666446076662723;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07771515375572244;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.014728765441809821;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018316032727590872;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03762076885350712;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07273234953996666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0027666446076662723;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07771515375572244;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.014728765441809821;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018316032727590872;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03762076885350712;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07273234953996666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0027666446076662723;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07771515375572244;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.014728765441809821;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018316032727590872;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03762076885350712;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07273234953996666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0027666446076662723;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07771515375572244;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.014728765441809821;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018316032727590872;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03762076885350712;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07273234953996666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0027666446076662723;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.07771515375572244;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.014728765441809821;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018316032727590872;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.03762076885350712;  // std dev = 0,436, 125,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05484728764270951;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00449663957031633;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05843375567543674;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.02884933906821413;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05484728764270951;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00449663957031633;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05843375567543674;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.02884933906821413;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05484728764270951;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00449663957031633;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05843375567543674;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.02884933906821413;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05484728764270951;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00449663957031633;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05843375567543674;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.02884933906821413;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05484728764270951;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00449663957031633;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.05843375567543674;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else return 0.02884933906821413;  // std dev = 0,433, 144,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04126299932881916;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.003390170879075131;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.043839118046929575;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.010552773054300675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024729386082750316;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04126299932881916;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.003390170879075131;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.043839118046929575;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.010552773054300675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024729386082750316;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04126299932881916;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.003390170879075131;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.043839118046929575;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.010552773054300675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024729386082750316;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04126299932881916;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.003390170879075131;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.043839118046929575;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.010552773054300675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024729386082750316;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.04126299932881916;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.003390170879075131;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else return 0.043839118046929575;  // std dev = 0,498, 982,000 (wgt'ed) examples reached here.  /* #neg=453 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.010552773054300675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.024729386082750316;  // std dev = 0,434, 135,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=34 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC ROC   = 0.547997
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   AUC PR    = 0.555917
   CLL	      = -0.684864
   CLL	      = -0.684864
   CLL	      = -0.684864
   CLL	      = -0.684864
   CLL	      = -0.684864
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Precision = 0.55663 at threshold = 0.5
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   Recall    = 0.897783
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196
   F1        = 0.687196










Total learning time: 42.917 seconds
Total learning time: 42.917 seconds
Total learning time: 42.917 seconds
Total learning time: 42.917 seconds
Total learning time: 42.917 seconds
Total inference time: 2.845 seconds
Total inference time: 2.845 seconds
Total inference time: 2.845 seconds
Total inference time: 2.845 seconds
Total inference time: 2.845 seconds
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997
AUC ROC: 0.547997










Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 11:06:18
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 11:06:18
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 11:06:18
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 11:06:18
Dataset: imdb->cora, Fold: 3, Type: scratch, Time: 11:06:18
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684864, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.917, 'Inference time': 2.845}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684864, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.917, 'Inference time': 2.845}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684864, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.917, 'Inference time': 2.845}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684864, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.917, 'Inference time': 2.845}
{'AUC ROC': 0.547997, 'AUC PR': 0.555917, 'CLL': -0.684864, 'Precision': [0.55663, 0.5], 'Recall': 0.897783, 'F1': 0.687196, 'Learning time': 42.917, 'Inference time': 2.845}










Starting fold 4

Starting fold 4

Starting fold 4

Starting fold 4

Starting fold 4

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21404387612113218;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5343192054504903;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24278094389955057;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.393259522065033;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16562883621555652;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5343192054504903;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24278094389955057;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.393259522065033;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16562883621555652;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5343192054504903;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24278094389955057;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.393259522065033;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16562883621555652;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5343192054504903;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24278094389955057;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.393259522065033;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16562883621555652;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5343192054504903;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24278094389955057;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.393259522065033;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.16562883621555652;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281390596192657;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281390596192657;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281390596192657;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281390596192657;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1281390596192657;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4498457629942546;  // std dev = 0,084, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30075081151475436;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2995741812473436;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09573589490789626;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4498457629942546;  // std dev = 0,084, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30075081151475436;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2995741812473436;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09573589490789626;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4498457629942546;  // std dev = 0,084, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30075081151475436;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2995741812473436;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09573589490789626;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4498457629942546;  // std dev = 0,084, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30075081151475436;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2995741812473436;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09573589490789626;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4498457629942546;  // std dev = 0,084, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30075081151475436;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2995741812473436;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09573589490789626;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07351260579034885;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07351260579034885;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07351260579034885;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07351260579034885;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07351260579034885;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05536554880547996;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05536554880547996;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05536554880547996;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05536554880547996;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05536554880547996;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04162774402613785;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04162774402613785;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04162774402613785;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04162774402613785;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04162774402613785;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.571034
   AUC ROC   = 0.571034
   AUC ROC   = 0.571034
   AUC ROC   = 0.571034
   AUC ROC   = 0.571034
   AUC PR    = 0.59089
   AUC PR    = 0.59089
   AUC PR    = 0.59089
   AUC PR    = 0.59089
   AUC PR    = 0.59089
   CLL	      = -0.679773
   CLL	      = -0.679773
   CLL	      = -0.679773
   CLL	      = -0.679773
   CLL	      = -0.679773
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475










Total learning time: 37.302 seconds
Total learning time: 37.302 seconds
Total learning time: 37.302 seconds
Total learning time: 37.302 seconds
Total learning time: 37.302 seconds
Total inference time: 3.202 seconds
Total inference time: 3.202 seconds
Total inference time: 3.202 seconds
Total inference time: 3.202 seconds
Total inference time: 3.202 seconds
AUC ROC: 0.571034
AUC ROC: 0.571034
AUC ROC: 0.571034
AUC ROC: 0.571034
AUC ROC: 0.571034










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.5, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true,true': [0.0, 0, 7], 'true,false,true,true,false': [0.0, 5, 0], 'true,false,true,false': [0.866, 1, 3], 'true,false,false': [0.5, 661, 697], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 5, 0], 'true,true,false': [0.892, 1, 4], 'true,false': [0.499, 666, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.084, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.883, 1, 4], 'true,false': [0.498, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.084, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.883, 1, 4], 'true,false': [0.498, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.084, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.883, 1, 4], 'true,false': [0.498, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.084, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.883, 1, 4], 'true,false': [0.498, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)'}, {'true,true,true,true': [0.084, 0, 8], 'true,true,true,false': [0.0, 4, 0], 'true,true,false': [0.883, 1, 4], 'true,false': [0.498, 667, 707], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.497, 672, 719], 'false': [0.445, 75, 28]}]
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.2497145819303838, 0.1979451409180896]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,false': [0.23437500000000003, 0.2498243106361406], 'true,false,true': [0.24305555555555558, 0.18750000000000006], 'true,false,true,true': [0.0, -5.551115123125783e-18], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,false': [0.23437500000000003, 0.2498243106361406], 'true,false,true': [0.24305555555555558, 0.18750000000000006], 'true,false,true,true': [0.0, -5.551115123125783e-18], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,false': [0.23437500000000003, 0.2498243106361406], 'true,false,true': [0.24305555555555558, 0.18750000000000006], 'true,false,true,true': [0.0, -5.551115123125783e-18], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,false': [0.23437500000000003, 0.2498243106361406], 'true,false,true': [0.24305555555555558, 0.18750000000000006], 'true,false,true,true': [0.0, -5.551115123125783e-18], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24971458193035473, 0.19794514091808793], 'true': [0.20761245674740464, 0.24978812167747622], 'true,false': [0.23437500000000003, 0.2498243106361406], 'true,false,true': [0.24305555555555558, 0.18750000000000006], 'true,false,true,true': [0.0, -5.551115123125783e-18], 'true,true': [0.2222222222222223, 0.16000000000000006], 'true,true,true': [0.0, 0.0]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24809482024230825, 0.19794514091808826]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24792813023170776, 0.1979451409180892]}
{'': [0.24782005779918775, 0.19794514091808763], 'true': [0.15240737794757586, 0.24890378631242877], 'true,true': [0.14293127624138607, 0.1590556060059669], 'true,true,true': [0.0, -1.1102230246251566e-17]}
{'': [0.24782005779918775, 0.19794514091808763], 'true': [0.15240737794757586, 0.24890378631242877], 'true,true': [0.14293127624138607, 0.1590556060059669], 'true,true,true': [0.0, -1.1102230246251566e-17]}
{'': [0.24782005779918775, 0.19794514091808763], 'true': [0.15240737794757586, 0.24890378631242877], 'true,true': [0.14293127624138607, 0.1590556060059669], 'true,true,true': [0.0, -1.1102230246251566e-17]}
{'': [0.24782005779918775, 0.19794514091808763], 'true': [0.15240737794757586, 0.24890378631242877], 'true,true': [0.14293127624138607, 0.1590556060059669], 'true,true,true': [0.0, -1.1102230246251566e-17]}
{'': [0.24782005779918775, 0.19794514091808763], 'true': [0.15240737794757586, 0.24890378631242877], 'true,true': [0.14293127624138607, 0.1590556060059669], 'true,true,true': [0.0, -1.1102230246251566e-17]}
{'': [0.2471493187284923, 0.19794514091808932]}
{'': [0.2471493187284923, 0.19794514091808932]}
{'': [0.2471493187284923, 0.19794514091808932]}
{'': [0.2471493187284923, 0.19794514091808932]}
{'': [0.2471493187284923, 0.19794514091808932]}
{'': [0.2471114883265062, 0.19794514091808854], 'true': [0.13673404790372978, 0.2482599824272775], 'true,true': [0.1257806536492283, 0.15597363370987155], 'true,true,true': [0.0008725745856230649, 0.0]}
{'': [0.2471114883265062, 0.19794514091808854], 'true': [0.13673404790372978, 0.2482599824272775], 'true,true': [0.1257806536492283, 0.15597363370987155], 'true,true,true': [0.0008725745856230649, 0.0]}
{'': [0.2471114883265062, 0.19794514091808854], 'true': [0.13673404790372978, 0.2482599824272775], 'true,true': [0.1257806536492283, 0.15597363370987155], 'true,true,true': [0.0008725745856230649, 0.0]}
{'': [0.2471114883265062, 0.19794514091808854], 'true': [0.13673404790372978, 0.2482599824272775], 'true,true': [0.1257806536492283, 0.15597363370987155], 'true,true,true': [0.0008725745856230649, 0.0]}
{'': [0.2471114883265062, 0.19794514091808854], 'true': [0.13673404790372978, 0.2482599824272775], 'true,true': [0.1257806536492283, 0.15597363370987155], 'true,true,true': [0.0008725745856230649, 0.0]}
{'': [0.24656750996876972, 0.19794514091808735]}
{'': [0.24656750996876972, 0.19794514091808735]}
{'': [0.24656750996876972, 0.19794514091808735]}
{'': [0.24656750996876972, 0.19794514091808735]}
{'': [0.24656750996876972, 0.19794514091808735]}
{'': [0.24656022915202971, 0.19794514091808735]}
{'': [0.24656022915202971, 0.19794514091808735]}
{'': [0.24656022915202971, 0.19794514091808735]}
{'': [0.24656022915202971, 0.19794514091808735]}
{'': [0.24656022915202971, 0.19794514091808735]}
{'': [0.2465584151585671, 0.19794514091808849]}
{'': [0.2465584151585671, 0.19794514091808849]}
{'': [0.2465584151585671, 0.19794514091808849]}
{'': [0.2465584151585671, 0.19794514091808849]}
{'': [0.2465584151585671, 0.19794514091808849]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, A).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, A).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, A).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, A).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true']
['1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;author(F, E), venue(F, B).;true;true', '1;true,true,true;samebib(F, G), venue(G, A).;true;true', '1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true', '1;true,false,true;author(J, I), venue(J, A).;true;true', '1;true,false,true,true;samebib(J, K), venue(K, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;true,true;author(F, E), venue(F, A).;true;true', '4;true,true,true;samebib(F, G), venue(G, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '6;true,true;author(F, E), venue(F, B).;true;true', '6;true,true,true;samebib(F, G), venue(G, A).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3750432557321458;  // std dev = 0,500, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8061143016527739;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19388569834722608;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6061143016527739;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.8061143016527739;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.19388569834722608;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5561143016527739;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3193690881034325;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2673055522825393;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869902211392838;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20561922262048632;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4437046925501059;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21256276953075934;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869902211392838;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20561922262048632;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4437046925501059;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21256276953075934;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869902211392838;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20561922262048632;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4437046925501059;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21256276953075934;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869902211392838;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20561922262048632;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4437046925501059;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21256276953075934;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5869902211392838;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20561922262048632;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4437046925501059;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21256276953075934;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4414071082352057;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17405510511328998;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33688746466547154;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.5346877188400456;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.24250876343920008;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3339413031098183;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1647729881906278;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4414071082352057;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17405510511328998;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33688746466547154;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.5346877188400456;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.24250876343920008;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3339413031098183;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1647729881906278;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4414071082352057;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17405510511328998;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33688746466547154;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.5346877188400456;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.24250876343920008;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3339413031098183;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1647729881906278;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4414071082352057;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17405510511328998;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33688746466547154;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.5346877188400456;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.24250876343920008;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3339413031098183;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1647729881906278;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4414071082352057;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17405510511328998;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33688746466547154;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then if ( samebib(J, K), venue(K, A) )
%   | | | | then return 0.5346877188400456;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | | else return -0.24250876343920008;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3339413031098183;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1647729881906278;  // std dev = 0,500, 1.358,000 (wgt'ed) examples reached here.  /* #neg=661 #pos=697 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12796864036818337;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12796864036818337;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12796864036818337;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12796864036818337;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12796864036818337;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3641168413082664;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22209239925553748;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.257779791565124;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09609430070414486;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3641168413082664;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22209239925553748;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.257779791565124;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09609430070414486;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3641168413082664;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22209239925553748;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.257779791565124;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09609430070414486;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3641168413082664;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22209239925553748;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.257779791565124;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09609430070414486;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3641168413082664;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.22209239925553748;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.257779791565124;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09609430070414486;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.2779345633612355;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3296942563025797;  // std dev = 0,132, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1860919271909073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05429093733078261;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07260947580355036;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.2779345633612355;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3296942563025797;  // std dev = 0,132, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1860919271909073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05429093733078261;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07260947580355036;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.2779345633612355;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3296942563025797;  // std dev = 0,132, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1860919271909073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05429093733078261;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07260947580355036;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.2779345633612355;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3296942563025797;  // std dev = 0,132, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1860919271909073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05429093733078261;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07260947580355036;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then if ( author(G, E) )
%   | | | | then return 0.2779345633612355;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | | else return 0.3296942563025797;  // std dev = 0,132, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1860919271909073;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05429093733078261;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07260947580355036;  // std dev = 0,498, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542671189456878;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542671189456878;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542671189456878;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542671189456878;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05542671189456878;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04171678413258394;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04171678413258394;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04171678413258394;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04171678413258394;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04171678413258394;  // std dev = 0,496, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.572686
   AUC ROC   = 0.572686
   AUC ROC   = 0.572686
   AUC ROC   = 0.572686
   AUC ROC   = 0.572686
   AUC PR    = 0.591872
   AUC PR    = 0.591872
   AUC PR    = 0.591872
   AUC PR    = 0.591872
   AUC PR    = 0.591872
   CLL	      = -0.678061
   CLL	      = -0.678061
   CLL	      = -0.678061
   CLL	      = -0.678061
   CLL	      = -0.678061
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Precision = 0.615023 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518
   F1        = 0.105518










Total learning time: 35.18 seconds
Total learning time: 35.18 seconds
Total learning time: 35.18 seconds
Total learning time: 35.18 seconds
Total learning time: 35.18 seconds
Total inference time: 4.279 seconds
Total inference time: 4.279 seconds
Total inference time: 4.279 seconds
Total inference time: 4.279 seconds
Total inference time: 4.279 seconds
AUC ROC: 0.572686
AUC ROC: 0.572686
AUC ROC: 0.572686
AUC ROC: 0.572686
AUC ROC: 0.572686










Refined model AUC ROC: 0.572686
Refined model AUC ROC: 0.572686
Refined model AUC ROC: 0.572686
Refined model AUC ROC: 0.572686
Refined model AUC ROC: 0.572686










Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 11:07:44
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 11:07:44
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 11:07:44
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 11:07:44
Dataset: imdb->cora, Fold: 4, Type: transfer, Time: 11:07:44
{'AUC ROC': 0.572686, 'AUC PR': 0.591872, 'CLL': -0.678061, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 72.482, 'Inference time': 4.279, 'Mapping results': {'Knowledge compiling time': 0.13847851753234863, 'Generating paths time': 4.737390518188477, 'Generating mappings time': 0.06524181365966797, 'Possible mappings': 6, 'Finding best mapping': 0.0006699562072753906, 'Total time': 4.941789388656616}, 'Parameter Learning results': {'AUC ROC': 0.571034, 'AUC PR': 0.59089, 'CLL': -0.679773, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.302, 'Inference time': 3.202}}
{'AUC ROC': 0.572686, 'AUC PR': 0.591872, 'CLL': -0.678061, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 72.482, 'Inference time': 4.279, 'Mapping results': {'Knowledge compiling time': 0.13847851753234863, 'Generating paths time': 4.737390518188477, 'Generating mappings time': 0.06524181365966797, 'Possible mappings': 6, 'Finding best mapping': 0.0006699562072753906, 'Total time': 4.941789388656616}, 'Parameter Learning results': {'AUC ROC': 0.571034, 'AUC PR': 0.59089, 'CLL': -0.679773, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.302, 'Inference time': 3.202}}
{'AUC ROC': 0.572686, 'AUC PR': 0.591872, 'CLL': -0.678061, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 72.482, 'Inference time': 4.279, 'Mapping results': {'Knowledge compiling time': 0.13847851753234863, 'Generating paths time': 4.737390518188477, 'Generating mappings time': 0.06524181365966797, 'Possible mappings': 6, 'Finding best mapping': 0.0006699562072753906, 'Total time': 4.941789388656616}, 'Parameter Learning results': {'AUC ROC': 0.571034, 'AUC PR': 0.59089, 'CLL': -0.679773, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.302, 'Inference time': 3.202}}
{'AUC ROC': 0.572686, 'AUC PR': 0.591872, 'CLL': -0.678061, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 72.482, 'Inference time': 4.279, 'Mapping results': {'Knowledge compiling time': 0.13847851753234863, 'Generating paths time': 4.737390518188477, 'Generating mappings time': 0.06524181365966797, 'Possible mappings': 6, 'Finding best mapping': 0.0006699562072753906, 'Total time': 4.941789388656616}, 'Parameter Learning results': {'AUC ROC': 0.571034, 'AUC PR': 0.59089, 'CLL': -0.679773, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.302, 'Inference time': 3.202}}
{'AUC ROC': 0.572686, 'AUC PR': 0.591872, 'CLL': -0.678061, 'Precision': [0.615023, 0.5], 'Recall': 0.057709, 'F1': 0.105518, 'Learning time': 72.482, 'Inference time': 4.279, 'Mapping results': {'Knowledge compiling time': 0.13847851753234863, 'Generating paths time': 4.737390518188477, 'Generating mappings time': 0.06524181365966797, 'Possible mappings': 6, 'Finding best mapping': 0.0006699562072753906, 'Total time': 4.941789388656616}, 'Parameter Learning results': {'AUC ROC': 0.571034, 'AUC PR': 0.59089, 'CLL': -0.679773, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 37.302, 'Inference time': 3.202}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37307974354816;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37307974354816;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37307974354816;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37307974354816;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37307974354816;  // std dev = 0,500, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.129993595293686;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32288619492556675;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32288619492556675;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32288619492556675;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32288619492556675;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32288619492556675;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.11342133526095814;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.267424215721811;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.267424215721811;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.267424215721811;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.267424215721811;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.267424215721811;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.09770744662825691;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412800398317988;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412800398317988;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412800398317988;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412800398317988;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412800398317988;  // std dev = 0,499, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.08320561029004218;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.636222345968515;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3492172059021633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.43733861291166737;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1649369707496887;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.636222345968515;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3492172059021633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.43733861291166737;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1649369707496887;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.636222345968515;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3492172059021633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.43733861291166737;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1649369707496887;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.636222345968515;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3492172059021633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.43733861291166737;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1649369707496887;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.636222345968515;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3492172059021633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.43733861291166737;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.1649369707496887;  // std dev = 0,499, 1.374,000 (wgt'ed) examples reached here.  /* #neg=667 #pos=707 */
%   else return 0.07013966714193236;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12821661387347075;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12821661387347075;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12821661387347075;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12821661387347075;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12821661387347075;  // std dev = 0,498, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.058609255503560304;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44702350509265004;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3006385344791675;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2974924609555244;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09607644427403253;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44702350509265004;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3006385344791675;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2974924609555244;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09607644427403253;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44702350509265004;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3006385344791675;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2974924609555244;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09607644427403253;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44702350509265004;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3006385344791675;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2974924609555244;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09607644427403253;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44702350509265004;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3006385344791675;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2974924609555244;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09607644427403253;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.04861143907872457;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0734980267865426;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0734980267865426;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0734980267865426;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0734980267865426;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0734980267865426;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.04006895959997391;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05533654533452847;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05533654533452847;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05533654533452847;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05533654533452847;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05533654533452847;  // std dev = 0,497, 1.391,000 (wgt'ed) examples reached here.  /* #neg=672 #pos=719 */
%   else return 0.032857916242510166;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31310875397990723;  // std dev = 0,088, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2657949840373092;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1928991861678366;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040578695794955384;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31310875397990723;  // std dev = 0,088, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2657949840373092;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1928991861678366;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040578695794955384;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31310875397990723;  // std dev = 0,088, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2657949840373092;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1928991861678366;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040578695794955384;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31310875397990723;  // std dev = 0,088, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2657949840373092;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1928991861678366;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040578695794955384;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.31310875397990723;  // std dev = 0,088, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2657949840373092;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1928991861678366;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.040578695794955384;  // std dev = 0,499, 1.373,000 (wgt'ed) examples reached here.  /* #neg=666 #pos=707 */
%   else return 0.026830830506986127;  // std dev = 0,445, 103,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.571331
   AUC ROC   = 0.571331
   AUC ROC   = 0.571331
   AUC ROC   = 0.571331
   AUC ROC   = 0.571331
   AUC PR    = 0.586548
   AUC PR    = 0.586548
   AUC PR    = 0.586548
   AUC PR    = 0.586548
   AUC PR    = 0.586548
   CLL	      = -0.680227
   CLL	      = -0.680227
   CLL	      = -0.680227
   CLL	      = -0.680227
   CLL	      = -0.680227
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Precision = 0.61215 at threshold = 0.5
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   Recall    = 0.057709
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475
   F1        = 0.105475










Total learning time: 35.256 seconds
Total learning time: 35.256 seconds
Total learning time: 35.256 seconds
Total learning time: 35.256 seconds
Total learning time: 35.256 seconds
Total inference time: 3.081 seconds
Total inference time: 3.081 seconds
Total inference time: 3.081 seconds
Total inference time: 3.081 seconds
Total inference time: 3.081 seconds
AUC ROC: 0.571331
AUC ROC: 0.571331
AUC ROC: 0.571331
AUC ROC: 0.571331
AUC ROC: 0.571331










Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 11:08:23
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 11:08:23
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 11:08:23
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 11:08:23
Dataset: imdb->cora, Fold: 4, Type: scratch, Time: 11:08:23
{'AUC ROC': 0.571331, 'AUC PR': 0.586548, 'CLL': -0.680227, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 35.256, 'Inference time': 3.081}
{'AUC ROC': 0.571331, 'AUC PR': 0.586548, 'CLL': -0.680227, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 35.256, 'Inference time': 3.081}
{'AUC ROC': 0.571331, 'AUC PR': 0.586548, 'CLL': -0.680227, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 35.256, 'Inference time': 3.081}
{'AUC ROC': 0.571331, 'AUC PR': 0.586548, 'CLL': -0.680227, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 35.256, 'Inference time': 3.081}
{'AUC ROC': 0.571331, 'AUC PR': 0.586548, 'CLL': -0.680227, 'Precision': [0.61215, 0.5], 'Recall': 0.057709, 'F1': 0.105475, 'Learning time': 35.256, 'Inference time': 3.081}










Starting fold 5

Starting fold 5

Starting fold 5

Starting fold 5

Starting fold 5

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 0,491, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(K, I), venue(K, A) )
%   | | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.1637044906550679;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1350707473450015;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1350707473450015;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1350707473450015;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1350707473450015;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6268340145597604;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7310006812264268;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.2064993187735729;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( author(I, E), venue(I, A) )
%   | | | | then return -0.1350707473450015;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | | else return 0.5935006812264271;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3973716489683569;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.23543522998415795;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10984870741638292;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07257552766715866;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6724579792009823;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5866161938349704;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.18489217768870456;  // std dev = 0,148, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.023892817241924862;  // std dev = 0,397, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3247418617965904;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10268848573439074;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06044761086309314;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6724579792009823;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5866161938349704;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.18489217768870456;  // std dev = 0,148, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.023892817241924862;  // std dev = 0,397, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3247418617965904;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10268848573439074;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06044761086309314;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6724579792009823;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5866161938349704;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.18489217768870456;  // std dev = 0,148, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.023892817241924862;  // std dev = 0,397, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3247418617965904;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10268848573439074;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06044761086309314;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6724579792009823;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5866161938349704;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.18489217768870456;  // std dev = 0,148, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.023892817241924862;  // std dev = 0,397, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3247418617965904;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10268848573439074;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06044761086309314;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6724579792009823;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.5866161938349704;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.18489217768870456;  // std dev = 0,148, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.023892817241924862;  // std dev = 0,397, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3247418617965904;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5430280769832746;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13450043856784716;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10268848573439074;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06044761086309314;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5117141788455583;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5886376823097887;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.347793238687384;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.27815049600544917;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.4511376823097887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.11730258235813704;  // std dev = 0,372, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26821757211695213;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10256382032154514;  // std dev = 0,450, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.051083751562200685;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5117141788455583;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5886376823097887;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.347793238687384;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.27815049600544917;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.4511376823097887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.11730258235813704;  // std dev = 0,372, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26821757211695213;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10256382032154514;  // std dev = 0,450, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.051083751562200685;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5117141788455583;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5886376823097887;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.347793238687384;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.27815049600544917;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.4511376823097887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.11730258235813704;  // std dev = 0,372, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26821757211695213;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10256382032154514;  // std dev = 0,450, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.051083751562200685;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5117141788455583;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5886376823097887;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.347793238687384;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.27815049600544917;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.4511376823097887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.11730258235813704;  // std dev = 0,372, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26821757211695213;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10256382032154514;  // std dev = 0,450, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.051083751562200685;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5117141788455583;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5886376823097887;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.347793238687384;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, E), venue(I, B) )
%   | | | | then return -0.27815049600544917;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.4511376823097887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.11730258235813704;  // std dev = 0,372, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.26821757211695213;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10256382032154514;  // std dev = 0,450, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.051083751562200685;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19009027568946607;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23837970292006835;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17792630895392667;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1202590858544561;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09881168588849004;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5169904166168392;  // std dev = 0,877, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.22432330994619293;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08666412584375748;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020018023294786375;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19009027568946607;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23837970292006835;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17792630895392667;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1202590858544561;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09881168588849004;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5169904166168392;  // std dev = 0,877, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.22432330994619293;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08666412584375748;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020018023294786375;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19009027568946607;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23837970292006835;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17792630895392667;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1202590858544561;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09881168588849004;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5169904166168392;  // std dev = 0,877, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.22432330994619293;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08666412584375748;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020018023294786375;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19009027568946607;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23837970292006835;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17792630895392667;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1202590858544561;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09881168588849004;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5169904166168392;  // std dev = 0,877, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.22432330994619293;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08666412584375748;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020018023294786375;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19009027568946607;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23837970292006835;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17792630895392667;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1202590858544561;  // std dev = 0,931, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09881168588849004;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.5169904166168392;  // std dev = 0,877, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.22432330994619293;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08666412584375748;  // std dev = 0,453, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.020018023294786375;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04438462644442145;  // std dev = 0,388, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15206862594328413;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.020591922517970172;  // std dev = 0,305, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09750438895757974;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0829078391339986;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.010151221758230033;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.10981065376772707;  // std dev = 0,996, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0874552252302592;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.0171357172756538;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04438462644442145;  // std dev = 0,388, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15206862594328413;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.020591922517970172;  // std dev = 0,305, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09750438895757974;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0829078391339986;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.010151221758230033;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.10981065376772707;  // std dev = 0,996, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0874552252302592;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.0171357172756538;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04438462644442145;  // std dev = 0,388, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15206862594328413;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.020591922517970172;  // std dev = 0,305, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09750438895757974;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0829078391339986;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.010151221758230033;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.10981065376772707;  // std dev = 0,996, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0874552252302592;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.0171357172756538;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04438462644442145;  // std dev = 0,388, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15206862594328413;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.020591922517970172;  // std dev = 0,305, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09750438895757974;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0829078391339986;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.010151221758230033;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.10981065376772707;  // std dev = 0,996, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0874552252302592;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.0171357172756538;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04438462644442145;  // std dev = 0,388, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15206862594328413;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.020591922517970172;  // std dev = 0,305, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09750438895757974;  // std dev = 0,923, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0829078391339986;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.010151221758230033;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.10981065376772707;  // std dev = 0,996, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.0874552252302592;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.0171357172756538;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.06952752478928759;  // std dev = 0,386, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return -0.010319202895512091;  // std dev = 0,384, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1145759842466984;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46338894973060346;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20894271672884326;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03806187326526366;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.009101430371873276;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08398927246690739;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01463851939183019;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.06952752478928759;  // std dev = 0,386, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return -0.010319202895512091;  // std dev = 0,384, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1145759842466984;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46338894973060346;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20894271672884326;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03806187326526366;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.009101430371873276;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08398927246690739;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01463851939183019;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.06952752478928759;  // std dev = 0,386, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return -0.010319202895512091;  // std dev = 0,384, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1145759842466984;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46338894973060346;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20894271672884326;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03806187326526366;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.009101430371873276;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08398927246690739;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01463851939183019;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.06952752478928759;  // std dev = 0,386, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return -0.010319202895512091;  // std dev = 0,384, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1145759842466984;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46338894973060346;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20894271672884326;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03806187326526366;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.009101430371873276;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08398927246690739;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01463851939183019;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.06952752478928759;  // std dev = 0,386, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return -0.010319202895512091;  // std dev = 0,384, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else return 0.1145759842466984;  // std dev = 0,480, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46338894973060346;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20894271672884326;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03806187326526366;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.009101430371873276;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08398927246690739;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.01463851939183019;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08185984453707823;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34162980080059435;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1511941207927928;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1732794657701382;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05388038497338826;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.2830319058203244;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16544161108621674;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05106153626605271;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012483319737798025;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08185984453707823;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34162980080059435;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1511941207927928;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1732794657701382;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05388038497338826;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.2830319058203244;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16544161108621674;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05106153626605271;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012483319737798025;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08185984453707823;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34162980080059435;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1511941207927928;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1732794657701382;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05388038497338826;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.2830319058203244;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16544161108621674;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05106153626605271;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012483319737798025;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08185984453707823;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34162980080059435;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1511941207927928;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1732794657701382;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05388038497338826;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.2830319058203244;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16544161108621674;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05106153626605271;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012483319737798025;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08185984453707823;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.34162980080059435;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1511941207927928;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.1732794657701382;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05388038497338826;  // std dev = 0,451, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then if ( samebib(K, L), venue(L, B) )
%   | | | | then return 0.2830319058203244;  // std dev = 0,891, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.16544161108621674;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05106153626605271;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012483319737798025;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06177457024542326;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.036503954824567496;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.03065893779492467;  // std dev = 0,625, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04907375075015768;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010629427042680443;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06177457024542326;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.036503954824567496;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.03065893779492467;  // std dev = 0,625, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04907375075015768;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010629427042680443;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06177457024542326;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.036503954824567496;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.03065893779492467;  // std dev = 0,625, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04907375075015768;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010629427042680443;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06177457024542326;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.036503954824567496;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.03065893779492467;  // std dev = 0,625, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04907375075015768;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010629427042680443;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06177457024542326;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.036503954824567496;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.03065893779492467;  // std dev = 0,625, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04907375075015768;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.010629427042680443;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669131840314059;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029797028307263575;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03257139961837229;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009039220991141728;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669131840314059;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029797028307263575;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03257139961837229;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009039220991141728;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669131840314059;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029797028307263575;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03257139961837229;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009039220991141728;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669131840314059;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029797028307263575;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03257139961837229;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009039220991141728;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669131840314059;  // std dev = 0,473, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.029797028307263575;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03257139961837229;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.009039220991141728;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.550101
   AUC ROC   = 0.550101
   AUC ROC   = 0.550101
   AUC ROC   = 0.550101
   AUC ROC   = 0.550101
   AUC PR    = 0.568903
   AUC PR    = 0.568903
   AUC PR    = 0.568903
   AUC PR    = 0.568903
   AUC PR    = 0.568903
   CLL	      = -0.685773
   CLL	      = -0.685773
   CLL	      = -0.685773
   CLL	      = -0.685773
   CLL	      = -0.685773
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967










Total learning time: 51.484 seconds
Total learning time: 51.484 seconds
Total learning time: 51.484 seconds
Total learning time: 51.484 seconds
Total learning time: 51.484 seconds
Total inference time: 4.559 seconds
Total inference time: 4.559 seconds
Total inference time: 4.559 seconds
Total inference time: 4.559 seconds
Total inference time: 4.559 seconds
AUC ROC: 0.550101
AUC ROC: 0.550101
AUC ROC: 0.550101
AUC ROC: 0.550101
AUC ROC: 0.550101










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, B)', 'false,false,true,false': 'author(K, I), venue(K, A)'}, {'true': [0.491, 338, 498], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false,true': [1.095, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordvenue(B, F)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.373, 2, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 14, 0], 'true,true,false,false,true': [0.258, 13, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordvenue(B, F)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.373, 2, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 14, 0], 'true,true,false,false,true': [0.258, 13, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordvenue(B, F)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.373, 2, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 14, 0], 'true,true,false,false,true': [0.258, 13, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordvenue(B, F)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.373, 2, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 14, 0], 'true,true,false,false,true': [0.258, 13, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordvenue(B, F)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'true,true,false,false': 'author(I, E), venue(I, A)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.373, 2, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [1.49e-08, 14, 0], 'true,true,false,false,true': [0.258, 13, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false': [0.489, 307, 468], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.441, 32, 12], 'false,false': [0.414, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.148, 15, 0], 'true,true,false,false': [0.397, 15, 5], 'true,false': [0.489, 307, 468], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.148, 15, 0], 'true,true,false,false': [0.397, 15, 5], 'true,false': [0.489, 307, 468], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.148, 15, 0], 'true,true,false,false': [0.397, 15, 5], 'true,false': [0.489, 307, 468], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.148, 15, 0], 'true,true,false,false': [0.397, 15, 5], 'true,false': [0.489, 307, 468], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'true,true,false,true': 'samebib(G, H), venue(H, A)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.148, 15, 0], 'true,true,false,false': [0.397, 15, 5], 'true,false': [0.489, 307, 468], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.004, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false': [0.416, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,true,false,true': 'samebib(G, H), venue(H, B)', 'true,true,false,false': 'author(I, E), venue(I, B)', 'true,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.015, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false,true': [0.372, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true': [0.45, 38, 16], 'false,false': [0.411, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,true,false,true': 'samebib(G, H), venue(H, B)', 'true,true,false,false': 'author(I, E), venue(I, B)', 'true,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.015, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false,true': [0.372, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true': [0.45, 38, 16], 'false,false': [0.411, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,true,false,true': 'samebib(G, H), venue(H, B)', 'true,true,false,false': 'author(I, E), venue(I, B)', 'true,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.015, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false,true': [0.372, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true': [0.45, 38, 16], 'false,false': [0.411, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,true,false,true': 'samebib(G, H), venue(H, B)', 'true,true,false,false': 'author(I, E), venue(I, B)', 'true,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.015, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false,true': [0.372, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true': [0.45, 38, 16], 'false,false': [0.411, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,true,false,true': 'samebib(G, H), venue(H, B)', 'true,true,false,false': 'author(I, E), venue(I, B)', 'true,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false,true,true': [0.242, 1, 15], 'true,true,false,true,false': [0.015, 15, 0], 'true,true,false,false,true': [0.249, 14, 1], 'true,true,false,false,false': [0.894, 1, 4], 'true,false,true': [0.372, 29, 20], 'true,false,false': [0.486, 278, 448], 'false,true': [0.45, 38, 16], 'false,false': [0.411, 124, 36]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.735, 2, 2], 'false,true,true,false': [0.063, 4, 0], 'false,true,false,true': [0.931, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.877, 1, 3], 'false,false,true,true,false': [0.035, 4, 0], 'false,false,true,false': [0.453, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.735, 2, 2], 'false,true,true,false': [0.063, 4, 0], 'false,true,false,true': [0.931, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.877, 1, 3], 'false,false,true,true,false': [0.035, 4, 0], 'false,false,true,false': [0.453, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.735, 2, 2], 'false,true,true,false': [0.063, 4, 0], 'false,true,false,true': [0.931, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.877, 1, 3], 'false,false,true,true,false': [0.035, 4, 0], 'false,false,true,false': [0.453, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.735, 2, 2], 'false,true,true,false': [0.063, 4, 0], 'false,true,false,true': [0.931, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.877, 1, 3], 'false,false,true,true,false': [0.035, 4, 0], 'false,false,true,false': [0.453, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, A)', 'false,true,true': 'author(G, E), venue(G, B)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.475, 338, 498], 'false,true,true,true': [0.735, 2, 2], 'false,true,true,false': [0.063, 4, 0], 'false,true,false,true': [0.931, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true,true': [0.877, 1, 3], 'false,false,true,true,false': [0.035, 4, 0], 'false,false,true,false': [0.453, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.388, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true': [0.305, 6, 2], 'false,true,false,true': [0.923, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.79, 4, 1], 'false,false,true,false,true': [0.996, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.388, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true': [0.305, 6, 2], 'false,true,false,true': [0.923, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.79, 4, 1], 'false,false,true,false,true': [0.996, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.388, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true': [0.305, 6, 2], 'false,true,false,true': [0.923, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.79, 4, 1], 'false,false,true,false,true': [0.996, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.388, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true': [0.305, 6, 2], 'false,true,false,true': [0.923, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.79, 4, 1], 'false,false,true,false,true': [0.996, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,true,false': 'author(M, K), venue(M, A)'}, {'true,true': [0.388, 31, 30], 'true,false': [0.48, 307, 468], 'false,true,true': [0.305, 6, 2], 'false,true,false,true': [0.923, 3, 2], 'false,true,false,false': [0.455, 29, 12], 'false,false,true,true': [0.79, 4, 1], 'false,false,true,false,true': [0.996, 3, 2], 'false,false,true,false,false': [0.461, 25, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.386, 16, 18], 'true,true,false': [0.384, 15, 12], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.941, 1, 4], 'false,true,true,false': [0.076, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.631, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.386, 16, 18], 'true,true,false': [0.384, 15, 12], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.941, 1, 4], 'false,true,true,false': [0.076, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.631, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.386, 16, 18], 'true,true,false': [0.384, 15, 12], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.941, 1, 4], 'false,true,true,false': [0.076, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.631, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.386, 16, 18], 'true,true,false': [0.384, 15, 12], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.941, 1, 4], 'false,true,true,false': [0.076, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.631, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.386, 16, 18], 'true,true,false': [0.384, 15, 12], 'true,false': [0.48, 307, 468], 'false,true,true,true': [0.941, 1, 4], 'false,true,true,false': [0.076, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.631, 4, 1], 'false,false,true,false': [0.455, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.051, 5, 0], 'false,true,false,true': [0.016, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true,true': [0.891, 1, 3], 'false,false,true,true,false': [0.044, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.051, 5, 0], 'false,true,false,true': [0.016, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true,true': [0.891, 1, 3], 'false,false,true,true,false': [0.044, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.051, 5, 0], 'false,true,false,true': [0.016, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true,true': [0.891, 1, 3], 'false,false,true,true,false': [0.044, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.051, 5, 0], 'false,true,false,true': [0.016, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true,true': [0.891, 1, 3], 'false,false,true,true,false': [0.044, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,true,true': 'samebib(K, L), venue(L, B)'}, {'true': [0.473, 338, 498], 'false,true,true,true': [0.893, 1, 4], 'false,true,true,false': [0.051, 5, 0], 'false,true,false,true': [0.016, 3, 0], 'false,true,false,false': [0.451, 29, 12], 'false,false,true,true,true': [0.891, 1, 3], 'false,false,true,true,false': [0.044, 4, 0], 'false,false,true,false': [0.452, 27, 11], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,true': 'author(H, G), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true,true': [0.625, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,true': 'author(H, G), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true,true': [0.625, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,true': 'author(H, G), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true,true': [0.625, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,true': 'author(H, G), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true,true': [0.625, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,true': 'author(H, G), venue(H, B)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true,true': [0.625, 4, 1], 'false,false,true,false': [0.453, 28, 13], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true': [0.473, 338, 498], 'false,true': [0.422, 38, 16], 'false,false,true': [0.438, 32, 14], 'false,false,false': [0.395, 92, 22]}]
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.24084270048762138, 0.18394619617433927], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,true,false': [0.24000000000000005, 0.21219135802469086]}
{'': [0.2408427004876197, 0.18085131526571985], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [0.13888888888888892, 0.2415660141607666], 'true,true,false': [0.2500000000000003, 0.19390581717451522], 'true,true,false,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false,false': [0.06632653061224487, 0.15999999999999998], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.2408427004876197, 0.18085131526571985], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [0.13888888888888892, 0.2415660141607666], 'true,true,false': [0.2500000000000003, 0.19390581717451522], 'true,true,false,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false,false': [0.06632653061224487, 0.15999999999999998], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.2408427004876197, 0.18085131526571985], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [0.13888888888888892, 0.2415660141607666], 'true,true,false': [0.2500000000000003, 0.19390581717451522], 'true,true,false,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false,false': [0.06632653061224487, 0.15999999999999998], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.2408427004876197, 0.18085131526571985], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [0.13888888888888892, 0.2415660141607666], 'true,true,false': [0.2500000000000003, 0.19390581717451522], 'true,true,false,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false,false': [0.06632653061224487, 0.15999999999999998], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.2408427004876197, 0.18085131526571985], 'true': [0.24993281375974222, 0.23921082206034677], 'true,true': [0.13888888888888892, 0.2415660141607666], 'true,true,false': [0.2500000000000003, 0.19390581717451522], 'true,true,false,true': [0.05859375000000033, 1.586032892321652e-17], 'true,true,false,false': [0.06632653061224487, 0.15999999999999998], 'false': [0.20558112887464916, 0.1715804742138081], 'false,true': [0.23976915012399677, 0.1948903879988322]}
{'': [0.23621262207622315, 0.18034572002594573], 'true': [0.18916876648578762, 0.23921082206035243], 'true,true': [0.0, 0.1796132167967715], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'true,true,false': [0.17959668774203663, 0.15783110458068111], 'true,true,false,true': [0.05859375000000017, 0.001453498409956914]}
{'': [0.23621262207622315, 0.18034572002594573], 'true': [0.18916876648578762, 0.23921082206035243], 'true,true': [0.0, 0.1796132167967715], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'true,true,false': [0.17959668774203663, 0.15783110458068111], 'true,true,false,true': [0.05859375000000017, 0.001453498409956914]}
{'': [0.23621262207622315, 0.18034572002594573], 'true': [0.18916876648578762, 0.23921082206035243], 'true,true': [0.0, 0.1796132167967715], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'true,true,false': [0.17959668774203663, 0.15783110458068111], 'true,true,false,true': [0.05859375000000017, 0.001453498409956914]}
{'': [0.23621262207622315, 0.18034572002594573], 'true': [0.18916876648578762, 0.23921082206035243], 'true,true': [0.0, 0.1796132167967715], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'true,true,false': [0.17959668774203663, 0.15783110458068111], 'true,true,false,true': [0.05859375000000017, 0.001453498409956914]}
{'': [0.23621262207622315, 0.18034572002594573], 'true': [0.18916876648578762, 0.23921082206035243], 'true,true': [0.0, 0.1796132167967715], 'false': [0.19901794644735502, 0.1731033252366878], 'false,true': [0.19448064056326136, 0.19813849522450788], 'false,true,true': [0.15943577486219745, 3.0615718717513785e-06], 'true,true,false': [0.17959668774203663, 0.15783110458068111], 'true,true,false,true': [0.05859375000000017, 0.001453498409956914]}
{'': [0.2325010720871641, 0.1779365499196199], 'true': [0.2282496006743899, 0.23145951787721492], 'true,false': [0.13852010347787436, 0.2362922994027387], 'true,true': [-8.881784197001253e-17, 0.23726507434581107], 'true,true,false': [0.2492472728674808, 0.18615794941381356], 'true,true,false,true': [0.05859375, 1.6001018799993715e-05], 'true,true,false,false': [0.061911954127495374, 0.16000000000000006], 'false': [0.20234360259204043, 0.16903042822262737]}
{'': [0.2325010720871641, 0.1779365499196199], 'true': [0.2282496006743899, 0.23145951787721492], 'true,false': [0.13852010347787436, 0.2362922994027387], 'true,true': [-8.881784197001253e-17, 0.23726507434581107], 'true,true,false': [0.2492472728674808, 0.18615794941381356], 'true,true,false,true': [0.05859375, 1.6001018799993715e-05], 'true,true,false,false': [0.061911954127495374, 0.16000000000000006], 'false': [0.20234360259204043, 0.16903042822262737]}
{'': [0.2325010720871641, 0.1779365499196199], 'true': [0.2282496006743899, 0.23145951787721492], 'true,false': [0.13852010347787436, 0.2362922994027387], 'true,true': [-8.881784197001253e-17, 0.23726507434581107], 'true,true,false': [0.2492472728674808, 0.18615794941381356], 'true,true,false,true': [0.05859375, 1.6001018799993715e-05], 'true,true,false,false': [0.061911954127495374, 0.16000000000000006], 'false': [0.20234360259204043, 0.16903042822262737]}
{'': [0.2325010720871641, 0.1779365499196199], 'true': [0.2282496006743899, 0.23145951787721492], 'true,false': [0.13852010347787436, 0.2362922994027387], 'true,true': [-8.881784197001253e-17, 0.23726507434581107], 'true,true,false': [0.2492472728674808, 0.18615794941381356], 'true,true,false,true': [0.05859375, 1.6001018799993715e-05], 'true,true,false,false': [0.061911954127495374, 0.16000000000000006], 'false': [0.20234360259204043, 0.16903042822262737]}
{'': [0.2325010720871641, 0.1779365499196199], 'true': [0.2282496006743899, 0.23145951787721492], 'true,false': [0.13852010347787436, 0.2362922994027387], 'true,true': [-8.881784197001253e-17, 0.23726507434581107], 'true,true,false': [0.2492472728674808, 0.18615794941381356], 'true,true,false,true': [0.05859375, 1.6001018799993715e-05], 'true,true,false,false': [0.061911954127495374, 0.16000000000000006], 'false': [0.20234360259204043, 0.16903042822262737]}
{'': [0.2257463043054237, 0.1776295197675989], 'false': [0.19036681410792475, 0.1727377468429517], 'false,true': [0.1114351931288505, 0.2033489989985779], 'false,true,false': [0.17319308658500115, 0.2069765502749491], 'false,false': [0.2106350534319532, 0.15574022776238824], 'false,false,true': [0.23357215836871065, 0.2051869821778418], 'false,false,true,true': [0.19206949075714919, 0.00030180538488709663], 'false,true,true': [0.13522189374361612, 0.0009931447528694556]}
{'': [0.2257463043054237, 0.1776295197675989], 'false': [0.19036681410792475, 0.1727377468429517], 'false,true': [0.1114351931288505, 0.2033489989985779], 'false,true,false': [0.17319308658500115, 0.2069765502749491], 'false,false': [0.2106350534319532, 0.15574022776238824], 'false,false,true': [0.23357215836871065, 0.2051869821778418], 'false,false,true,true': [0.19206949075714919, 0.00030180538488709663], 'false,true,true': [0.13522189374361612, 0.0009931447528694556]}
{'': [0.2257463043054237, 0.1776295197675989], 'false': [0.19036681410792475, 0.1727377468429517], 'false,true': [0.1114351931288505, 0.2033489989985779], 'false,true,false': [0.17319308658500115, 0.2069765502749491], 'false,false': [0.2106350534319532, 0.15574022776238824], 'false,false,true': [0.23357215836871065, 0.2051869821778418], 'false,false,true,true': [0.19206949075714919, 0.00030180538488709663], 'false,true,true': [0.13522189374361612, 0.0009931447528694556]}
{'': [0.2257463043054237, 0.1776295197675989], 'false': [0.19036681410792475, 0.1727377468429517], 'false,true': [0.1114351931288505, 0.2033489989985779], 'false,true,false': [0.17319308658500115, 0.2069765502749491], 'false,false': [0.2106350534319532, 0.15574022776238824], 'false,false,true': [0.23357215836871065, 0.2051869821778418], 'false,false,true,true': [0.19206949075714919, 0.00030180538488709663], 'false,true,true': [0.13522189374361612, 0.0009931447528694556]}
{'': [0.2257463043054237, 0.1776295197675989], 'false': [0.19036681410792475, 0.1727377468429517], 'false,true': [0.1114351931288505, 0.2033489989985779], 'false,true,false': [0.17319308658500115, 0.2069765502749491], 'false,false': [0.2106350534319532, 0.15574022776238824], 'false,false,true': [0.23357215836871065, 0.2051869821778418], 'false,false,true,true': [0.19206949075714919, 0.00030180538488709663], 'false,true,true': [0.13522189374361612, 0.0009931447528694556]}
{'': [0.22517384242697333, 0.17457559282659646], 'true': [0.1503271611900938, 0.23021889234696924], 'false': [0.18724830403417153, 0.169894281317511], 'false,true': [0.09312560741192813, 0.20301250136549034], 'false,true,false': [0.17029209601041367, 0.20697963608552422], 'false,false': [0.20222048104713314, 0.15574022776238897], 'false,false,true': [0.12467770497499434, 0.21058271558239972], 'false,false,true,false': [0.19856167178659695, 0.21219135802469158]}
{'': [0.22517384242697333, 0.17457559282659646], 'true': [0.1503271611900938, 0.23021889234696924], 'false': [0.18724830403417153, 0.169894281317511], 'false,true': [0.09312560741192813, 0.20301250136549034], 'false,true,false': [0.17029209601041367, 0.20697963608552422], 'false,false': [0.20222048104713314, 0.15574022776238897], 'false,false,true': [0.12467770497499434, 0.21058271558239972], 'false,false,true,false': [0.19856167178659695, 0.21219135802469158]}
{'': [0.22517384242697333, 0.17457559282659646], 'true': [0.1503271611900938, 0.23021889234696924], 'false': [0.18724830403417153, 0.169894281317511], 'false,true': [0.09312560741192813, 0.20301250136549034], 'false,true,false': [0.17029209601041367, 0.20697963608552422], 'false,false': [0.20222048104713314, 0.15574022776238897], 'false,false,true': [0.12467770497499434, 0.21058271558239972], 'false,false,true,false': [0.19856167178659695, 0.21219135802469158]}
{'': [0.22517384242697333, 0.17457559282659646], 'true': [0.1503271611900938, 0.23021889234696924], 'false': [0.18724830403417153, 0.169894281317511], 'false,true': [0.09312560741192813, 0.20301250136549034], 'false,true,false': [0.17029209601041367, 0.20697963608552422], 'false,false': [0.20222048104713314, 0.15574022776238897], 'false,false,true': [0.12467770497499434, 0.21058271558239972], 'false,false,true,false': [0.19856167178659695, 0.21219135802469158]}
{'': [0.22517384242697333, 0.17457559282659646], 'true': [0.1503271611900938, 0.23021889234696924], 'false': [0.18724830403417153, 0.169894281317511], 'false,true': [0.09312560741192813, 0.20301250136549034], 'false,true,false': [0.17029209601041367, 0.20697963608552422], 'false,false': [0.20222048104713314, 0.15574022776238897], 'false,false,true': [0.12467770497499434, 0.21058271558239972], 'false,false,true,false': [0.19856167178659695, 0.21219135802469158]}
{'': [0.22457039436770523, 0.17404794562494083], 'true': [0.15000714303282986, 0.22996768865105507], 'false': [0.19331386881657264, 0.16741330593433396], 'false,true': [0.2021096519416427, 0.18984265547588278], 'false,true,true': [0.17705158365125664, 0.0011527853699604186], 'false,false': [0.1938424657979653, 0.15574022776238833], 'false,false,true': [0.07971070539847698, 0.20681902979908065], 'true,true': [0.149176044315999, 0.14750015445380033]}
{'': [0.22457039436770523, 0.17404794562494083], 'true': [0.15000714303282986, 0.22996768865105507], 'false': [0.19331386881657264, 0.16741330593433396], 'false,true': [0.2021096519416427, 0.18984265547588278], 'false,true,true': [0.17705158365125664, 0.0011527853699604186], 'false,false': [0.1938424657979653, 0.15574022776238833], 'false,false,true': [0.07971070539847698, 0.20681902979908065], 'true,true': [0.149176044315999, 0.14750015445380033]}
{'': [0.22457039436770523, 0.17404794562494083], 'true': [0.15000714303282986, 0.22996768865105507], 'false': [0.19331386881657264, 0.16741330593433396], 'false,true': [0.2021096519416427, 0.18984265547588278], 'false,true,true': [0.17705158365125664, 0.0011527853699604186], 'false,false': [0.1938424657979653, 0.15574022776238833], 'false,false,true': [0.07971070539847698, 0.20681902979908065], 'true,true': [0.149176044315999, 0.14750015445380033]}
{'': [0.22457039436770523, 0.17404794562494083], 'true': [0.15000714303282986, 0.22996768865105507], 'false': [0.19331386881657264, 0.16741330593433396], 'false,true': [0.2021096519416427, 0.18984265547588278], 'false,true,true': [0.17705158365125664, 0.0011527853699604186], 'false,false': [0.1938424657979653, 0.15574022776238833], 'false,false,true': [0.07971070539847698, 0.20681902979908065], 'true,true': [0.149176044315999, 0.14750015445380033]}
{'': [0.22457039436770523, 0.17404794562494083], 'true': [0.15000714303282986, 0.22996768865105507], 'false': [0.19331386881657264, 0.16741330593433396], 'false,true': [0.2021096519416427, 0.18984265547588278], 'false,true,true': [0.17705158365125664, 0.0011527853699604186], 'false,false': [0.1938424657979653, 0.15574022776238833], 'false,false,true': [0.07971070539847698, 0.20681902979908065], 'true,true': [0.149176044315999, 0.14750015445380033]}
{'': [0.22417412791685407, 0.1715928379201613], 'false': [0.1835724286019732, 0.16739259260226586], 'false,true': [0.14071402937830674, 0.19271498279736052], 'false,true,false': [8.662960838121125e-05, 0.2032914495893767], 'false,false': [0.19513456625429984, 0.15574022776238905], 'false,false,true': [0.14979051421189812, 0.20467028095363754], 'false,false,true,true': [0.19853371438135609, 0.0004830663591792808], 'false,true,true': [0.1594720135807942, 0.0005183363284767984]}
{'': [0.22417412791685407, 0.1715928379201613], 'false': [0.1835724286019732, 0.16739259260226586], 'false,true': [0.14071402937830674, 0.19271498279736052], 'false,true,false': [8.662960838121125e-05, 0.2032914495893767], 'false,false': [0.19513456625429984, 0.15574022776238905], 'false,false,true': [0.14979051421189812, 0.20467028095363754], 'false,false,true,true': [0.19853371438135609, 0.0004830663591792808], 'false,true,true': [0.1594720135807942, 0.0005183363284767984]}
{'': [0.22417412791685407, 0.1715928379201613], 'false': [0.1835724286019732, 0.16739259260226586], 'false,true': [0.14071402937830674, 0.19271498279736052], 'false,true,false': [8.662960838121125e-05, 0.2032914495893767], 'false,false': [0.19513456625429984, 0.15574022776238905], 'false,false,true': [0.14979051421189812, 0.20467028095363754], 'false,false,true,true': [0.19853371438135609, 0.0004830663591792808], 'false,true,true': [0.1594720135807942, 0.0005183363284767984]}
{'': [0.22417412791685407, 0.1715928379201613], 'false': [0.1835724286019732, 0.16739259260226586], 'false,true': [0.14071402937830674, 0.19271498279736052], 'false,true,false': [8.662960838121125e-05, 0.2032914495893767], 'false,false': [0.19513456625429984, 0.15574022776238905], 'false,false,true': [0.14979051421189812, 0.20467028095363754], 'false,false,true,true': [0.19853371438135609, 0.0004830663591792808], 'false,true,true': [0.1594720135807942, 0.0005183363284767984]}
{'': [0.22417412791685407, 0.1715928379201613], 'false': [0.1835724286019732, 0.16739259260226586], 'false,true': [0.14071402937830674, 0.19271498279736052], 'false,true,false': [8.662960838121125e-05, 0.2032914495893767], 'false,false': [0.19513456625429984, 0.15574022776238905], 'false,false,true': [0.14979051421189812, 0.20467028095363754], 'false,false,true,true': [0.19853371438135609, 0.0004830663591792808], 'false,true,true': [0.1594720135807942, 0.0005183363284767984]}
{'': [0.2240679158460227, 0.16937598859749634], 'false': [0.1782140372666086, 0.16631750808448775], 'false,false': [0.19189898497728428, 0.15574022776238827], 'false,false,true': [0.0780966574957223, 0.20508630655104926]}
{'': [0.2240679158460227, 0.16937598859749634], 'false': [0.1782140372666086, 0.16631750808448775], 'false,false': [0.19189898497728428, 0.15574022776238827], 'false,false,true': [0.0780966574957223, 0.20508630655104926]}
{'': [0.2240679158460227, 0.16937598859749634], 'false': [0.1782140372666086, 0.16631750808448775], 'false,false': [0.19189898497728428, 0.15574022776238827], 'false,false,true': [0.0780966574957223, 0.20508630655104926]}
{'': [0.2240679158460227, 0.16937598859749634], 'false': [0.1782140372666086, 0.16631750808448775], 'false,false': [0.19189898497728428, 0.15574022776238827], 'false,false,true': [0.0780966574957223, 0.20508630655104926]}
{'': [0.2240679158460227, 0.16937598859749634], 'false': [0.1782140372666086, 0.16631750808448775], 'false,false': [0.19189898497728428, 0.15574022776238827], 'false,false,true': [0.0780966574957223, 0.20508630655104926]}
{'': [0.22401333796878894, 0.16920189190779208], 'false': [0.17796722768099965, 0.16619418748709452], 'false,false': [0.19170727036029805, 0.15574022776238777]}
{'': [0.22401333796878894, 0.16920189190779208], 'false': [0.17796722768099965, 0.16619418748709452], 'false,false': [0.19170727036029805, 0.15574022776238777]}
{'': [0.22401333796878894, 0.16920189190779208], 'false': [0.17796722768099965, 0.16619418748709452], 'false,false': [0.19170727036029805, 0.15574022776238777]}
{'': [0.22401333796878894, 0.16920189190779208], 'false': [0.17796722768099965, 0.16619418748709452], 'false,false': [0.19170727036029805, 0.15574022776238777]}
{'': [0.22401333796878894, 0.16920189190779208], 'false': [0.17796722768099965, 0.16619418748709452], 'false,false': [0.19170727036029805, 0.15574022776238777]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(E, F), haswordvenue(B, F).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;true,true,false;author(G, E), venue(G, B).;true;true', '2;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;false,true;author(K, J), venue(K, B).;true;true', '2;false,true,true;samebib(K, L), venue(L, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;true,true,false;author(G, E), venue(G, A).;true;true', '3;true,true,false,true;samebib(G, H), venue(H, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;author(G, E), venue(G, B).;true;true', '4;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;false,false,true;author(K, J), venue(K, A).;true;true', '4;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '6;false,true;author(I, H), venue(I, A).;true;true', '6;false,true,true;samebib(I, J), venue(J, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,true;author(F, E), venue(F, B).;true;true', '7;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;false,true,false;author(H, E), venue(H, A).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '7;false,false,true;author(K, J), venue(K, A).;true;true', '7;false,false,true,true;samebib(K, L), venue(L, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(E, F), haswordvenue(B, F).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;true,true,false;author(G, E), venue(G, B).;true;true', '2;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;false,true;author(K, J), venue(K, B).;true;true', '2;false,true,true;samebib(K, L), venue(L, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;true,true,false;author(G, E), venue(G, A).;true;true', '3;true,true,false,true;samebib(G, H), venue(H, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;author(G, E), venue(G, B).;true;true', '4;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;false,false,true;author(K, J), venue(K, A).;true;true', '4;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '6;false,true;author(I, H), venue(I, A).;true;true', '6;false,true,true;samebib(I, J), venue(J, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,true;author(F, E), venue(F, B).;true;true', '7;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;false,true,false;author(H, E), venue(H, A).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '7;false,false,true;author(K, J), venue(K, A).;true;true', '7;false,false,true,true;samebib(K, L), venue(L, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(E, F), haswordvenue(B, F).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;true,true,false;author(G, E), venue(G, B).;true;true', '2;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;false,true;author(K, J), venue(K, B).;true;true', '2;false,true,true;samebib(K, L), venue(L, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;true,true,false;author(G, E), venue(G, A).;true;true', '3;true,true,false,true;samebib(G, H), venue(H, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;author(G, E), venue(G, B).;true;true', '4;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;false,false,true;author(K, J), venue(K, A).;true;true', '4;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '6;false,true;author(I, H), venue(I, A).;true;true', '6;false,true,true;samebib(I, J), venue(J, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,true;author(F, E), venue(F, B).;true;true', '7;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;false,true,false;author(H, E), venue(H, A).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '7;false,false,true;author(K, J), venue(K, A).;true;true', '7;false,false,true,true;samebib(K, L), venue(L, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(E, F), haswordvenue(B, F).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;true,true,false;author(G, E), venue(G, B).;true;true', '2;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;false,true;author(K, J), venue(K, B).;true;true', '2;false,true,true;samebib(K, L), venue(L, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;true,true,false;author(G, E), venue(G, A).;true;true', '3;true,true,false,true;samebib(G, H), venue(H, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;author(G, E), venue(G, B).;true;true', '4;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;false,false,true;author(K, J), venue(K, A).;true;true', '4;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '6;false,true;author(I, H), venue(I, A).;true;true', '6;false,true,true;samebib(I, J), venue(J, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,true;author(F, E), venue(F, B).;true;true', '7;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;false,true,false;author(H, E), venue(H, A).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '7;false,false,true;author(K, J), venue(K, A).;true;true', '7;false,false,true,true;samebib(K, L), venue(L, B).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '0;false,true;author(F, E), venue(F, B).;true;true', '0;false,true,true;samebib(F, G), venue(G, A).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;true,true;haswordauthor(E, F), haswordvenue(B, F).;true;true', '1;true,true,false;author(G, E), venue(G, B).;true;true', '1;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;true,true;haswordauthor(F, C).;true;true', '2;true,true,false;author(G, E), venue(G, B).;true;true', '2;true,true,false,true;samebib(G, H), venue(H, A).;true;true', '2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true', '2;false,true;author(K, J), venue(K, B).;true;true', '2;false,true,true;samebib(K, L), venue(L, A).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;true,true;haswordauthor(F, C).;true;true', '3;true,true,false;author(G, E), venue(G, A).;true;true', '3;true,true,false,true;samebib(G, H), venue(H, B).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '4;false,true;author(F, E), venue(F, A).;true;true', '4;false,true,true;author(G, E), venue(G, B).;true;true', '4;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '4;false,false,true;author(K, J), venue(K, A).;true;true', '4;false,false,true,true;samebib(K, L), venue(L, B).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true', '6;false,true;author(I, H), venue(I, A).;true;true', '6;false,true,true;samebib(I, J), venue(J, B).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;false,true;author(F, E), venue(F, B).;true;true', '7;false,true,true;samebib(F, G), venue(G, A).;true;true', '7;false,true,false;author(H, E), venue(H, A).;true;true', '7;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true', '7;false,false,true;author(K, J), venue(K, A).;true;true', '7;false,false,true,true;samebib(K, L), venue(L, B).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6007960230102598;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6674724186538795;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09104648455645763;  // std dev = 0,403, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39602854064825405;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11845173935359928;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06966335862008469;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6007960230102598;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6674724186538795;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09104648455645763;  // std dev = 0,403, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39602854064825405;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11845173935359928;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06966335862008469;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6007960230102598;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6674724186538795;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09104648455645763;  // std dev = 0,403, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39602854064825405;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11845173935359928;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06966335862008469;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6007960230102598;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6674724186538795;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09104648455645763;  // std dev = 0,403, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39602854064825405;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11845173935359928;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06966335862008469;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.6007960230102598;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.6674724186538795;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.09104648455645763;  // std dev = 0,403, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else return 0.39602854064825405;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6464700240554941;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15352997594450596;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11845173935359928;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06966335862008469;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6200933677240477;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2102174824031132;  // std dev = 0,363, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.06264234364506545;  // std dev = 0,396, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3233646618699963;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5431370310712508;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13443632777226372;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10250565971709093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.13158434412136186;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03149305469265488;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6200933677240477;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2102174824031132;  // std dev = 0,363, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.06264234364506545;  // std dev = 0,396, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3233646618699963;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5431370310712508;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13443632777226372;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10250565971709093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.13158434412136186;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03149305469265488;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6200933677240477;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2102174824031132;  // std dev = 0,363, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.06264234364506545;  // std dev = 0,396, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3233646618699963;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5431370310712508;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13443632777226372;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10250565971709093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.13158434412136186;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03149305469265488;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6200933677240477;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2102174824031132;  // std dev = 0,363, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.06264234364506545;  // std dev = 0,396, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3233646618699963;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5431370310712508;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13443632777226372;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10250565971709093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.13158434412136186;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03149305469265488;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6200933677240477;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2102174824031132;  // std dev = 0,363, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.06264234364506545;  // std dev = 0,396, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.3233646618699963;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5431370310712508;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13443632777226372;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10250565971709093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.13158434412136186;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03149305469265488;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4694283960569045;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5873970916379782;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3427538006010511;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09479809121350503;  // std dev = 0,431, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2589725558926206;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.18407829586255978;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.18837944268468787;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1018506643688696;  // std dev = 0,448, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05120264266574489;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4694283960569045;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5873970916379782;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3427538006010511;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09479809121350503;  // std dev = 0,431, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2589725558926206;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.18407829586255978;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.18837944268468787;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1018506643688696;  // std dev = 0,448, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05120264266574489;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4694283960569045;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5873970916379782;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3427538006010511;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09479809121350503;  // std dev = 0,431, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2589725558926206;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.18407829586255978;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.18837944268468787;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1018506643688696;  // std dev = 0,448, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05120264266574489;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4694283960569045;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5873970916379782;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3427538006010511;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09479809121350503;  // std dev = 0,431, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2589725558926206;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.18407829586255978;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.18837944268468787;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1018506643688696;  // std dev = 0,448, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05120264266574489;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4694283960569045;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.5873970916379782;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.3427538006010511;  // std dev = 0,106, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09479809121350503;  // std dev = 0,431, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.2589725558926206;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.18407829586255978;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.18837944268468787;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1018506643688696;  // std dev = 0,448, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05120264266574489;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19056825216773735;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23789860173819155;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17793728176797777;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.015370766927260587;  // std dev = 0,774, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11561389099518937;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.43020594472443774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17440582891937484;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08830358222352841;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01997943852267564;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19056825216773735;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23789860173819155;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17793728176797777;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.015370766927260587;  // std dev = 0,774, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11561389099518937;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.43020594472443774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17440582891937484;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08830358222352841;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01997943852267564;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19056825216773735;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23789860173819155;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17793728176797777;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.015370766927260587;  // std dev = 0,774, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11561389099518937;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.43020594472443774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17440582891937484;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08830358222352841;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01997943852267564;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19056825216773735;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23789860173819155;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17793728176797777;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.015370766927260587;  // std dev = 0,774, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11561389099518937;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.43020594472443774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17440582891937484;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08830358222352841;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01997943852267564;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19056825216773735;  // std dev = 0,476, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.23789860173819155;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17793728176797777;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.015370766927260587;  // std dev = 0,774, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11561389099518937;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then if ( samebib(L, M), venue(M, B) )
%   | | | | then return 0.43020594472443774;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.17440582891937484;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08830358222352841;  // std dev = 0,452, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.01997943852267564;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14462483662204273;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07526850105008984;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.013259169919522173;  // std dev = 0,664, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08750197825010936;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017102219057145186;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14462483662204273;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07526850105008984;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.013259169919522173;  // std dev = 0,664, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08750197825010936;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017102219057145186;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14462483662204273;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07526850105008984;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.013259169919522173;  // std dev = 0,664, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08750197825010936;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017102219057145186;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14462483662204273;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07526850105008984;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.013259169919522173;  // std dev = 0,664, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08750197825010936;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017102219057145186;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14462483662204273;  // std dev = 0,475, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07526850105008984;  // std dev = 0,429, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.013259169919522173;  // std dev = 0,664, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08750197825010936;  // std dev = 0,455, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.017102219057145186;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00853389560132738;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026832021752910194;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1231848988820053;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1114947235463267;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04094417040228745;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01698949739525633;  // std dev = 0,626, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, B) )
%   | | | | then return 0.08426275659805824;  // std dev = 0,919, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08369725342282225;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014609557844595262;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00853389560132738;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026832021752910194;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1231848988820053;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1114947235463267;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04094417040228745;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01698949739525633;  // std dev = 0,626, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, B) )
%   | | | | then return 0.08426275659805824;  // std dev = 0,919, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08369725342282225;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014609557844595262;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00853389560132738;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026832021752910194;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1231848988820053;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1114947235463267;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04094417040228745;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01698949739525633;  // std dev = 0,626, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, B) )
%   | | | | then return 0.08426275659805824;  // std dev = 0,919, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08369725342282225;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014609557844595262;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00853389560132738;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026832021752910194;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1231848988820053;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1114947235463267;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04094417040228745;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01698949739525633;  // std dev = 0,626, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, B) )
%   | | | | then return 0.08426275659805824;  // std dev = 0,919, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08369725342282225;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014609557844595262;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00853389560132738;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026832021752910194;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1231848988820053;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1114947235463267;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04094417040228745;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.01698949739525633;  // std dev = 0,626, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, B) )
%   | | | | then return 0.08426275659805824;  // std dev = 0,919, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.08369725342282225;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.014609557844595262;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006564968608336958;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02130082435483468;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09240902814658136;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09352064410172754;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.18076221598576447;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | | then return -0.03801539557581586;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06891243819221612;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.05313741595501467;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012458369571026506;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006564968608336958;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02130082435483468;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09240902814658136;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09352064410172754;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.18076221598576447;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | | then return -0.03801539557581586;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06891243819221612;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.05313741595501467;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012458369571026506;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006564968608336958;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02130082435483468;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09240902814658136;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09352064410172754;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.18076221598576447;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | | then return -0.03801539557581586;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06891243819221612;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.05313741595501467;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012458369571026506;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006564968608336958;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02130082435483468;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09240902814658136;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09352064410172754;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.18076221598576447;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | | then return -0.03801539557581586;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06891243819221612;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.05313741595501467;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012458369571026506;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006564968608336958;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02130082435483468;  // std dev = 0,353, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.09240902814658136;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09352064410172754;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.18076221598576447;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | | then return -0.03801539557581586;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | | else return 0.06891243819221612;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.05313741595501467;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.012458369571026506;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005049884066223257;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.016890282351196256;  // std dev = 0,352, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06943174857840796;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07563751099717712;  // std dev = 0,370, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031847015954192474;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.03361529225657456;  // std dev = 0,645, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.03649902346175218;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05489213522114262;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010607998094095067;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005049884066223257;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.016890282351196256;  // std dev = 0,352, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06943174857840796;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07563751099717712;  // std dev = 0,370, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031847015954192474;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.03361529225657456;  // std dev = 0,645, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.03649902346175218;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05489213522114262;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010607998094095067;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005049884066223257;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.016890282351196256;  // std dev = 0,352, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06943174857840796;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07563751099717712;  // std dev = 0,370, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031847015954192474;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.03361529225657456;  // std dev = 0,645, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.03649902346175218;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05489213522114262;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010607998094095067;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005049884066223257;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.016890282351196256;  // std dev = 0,352, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06943174857840796;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07563751099717712;  // std dev = 0,370, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031847015954192474;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.03361529225657456;  // std dev = 0,645, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.03649902346175218;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05489213522114262;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010607998094095067;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.005049884066223257;  // std dev = 0,401, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.016890282351196256;  // std dev = 0,352, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.06943174857840796;  // std dev = 0,486, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.07563751099717712;  // std dev = 0,370, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.031847015954192474;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return -0.03361529225657456;  // std dev = 0,645, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(N, L), venue(N, A) )
%   | | | | then return 0.03649902346175218;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.05489213522114262;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.010607998094095067;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35135113815302926;  // std dev = 0,225, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3455855539904953;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2997663045316419;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3219372807332782;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04983465615873487;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.032461717485834624;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.045334422385897674;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03265445421739099;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009020864146071504;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35135113815302926;  // std dev = 0,225, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3455855539904953;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2997663045316419;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3219372807332782;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04983465615873487;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.032461717485834624;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.045334422385897674;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03265445421739099;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009020864146071504;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35135113815302926;  // std dev = 0,225, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3455855539904953;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2997663045316419;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3219372807332782;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04983465615873487;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.032461717485834624;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.045334422385897674;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03265445421739099;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009020864146071504;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35135113815302926;  // std dev = 0,225, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3455855539904953;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2997663045316419;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3219372807332782;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04983465615873487;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.032461717485834624;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.045334422385897674;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03265445421739099;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009020864146071504;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35135113815302926;  // std dev = 0,225, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3455855539904953;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2997663045316419;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3219372807332782;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.04983465615873487;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.032461717485834624;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.045334422385897674;  // std dev = 0,383, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03265445421739099;  // std dev = 0,451, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.009020864146071504;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.550496
   AUC ROC   = 0.550496
   AUC ROC   = 0.550496
   AUC ROC   = 0.550496
   AUC ROC   = 0.550496
   AUC PR    = 0.569469
   AUC PR    = 0.569469
   AUC PR    = 0.569469
   AUC PR    = 0.569469
   AUC PR    = 0.569469
   CLL	      = -0.685787
   CLL	      = -0.685787
   CLL	      = -0.685787
   CLL	      = -0.685787
   CLL	      = -0.685787
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Precision = 0.547116 at threshold = 0.5
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   Recall    = 0.934333
   F1        = 0.69012
   F1        = 0.69012
   F1        = 0.69012
   F1        = 0.69012
   F1        = 0.69012










Total learning time: 39.837 seconds
Total learning time: 39.837 seconds
Total learning time: 39.837 seconds
Total learning time: 39.837 seconds
Total learning time: 39.837 seconds
Total inference time: 5.763 seconds
Total inference time: 5.763 seconds
Total inference time: 5.763 seconds
Total inference time: 5.763 seconds
Total inference time: 5.763 seconds
AUC ROC: 0.550496
AUC ROC: 0.550496
AUC ROC: 0.550496
AUC ROC: 0.550496
AUC ROC: 0.550496










Refined model AUC ROC: 0.550496
Refined model AUC ROC: 0.550496
Refined model AUC ROC: 0.550496
Refined model AUC ROC: 0.550496
Refined model AUC ROC: 0.550496










Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 11:10:11
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 11:10:11
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 11:10:11
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 11:10:11
Dataset: imdb->cora, Fold: 5, Type: transfer, Time: 11:10:11
{'AUC ROC': 0.550496, 'AUC PR': 0.569469, 'CLL': -0.685787, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.321, 'Inference time': 5.763, 'Mapping results': {'Knowledge compiling time': 0.14194130897521973, 'Generating paths time': 4.644397258758545, 'Generating mappings time': 0.06455636024475098, 'Possible mappings': 6, 'Finding best mapping': 0.0006670951843261719, 'Total time': 4.851571798324585}, 'Parameter Learning results': {'AUC ROC': 0.550101, 'AUC PR': 0.568903, 'CLL': -0.685773, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 51.484, 'Inference time': 4.559}}
{'AUC ROC': 0.550496, 'AUC PR': 0.569469, 'CLL': -0.685787, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.321, 'Inference time': 5.763, 'Mapping results': {'Knowledge compiling time': 0.14194130897521973, 'Generating paths time': 4.644397258758545, 'Generating mappings time': 0.06455636024475098, 'Possible mappings': 6, 'Finding best mapping': 0.0006670951843261719, 'Total time': 4.851571798324585}, 'Parameter Learning results': {'AUC ROC': 0.550101, 'AUC PR': 0.568903, 'CLL': -0.685773, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 51.484, 'Inference time': 4.559}}
{'AUC ROC': 0.550496, 'AUC PR': 0.569469, 'CLL': -0.685787, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.321, 'Inference time': 5.763, 'Mapping results': {'Knowledge compiling time': 0.14194130897521973, 'Generating paths time': 4.644397258758545, 'Generating mappings time': 0.06455636024475098, 'Possible mappings': 6, 'Finding best mapping': 0.0006670951843261719, 'Total time': 4.851571798324585}, 'Parameter Learning results': {'AUC ROC': 0.550101, 'AUC PR': 0.568903, 'CLL': -0.685773, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 51.484, 'Inference time': 4.559}}
{'AUC ROC': 0.550496, 'AUC PR': 0.569469, 'CLL': -0.685787, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.321, 'Inference time': 5.763, 'Mapping results': {'Knowledge compiling time': 0.14194130897521973, 'Generating paths time': 4.644397258758545, 'Generating mappings time': 0.06455636024475098, 'Possible mappings': 6, 'Finding best mapping': 0.0006670951843261719, 'Total time': 4.851571798324585}, 'Parameter Learning results': {'AUC ROC': 0.550101, 'AUC PR': 0.568903, 'CLL': -0.685773, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 51.484, 'Inference time': 4.559}}
{'AUC ROC': 0.550496, 'AUC PR': 0.569469, 'CLL': -0.685787, 'Precision': [0.547116, 0.5], 'Recall': 0.934333, 'F1': 0.69012, 'Learning time': 91.321, 'Inference time': 5.763, 'Mapping results': {'Knowledge compiling time': 0.14194130897521973, 'Generating paths time': 4.644397258758545, 'Generating mappings time': 0.06455636024475098, 'Possible mappings': 6, 'Finding best mapping': 0.0006670951843261719, 'Total time': 4.851571798324585}, 'Parameter Learning results': {'AUC ROC': 0.550101, 'AUC PR': 0.568903, 'CLL': -0.685773, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 51.484, 'Inference time': 4.559}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.07518439823382113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.07518439823382113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.07518439823382113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.07518439823382113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then if ( samebib(G, H), venue(H, B) )
%   | | | | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, B) )
%   | | | | then return -0.07518439823382113;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4620199028414431;  // std dev = 0,489, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.2581489350995123;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.08314893509951105;  // std dev = 0,418, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7296575729063137;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20284913084291364;  // std dev = 0,072, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.1356825745226668;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5921575729063135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.39740603732532465;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802532;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195337;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7296575729063137;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20284913084291364;  // std dev = 0,072, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.1356825745226668;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5921575729063135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.39740603732532465;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802532;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195337;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7296575729063137;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20284913084291364;  // std dev = 0,072, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.1356825745226668;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5921575729063135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.39740603732532465;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802532;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195337;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7296575729063137;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20284913084291364;  // std dev = 0,072, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.1356825745226668;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5921575729063135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.39740603732532465;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802532;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195337;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then if ( samebib(G, H), venue(H, A) )
%   | | | | then return 0.7296575729063137;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | | else return -0.20284913084291364;  // std dev = 0,072, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else if ( author(I, F), venue(I, A) )
%   | | | | then return -0.1356825745226668;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | | else return 0.5921575729063135;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.39740603732532465;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.24647002405549415;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.11879020782802532;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.07003567394195337;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21333937981069112;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.3249336453772226;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6116430576536127;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18835694234638728;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10267900959966894;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02075625522203703;  // std dev = 0,886, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.21333315970945085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.13744645404647168;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03144263290675251;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21333937981069112;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.3249336453772226;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6116430576536127;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18835694234638728;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10267900959966894;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02075625522203703;  // std dev = 0,886, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.21333315970945085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.13744645404647168;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03144263290675251;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21333937981069112;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.3249336453772226;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6116430576536127;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18835694234638728;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10267900959966894;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02075625522203703;  // std dev = 0,886, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.21333315970945085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.13744645404647168;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03144263290675251;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21333937981069112;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.3249336453772226;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6116430576536127;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18835694234638728;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10267900959966894;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02075625522203703;  // std dev = 0,886, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.21333315970945085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.13744645404647168;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03144263290675251;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21333937981069112;  // std dev = 0,409, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.3249336453772226;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6116430576536127;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18835694234638728;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10267900959966894;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02075625522203703;  // std dev = 0,886, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, B) )
%   | | | | then return 0.21333315970945085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.13744645404647168;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.03144263290675251;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249234740485419;  // std dev = 0,479, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5003825001058929;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16123485174888721;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08769675704015394;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05187648416791184;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249234740485419;  // std dev = 0,479, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5003825001058929;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16123485174888721;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08769675704015394;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05187648416791184;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249234740485419;  // std dev = 0,479, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5003825001058929;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16123485174888721;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08769675704015394;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05187648416791184;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249234740485419;  // std dev = 0,479, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5003825001058929;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16123485174888721;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08769675704015394;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05187648416791184;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249234740485419;  // std dev = 0,479, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5003825001058929;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16123485174888721;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08769675704015394;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05187648416791184;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19131919555925997;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5770871621038413;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21644157159554278;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07254548645654758;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3386422846765398;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13943713258527257;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09287424906836662;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.0198369293603959;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19131919555925997;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5770871621038413;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21644157159554278;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07254548645654758;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3386422846765398;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13943713258527257;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09287424906836662;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.0198369293603959;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19131919555925997;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5770871621038413;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21644157159554278;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07254548645654758;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3386422846765398;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13943713258527257;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09287424906836662;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.0198369293603959;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19131919555925997;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5770871621038413;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21644157159554278;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07254548645654758;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3386422846765398;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13943713258527257;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09287424906836662;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.0198369293603959;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19131919555925997;  // std dev = 0,478, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5770871621038413;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21644157159554278;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07254548645654758;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then if ( samebib(J, K), venue(K, B) )
%   | | | | then return 0.3386422846765398;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | | else return -0.13943713258527257;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09287424906836662;  // std dev = 0,454, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.0198369293603959;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07593107044337111;  // std dev = 0,391, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15033643366470767;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46201853790742675;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18202461492422364;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06077126445025415;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03309991063389067;  // std dev = 0,608, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.0535445172858716;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09387262576563496;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016978512852606136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07593107044337111;  // std dev = 0,391, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15033643366470767;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46201853790742675;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18202461492422364;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06077126445025415;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03309991063389067;  // std dev = 0,608, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.0535445172858716;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09387262576563496;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016978512852606136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07593107044337111;  // std dev = 0,391, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15033643366470767;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46201853790742675;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18202461492422364;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06077126445025415;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03309991063389067;  // std dev = 0,608, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.0535445172858716;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09387262576563496;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016978512852606136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07593107044337111;  // std dev = 0,391, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15033643366470767;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46201853790742675;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18202461492422364;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06077126445025415;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03309991063389067;  // std dev = 0,608, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.0535445172858716;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09387262576563496;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016978512852606136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07593107044337111;  // std dev = 0,391, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else return 0.15033643366470767;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46201853790742675;  // std dev = 0,906, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18202461492422364;  // std dev = 0,030, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06077126445025415;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03309991063389067;  // std dev = 0,608, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else if ( author(M, K), venue(M, A) )
%   | | | | then return 0.0535445172858716;  // std dev = 0,878, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | | else return 0.09387262576563496;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.016978512852606136;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40191983589671626;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3001959662620991;  // std dev = 0,097, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.20800706300144345;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3430026403207212;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1130088058871585;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.00809642847505827;  // std dev = 0,325, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06822787007491268;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06253825492990658;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014502617267133776;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40191983589671626;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3001959662620991;  // std dev = 0,097, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.20800706300144345;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3430026403207212;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1130088058871585;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.00809642847505827;  // std dev = 0,325, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06822787007491268;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06253825492990658;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014502617267133776;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40191983589671626;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3001959662620991;  // std dev = 0,097, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.20800706300144345;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3430026403207212;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1130088058871585;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.00809642847505827;  // std dev = 0,325, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06822787007491268;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06253825492990658;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014502617267133776;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40191983589671626;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3001959662620991;  // std dev = 0,097, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.20800706300144345;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3430026403207212;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1130088058871585;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.00809642847505827;  // std dev = 0,325, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06822787007491268;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06253825492990658;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014502617267133776;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40191983589671626;  // std dev = 0,222, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3001959662620991;  // std dev = 0,097, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.20800706300144345;  // std dev = 0,284, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.3430026403207212;  // std dev = 0,272, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1130088058871585;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.00809642847505827;  // std dev = 0,325, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06822787007491268;  // std dev = 0,443, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06253825492990658;  // std dev = 0,438, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.014502617267133776;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.308311448620824;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04286009201886412;  // std dev = 0,326, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09843223696881838;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08486179380082999;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3415458134839735;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16100565266038241;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.2095311702847749;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05750444511588071;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02357817905350884;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.308311448620824;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04286009201886412;  // std dev = 0,326, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09843223696881838;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08486179380082999;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3415458134839735;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16100565266038241;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.2095311702847749;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05750444511588071;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02357817905350884;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.308311448620824;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04286009201886412;  // std dev = 0,326, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09843223696881838;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08486179380082999;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3415458134839735;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16100565266038241;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.2095311702847749;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05750444511588071;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02357817905350884;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.308311448620824;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04286009201886412;  // std dev = 0,326, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09843223696881838;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08486179380082999;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3415458134839735;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16100565266038241;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.2095311702847749;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05750444511588071;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02357817905350884;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.308311448620824;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04286009201886412;  // std dev = 0,326, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.09843223696881838;  // std dev = 0,346, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.08486179380082999;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3415458134839735;  // std dev = 0,915, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16100565266038241;  // std dev = 0,034, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.2095311702847749;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05750444511588071;  // std dev = 0,447, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02357817905350884;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068277729899737;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.37918882809888926;  // std dev = 0,058, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2932796571133948;  // std dev = 0,279, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.22533014867908793;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06899526231045197;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.1738442369728721;  // std dev = 0,617, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1638435123370791;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04218487207792571;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0198371470997901;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068277729899737;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.37918882809888926;  // std dev = 0,058, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2932796571133948;  // std dev = 0,279, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.22533014867908793;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06899526231045197;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.1738442369728721;  // std dev = 0,617, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1638435123370791;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04218487207792571;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0198371470997901;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068277729899737;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.37918882809888926;  // std dev = 0,058, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2932796571133948;  // std dev = 0,279, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.22533014867908793;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06899526231045197;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.1738442369728721;  // std dev = 0,617, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1638435123370791;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04218487207792571;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0198371470997901;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068277729899737;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.37918882809888926;  // std dev = 0,058, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2932796571133948;  // std dev = 0,279, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.22533014867908793;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06899526231045197;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.1738442369728721;  // std dev = 0,617, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1638435123370791;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04218487207792571;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0198371470997901;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068277729899737;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.37918882809888926;  // std dev = 0,058, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2932796571133948;  // std dev = 0,279, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.22533014867908793;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.06899526231045197;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( author(L, J), venue(L, B) )
%   | | | then return 0.1738442369728721;  // std dev = 0,617, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1638435123370791;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04218487207792571;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.0198371470997901;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27707521031649995;  // std dev = 0,231, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2751651826098553;  // std dev = 0,089, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.1435367326541675;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.2790085604916179;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06906356016002134;  // std dev = 0,420, 52,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.05209287763803697;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04494964357222704;  // std dev = 0,602, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05418703671779882;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0058517344538799925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27707521031649995;  // std dev = 0,231, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2751651826098553;  // std dev = 0,089, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.1435367326541675;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.2790085604916179;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06906356016002134;  // std dev = 0,420, 52,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.05209287763803697;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04494964357222704;  // std dev = 0,602, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05418703671779882;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0058517344538799925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27707521031649995;  // std dev = 0,231, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2751651826098553;  // std dev = 0,089, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.1435367326541675;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.2790085604916179;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06906356016002134;  // std dev = 0,420, 52,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.05209287763803697;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04494964357222704;  // std dev = 0,602, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05418703671779882;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0058517344538799925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27707521031649995;  // std dev = 0,231, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2751651826098553;  // std dev = 0,089, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.1435367326541675;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.2790085604916179;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06906356016002134;  // std dev = 0,420, 52,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.05209287763803697;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04494964357222704;  // std dev = 0,602, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05418703671779882;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0058517344538799925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27707521031649995;  // std dev = 0,231, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2751651826098553;  // std dev = 0,089, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.1435367326541675;  // std dev = 0,833, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.2790085604916179;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06906356016002134;  // std dev = 0,420, 52,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.05209287763803697;  // std dev = 0,479, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.04494964357222704;  // std dev = 0,602, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05418703671779882;  // std dev = 0,453, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.0058517344538799925;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.54477
   AUC ROC   = 0.54477
   AUC ROC   = 0.54477
   AUC ROC   = 0.54477
   AUC ROC   = 0.54477
   AUC PR    = 0.562661
   AUC PR    = 0.562661
   AUC PR    = 0.562661
   AUC PR    = 0.562661
   AUC PR    = 0.562661
   CLL	      = -0.685526
   CLL	      = -0.685526
   CLL	      = -0.685526
   CLL	      = -0.685526
   CLL	      = -0.685526
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Precision = 0.545222 at threshold = 0.5
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   Recall    = 0.950547
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967
   F1        = 0.692967










Total learning time: 54.956 seconds
Total learning time: 54.956 seconds
Total learning time: 54.956 seconds
Total learning time: 54.956 seconds
Total learning time: 54.956 seconds
Total inference time: 5.661 seconds
Total inference time: 5.661 seconds
Total inference time: 5.661 seconds
Total inference time: 5.661 seconds
Total inference time: 5.661 seconds
AUC ROC: 0.54477
AUC ROC: 0.54477
AUC ROC: 0.54477
AUC ROC: 0.54477
AUC ROC: 0.54477










Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 11:11:13
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 11:11:13
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 11:11:13
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 11:11:13
Dataset: imdb->cora, Fold: 5, Type: scratch, Time: 11:11:13
{'AUC ROC': 0.54477, 'AUC PR': 0.562661, 'CLL': -0.685526, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 54.956, 'Inference time': 5.661}
{'AUC ROC': 0.54477, 'AUC PR': 0.562661, 'CLL': -0.685526, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 54.956, 'Inference time': 5.661}
{'AUC ROC': 0.54477, 'AUC PR': 0.562661, 'CLL': -0.685526, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 54.956, 'Inference time': 5.661}
{'AUC ROC': 0.54477, 'AUC PR': 0.562661, 'CLL': -0.685526, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 54.956, 'Inference time': 5.661}
{'AUC ROC': 0.54477, 'AUC PR': 0.562661, 'CLL': -0.685526, 'Precision': [0.545222, 0.5], 'Recall': 0.950547, 'F1': 0.692967, 'Learning time': 54.956, 'Inference time': 5.661}










