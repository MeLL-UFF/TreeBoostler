Starting experiment #1 for imdb->cora

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.053023526198104166;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.04582212648754525;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07776840211933345;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03785446391883911;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06639699952262587;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.024068665665980576;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03283074568072776;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0205519422296201;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.029124158281334387;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765160368761941;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024382410085292388;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741856238438489;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013839969699420956;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020988656260435553;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065426872952325;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.011734038806917068;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0177228505225452;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */


Results
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   CLL	      = -0.68443
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.698116


Total learning time: 13.34 seconds
Total inference time: 2.04 seconds
AUC ROC: 0.547188


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622]}
{'': [0.24773845426536034, 0.16678821596175036]}
{'': [0.24773790377361465, 0.16678816676049515], 'false': [0.1875, 0.16589841949004291]}
{'': [0.24773758897185205, 0.1667719774480053], 'false': [0.18750000000000003, 0.16589838360929895], 'false,false': [0.15999999999999998, 0.16620498614958443]}
{'': [0.24773742451502664, 0.16675853048703554], 'false': [0.15999999999999998, 0.16709633757946757]}
{'': [0.24773734668855987, 0.16675713146717655]}
{'': [0.2477373153156823, 0.16675672806476766], 'false': [0.16000000000000003, 0.167095520047334]}
{'': [0.2477373072754769, 0.1667557271829569], 'false': [0.15999999999999998, 0.167095201205061]}


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(A, D), haswordauthor(E, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06149907432304833;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.09133979542281123;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05149012053190447;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.04581861367792194;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07216316047213045;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038075504785704144;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0910621202925808;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520407188146413;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06136578443344077;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.025713130033501886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.032948731015125826;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177757859832519;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021981683219074944;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02904345817224794;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651587515683772;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04713769244246713;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.018742355414512017;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.023713524123376253;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.02473880155408259;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773181427225377;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.015944294155710352;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020865095092233315;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.013700370608868981;  // std dev = 1,241, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.04334694433768305;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013537720615008731;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0176172682821485;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */


Results
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   CLL	      = -0.684536
   Precision = 0.554746 at threshold = 0.5
   Recall    = 0.89128
   F1        = 0.683852


Total learning time: 16.227 seconds
Total inference time: 2.318 seconds
AUC ROC: 0.548646


Refined model AUC ROC: 0.548646


Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 00:02:40
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684536, 'Precision': [0.554746, 0.5], 'Recall': 0.89128, 'F1': 0.683852, 'Learning time': 29.567, 'Inference time': 2.318, 'Mapping results': {'Knowledge compiling time': 0.1486508846282959, 'Generating paths time': 4.76300048828125, 'Generating mappings time': 0.08140134811401367, 'Possible mappings': 6, 'Finding best mapping': 0.00072479248046875, 'Total time': 4.9937965869903564}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.68443, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 13.34, 'Inference time': 2.04}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06867525088898589;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061496363319927756;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302051543039679;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03725014803149287;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.04625229285657243;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938630499551226;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478527001637497;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03370053635034132;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177825560675752;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02871959694516879;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651619362181118;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0174031832868216;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.056788398160378166;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.023393502689237195;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741868042785932;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02064358982521959;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306551544561523;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.01743487962714969;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */


Results
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   CLL	      = -0.684429
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.698116


Total learning time: 12.627 seconds
Total inference time: 1.993 seconds
AUC ROC: 0.547188


Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 00:02:55
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684429, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.627, 'Inference time': 1.993}


Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.5455293835086062;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7955293835086061;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.637634646666501;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.3749995821840918;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.4427599366776284;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.6371589098465531;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.24327375891060532;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03802377193610687;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.5149211907896274;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.03802377193610687;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.30728896428577085;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.244281466220299;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18776131540651556;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.19713821518135413;  // std dev = 0,435, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4437355298685443;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.09573794923344647;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.10247365203712852;  // std dev = 0,941, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10090594125451975;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1411590126037256;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17367427944483257;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10709979351102222;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11767732469257662;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.17197945009474794;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.31986193225783305;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04609371320537671;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.16149770770317273;  // std dev = 0,948, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1555505941395044;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07932658769962712;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.10296653919545974;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06056478549820177;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06521347784797622;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04555686186889005;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.04970073275633612;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437318
   AUC PR    = 0.44941
   CLL	      = -0.713779
   Precision = 0.505081 at threshold = 0.5
   Recall    = 0.973731
   F1        = 0.665146


Total learning time: 36.75 seconds
Total inference time: 3.628 seconds
AUC ROC: 0.437318


Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.435, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.941, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.948, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.468, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.468, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228], 'true': [0.2255859374999999, 0.24337786228262925], 'true,false': [0.222222222222222, 0.24368448752248972], 'true,true': [0.12749999999999959, 0.22222222222222235]}
{'': [0.24169139234828693, 0.22222222222222254], 'true': [0.19780306157423053, 0.24274795251785547], 'true,false': [0.19654329331739387, 0.24368448752247412], 'true,true': [0.12156983058459185, 0.2176950127006736]}
{'': [0.24062474884453638, 0.2222222222222224]}
{'': [0.24052438826857733, 0.22222222222222243]}
{'': [0.1893850863231309, 0.24111231378338854], 'false': [0.2419800418094571, 0.21729289271163407], 'true': [0.12819167870489795, 0.214838054095518], 'true,false': [0.25, 0.187227958744786], 'true,true': [0.18932870359712306, -2.7755575615628914e-17]}
{'': [0.2401092420012617, 0.22040625587770682]}
{'': [0.18191450456473382, 0.24086544506665816], 'false': [0.2418137224668126, 0.21540958402404095], 'true': [0.1174170499490987, 0.2165463930332067], 'true,false': [0.24999999999999994, 0.18883708635901555], 'true,true': [0.18694739183621178, -5.551115123125783e-17]}
{'': [0.23985101561468566, 0.21872447811019302]}
{'': [0.23986408994923314, 0.2187585909198686]}


******************************************
Performing Theory Revision
******************************************
'true,true,true'
Error in experiment of imdb->cora
Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */




Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09140762335695896;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05193393914643273;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09140762335695896;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05193393914643273;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.045818689007294834;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.045818689007294834;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222752920319808;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03807299516645582;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222752920319808;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03807299516645582;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478527001637497;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03369391784933943;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478527001637497;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03369391784933943;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177825560675752;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020576203893745742;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.029124916463393383;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177825560675752;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.020576203893745742;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.029124916463393383;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651619362181118;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024384043667581283;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651619362181118;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024384043667581283;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741868042785932;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.020646376371860405;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741868042785932;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.020646376371860405;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306551544561523;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04436428015855488;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010712976685928355;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.01665739787132128;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306551544561523;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04436428015855488;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010712976685928355;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.01665739787132128;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */




Results
Results
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   CLL	      = -0.684409
   CLL	      = -0.684409
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698116
   F1        = 0.698116




Total learning time: 16.589 seconds
Total learning time: 16.589 seconds
Total inference time: 1.918 seconds
Total inference time: 1.918 seconds
AUC ROC: 0.547188
AUC ROC: 0.547188




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.2477405073727947, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.2477405073727947, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24773931949271108, 0.1667882724650926], 'false': [0.18749999999999994, 0.1658985124648452], 'false,false': [0.15999999999999998, 0.1662049861495845]}
{'': [0.24773931949271108, 0.1667882724650926], 'false': [0.18749999999999994, 0.1658985124648452], 'false,false': [0.15999999999999998, 0.1662049861495845]}
{'': [0.24773845427035068, 0.16677195387217184]}
{'': [0.24773845427035068, 0.16677195387217184]}
{'': [0.2477379037766, 0.16677145292519427], 'false': [0.18749999999999994, 0.16589744441930748]}
{'': [0.2477379037766, 0.16677145292519427], 'false': [0.18749999999999994, 0.16589744441930748]}
{'': [0.24773758897347065, 0.16675901727446069]}
{'': [0.24773758897347065, 0.16675901727446069]}
{'': [0.24773742451583136, 0.16675846402888345], 'false': [0.16000000000000003, 0.1670962871110661]}
{'': [0.24773742451583136, 0.16675846402888345], 'false': [0.16000000000000003, 0.1670962871110661]}
{'': [0.2477373466889106, 0.1667570695003125]}
{'': [0.2477373466889106, 0.1667570695003125]}
{'': [0.2477373153158029, 0.16675666559036795]}
{'': [0.2477373153158029, 0.16675666559036795]}
{'': [0.24773730727548635, 0.16675632499393028], 'false': [0.18749999999999997, 0.1658964153089086], 'false,false': [0.16000000000000003, 0.16620498614958418]}
{'': [0.24773730727548635, 0.16675632499393028], 'false': [0.18749999999999997, 0.1658964153089086], 'false,false': [0.16000000000000003, 0.16620498614958418]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '2;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']




Refining candidate
Refining candidate
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09140762335695896;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05193393914643273;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09140762335695896;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.05193393914643273;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.046251902756777534;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.046251902756777534;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13303028777921752;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.1773218197602022;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.07216419776128927;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03807444364211079;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13303028777921752;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.1773218197602022;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.07216419776128927;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03807444364211079;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478455697032016;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0336929816652743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478455697032016;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0336929816652743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177795857593618;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021835550515780577;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.029060472899975473;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177795857593618;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021835550515780577;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.029060472899975473;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04441161960744941;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07682387604564;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02438326726309059;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04441161960744941;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07682387604564;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02438326726309059;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741856469745115;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014967160702711613;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020932518242926138;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741856469745115;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.014967160702711613;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020932518242926138;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306571282144553;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04426790867995001;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012699529759495449;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.016555066524364306;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306571282144553;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04426790867995001;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012699529759495449;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.016555066524364306;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */




Results
Results
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   CLL	      = -0.684506
   CLL	      = -0.684506
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.689734
   F1        = 0.689734




Total learning time: 13.737 seconds
Total learning time: 13.737 seconds
Total inference time: 2.162 seconds
Total inference time: 2.162 seconds
AUC ROC: 0.548646
AUC ROC: 0.548646




Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646




Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 01:37:45
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 01:37:45
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684506, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 30.326, 'Inference time': 2.162, 'Mapping results': {'Knowledge compiling time': 0.11795210838317871, 'Generating paths time': 4.607410669326782, 'Generating mappings time': 0.06530642509460449, 'Possible mappings': 6, 'Finding best mapping': 0.0006685256958007812, 'Total time': 4.791344404220581}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684409, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 16.589, 'Inference time': 1.918}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684506, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 30.326, 'Inference time': 2.162, 'Mapping results': {'Knowledge compiling time': 0.11795210838317871, 'Generating paths time': 4.607410669326782, 'Generating mappings time': 0.06530642509460449, 'Possible mappings': 6, 'Finding best mapping': 0.0006685256958007812, 'Total time': 4.791344404220581}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684409, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 16.589, 'Inference time': 1.918}}




Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05945507071742209;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05945507071742209;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0530207901009743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0530207901009743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07882621874357024;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0360840300218566;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04494238928386952;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07882621874357024;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0360840300218566;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04494238928386952;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06735139364982468;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038261183285137744;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06735139364982468;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038261183285137744;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478515662896565;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05708099451844418;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032750209453784485;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478515662896565;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05708099451844418;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032750209453784485;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177799316824947;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028697204796686752;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177799316824947;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028697204796686752;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651585898190764;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024370906713014562;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651585898190764;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024370906713014562;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.057418325571403965;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03934877761550856;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01988676964512251;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.057418325571403965;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03934877761550856;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01988676964512251;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306517174306125;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017418446606584804;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306517174306125;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017418446606584804;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */




Results
Results
   AUC ROC   = 0.547317
   AUC ROC   = 0.547317
   AUC PR    = 0.55305
   AUC PR    = 0.55305
   CLL	      = -0.68433
   CLL	      = -0.68433
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698116
   F1        = 0.698116




Total learning time: 13.164 seconds
Total learning time: 13.164 seconds
Total inference time: 1.894 seconds
Total inference time: 1.894 seconds
AUC ROC: 0.547317
AUC ROC: 0.547317




Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 01:38:01
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 01:38:01
{'AUC ROC': 0.547317, 'AUC PR': 0.55305, 'CLL': -0.68433, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 13.164, 'Inference time': 1.894}
{'AUC ROC': 0.547317, 'AUC PR': 0.55305, 'CLL': -0.68433, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 13.164, 'Inference time': 1.894}




Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
Refine
Refine




WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.378615593120467;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.378615593120467;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102020629362787;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102020629362787;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.37317192828645945;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5629229848248108;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.17983930421638838;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018345435173741764;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24318802673364692;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.37317192828645945;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5629229848248108;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.17983930421638838;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018345435173741764;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24318802673364692;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18781623982532147;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18781623982532147;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.24419232383506517;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.49498113835186613;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0951695209283858;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11076874281716009;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2823846684553582;  // std dev = 1,519, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.05289230363621519;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.13981436267970188;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.24419232383506517;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.49498113835186613;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0951695209283858;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11076874281716009;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2823846684553582;  // std dev = 1,519, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.05289230363621519;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.13981436267970188;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698651682417437;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698651682417437;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.14075699708214828;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2917133999032304;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04567774380725487;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12992231555276437;  // std dev = 0,966, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11443447127960016;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07945336976007995;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.14075699708214828;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2917133999032304;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04567774380725487;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12992231555276437;  // std dev = 0,966, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11443447127960016;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.07945336976007995;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1044652154575298;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13725048585607516;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.33148037495580546;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.034331912536412434;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12839693361145843;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1340276204385259;  // std dev = 1,726, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.09030507078048267;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058558577828629964;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.06619205026180752;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.13725048585607516;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.33148037495580546;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.034331912536412434;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12839693361145843;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1340276204385259;  // std dev = 1,726, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.09030507078048267;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.058558577828629964;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.06619205026180752;  // std dev = 0,470, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.07757347243720533;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.21201566923332305;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.025780160933232002;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12667866239510162;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07205763615066729;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.04481798858141232;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06343110330104101;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.07757347243720533;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.21201566923332305;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.025780160933232002;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.12667866239510162;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07205763615066729;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.04481798858141232;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06343110330104101;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */




Results
Results
   AUC ROC   = 0.437253
   AUC ROC   = 0.437253
   AUC PR    = 0.450728
   AUC PR    = 0.450728
   CLL	      = -0.716459
   CLL	      = -0.716459
   Precision = 0.505081 at threshold = 0.5
   Precision = 0.505081 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665146
   F1        = 0.665146




Total learning time: 48.381 seconds
Total learning time: 48.381 seconds
Total inference time: 5.13 seconds
Total inference time: 5.13 seconds
AUC ROC: 0.437253
AUC ROC: 0.437253




Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.492, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.498, 3, 9], 'true,true,true,false': [1.49e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.519, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.498, 3, 9], 'true,true,true,false': [1.49e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.519, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.05e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.966, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [1.05e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.966, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.726, 5, 17], 'true,false,true,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.47, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.726, 5, 17], 'true,false,true,false': [0.894, 4, 1], 'true,false,false': [0.494, 508, 700], 'false': [0.47, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.958, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.958, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.466, 15, 32]}]
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,false': [0.2222222222222218, 0.2436844875224983], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,false': [0.2222222222222218, 0.2436844875224983], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24190736548133657, 0.2222222222222228]}
{'': [0.24190736548133657, 0.2222222222222228]}
{'': [0.24169148765923754, 0.22222222222222254]}
{'': [0.24169148765923754, 0.22222222222222254]}
{'': [0.2415468804248037, 0.2222222222222224], 'true': [0.19486613852469786, 0.24267897349644899], 'true,true': [0.12114131122978078, 0.21706159798380764]}
{'': [0.2415468804248037, 0.2222222222222224], 'true': [0.19486613852469786, 0.24267897349644899], 'true,true': [0.12114131122978078, 0.21706159798380764]}
{'': [0.2409623157153723, 0.22222222222222243]}
{'': [0.2409623157153723, 0.22222222222222243]}
{'': [0.24092389248293056, 0.2222222222222221], 'true': [0.19629574502094832, 0.24199303941370645], 'true,false': [0.16448850847817534, 0.24368448752248056], 'true,true': [0.12736226942883455, 0.21775790410545112]}
{'': [0.24092389248293056, 0.2222222222222221], 'true': [0.19629574502094832, 0.24199303941370645], 'true,false': [0.16448850847817534, 0.24368448752248056], 'true,true': [0.12736226942883455, 0.21775790410545112]}
{'': [0.24015786127160285, 0.22222222222222207]}
{'': [0.24015786127160285, 0.22222222222222207]}
{'': [0.17433825078106066, 0.24118493809006064], 'false': [0.24207125488372838, 0.21729289271163427], 'true': [0.11820097411137623, 0.2161692103436707], 'true,false': [0.24999999999999997, 0.19255251481551294], 'true,true': [0.18788648929788807, 1.3877787807814457e-17]}
{'': [0.17433825078106066, 0.24118493809006064], 'false': [0.24207125488372838, 0.21729289271163427], 'true': [0.11820097411137623, 0.2161692103436707], 'true,false': [0.24999999999999997, 0.19255251481551294], 'true,true': [0.18788648929788807, 1.3877787807814457e-17]}
{'': [0.23999526945248698, 0.22069811544022766], 'true': [0.17554276213712483, 0.24160895252546147], 'true,false': [0.14762217204215072, 0.24368448752247115], 'true,true': [0.12099638352979816, 0.21421792830413722]}
{'': [0.23999526945248698, 0.22069811544022766], 'true': [0.17554276213712483, 0.24160895252546147], 'true,false': [0.14762217204215072, 0.24368448752247115], 'true,true': [0.12099638352979816, 0.21421792830413722]}
{'': [0.16337148084075465, 0.24090726220904896], 'false': [0.2417932454230553, 0.21729289271163416], 'true': [0.11703419954714074, 0.21275535768379242], 'true,false': [0.24999999999999997, 0.19161394261735176], 'true,true': [0.18782711753348813, 0.0]}
{'': [0.16337148084075465, 0.24090726220904896], 'false': [0.2417932454230553, 0.21729289271163416], 'true': [0.11703419954714074, 0.21275535768379242], 'true,false': [0.24999999999999997, 0.19161394261735176], 'true,true': [0.18782711753348813, 0.0]}




******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
'true,true,true'
'true,true,true'
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */






Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03938707447476982;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03938707447476982;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03938707447476982;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06639709275552597;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.025303728389064327;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03276649761523833;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06639709275552597;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.025303728389064327;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03276649761523833;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06639709275552597;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.025303728389064327;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03276649761523833;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028712471194504298;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028712471194504298;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028712471194504298;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024383850421448364;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024383850421448364;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024383850421448364;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04780508297573927;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01955985148950606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04780508297573927;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01955985148950606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04780508297573927;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01955985148950606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03998368244981588;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010727266812124048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.016831197839459577;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03998368244981588;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010727266812124048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.016831197839459577;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03998368244981588;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.010727266812124048;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.016831197839459577;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */






Results
Results
Results
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   CLL	      = -0.684396
   CLL	      = -0.684396
   CLL	      = -0.684396
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698116
   F1        = 0.698116
   F1        = 0.698116






Total learning time: 12.697 seconds
Total learning time: 12.697 seconds
Total learning time: 12.697 seconds
Total inference time: 1.979 seconds
Total inference time: 1.979 seconds
Total inference time: 1.979 seconds
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
{'': [0.24774675532766385, 0.1667899408284033], 'false': [0.16000000000000003, 0.16712580348944028]}
{'': [0.24774675532766385, 0.1667899408284033], 'false': [0.16000000000000003, 0.16712580348944028]}
{'': [0.24774675532766385, 0.1667899408284033], 'false': [0.16000000000000003, 0.16712580348944028]}
{'': [0.24774675532766754, 0.16678833674786583], 'false': [0.18750000000000003, 0.16589856909163067], 'false,false': [0.16, 0.1662049861495849]}
{'': [0.24774675532766754, 0.16678833674786583], 'false': [0.18750000000000003, 0.16589856909163067], 'false,false': [0.16, 0.1662049861495849]}
{'': [0.24774675532766754, 0.16678833674786583], 'false': [0.18750000000000003, 0.16589856909163067], 'false,false': [0.16, 0.1662049861495849]}
{'': [0.24774675532768062, 0.1667725228758653]}
{'': [0.24774675532768062, 0.1667725228758653]}
{'': [0.24774675532768062, 0.1667725228758653]}
{'': [0.24774675532766777, 0.16677194639486007]}
{'': [0.24774675532766777, 0.16677194639486007]}
{'': [0.24774675532766777, 0.16677194639486007]}
{'': [0.24774675532766582, 0.16677144529232824], 'true': [0.25, 0.24770335514294736]}
{'': [0.24774675532766582, 0.16677144529232824], 'true': [0.25, 0.24770335514294736]}
{'': [0.24774675532766582, 0.16677144529232824], 'true': [0.25, 0.24770335514294736]}
{'': [0.24773758896989653, 0.16677101303829067], 'false': [0.18750000000000003, 0.16589738225602044], 'false,false': [0.15999999999999998, 0.16620498614958484]}
{'': [0.24773758896989653, 0.16677101303829067], 'false': [0.18750000000000003, 0.16589738225602044], 'false,false': [0.15999999999999998, 0.16620498614958484]}
{'': [0.24773758896989653, 0.16677101303829067], 'false': [0.18750000000000003, 0.16589738225602044], 'false,false': [0.15999999999999998, 0.16620498614958484]}
{'': [0.2477374245140585, 0.16675782130439004]}
{'': [0.2477374245140585, 0.16675782130439004]}
{'': [0.2477374245140585, 0.16675782130439004]}
{'': [0.24773734668813346, 0.1667573461303004]}
{'': [0.24773734668813346, 0.1667573461303004]}
{'': [0.24773734668813346, 0.1667573461303004]}
{'': [0.24773731531553297, 0.1667569442255252], 'false': [0.1875, 0.1658965376444801]}
{'': [0.24773731531553297, 0.1667569442255252], 'false': [0.1875, 0.1658965376444801]}
{'': [0.24773731531553297, 0.1667569442255252], 'false': [0.1875, 0.1658965376444801]}
{'': [0.2477373072754672, 0.16674776014415993], 'false': [0.18750000000000003, 0.16589650659586916], 'false,false': [0.16, 0.16620498614958398]}
{'': [0.2477373072754672, 0.16674776014415993], 'false': [0.18750000000000003, 0.16589650659586916], 'false,false': [0.16, 0.16620498614958398]}
{'': [0.2477373072754672, 0.16674776014415993], 'false': [0.18750000000000003, 0.16589650659586916], 'false,false': [0.16, 0.16620498614958398]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '1;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '9;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true']






Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06867525088898589;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06867525088898589;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06867525088898589;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06010810755084033;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06010810755084033;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06010810755084033;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05301391930818907;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05301391930818907;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05301391930818907;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03725104683252491;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07409905453512933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.045073429863550396;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03725104683252491;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07409905453512933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.045073429863550396;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03725104683252491;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07409905453512933;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.045073429863550396;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0630985205025395;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038423352204834664;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0630985205025395;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038423352204834664;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12943310758409532;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.177356430267807;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0630985205025395;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.038423352204834664;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05331953155341329;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026674645772186072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03322012215612109;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05331953155341329;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026674645772186072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03322012215612109;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478468110436123;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05331953155341329;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.026674645772186072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03322012215612109;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02281923731653716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02898639194264497;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02281923731653716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02898639194264497;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177780082679942;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02281923731653716;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02898639194264497;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436359944057065;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436359944057065;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651584827614384;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436359944057065;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.035919559293574266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.020017575605525733;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.035919559293574266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.020017575605525733;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741842035167555;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.035919559293574266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.020017575605525733;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029814045412716678;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012808846673859698;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.017134263936431592;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029814045412716678;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012808846673859698;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.017134263936431592;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065320300231386;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.029814045412716678;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.012808846673859698;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.017134263936431592;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */






Results
Results
Results
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   CLL	      = -0.684384
   CLL	      = -0.684384
   CLL	      = -0.684384
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698116
   F1        = 0.698116
   F1        = 0.698116






Total learning time: 9.263 seconds
Total learning time: 9.263 seconds
Total learning time: 9.263 seconds
Total inference time: 2.105 seconds
Total inference time: 2.105 seconds
Total inference time: 2.105 seconds
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188






Refined model AUC ROC: 0.547188
Refined model AUC ROC: 0.547188
Refined model AUC ROC: 0.547188






Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 02:40:07
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 02:40:07
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 02:40:07
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684384, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 21.96, 'Inference time': 2.105, 'Mapping results': {'Knowledge compiling time': 0.11999869346618652, 'Generating paths time': 4.67625617980957, 'Generating mappings time': 0.06672549247741699, 'Possible mappings': 6, 'Finding best mapping': 0.00066375732421875, 'Total time': 4.863650798797607}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684396, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.697, 'Inference time': 1.979}}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684384, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 21.96, 'Inference time': 2.105, 'Mapping results': {'Knowledge compiling time': 0.11999869346618652, 'Generating paths time': 4.67625617980957, 'Generating mappings time': 0.06672549247741699, 'Possible mappings': 6, 'Finding best mapping': 0.00066375732421875, 'Total time': 4.863650798797607}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684396, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.697, 'Inference time': 1.979}}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684384, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 21.96, 'Inference time': 2.105, 'Mapping results': {'Knowledge compiling time': 0.11999869346618652, 'Generating paths time': 4.67625617980957, 'Generating mappings time': 0.06672549247741699, 'Possible mappings': 6, 'Finding best mapping': 0.00066375732421875, 'Total time': 4.863650798797607}, 'Parameter Learning results': {'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684396, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.697, 'Inference time': 1.979}}






Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.07027014722072422;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09937786220183642;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.059904177991309815;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.05302017094290547;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.0458191880103151;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03090990238760009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039815214479172266;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03090990238760009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039815214479172266;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03090990238760009;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039815214479172266;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478515662896565;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0663329089238471;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03239484478548798;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478515662896565;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0663329089238471;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03239484478548798;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13478515662896565;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0663329089238471;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03239484478548798;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177799316824947;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05617802477113987;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.021828464861763198;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.027918204055999644;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177799316824947;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05617802477113987;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.021828464861763198;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.027918204055999644;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177799316824947;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05617802477113987;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.021828464861763198;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.027918204055999644;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651585898190764;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024373861038107483;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651585898190764;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024373861038107483;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651585898190764;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024373861038107483;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00994997114102115;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05787329382473027;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.020637738375508478;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00994997114102115;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05787329382473027;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.020637738375508478;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00994997114102115;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05787329382473027;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.020637738375508478;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306517436445025;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.01742997131494144;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306517436445025;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.01742997131494144;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306517436445025;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.01742997131494144;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */






Results
Results
Results
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   CLL	      = -0.684409
   CLL	      = -0.684409
   CLL	      = -0.684409
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Precision = 0.553809 at threshold = 0.5
   Recall    = 0.94413
   Recall    = 0.94413
   Recall    = 0.94413
   F1        = 0.698116
   F1        = 0.698116
   F1        = 0.698116






Total learning time: 12.602 seconds
Total learning time: 12.602 seconds
Total learning time: 12.602 seconds
Total inference time: 1.993 seconds
Total inference time: 1.993 seconds
Total inference time: 1.993 seconds
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188






Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 02:40:23
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 02:40:23
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 02:40:23
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684409, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.602, 'Inference time': 1.993}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684409, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.602, 'Inference time': 1.993}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684409, 'Precision': [0.553809, 0.5], 'Recall': 0.94413, 'F1': 0.698116, 'Learning time': 12.602, 'Inference time': 1.993}






Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
Refine
Refine
Refine






WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3059268186662818;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19058309907872403;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.1579417181718644;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3059268186662818;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19058309907872403;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.1579417181718644;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.3059268186662818;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19058309907872403;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.1579417181718644;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10695573936180766;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11863392192723843;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10695573936180766;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11863392192723843;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10695573936180766;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11863392192723843;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08026331081385933;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08947190892611194;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08026331081385933;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08947190892611194;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08026331081385933;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.08947190892611194;  // std dev = 0,469, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.18334081368285968;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37570000856906244;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0133935727329242;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.23002408140757957;  // std dev = 0,922, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23975412966125456;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.058766627285855765;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.08204442964135072;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.18334081368285968;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37570000856906244;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0133935727329242;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.23002408140757957;  // std dev = 0,922, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23975412966125456;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.058766627285855765;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.08204442964135072;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.18334081368285968;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.37570000856906244;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0133935727329242;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.23002408140757957;  // std dev = 0,922, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23975412966125456;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.058766627285855765;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.08204442964135072;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.16589325874335073;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3621309441343956;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.010047031891776914;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.21939821876461205;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24179683849053996;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043828297210691286;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06212374336545672;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.16589325874335073;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3621309441343956;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.010047031891776914;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.21939821876461205;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24179683849053996;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043828297210691286;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06212374336545672;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.16589325874335073;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3621309441343956;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.010047031891776914;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.21939821876461205;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24179683849053996;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.043828297210691286;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.06212374336545672;  // std dev = 0,464, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */






Results
Results
Results
   AUC ROC   = 0.445888
   AUC ROC   = 0.445888
   AUC ROC   = 0.445888
   AUC PR    = 0.449891
   AUC PR    = 0.449891
   AUC PR    = 0.449891
   CLL	      = -0.712284
   CLL	      = -0.712284
   CLL	      = -0.712284
   Precision = 0.50784 at threshold = 0.5
   Precision = 0.50784 at threshold = 0.5
   Precision = 0.50784 at threshold = 0.5
   Recall    = 0.966162
   Recall    = 0.966162
   Recall    = 0.966162
   F1        = 0.665746
   F1        = 0.665746
   F1        = 0.665746






Total learning time: 32.551 seconds
Total learning time: 32.551 seconds
Total learning time: 32.551 seconds
Total inference time: 2.894 seconds
Total inference time: 2.894 seconds
Total inference time: 2.894 seconds
AUC ROC: 0.445888
AUC ROC: 0.445888
AUC ROC: 0.445888






Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.469, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.922, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.922, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.922, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.464, 15, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.2421374392327023, 0.21974723910119795], 'true': [0.22401003447975076, 0.24245918332552777], 'true,true': [0.12695510100526403, 0.2245272588687113]}
{'': [0.2421374392327023, 0.21974723910119795], 'true': [0.22401003447975076, 0.24245918332552777], 'true,true': [0.12695510100526403, 0.2245272588687113]}
{'': [0.2421374392327023, 0.21974723910119795], 'true': [0.22401003447975076, 0.24245918332552777], 'true,true': [0.12695510100526403, 0.2245272588687113]}
{'': [0.2412344232712246, 0.21973442350157266]}
{'': [0.2412344232712246, 0.21973442350157266]}
{'': [0.2412344232712246, 0.21973442350157266]}
{'': [0.24123578487759362, 0.21974342281299128]}
{'': [0.24123578487759362, 0.21974342281299128]}
{'': [0.24123578487759362, 0.21974342281299128]}
{'': [0.20044103147606884, 0.24145883392812795], 'false': [0.24245650785652148, 0.2147213685828135], 'true': [0.12043365198752243, 0.21705090084272022], 'true,false': [0.24999999999999997, 0.18335670199615517], 'true,true': [0.18592192936963003, -5.551115123125783e-17]}
{'': [0.20044103147606884, 0.24145883392812795], 'false': [0.24245650785652148, 0.2147213685828135], 'true': [0.12043365198752243, 0.21705090084272022], 'true,false': [0.24999999999999997, 0.18335670199615517], 'true,true': [0.18592192936963003, -5.551115123125783e-17]}
{'': [0.20044103147606884, 0.24145883392812795], 'false': [0.24245650785652148, 0.2147213685828135], 'true': [0.12043365198752243, 0.21705090084272022], 'true,false': [0.24999999999999997, 0.18335670199615517], 'true,true': [0.18592192936963003, -5.551115123125783e-17]}
{'': [0.1949087740722696, 0.2410221278844896], 'false': [0.241991865041085, 0.2152182847408846], 'true': [0.120240670304847, 0.21193699579449687], 'true,false': [0.24999999999999997, 0.17701695007484364], 'true,true': [0.18499742550769124, 0.0]}
{'': [0.1949087740722696, 0.2410221278844896], 'false': [0.241991865041085, 0.2152182847408846], 'true': [0.120240670304847, 0.21193699579449687], 'true,false': [0.24999999999999997, 0.17701695007484364], 'true,true': [0.18499742550769124, 0.0]}
{'': [0.1949087740722696, 0.2410221278844896], 'false': [0.241991865041085, 0.2152182847408846], 'true': [0.120240670304847, 0.21193699579449687], 'true,false': [0.24999999999999997, 0.17701695007484364], 'true,true': [0.18499742550769124, 0.0]}






******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
'true,false,false'
'true,false,false'
'true,false,false'
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */








Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938062780526656;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938062780526656;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938062780526656;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938062780526656;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03369563329514131;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03369563329514131;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03369563329514131;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.03369563329514131;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05625578474528103;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027613785854628745;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05625578474528103;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027613785854628745;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05625578474528103;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027613785854628745;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05625578474528103;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027613785854628745;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024377376003238978;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024377376003238978;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024377376003238978;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.024377376003238978;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04334854513373287;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.00973241602034255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020258731809816043;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04334854513373287;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.00973241602034255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020258731809816043;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04334854513373287;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.00973241602034255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020258731809816043;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04334854513373287;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.00973241602034255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020258731809816043;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03615130237477394;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016673478592502105;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03615130237477394;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016673478592502105;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03615130237477394;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016673478592502105;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03615130237477394;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016673478592502105;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.548645
   AUC ROC   = 0.548645
   AUC ROC   = 0.548645
   AUC ROC   = 0.548645
   AUC PR    = 0.553878
   AUC PR    = 0.553878
   AUC PR    = 0.553878
   AUC PR    = 0.553878
   CLL	      = -0.684417
   CLL	      = -0.684417
   CLL	      = -0.684417
   CLL	      = -0.684417
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Recall    = 0.937335
   Recall    = 0.937335
   Recall    = 0.937335
   Recall    = 0.937335
   F1        = 0.695421
   F1        = 0.695421
   F1        = 0.695421
   F1        = 0.695421








Total learning time: 17.399 seconds
Total learning time: 17.399 seconds
Total learning time: 17.399 seconds
Total learning time: 17.399 seconds
Total inference time: 2.065 seconds
Total inference time: 2.065 seconds
Total inference time: 2.065 seconds
Total inference time: 2.065 seconds
AUC ROC: 0.548645
AUC ROC: 0.548645
AUC ROC: 0.548645
AUC ROC: 0.548645








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true,true': [1.234, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true,true': [1.234, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true,true': [1.234, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true,true': [1.234, 3, 3], 'true,false': [0.498, 283, 343], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.24774675532766385, 0.1667899408284033], 'true': [0.24999999999999992, 0.2477033551429505]}
{'': [0.2477405073727947, 0.1667899408284013]}
{'': [0.2477405073727947, 0.1667899408284013]}
{'': [0.2477405073727947, 0.1667899408284013]}
{'': [0.2477405073727947, 0.1667899408284013]}
{'': [0.24773931949271108, 0.16678994082840337], 'false': [0.18749999999999994, 0.1659000000000005]}
{'': [0.24773931949271108, 0.16678994082840337], 'false': [0.18749999999999994, 0.1659000000000005]}
{'': [0.24773931949271108, 0.16678994082840337], 'false': [0.18749999999999994, 0.1659000000000005]}
{'': [0.24773931949271108, 0.16678994082840337], 'false': [0.18749999999999994, 0.1659000000000005]}
{'': [0.24773845427035068, 0.16677453599032635], 'false': [0.18750000000000003, 0.1659000000000005]}
{'': [0.24773845427035068, 0.16677453599032635], 'false': [0.18750000000000003, 0.1659000000000005]}
{'': [0.24773845427035068, 0.16677453599032635], 'false': [0.18750000000000003, 0.1659000000000005]}
{'': [0.24773845427035068, 0.16677453599032635], 'false': [0.18750000000000003, 0.1659000000000005]}
{'': [0.2477379037766, 0.16676220874514192]}
{'': [0.2477379037766, 0.16676220874514192]}
{'': [0.2477379037766, 0.16676220874514192]}
{'': [0.2477379037766, 0.16676220874514192]}
{'': [0.24773758897347065, 0.16676161483340568], 'true': [0.253884999587013, 0.24766016957371817]}
{'': [0.24773758897347065, 0.16676161483340568], 'true': [0.253884999587013, 0.24766016957371817]}
{'': [0.24773758897347065, 0.16676161483340568], 'true': [0.253884999587013, 0.24766016957371817]}
{'': [0.24773758897347065, 0.16676161483340568], 'true': [0.253884999587013, 0.24766016957371817]}
{'': [0.24772931751640903, 0.16676110813980968], 'false': [0.18750000000000006, 0.16589999999999974]}
{'': [0.24772931751640903, 0.16676110813980968], 'false': [0.18750000000000006, 0.16589999999999974]}
{'': [0.24772931751640903, 0.16676110813980968], 'false': [0.18750000000000006, 0.16589999999999974]}
{'': [0.24772931751640903, 0.16676110813980968], 'false': [0.18750000000000006, 0.16589999999999974]}
{'': [0.24772925966278364, 0.16675181748047438]}
{'': [0.24772925966278364, 0.16675181748047438]}
{'': [0.24772925966278364, 0.16675181748047438]}
{'': [0.24772925966278364, 0.16675181748047438]}
{'': [0.24772926549430155, 0.16675139502789585], 'false': [0.1875, 0.16590000000000013], 'false,false': [0.15999999999999998, 0.16620498614958462]}
{'': [0.24772926549430155, 0.16675139502789585], 'false': [0.1875, 0.16590000000000013], 'false,false': [0.15999999999999998, 0.16620498614958462]}
{'': [0.24772926549430155, 0.16675139502789585], 'false': [0.1875, 0.16590000000000013], 'false,false': [0.15999999999999998, 0.16620498614958462]}
{'': [0.24772926549430155, 0.16675139502789585], 'false': [0.1875, 0.16590000000000013], 'false,false': [0.15999999999999998, 0.16620498614958462]}
{'': [0.24772929750657102, 0.1667433482616435], 'false': [0.1875, 0.16589849043752075]}
{'': [0.24772929750657102, 0.1667433482616435], 'false': [0.1875, 0.16589849043752075]}
{'': [0.24772929750657102, 0.1667433482616435], 'false': [0.1875, 0.16589849043752075]}
{'': [0.24772929750657102, 0.1667433482616435], 'false': [0.1875, 0.16589849043752075]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true']








Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.4060722577832139;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.348758316009628;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740113051188826;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09148537061070783;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05148537061070748;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843535537713874;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07889787690511796;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04449652259439389;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02825920880466005;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039942315633580035;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02825920880466005;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039942315633580035;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02825920880466005;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039942315633580035;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690133053253476;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02825920880466005;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.039942315633580035;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024202087175693103;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.06137909472036121;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03302918571316239;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024202087175693103;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.06137909472036121;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03302918571316239;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024202087175693103;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.06137909472036121;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03302918571316239;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09106238681994024;  // std dev = 1,234, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13520433918439204;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.024202087175693103;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.06137909472036121;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03302918571316239;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05180548326370483;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.020667815314689985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028155723054143496;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05180548326370483;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.020667815314689985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028155723054143496;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05180548326370483;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.020667815314689985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028155723054143496;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177778501245849;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05180548326370483;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.020667815314689985;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028155723054143496;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436715804683664;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436715804683664;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436715804683664;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07651603190161581;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.02436715804683664;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039421923541463004;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013943956702665832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02019294324240806;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039421923541463004;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013943956702665832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02019294324240806;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039421923541463004;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013943956702665832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02019294324240806;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741870751111608;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039421923541463004;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.013943956702665832;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.02019294324240806;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.032793857024953854;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016799675768545533;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.032793857024953854;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016799675768545533;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.032793857024953854;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016799675768545533;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306564799729948;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.032793857024953854;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016799675768545533;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   CLL	      = -0.684427
   CLL	      = -0.684427
   CLL	      = -0.684427
   CLL	      = -0.684427
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Precision = 0.55276 at threshold = 0.5
   Recall    = 0.937335
   Recall    = 0.937335
   Recall    = 0.937335
   Recall    = 0.937335
   F1        = 0.695421
   F1        = 0.695421
   F1        = 0.695421
   F1        = 0.695421








Total learning time: 13.425 seconds
Total learning time: 13.425 seconds
Total learning time: 13.425 seconds
Total learning time: 13.425 seconds
Total inference time: 2.075 seconds
Total inference time: 2.075 seconds
Total inference time: 2.075 seconds
Total inference time: 2.075 seconds
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646








Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646








Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:12:44
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:12:44
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:12:44
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 04:12:44
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684427, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 30.824, 'Inference time': 2.075, 'Mapping results': {'Knowledge compiling time': 0.11876702308654785, 'Generating paths time': 4.662522077560425, 'Generating mappings time': 0.06487798690795898, 'Possible mappings': 6, 'Finding best mapping': 0.0006728172302246094, 'Total time': 4.8468475341796875}, 'Parameter Learning results': {'AUC ROC': 0.548645, 'AUC PR': 0.553878, 'CLL': -0.684417, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 17.399, 'Inference time': 2.065}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684427, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 30.824, 'Inference time': 2.075, 'Mapping results': {'Knowledge compiling time': 0.11876702308654785, 'Generating paths time': 4.662522077560425, 'Generating mappings time': 0.06487798690795898, 'Possible mappings': 6, 'Finding best mapping': 0.0006728172302246094, 'Total time': 4.8468475341796875}, 'Parameter Learning results': {'AUC ROC': 0.548645, 'AUC PR': 0.553878, 'CLL': -0.684417, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 17.399, 'Inference time': 2.065}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684427, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 30.824, 'Inference time': 2.075, 'Mapping results': {'Knowledge compiling time': 0.11876702308654785, 'Generating paths time': 4.662522077560425, 'Generating mappings time': 0.06487798690795898, 'Possible mappings': 6, 'Finding best mapping': 0.0006728172302246094, 'Total time': 4.8468475341796875}, 'Parameter Learning results': {'AUC ROC': 0.548645, 'AUC PR': 0.553878, 'CLL': -0.684417, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 17.399, 'Inference time': 2.065}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684427, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 30.824, 'Inference time': 2.075, 'Mapping results': {'Knowledge compiling time': 0.11876702308654785, 'Generating paths time': 4.662522077560425, 'Generating mappings time': 0.06487798690795898, 'Possible mappings': 6, 'Finding best mapping': 0.0006728172302246094, 'Total time': 4.8468475341796875}, 'Parameter Learning results': {'AUC ROC': 0.548645, 'AUC PR': 0.553878, 'CLL': -0.684417, 'Precision': [0.55276, 0.5], 'Recall': 0.937335, 'F1': 0.695421, 'Learning time': 17.399, 'Inference time': 2.065}}








Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.059649038634860346;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.059649038634860346;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.059649038634860346;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.059649038634860346;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04186918764057161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05357759998676569;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04186918764057161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05357759998676569;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04186918764057161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05357759998676569;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.04186918764057161;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05357759998676569;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03621522922967431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0462987479262326;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03621522922967431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0462987479262326;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03621522922967431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0462987479262326;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03621522922967431;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0462987479262326;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.039381713616321604;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.039381713616321604;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.039381713616321604;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.039381713616321604;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06124581749670255;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032594645484696046;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06124581749670255;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032594645484696046;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06124581749670255;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032594645484696046;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06124581749670255;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032594645484696046;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028707165130524855;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028707165130524855;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028707165130524855;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.028707165130524855;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765160368761941;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.047084746392391345;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0234711717376913;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765160368761941;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.047084746392391345;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0234711717376913;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765160368761941;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.047084746392391345;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0234711717376913;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765160368761941;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.047084746392391345;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0234711717376913;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021804846562883062;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.057759907903440745;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013051748990005097;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.021015609024706804;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021804846562883062;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.057759907903440745;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013051748990005097;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.021015609024706804;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021804846562883062;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.057759907903440745;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013051748990005097;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.021015609024706804;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.021804846562883062;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.057759907903440745;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.013051748990005097;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.021015609024706804;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.002385881598228945;  // std dev = 1,242, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.04345528306641664;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.03584713856007605;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016687807393399513;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.002385881598228945;  // std dev = 1,242, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.04345528306641664;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.03584713856007605;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016687807393399513;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.002385881598228945;  // std dev = 1,242, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.04345528306641664;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.03584713856007605;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016687807393399513;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.002385881598228945;  // std dev = 1,242, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.04345528306641664;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.03584713856007605;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016687807393399513;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */








Results
Results
Results
Results
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   CLL	      = -0.684474
   CLL	      = -0.684474
   CLL	      = -0.684474
   CLL	      = -0.684474
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734








Total learning time: 13.656 seconds
Total learning time: 13.656 seconds
Total learning time: 13.656 seconds
Total learning time: 13.656 seconds
Total inference time: 2.213 seconds
Total inference time: 2.213 seconds
Total inference time: 2.213 seconds
Total inference time: 2.213 seconds
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646








Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:13:01
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:13:01
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:13:01
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 04:13:01
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684474, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 13.656, 'Inference time': 2.213}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684474, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 13.656, 'Inference time': 2.213}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684474, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 13.656, 'Inference time': 2.213}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684474, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 13.656, 'Inference time': 2.213}








Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine








WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37677748071504813;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37677748071504813;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37677748071504813;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.5434397422503415;  // std dev = 1,495, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.7958368131606706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.04583681316067045;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37677748071504813;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3101685879789224;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3101685879789224;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3101685879789224;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3101685879789224;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37071255923877966;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632762025135775;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486034823656007;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018063641911279404;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.44035747151278287;  // std dev = 1,546, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.01797813424782367;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.24176299232925028;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37071255923877966;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632762025135775;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486034823656007;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018063641911279404;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.44035747151278287;  // std dev = 1,546, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.01797813424782367;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.24176299232925028;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37071255923877966;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632762025135775;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486034823656007;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018063641911279404;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.44035747151278287;  // std dev = 1,546, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.01797813424782367;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.24176299232925028;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.37071255923877966;  // std dev = 1,494, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5632762025135775;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.19486034823656007;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.018063641911279404;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.44035747151278287;  // std dev = 1,546, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.01797813424782367;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.24176299232925028;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18772009003566079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18772009003566079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18772009003566079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18772009003566079;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2172397416086124;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4077746409464772;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10834502331372887;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05255448047918751;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14113533102810816;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2172397416086124;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4077746409464772;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10834502331372887;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05255448047918751;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14113533102810816;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2172397416086124;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4077746409464772;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10834502331372887;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05255448047918751;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14113533102810816;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.2172397416086124;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.4077746409464772;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10834502331372887;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05255448047918751;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.14113533102810816;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else return 0.15948988228171201;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10702293130472297;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10702293130472297;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10702293130472297;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10702293130472297;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08039160051430069;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08039160051430069;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08039160051430069;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08039160051430069;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06038898201007127;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06038898201007127;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06038898201007127;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06038898201007127;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04540746634613362;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04540746634613362;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04540746634613362;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04540746634613362;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */








Results
Results
Results
Results
   AUC ROC   = 0.435964
   AUC ROC   = 0.435964
   AUC ROC   = 0.435964
   AUC ROC   = 0.435964
   AUC PR    = 0.447758
   AUC PR    = 0.447758
   AUC PR    = 0.447758
   AUC PR    = 0.447758
   CLL	      = -0.714138
   CLL	      = -0.714138
   CLL	      = -0.714138
   CLL	      = -0.714138
   Precision = 0.505081 at threshold = 0.5
   Precision = 0.505081 at threshold = 0.5
   Precision = 0.505081 at threshold = 0.5
   Precision = 0.505081 at threshold = 0.5
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   Recall    = 0.973731
   F1        = 0.665146
   F1        = 0.665146
   F1        = 0.665146
   F1        = 0.665146








Total learning time: 37.181 seconds
Total learning time: 37.181 seconds
Total learning time: 37.181 seconds
Total learning time: 37.181 seconds
Total inference time: 4.214 seconds
Total inference time: 4.214 seconds
Total inference time: 4.214 seconds
Total inference time: 4.214 seconds
AUC ROC: 0.435964
AUC ROC: 0.435964
AUC ROC: 0.435964
AUC ROC: 0.435964








Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.5, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.495, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.495, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.495, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)'}, {'true,true,true,true': [1.495, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.493, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.491, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.546, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.546, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.546, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)'}, {'true,true,true,true': [1.494, 3, 9], 'true,true,true,false': [0.0, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true,true': [1.546, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false': [0.494, 508, 700], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [2.98e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [2.98e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [2.98e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)'}, {'true,true,true,true': [1.496, 3, 9], 'true,true,true,false': [2.98e-08, 0, 8], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false': [0.492, 517, 718], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.471, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.22558593750000028, 0.2433778622826354], 'true,true': [0.12749999999999959, 0.22222222222222207]}
{'': [0.24242229313425145, 0.2222222222222228], 'true': [0.22451002952233018, 0.2427404448342276], 'true,true': [0.1271078295269527, 0.22369304063442033]}
{'': [0.24242229313425145, 0.2222222222222228], 'true': [0.22451002952233018, 0.2427404448342276], 'true,true': [0.1271078295269527, 0.22369304063442033]}
{'': [0.24242229313425145, 0.2222222222222228], 'true': [0.22451002952233018, 0.2427404448342276], 'true,true': [0.1271078295269527, 0.22369304063442033]}
{'': [0.24242229313425145, 0.2222222222222228], 'true': [0.22451002952233018, 0.2427404448342276], 'true,true': [0.1271078295269527, 0.22369304063442033]}
{'': [0.2415486310863971, 0.22222222222222254]}
{'': [0.2415486310863971, 0.22222222222222254]}
{'': [0.2415486310863971, 0.22222222222222254]}
{'': [0.2415486310863971, 0.22222222222222254]}
{'': [0.24139516838105532, 0.2222222222222224], 'true': [0.19373072904923316, 0.2425494529918474], 'true,false': [0.1879106131729962, 0.24368448752246427], 'true,true': [0.12046614955235997, 0.21840813901788372]}
{'': [0.24139516838105532, 0.2222222222222224], 'true': [0.19373072904923316, 0.2425494529918474], 'true,false': [0.1879106131729962, 0.24368448752246427], 'true,true': [0.12046614955235997, 0.21840813901788372]}
{'': [0.24139516838105532, 0.2222222222222224], 'true': [0.19373072904923316, 0.2425494529918474], 'true,false': [0.1879106131729962, 0.24368448752246427], 'true,true': [0.12046614955235997, 0.21840813901788372]}
{'': [0.24139516838105532, 0.2222222222222224], 'true': [0.19373072904923316, 0.2425494529918474], 'true,false': [0.1879106131729962, 0.24368448752246427], 'true,true': [0.12046614955235997, 0.21840813901788372]}
{'': [0.2404066617619803, 0.22222222222222243]}
{'': [0.2404066617619803, 0.22222222222222243]}
{'': [0.2404066617619803, 0.22222222222222243]}
{'': [0.2404066617619803, 0.22222222222222243]}
{'': [0.24036548752253914, 0.2222222222222221], 'true': [0.17571600863035164, 0.24199461377578985], 'true,true': [0.12063761298516393, 0.21408636673795692]}
{'': [0.24036548752253914, 0.2222222222222221], 'true': [0.17571600863035164, 0.24199461377578985], 'true,true': [0.12063761298516393, 0.21408636673795692]}
{'': [0.24036548752253914, 0.2222222222222221], 'true': [0.17571600863035164, 0.24199461377578985], 'true,true': [0.12063761298516393, 0.21408636673795692]}
{'': [0.24036548752253914, 0.2222222222222221], 'true': [0.17571600863035164, 0.24199461377578985], 'true,true': [0.12063761298516393, 0.21408636673795692]}
{'': [0.24006267007467738, 0.22222222222222207]}
{'': [0.24006267007467738, 0.22222222222222207]}
{'': [0.24006267007467738, 0.22222222222222207]}
{'': [0.24006267007467738, 0.22222222222222207]}
{'': [0.24007051053489087, 0.2222222222222223]}
{'': [0.24007051053489087, 0.2222222222222223]}
{'': [0.24007051053489087, 0.2222222222222223]}
{'': [0.24007051053489087, 0.2222222222222223]}
{'': [0.2400834556913673, 0.22222222222222213]}
{'': [0.2400834556913673, 0.22222222222222213]}
{'': [0.2400834556913673, 0.22222222222222213]}
{'': [0.2400834556913673, 0.22222222222222213]}
{'': [0.24009712007054013, 0.22222222222222218]}
{'': [0.24009712007054013, 0.22222222222222218]}
{'': [0.24009712007054013, 0.22222222222222218]}
{'': [0.24009712007054013, 0.22222222222222218]}








******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
'true,true,true'
'true,true,true'
'true,true,true'
'true,true,true'
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Starting experiment #1 for imdb->cora

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

Start learning from source dataset

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.141851064900488;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360676;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878365;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926058;  // std dev = 1,40e-07, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109144;  // std dev = 2,11e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420307;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202614;  // std dev = 7,30e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */










Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'director(person).', 'actor(person).']

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Starting fold 1

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.049452401283117606;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.061573613404329826;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05352883547817107;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05352883547817107;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05352883547817107;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05352883547817107;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.0430184024527807;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.05352883547817107;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08413349182623087;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04465980761570462;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08413349182623087;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04465980761570462;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08413349182623087;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04465980761570462;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08413349182623087;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04465980761570462;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08413349182623087;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03724105676753546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.04465980761570462;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938520763650743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938520763650743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938520763650743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938520763650743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.03938520763650743;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06633201499945904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02652770518507212;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03270303982248914;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06633201499945904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02652770518507212;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03270303982248914;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06633201499945904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02652770518507212;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03270303982248914;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06633201499945904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02652770518507212;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03270303982248914;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06633201499945904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.02652770518507212;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03270303982248914;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0561772328376282;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027612300387015606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0561772328376282;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027612300387015606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0561772328376282;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027612300387015606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0561772328376282;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027612300387015606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0561772328376282;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.027612300387015606;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.018627396025869835;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02466374835949506;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.018627396025869835;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02466374835949506;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.018627396025869835;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02466374835949506;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.018627396025869835;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02466374835949506;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.018627396025869835;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02466374835949506;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04323201834612253;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.019732492498013565;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04323201834612253;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.019732492498013565;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04323201834612253;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.019732492498013565;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04323201834612253;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.019732492498013565;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04323201834612253;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.019732492498013565;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017419126545024546;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017419126545024546;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017419126545024546;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017419126545024546;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017419126545024546;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   CLL	      = -0.68449
   CLL	      = -0.68449
   CLL	      = -0.68449
   CLL	      = -0.68449
   CLL	      = -0.68449
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734










Total learning time: 17.877 seconds
Total learning time: 17.877 seconds
Total learning time: 17.877 seconds
Total learning time: 17.877 seconds
Total learning time: 17.877 seconds
Total inference time: 2.234 seconds
Total inference time: 2.234 seconds
Total inference time: 2.234 seconds
Total inference time: 2.234 seconds
Total inference time: 2.234 seconds
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.225, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false,true': [0.894, 4, 1], 'false,false,false': [0.408, 75, 20]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)'}, {'true': [0.498, 286, 346], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.894, 4, 1], 'false,false': [0.409, 78, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)'}, {'true,true': [1.235, 3, 3], 'true,false': [0.498, 283, 343], 'false,true': [0.866, 3, 1], 'false,false': [0.407, 79, 21]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.498, 286, 346], 'false': [0.408, 82, 22]}]
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766385, 0.1667899408284033]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532766754, 0.1667899408284013], 'false': [0.16, 0.16712580348943934]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622], 'false': [0.15999999999999998, 0.16712580348943937]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622], 'false': [0.15999999999999998, 0.16712580348943937]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622], 'false': [0.15999999999999998, 0.16712580348943937]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622], 'false': [0.15999999999999998, 0.16712580348943937]}
{'': [0.24774675532768062, 0.1667882724650926], 'true': [0.25, 0.2477033551429622], 'false': [0.15999999999999998, 0.16712580348943937]}
{'': [0.24773845426536034, 0.16678693504214406], 'false': [0.1875, 0.16589735114065202], 'false,false': [0.16, 0.1662049861495848]}
{'': [0.24773845426536034, 0.16678693504214406], 'false': [0.1875, 0.16589735114065202], 'false,false': [0.16, 0.1662049861495848]}
{'': [0.24773845426536034, 0.16678693504214406], 'false': [0.1875, 0.16589735114065202], 'false,false': [0.16, 0.1662049861495848]}
{'': [0.24773845426536034, 0.16678693504214406], 'false': [0.1875, 0.16589735114065202], 'false,false': [0.16, 0.1662049861495848]}
{'': [0.24773845426536034, 0.16678693504214406], 'false': [0.1875, 0.16589735114065202], 'false,false': [0.16, 0.1662049861495848]}
{'': [0.24773790377361465, 0.16677049065291977]}
{'': [0.24773790377361465, 0.16677049065291977]}
{'': [0.24773790377361465, 0.16677049065291977]}
{'': [0.24773790377361465, 0.16677049065291977]}
{'': [0.24773790377361465, 0.16677049065291977]}
{'': [0.24773758897185205, 0.16677004529018483], 'false': [0.1875, 0.16589654824310482], 'false,false': [0.16000000000000006, 0.16620498614958457]}
{'': [0.24773758897185205, 0.16677004529018483], 'false': [0.1875, 0.16589654824310482], 'false,false': [0.16000000000000006, 0.16620498614958457]}
{'': [0.24773758897185205, 0.16677004529018483], 'false': [0.1875, 0.16589654824310482], 'false,false': [0.16000000000000006, 0.16620498614958457]}
{'': [0.24773758897185205, 0.16677004529018483], 'false': [0.1875, 0.16589654824310482], 'false,false': [0.16000000000000006, 0.16620498614958457]}
{'': [0.24773758897185205, 0.16677004529018483], 'false': [0.1875, 0.16589654824310482], 'false,false': [0.16000000000000006, 0.16620498614958457]}
{'': [0.24773742451502664, 0.16675710995202675], 'false': [0.18750000000000003, 0.1658960114514194]}
{'': [0.24773742451502664, 0.16675710995202675], 'false': [0.18750000000000003, 0.1658960114514194]}
{'': [0.24773742451502664, 0.16675710995202675], 'false': [0.18750000000000003, 0.1658960114514194]}
{'': [0.24773742451502664, 0.16675710995202675], 'false': [0.18750000000000003, 0.1658960114514194]}
{'': [0.24773742451502664, 0.16675710995202675], 'false': [0.18750000000000003, 0.1658960114514194]}
{'': [0.24773734668855987, 0.16674781931264457], 'true': [0.25400555015319304, 0.2476588669745536], 'false': [0.16000000000000003, 0.16708686646256474]}
{'': [0.24773734668855987, 0.16674781931264457], 'true': [0.25400555015319304, 0.2476588669745536], 'false': [0.16000000000000003, 0.16708686646256474]}
{'': [0.24773734668855987, 0.16674781931264457], 'true': [0.25400555015319304, 0.2476588669745536], 'false': [0.16000000000000003, 0.16708686646256474]}
{'': [0.24773734668855987, 0.16674781931264457], 'true': [0.25400555015319304, 0.2476588669745536], 'false': [0.16000000000000003, 0.16708686646256474]}
{'': [0.24773734668855987, 0.16674781931264457], 'true': [0.25400555015319304, 0.2476588669745536], 'false': [0.16000000000000003, 0.16708686646256474]}
{'': [0.24772928375389577, 0.16674689584105817], 'true': [0.25401374239124097, 0.24765869690265124], 'false': [0.18750000000000003, 0.16589553214719718]}
{'': [0.24772928375389577, 0.16674689584105817], 'true': [0.25401374239124097, 0.24765869690265124], 'false': [0.18750000000000003, 0.16589553214719718]}
{'': [0.24772928375389577, 0.16674689584105817], 'true': [0.25401374239124097, 0.24765869690265124], 'false': [0.18750000000000003, 0.16589553214719718]}
{'': [0.24772928375389577, 0.16674689584105817], 'true': [0.25401374239124097, 0.24765869690265124], 'false': [0.18750000000000003, 0.16589553214719718]}
{'': [0.24772928375389577, 0.16674689584105817], 'true': [0.25401374239124097, 0.24765869690265124], 'false': [0.18750000000000003, 0.16589553214719718]}
{'': [0.2477247947403723, 0.16674033027348828]}
{'': [0.2477247947403723, 0.16674033027348828]}
{'': [0.2477247947403723, 0.16674033027348828]}
{'': [0.2477247947403723, 0.16674033027348828]}
{'': [0.2477247947403723, 0.16674033027348828]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true', '2;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '3;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '5;false,false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;false;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true', '8;false;haswordvenue(B, F), haswordauthor(G, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']










Refining candidate
Refining candidate
Refining candidate
Refining candidate
Refining candidate
***************************
***************************
***************************
***************************
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0681489350995121;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04964903863486041;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06017535442433391;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04964903863486041;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06017535442433391;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04964903863486041;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06017535442433391;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04964903863486041;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06017535442433391;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.04964903863486041;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06017535442433391;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.043195895564508466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0535103528083837;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.043195895564508466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0535103528083837;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.043195895564508466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0535103528083837;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.043195895564508466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0535103528083837;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23993357890442482;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2878569015881228;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.043195895564508466;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0535103528083837;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.074027080054056;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03739965608770264;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0450682705634628;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.074027080054056;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03739965608770264;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0450682705634628;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.074027080054056;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03739965608770264;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0450682705634628;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.074027080054056;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03739965608770264;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0450682705634628;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843495618178297;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.074027080054056;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.03739965608770264;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0450682705634628;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06303400718284902;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03842558030567031;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06303400718284902;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03842558030567031;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06303400718284902;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03842558030567031;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06303400718284902;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03842558030567031;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17690099505540482;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06303400718284902;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03842558030567031;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05326265490941829;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0268093168848036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.033215099346957266;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05326265490941829;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0268093168848036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.033215099346957266;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05326265490941829;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0268093168848036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.033215099346957266;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05326265490941829;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0268093168848036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.033215099346957266;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1347850027208101;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05326265490941829;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.0268093168848036;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.033215099346957266;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.044709327431492;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.028048846058809;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.044709327431492;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.028048846058809;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.044709327431492;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.028048846058809;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.044709327431492;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.028048846058809;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10177804919106395;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.044709327431492;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.028048846058809;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01881250269005546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.024635139861039077;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01881250269005546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.024635139861039077;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01881250269005546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.024635139861039077;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01881250269005546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.024635139861039077;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03290846524027486;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07693400082158627;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.01881250269005546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.024635139861039077;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0331647212795205;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.016004749205282397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020335752357278802;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0331647212795205;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.016004749205282397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020335752357278802;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0331647212795205;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.016004749205282397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020335752357278802;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0331647212795205;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.016004749205282397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020335752357278802;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.024709890330124395;  // std dev = 1,235, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.05773193245212561;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.0331647212795205;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.016004749205282397;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.020335752357278802;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017407124910375202;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017407124910375202;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017407124910375202;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017407124910375202;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043065371102634184;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.017407124910375202;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC ROC   = 0.548646
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   AUC PR    = 0.553879
   CLL	      = -0.684471
   CLL	      = -0.684471
   CLL	      = -0.684471
   CLL	      = -0.684471
   CLL	      = -0.684471
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734










Total learning time: 9.755 seconds
Total learning time: 9.755 seconds
Total learning time: 9.755 seconds
Total learning time: 9.755 seconds
Total learning time: 9.755 seconds
Total inference time: 2.17 seconds
Total inference time: 2.17 seconds
Total inference time: 2.17 seconds
Total inference time: 2.17 seconds
Total inference time: 2.17 seconds
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646
AUC ROC: 0.548646










Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646
Refined model AUC ROC: 0.548646










Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 05:42:15
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 05:42:15
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 05:42:15
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 05:42:15
Dataset: imdb->cora, Fold: 1, Type: transfer, Time: 05:42:15
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684471, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 27.631999999999998, 'Inference time': 2.17, 'Mapping results': {'Knowledge compiling time': 0.12055730819702148, 'Generating paths time': 4.699794054031372, 'Generating mappings time': 0.06577372550964355, 'Possible mappings': 6, 'Finding best mapping': 0.0006668567657470703, 'Total time': 4.886798143386841}, 'Parameter Learning results': {'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.68449, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 17.877, 'Inference time': 2.234}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684471, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 27.631999999999998, 'Inference time': 2.17, 'Mapping results': {'Knowledge compiling time': 0.12055730819702148, 'Generating paths time': 4.699794054031372, 'Generating mappings time': 0.06577372550964355, 'Possible mappings': 6, 'Finding best mapping': 0.0006668567657470703, 'Total time': 4.886798143386841}, 'Parameter Learning results': {'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.68449, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 17.877, 'Inference time': 2.234}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684471, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 27.631999999999998, 'Inference time': 2.17, 'Mapping results': {'Knowledge compiling time': 0.12055730819702148, 'Generating paths time': 4.699794054031372, 'Generating mappings time': 0.06577372550964355, 'Possible mappings': 6, 'Finding best mapping': 0.0006668567657470703, 'Total time': 4.886798143386841}, 'Parameter Learning results': {'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.68449, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 17.877, 'Inference time': 2.234}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684471, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 27.631999999999998, 'Inference time': 2.17, 'Mapping results': {'Knowledge compiling time': 0.12055730819702148, 'Generating paths time': 4.699794054031372, 'Generating mappings time': 0.06577372550964355, 'Possible mappings': 6, 'Finding best mapping': 0.0006668567657470703, 'Total time': 4.886798143386841}, 'Parameter Learning results': {'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.68449, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 17.877, 'Inference time': 2.234}}
{'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.684471, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 27.631999999999998, 'Inference time': 2.17, 'Mapping results': {'Knowledge compiling time': 0.12055730819702148, 'Generating paths time': 4.699794054031372, 'Generating mappings time': 0.06577372550964355, 'Possible mappings': 6, 'Finding best mapping': 0.0006668567657470703, 'Total time': 4.886798143386841}, 'Parameter Learning results': {'AUC ROC': 0.548646, 'AUC PR': 0.553879, 'CLL': -0.68449, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 17.877, 'Inference time': 2.234}}










Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4056172895298875;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06968739663797353;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3487593506795933;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else return 0.06099086282157917;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.041485370610707825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.053606582731919594;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.041485370610707825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.053606582731919594;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.041485370610707825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.053606582731919594;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.041485370610707825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.053606582731919594;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28740193333479647;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.041485370610707825;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.053606582731919594;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08420334967648724;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.044286833568969355;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08420334967648724;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.044286833568969355;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08420334967648724;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.044286833568969355;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08420334967648724;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.044286833568969355;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22843581616242803;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08420334967648724;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.044286833568969355;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222740211449408;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029706631624237666;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.038513447647958596;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222740211449408;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029706631624237666;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.038513447647958596;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222740211449408;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029706631624237666;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.038513447647958596;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222740211449408;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029706631624237666;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.038513447647958596;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1769014620144808;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07222740211449408;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.029706631624237666;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.038513447647958596;  // std dev = 0,408, 95,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08731680219858418;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13524012488229198;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06142320215228447;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03258417914945039;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08731680219858418;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13524012488229198;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06142320215228447;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03258417914945039;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08731680219858418;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13524012488229198;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06142320215228447;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03258417914945039;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08731680219858418;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13524012488229198;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06142320215228447;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03258417914945039;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08731680219858418;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.13524012488229198;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.06142320215228447;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03258417914945039;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06600437294381113;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10212055852843248;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02870438716867135;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06600437294381113;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10212055852843248;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02870438716867135;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06600437294381113;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10212055852843248;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02870438716867135;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06600437294381113;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10212055852843248;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02870438716867135;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06600437294381113;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10212055852843248;  // std dev = 0,498, 626,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=343 */
%   else return 0.02870438716867135;  // std dev = 0,408, 104,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765153436012357;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016461355295518777;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02477675190898858;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765153436012357;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016461355295518777;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02477675190898858;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765153436012357;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016461355295518777;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02477675190898858;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765153436012357;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016461355295518777;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02477675190898858;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0765153436012357;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.016461355295518777;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.02477675190898858;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741825302480554;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01398172345665553;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020975577678563805;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741825302480554;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01398172345665553;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020975577678563805;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741825302480554;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01398172345665553;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020975577678563805;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741825302480554;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01398172345665553;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020975577678563805;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05741825302480554;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01398172345665553;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.020975577678563805;  // std dev = 0,409, 99,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306535522075602;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039747566813631;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016537507686994902;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306535522075602;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039747566813631;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016537507686994902;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306535522075602;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039747566813631;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016537507686994902;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306535522075602;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039747566813631;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016537507686994902;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04306535522075602;  // std dev = 0,498, 632,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=346 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.039747566813631;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.016537507686994902;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC ROC   = 0.547188
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   AUC PR    = 0.552974
   CLL	      = -0.684444
   CLL	      = -0.684444
   CLL	      = -0.684444
   CLL	      = -0.684444
   CLL	      = -0.684444
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Precision = 0.553727 at threshold = 0.5
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   Recall    = 0.914307
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734
   F1        = 0.689734










Total learning time: 14.285 seconds
Total learning time: 14.285 seconds
Total learning time: 14.285 seconds
Total learning time: 14.285 seconds
Total learning time: 14.285 seconds
Total inference time: 2.126 seconds
Total inference time: 2.126 seconds
Total inference time: 2.126 seconds
Total inference time: 2.126 seconds
Total inference time: 2.126 seconds
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188
AUC ROC: 0.547188










Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 05:42:32
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 05:42:32
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 05:42:32
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 05:42:32
Dataset: imdb->cora, Fold: 1, Type: scratch, Time: 05:42:32
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684444, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 14.285, 'Inference time': 2.126}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684444, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 14.285, 'Inference time': 2.126}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684444, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 14.285, 'Inference time': 2.126}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684444, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 14.285, 'Inference time': 2.126}
{'AUC ROC': 0.547188, 'AUC PR': 0.552974, 'CLL': -0.684444, 'Precision': [0.553727, 0.5], 'Recall': 0.914307, 'F1': 0.689734, 'Learning time': 14.285, 'Inference time': 2.126}










Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Starting fold 2

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

Transferred target predicate: samevenue 

******************************************
******************************************
******************************************
******************************************
******************************************
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
Performing Parameter Learning
******************************************
******************************************
******************************************
******************************************
******************************************
Refine
Refine
Refine
Refine
Refine










WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3546324412619928;  // std dev = 0,433, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.6046324412619928;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10463244126199278;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.1600721604156042;  // std dev = 0,884, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1953675587380072;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.18600895948060386;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.22666509838139173;  // std dev = 0,466, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3059268186662818;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2081177575052934;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24058309907872402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17216860010711688;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3059268186662818;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2081177575052934;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24058309907872402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17216860010711688;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3059268186662818;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2081177575052934;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24058309907872402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17216860010711688;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3059268186662818;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2081177575052934;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24058309907872402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17216860010711688;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.3059268186662818;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.5594169009212759;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07936627563661258;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.2081177575052934;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24058309907872402;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1403139090427417;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.17216860010711688;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.22904357276463036;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4206412702617959;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05991230533134606;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.15728723228030062;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18228553250064886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1055181607226268;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1293082292257322;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.22904357276463036;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4206412702617959;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05991230533134606;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.15728723228030062;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18228553250064886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1055181607226268;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1293082292257322;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.22904357276463036;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4206412702617959;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05991230533134606;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.15728723228030062;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18228553250064886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1055181607226268;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1293082292257322;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.22904357276463036;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4206412702617959;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05991230533134606;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.15728723228030062;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18228553250064886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1055181607226268;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1293082292257322;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.22904357276463036;  // std dev = 0,431, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4206412702617959;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05991230533134606;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.15728723228030062;  // std dev = 0,887, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18228553250064886;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.1055181607226268;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.1293082292257322;  // std dev = 0,463, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20101993042881172;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3950486443121106;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04510054698804189;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18435838716697167;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20760843298624315;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.22452567998257864;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09538151719739069;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07771116802706671;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.09914738210050637;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20101993042881172;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3950486443121106;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04510054698804189;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18435838716697167;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20760843298624315;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.22452567998257864;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09538151719739069;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07771116802706671;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.09914738210050637;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20101993042881172;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3950486443121106;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04510054698804189;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18435838716697167;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20760843298624315;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.22452567998257864;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09538151719739069;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07771116802706671;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.09914738210050637;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20101993042881172;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3950486443121106;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04510054698804189;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18435838716697167;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20760843298624315;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.22452567998257864;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09538151719739069;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07771116802706671;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.09914738210050637;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return 0.20101993042881172;  // std dev = 0,430, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.3950486443121106;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04510054698804189;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.18435838716697167;  // std dev = 0,890, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20760843298624315;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.22452567998257864;  // std dev = 1,522, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09538151719739069;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07771116802706671;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else return 0.09914738210050637;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1192723659618976;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2758166200158198;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03389625635610194;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11001912835316789;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11918373113273498;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05946754281830092;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07524231991501448;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1192723659618976;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2758166200158198;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03389625635610194;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11001912835316789;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11918373113273498;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05946754281830092;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07524231991501448;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1192723659618976;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2758166200158198;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03389625635610194;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11001912835316789;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11918373113273498;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05946754281830092;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07524231991501448;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1192723659618976;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2758166200158198;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03389625635610194;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11001912835316789;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11918373113273498;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05946754281830092;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07524231991501448;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.1192723659618976;  // std dev = 0,432, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.2758166200158198;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03389625635610194;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.11001912835316789;  // std dev = 0,902, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11918373113273498;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.05946754281830092;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0.07524231991501448;  // std dev = 0,462, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0456038217899361;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0476018153297784;  // std dev = 0,462, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0456038217899361;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0476018153297784;  // std dev = 0,462, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0456038217899361;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0476018153297784;  // std dev = 0,462, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0456038217899361;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0476018153297784;  // std dev = 0,462, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0456038217899361;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.0476018153297784;  // std dev = 0,462, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */










Results
Results
Results
Results
Results
   AUC ROC   = 0.456779
   AUC ROC   = 0.456779
   AUC ROC   = 0.456779
   AUC ROC   = 0.456779
   AUC ROC   = 0.456779
   AUC PR    = 0.457133
   AUC PR    = 0.457133
   AUC PR    = 0.457133
   AUC PR    = 0.457133
   AUC PR    = 0.457133
   CLL	      = -0.713278
   CLL	      = -0.713278
   CLL	      = -0.713278
   CLL	      = -0.713278
   CLL	      = -0.713278
   Precision = 0.510669 at threshold = 0.5
   Precision = 0.510669 at threshold = 0.5
   Precision = 0.510669 at threshold = 0.5
   Precision = 0.510669 at threshold = 0.5
   Precision = 0.510669 at threshold = 0.5
   Recall    = 0.959038
   Recall    = 0.959038
   Recall    = 0.959038
   Recall    = 0.959038
   Recall    = 0.959038
   F1        = 0.66646
   F1        = 0.66646
   F1        = 0.66646
   F1        = 0.66646
   F1        = 0.66646










Total learning time: 34.012 seconds
Total learning time: 34.012 seconds
Total learning time: 34.012 seconds
Total learning time: 34.012 seconds
Total learning time: 34.012 seconds
Total inference time: 3.02 seconds
Total inference time: 3.02 seconds
Total inference time: 3.02 seconds
Total inference time: 3.02 seconds
Total inference time: 3.02 seconds
AUC ROC: 0.456779
AUC ROC: 0.456779
AUC ROC: 0.456779
AUC ROC: 0.456779
AUC ROC: 0.456779










Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
Structure after Parameter Learning
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.493, 528, 739], 'false': [0.471, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.433, 3, 9], 'true,true,false': [2.11e-08, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.884, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.493, 517, 718], 'false,false': [0.466, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.888, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.888, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.888, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.888, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.888, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.431, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.887, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.463, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.522, 3, 16], 'false,true,true,false': [1.222, 6, 2], 'false,true,false': [0.494, 508, 700], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.522, 3, 16], 'false,true,true,false': [1.222, 6, 2], 'false,true,false': [0.494, 508, 700], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.522, 3, 16], 'false,true,true,false': [1.222, 6, 2], 'false,true,false': [0.494, 508, 700], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.522, 3, 16], 'false,true,true,false': [1.222, 6, 2], 'false,true,false': [0.494, 508, 700], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)'}, {'true,true,true': [0.43, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.89, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.522, 3, 16], 'false,true,true,false': [1.222, 6, 2], 'false,true,false': [0.494, 508, 700], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.902, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.902, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.902, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.902, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)'}, {'true,true,true': [0.432, 3, 9], 'true,true,false': [0.0, 0, 8], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.902, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [0.492, 517, 718], 'false,false': [0.462, 15, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.462, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.462, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.462, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.462, 16, 32]}]
['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [0.49, 528, 739], 'false': [0.462, 16, 32]}]
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713594, 0.22222222222222385]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325713258, 0.2222222222222228]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712605, 0.22222222222222254]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.24306651325712475, 0.2222222222222224]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.23377509682351771, 0.24247992594551077], 'false': [0.24337786228261107, 0.21729289271163443], 'true': [0.12750000000000009, 0.21604770717928104], 'true,false': [0.24999999999999997, 0.17608580822944614], 'true,true': [0.18750000000000008, 5.551115123125783e-17]}
{'': [0.232777061426667, 0.24147759635356705], 'false': [0.24245918332552777, 0.21470731213278246], 'true': [0.12695510100526403, 0.21919911636779263], 'true,false': [0.25, 0.17678901183124165], 'true,true': [0.18588894628811584, 0.0]}
{'': [0.232777061426667, 0.24147759635356705], 'false': [0.24245918332552777, 0.21470731213278246], 'true': [0.12695510100526403, 0.21919911636779263], 'true,false': [0.25, 0.17678901183124165], 'true,true': [0.18588894628811584, 0.0]}
{'': [0.232777061426667, 0.24147759635356705], 'false': [0.24245918332552777, 0.21470731213278246], 'true': [0.12695510100526403, 0.21919911636779263], 'true,false': [0.25, 0.17678901183124165], 'true,true': [0.18588894628811584, 0.0]}
{'': [0.232777061426667, 0.24147759635356705], 'false': [0.24245918332552777, 0.21470731213278246], 'true': [0.12695510100526403, 0.21919911636779263], 'true,false': [0.25, 0.17678901183124165], 'true,true': [0.18588894628811584, 0.0]}
{'': [0.232777061426667, 0.24147759635356705], 'false': [0.24245918332552777, 0.21470731213278246], 'true': [0.12695510100526403, 0.21919911636779263], 'true,false': [0.25, 0.17678901183124165], 'true,true': [0.18588894628811584, 0.0]}
{'': [0.19515691965370302, 0.24145752593900413], 'false': [0.2424537790910449, 0.21473416643746365], 'true': [0.12035941810247357, 0.21045042397571345], 'true,false': [0.24999999999999997, 0.17644162711786246], 'true,true': [0.18591515909630327, -2.7755575615628914e-17]}
{'': [0.19515691965370302, 0.24145752593900413], 'false': [0.2424537790910449, 0.21473416643746365], 'true': [0.12035941810247357, 0.21045042397571345], 'true,false': [0.24999999999999997, 0.17644162711786246], 'true,true': [0.18591515909630327, -2.7755575615628914e-17]}
{'': [0.19515691965370302, 0.24145752593900413], 'false': [0.2424537790910449, 0.21473416643746365], 'true': [0.12035941810247357, 0.21045042397571345], 'true,false': [0.24999999999999997, 0.17644162711786246], 'true,true': [0.18591515909630327, -2.7755575615628914e-17]}
{'': [0.19515691965370302, 0.24145752593900413], 'false': [0.2424537790910449, 0.21473416643746365], 'true': [0.12035941810247357, 0.21045042397571345], 'true,false': [0.24999999999999997, 0.17644162711786246], 'true,true': [0.18591515909630327, -2.7755575615628914e-17]}
{'': [0.19515691965370302, 0.24145752593900413], 'false': [0.2424537790910449, 0.21473416643746365], 'true': [0.12035941810247357, 0.21045042397571345], 'true,false': [0.24999999999999997, 0.17644162711786246], 'true,true': [0.18591515909630327, -2.7755575615628914e-17]}
{'': [0.1946887793683222, 0.2409196028128622], 'false': [0.2419654799499956, 0.21304057772039545], 'false,true': [0.1624081565113772, 0.24368448752247313], 'true': [0.11998957778097678, 0.21199531230085353], 'true,false': [0.24999999999999997, 0.17702866484763372], 'true,true': [0.18492377291047846, 0.0]}
{'': [0.1946887793683222, 0.2409196028128622], 'false': [0.2419654799499956, 0.21304057772039545], 'false,true': [0.1624081565113772, 0.24368448752247313], 'true': [0.11998957778097678, 0.21199531230085353], 'true,false': [0.24999999999999997, 0.17702866484763372], 'true,true': [0.18492377291047846, 0.0]}
{'': [0.1946887793683222, 0.2409196028128622], 'false': [0.2419654799499956, 0.21304057772039545], 'false,true': [0.1624081565113772, 0.24368448752247313], 'true': [0.11998957778097678, 0.21199531230085353], 'true,false': [0.24999999999999997, 0.17702866484763372], 'true,true': [0.18492377291047846, 0.0]}
{'': [0.1946887793683222, 0.2409196028128622], 'false': [0.2419654799499956, 0.21304057772039545], 'false,true': [0.1624081565113772, 0.24368448752247313], 'true': [0.11998957778097678, 0.21199531230085353], 'true,false': [0.24999999999999997, 0.17702866484763372], 'true,true': [0.18492377291047846, 0.0]}
{'': [0.1946887793683222, 0.2409196028128622], 'false': [0.2419654799499956, 0.21304057772039545], 'false,true': [0.1624081565113772, 0.24368448752247313], 'true': [0.11998957778097678, 0.21199531230085353], 'true,false': [0.24999999999999997, 0.17702866484763372], 'true,true': [0.18492377291047846, 0.0]}
{'': [0.16743313991633524, 0.24092152445534232], 'false': [0.24197109195997085, 0.21310274280802974], 'true': [0.11761625259215269, 0.20584570432912547], 'true,false': [0.25, 0.17938986965995915], 'true,true': [0.18622464626266824, -2.7755575615628914e-17]}
{'': [0.16743313991633524, 0.24092152445534232], 'false': [0.24197109195997085, 0.21310274280802974], 'true': [0.11761625259215269, 0.20584570432912547], 'true,false': [0.25, 0.17938986965995915], 'true,true': [0.18622464626266824, -2.7755575615628914e-17]}
{'': [0.16743313991633524, 0.24092152445534232], 'false': [0.24197109195997085, 0.21310274280802974], 'true': [0.11761625259215269, 0.20584570432912547], 'true,false': [0.25, 0.17938986965995915], 'true,true': [0.18622464626266824, -2.7755575615628914e-17]}
{'': [0.16743313991633524, 0.24092152445534232], 'false': [0.24197109195997085, 0.21310274280802974], 'true': [0.11761625259215269, 0.20584570432912547], 'true,false': [0.25, 0.17938986965995915], 'true,true': [0.18622464626266824, -2.7755575615628914e-17]}
{'': [0.16743313991633524, 0.24092152445534232], 'false': [0.24197109195997085, 0.21310274280802974], 'true': [0.11761625259215269, 0.20584570432912547], 'true,false': [0.25, 0.17938986965995915], 'true,true': [0.18622464626266824, -2.7755575615628914e-17]}
{'': [0.23987842196863815, 0.21325239418836417]}
{'': [0.23987842196863815, 0.21325239418836417]}
{'': [0.23987842196863815, 0.21325239418836417]}
{'': [0.23987842196863815, 0.21325239418836417]}
{'': [0.23987842196863815, 0.21325239418836417]}










******************************************
******************************************
******************************************
******************************************
******************************************
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
Performing Theory Revision
******************************************
******************************************
******************************************
******************************************
******************************************
'true,false,false'
'true,false,false'
'true,false,false'
'true,false,false'
'true,false,false'
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
Error in experiment of imdb->cora
